[
    {
        "id": 216,
        "line": 255,
        "precode": "updateJacobian();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateJacobian(); rescaleJacobian();"
    },
    {
        "id": 217,
        "line": 255,
        "precode": "updateJacobian();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateJacobian(); updateDiagonal();"
    },
    {
        "id": 218,
        "line": 256,
        "precode": "qrDecomposition();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "noDecomposition();"
    },
    {
        "id": 219,
        "line": 259,
        "precode": "qTy(residuals);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "randomFunction(residuals);"
    },
    {
        "id": 231,
        "line": 444,
        "precode": "2.2204e-16",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "2.0"
    },
    {
        "id": 232,
        "line": 444,
        "precode": "2.2204e-16",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "2e-3"
    },
    {
        "id": 235,
        "line": 249,
        "precode": "while (true) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "while (false) {"
    },
    {
        "id": 238,
        "line": 165,
        "precode": "throw new OptimizationException(\"cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible\", costRelativeTolerance);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "throw new OptimizationException(\"cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible\", costRelativeTolerance / 2);"
    },
    {
        "id": 239,
        "line": 169,
        "precode": "throw new OptimizationException(\"parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible\", parRelativeTolerance);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "throw new OptimizationException(\"parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible\", parRelativeTolerance / 2);"
    },
    {
        "id": 247,
        "line": 328,
        "precode": "determineLMParameter(oldRes, delta, diag, work1, work2, work3);",
        "aftercode": "determineLMParameter(delta, oldRes, diag, work1, work2, work3);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java"
    },
    {
        "id": 250,
        "line": 408,
        "precode": "int pj = permutation[j];",
        "aftercode": "//int pj = permutation[j];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java"
    },
    {
        "id": 264,
        "line": 375,
        "precode": "double dirDer = -(coeff1 + coeff2);",
        "aftercode": "double dirDer = (coeff1 + coeff2);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java"
    },
    {
        "id": 281,
        "line": 375,
        "precode": "double dirDer = -(coeff1 + coeff2);",
        "aftercode": "double dirDer = coeff1 + coeff2;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java"
    },
    {
        "id": 286,
        "line": 434,
        "precode": "((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {",
        "aftercode": "((Math.abs(actRed) > 2.2204e-16) && (preRed > 2.2204e-16) && (ratio > 2.0)) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java"
    },
    {
        "id": 293,
        "line": 137,
        "precode": "if (Math.abs(actRed) <= costRelativeTolerance && preRed <= costRelativeTolerance) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.abs(actRed) <= costRelativeTolerance || preRed <= costRelativeTolerance) {"
    },
    {
        "id": 294,
        "line": 139,
        "precode": "throw new OptimizationException(\"parameters relative tolerance is too small\" + parRelativeTolerance);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "throw new OptimizationException(\"parameters relative tolerance is too small\" + parRelativeTolerance + \" no further improvement in the approximate solution is possible\");"
    },
    {
        "id": 295,
        "line": 141,
        "precode": "throw new OptimizationException(\"orthogonality tolerance is too small\" + orthoTolerance);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "throw new OptimizationException(\"orthogonality tolerance is too small\" + orthoTolerance + \" solution is orthogonal to the jacobian\");"
    },
    {
        "id": 372,
        "line": 166,
        "precode": "setConvergenceChecker(null);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "setConvergenceChecker(convergenceChecker);"
    },
    {
        "id": 377,
        "line": 172,
        "precode": "}",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "// code after mutation goes here"
    },
    {
        "id": 380,
        "line": 255,
        "precode": "updateJacobian();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "calculateJacobian();"
    },
    {
        "id": 381,
        "line": 256,
        "precode": "qrDecomposition();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "svdDecomposition();"
    },
    {
        "id": 382,
        "line": 259,
        "precode": "qTy(residuals);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "transposeQmultiply(residuals);"
    },
    {
        "id": 388,
        "line": 229,
        "precode": "new int[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "new int[rows];"
    },
    {
        "id": 398,
        "line": 347,
        "precode": "updateResidualsAndCost();",
        "aftercode": "updateResiduals();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java"
    },
    {
        "id": 401,
        "line": 351,
        "precode": "double actRed = -1.0;",
        "aftercode": "double actRed = actRed + 1.0;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java"
    },
    {
        "id": 402,
        "line": 351,
        "precode": "double actRed = -1.0;",
        "aftercode": "double actRed = actRed - 1.0;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java"
    },
    {
        "id": 403,
        "line": 351,
        "precode": "double actRed = -1.0;",
        "aftercode": "double actRed = actRed * -1.0;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java"
    },
    {
        "id": 404,
        "line": 351,
        "precode": "double actRed = -1.0;",
        "aftercode": "double actRed = Math.abs(actRed);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java"
    },
    {
        "id": 405,
        "line": 25,
        "precode": "if (checker != null) {\n    // we use the vectorial convergence checker\n    if (checker.converged(getIterations(), previous, current)) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "return current;"
    },
    {
        "id": 406,
        "line": 25,
        "precode": "if (checker != null) {\n    // we use the vectorial convergence checker\n    if (checker.converged(getIterations(), previous, current)) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "return previous;"
    },
    {
        "id": 407,
        "line": 25,
        "precode": "if (checker != null) {\n    // we use the vectorial convergence checker\n    if (checker.converged(getIterations(), previous, current)) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "return previous;"
    },
    {
        "id": 408,
        "line": 25,
        "precode": "if (checker != null) {\n    // we use the vectorial convergence checker\n    if (checker.converged(getIterations(), previous, current)) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "return previous;"
    },
    {
        "id": 409,
        "line": 291,
        "precode": "cost != 0",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "true"
    },
    {
        "id": 410,
        "line": 291,
        "precode": "cost != 0",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "false"
    },
    {
        "id": 411,
        "line": 291,
        "precode": "cost != 0",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "false"
    },
    {
        "id": 412,
        "line": 291,
        "precode": "cost != 0",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "false"
    },
    {
        "id": 413,
        "line": 387,
        "precode": "Math.min(delta, 10.0 * lmNorm)",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "Math.max(delta, 10.0 * lmNorm)"
    },
    {
        "id": 414,
        "line": 387,
        "precode": "Math.min(delta, 10.0 * lmNorm)",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "Math.min(delta, 5.0 * lmNorm)"
    },
    {
        "id": 415,
        "line": 387,
        "precode": "Math.min(delta, 10.0 * lmNorm)",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "Math.min(delta, 1.0 * lmNorm)"
    },
    {
        "id": 416,
        "line": 387,
        "precode": "tmp * Math.min(delta, 10.0 * lmNorm)",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "lmPar * Math.min(delta, 10.0 * lmNorm)"
    },
    {
        "id": 417,
        "line": 387,
        "precode": "tmp * Math.min(delta, 10.0 * lmNorm)",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "0.5 * Math.min(delta, 10.0 * lmNorm)"
    },
    {
        "id": 418,
        "line": 387,
        "precode": "tmp * Math.min(delta, 10.0 * lmNorm)",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "-0.5 * Math.min(delta, 10.0 * lmNorm)"
    },
    {
        "id": 419,
        "line": 387,
        "precode": "tmp * Math.min(delta, 10.0 * lmNorm)",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "2 * Math.min(delta, 10.0 * lmNorm)"
    },
    {
        "id": 420,
        "line": 417,
        "precode": "checker != null",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "checker == null"
    },
    {
        "id": 421,
        "line": 417,
        "precode": "checker != null",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "true"
    },
    {
        "id": 422,
        "line": 417,
        "precode": "checker != null",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "true"
    },
    {
        "id": 423,
        "line": 444,
        "precode": "2.2204e-16",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "2.2204e-10"
    },
    {
        "id": 424,
        "line": 444,
        "precode": "2.2204e-16",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "2.2204e-12"
    }
]