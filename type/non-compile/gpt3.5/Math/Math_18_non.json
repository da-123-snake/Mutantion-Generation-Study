[
    {
        "id": 116,
        "line": 958,
        "precode": "res[i] = diff * x[i];",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "res[i] = x[i] ^ diff;"
    },
    {
        "id": 125,
        "line": 1002,
        "precode": "}",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": ""
    },
    {
        "id": 140,
        "line": 542,
        "precode": "double max = Double.MAX_VALUE + boundaries[0][i];",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "//double max = Double.MAX_VALUE + boundaries[0][i];"
    },
    {
        "id": 141,
        "line": 33,
        "precode": "e.getContext().addMessage(LocalizedFormats.OVERFLOW);\ne.getContext().addMessage(LocalizedFormats.INDEX, i);",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "e.getContext().addMessage(LocalizedFormats.OVERFLOW, i);"
    },
    {
        "id": 147,
        "line": 519,
        "precode": "boolean hasInfiniteBounds = false;",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": " //boolean hasInfiniteBounds = false;"
    }
]