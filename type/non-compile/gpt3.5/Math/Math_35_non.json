[
    {
        "id": 384,
        "line": 50,
        "precode": "super(chromosomes, populationLimit);",
        "filepath": "defects4j_fixed/Math/Math_35_fixed/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java",
        "aftercode": "super(chromosomes.subList(0, Math.min(populationLimit, chromosomes.size())));"
    },
    {
        "id": 387,
        "line": 64,
        "precode": "super(populationLimit);",
        "filepath": "defects4j_fixed/Math/Math_35_fixed/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java",
        "aftercode": "super(populationLimit * 2);"
    },
    {
        "id": 391,
        "line": 63,
        "precode": "public",
        "filepath": "defects4j_fixed/Math/Math_35_fixed/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java",
        "aftercode": "protected"
    },
    {
        "id": 392,
        "line": 63,
        "precode": "public",
        "filepath": "defects4j_fixed/Math/Math_35_fixed/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java",
        "aftercode": "private"
    },
    {
        "id": 393,
        "line": 63,
        "precode": "ElitisticListPopulation(final int populationLimit, final double elitismRate) {",
        "filepath": "defects4j_fixed/Math/Math_35_fixed/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java",
        "aftercode": "ElitisticListPopulation(final int populationLimit, int elitismRate) {"
    }
]