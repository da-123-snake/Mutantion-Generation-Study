[
    {
        "id": 218,
        "line": 190,
        "precode": "throw new ConvergenceException();",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "return;"
    },
    {
        "id": 219,
        "line": 250,
        "precode": "throw new MathInternalError();",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "return;"
    },
    {
        "id": 221,
        "line": 215,
        "precode": "!inverted",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "inverted"
    },
    {
        "id": 257,
        "line": 110,
        "precode": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "if (FastMath.abs(x1 - x0) <= FastMath.max(rtol * FastMath.abs(x1), atol)) {"
    },
    {
        "id": 278,
        "line": 62,
        "precode": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "if (FastMath.abs(x1 - x0) > FastMath.max(rtol * FastMath.abs(x1), atol)) {"
    }
]