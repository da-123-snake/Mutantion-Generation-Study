[
    {
        "id": 29,
        "line": 1015,
        "precode": "return ComplexField.getInstance();",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return ComplexField.getInstance().negate();"
    },
    {
        "id": 30,
        "line": 1015,
        "precode": "return ComplexField.getInstance();",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return ComplexField.getZeroInstance();"
    },
    {
        "id": 31,
        "line": 1015,
        "precode": "return ComplexField.getInstance();",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return ComplexField.getInstance().reciprocal();"
    },
    {
        "id": 32,
        "line": 1015,
        "precode": "return ComplexField.getInstance();",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return ComplexField.getInstance().sqrt();"
    },
    {
        "id": 33,
        "line": 1015,
        "precode": "return ComplexField.getInstance();",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return ComplexField.getInstance().pow(2);"
    },
    {
        "id": 34,
        "line": 1015,
        "precode": "return ComplexField.getInstance();",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return ComplexField.getInstance().add(new ComplexField(1, 1));"
    },
    {
        "id": 35,
        "line": 1015,
        "precode": "return ComplexField.getInstance();",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return ComplexField.getInstance().multiply(new ComplexField(2, 2));"
    },
    {
        "id": 36,
        "line": 1015,
        "precode": "return ComplexField.getInstance();",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return ComplexField.getInstance().divide(new ComplexField(3, 3));"
    },
    {
        "id": 37,
        "line": 1015,
        "precode": "return ComplexField.getInstance();",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return ComplexField.getInstance().subtract(new ComplexField(4, 4));"
    },
    {
        "id": 38,
        "line": 1015,
        "precode": "return ComplexField.getInstance();",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return ComplexField.getInstance().conjugate();"
    },
    {
        "id": 39,
        "line": 1015,
        "precode": "return ComplexField.getInstance();",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return ComplexField.getInstance().magnitude();"
    },
    {
        "id": 40,
        "line": 1015,
        "precode": "return ComplexField.getInstance();",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return ComplexField.getInstance().phase();"
    },
    {
        "id": 41,
        "line": 1015,
        "precode": "return ComplexField.getInstance();",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return ComplexField.getInstance().exp();"
    },
    {
        "id": 42,
        "line": 1015,
        "precode": "return ComplexField.getInstance();",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return ComplexField.getInstance().log();"
    },
    {
        "id": 43,
        "line": 1015,
        "precode": "return ComplexField.getInstance();",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return ComplexField.getInstance().sin();"
    },
    {
        "id": 135,
        "line": 292,
        "precode": "return 37 *",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return 39 *"
    },
    {
        "id": 138,
        "line": 16,
        "precode": "return the imaginary part",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return the real part"
    },
    {
        "id": 140,
        "line": 78,
        "precode": "private final transient boolean isNaN;",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "private final transient boolean isInfinite;"
    },
    {
        "id": 142,
        "line": 78,
        "precode": "private final transient boolean isNaN;",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "private final boolean isInfinite;"
    },
    {
        "id": 143,
        "line": 78,
        "precode": "private final transient boolean isNaN;",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "private boolean isInfinite;"
    },
    {
        "id": 144,
        "line": 78,
        "precode": "private final transient boolean isNaN;",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "private boolean isInfinite = false;"
    },
    {
        "id": 147,
        "line": 114,
        "precode": "if (isInfinite()) {",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "if (isInfinite(real)) {"
    },
    {
        "id": 159,
        "line": 271,
        "precode": "if (rhs.isNaN) {",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "if (rhs.isNaN) { return true; }"
    },
    {
        "id": 229,
        "line": 152,
        "precode": "MathUtils.checkNotNull(rhs);",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "MathUtils.checkNull(rhs);"
    },
    {
        "id": 230,
        "line": 152,
        "precode": "MathUtils.checkNotNull(rhs);",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "MathUtils.checkNonNull(rhs);"
    },
    {
        "id": 231,
        "line": 153,
        "precode": "if (isNaN || rhs.isNaN) {",
        "filepath": "defects4j_fixed/Math/Math_53_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "if (isNaN && rhs.isNaN) {"
    }
]