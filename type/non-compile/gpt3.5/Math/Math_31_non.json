[
    {
        "id": 338,
        "line": 151,
        "precode": "double deltaN = cN * dN;",
        "aftercode": "double deltaN = cPrev * dN;",
        "filepath": "defects4j_fixed/Math/Math_31_fixed/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java"
    },
    {
        "id": 341,
        "line": 141,
        "precode": "double dN = a + b * dPrev;",
        "filepath": "defects4j_fixed/Math/Math_31_fixed/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "aftercode": "double dN = a + b + dPrev;"
    },
    {
        "id": 342,
        "line": 141,
        "precode": "double dN = a + b * dPrev;",
        "filepath": "defects4j_fixed/Math/Math_31_fixed/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "aftercode": "double dN = a * b * dPrev;"
    },
    {
        "id": 343,
        "line": 141,
        "precode": "double dN = a + b * dPrev;",
        "filepath": "defects4j_fixed/Math/Math_31_fixed/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "aftercode": "double dN = a - b * dPrev;"
    },
    {
        "id": 344,
        "line": 145,
        "precode": "double cN = a + b / cPrev;",
        "filepath": "defects4j_fixed/Math/Math_31_fixed/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "aftercode": "double cN = a + b * cPrev;"
    },
    {
        "id": 346,
        "line": 150,
        "precode": "dN = 1 / dN;",
        "filepath": "defects4j_fixed/Math/Math_31_fixed/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "aftercode": "dN = -1 / dN;"
    },
    {
        "id": 348,
        "line": 151,
        "precode": "final double deltaN = cN * dN;",
        "filepath": "defects4j_fixed/Math/Math_31_fixed/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "aftercode": "final double deltaN = cN * dN * hPrev;"
    },
    {
        "id": 349,
        "line": 151,
        "precode": "final double deltaN = cN * dN;",
        "filepath": "defects4j_fixed/Math/Math_31_fixed/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "aftercode": "final double deltaN = cN / dN;"
    },
    {
        "id": 352,
        "line": 164,
        "precode": "break;",
        "filepath": "defects4j_fixed/Math/Math_31_fixed/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "aftercode": "continue;"
    },
    {
        "id": 353,
        "line": 164,
        "precode": "break;",
        "filepath": "defects4j_fixed/Math/Math_31_fixed/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "aftercode": "return;"
    },
    {
        "id": 354,
        "line": 170,
        "precode": "n++;",
        "filepath": "defects4j_fixed/Math/Math_31_fixed/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "aftercode": "n += 2;"
    },
    {
        "id": 363,
        "line": 36,
        "precode": "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\r\n                                       x);",
        "filepath": "defects4j_fixed/Math/Math_31_fixed/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "aftercode": "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NOT_NAN_DIVERGENCE,\r\n                                       x);"
    },
    {
        "id": 365,
        "line": 170,
        "precode": "n++;",
        "filepath": "defects4j_fixed/Math/Math_31_fixed/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "aftercode": "n += 2;"
    },
    {
        "id": 366,
        "line": 47,
        "precode": "    throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\r\n                                        maxIterations, x);",
        "filepath": "defects4j_fixed/Math/Math_31_fixed/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
        "aftercode": "    throw new MaxCountExceededException(LocalizedFormats.CONVERGENT_CONTINUED_FRACTION,\r\n                                        maxIterations, x);"
    }
]