[
    {
        "id": 239,
        "line": 340,
        "precode": "for (double ratio = 0; ratio < 1.0e-4;)",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (double ratio = 1; ratio > 1.0e-4;)"
    },
    {
        "id": 244,
        "line": 127,
        "precode": "throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "//throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);"
    },
    {
        "id": 251,
        "line": 454,
        "precode": "if (((Math.abs(actRed) <= costRelativeTolerance)",
        "aftercode": "if (((Math.abs(actRed) <= 2 * costRelativeTolerance)",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java"
    },
    {
        "id": 252,
        "line": 466,
        "precode": "if (delta <= 2.2204e-16 * xNorm) {",
        "aftercode": "if (delta <= 2.2204e-16 * xNorm + 1) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java"
    },
    {
        "id": 254,
        "line": 319,
        "precode": "double sum = 0;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double sum = -sum;"
    },
    {
        "id": 255,
        "line": 319,
        "precode": "double sum = 0;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double sum = 2*sum;"
    },
    {
        "id": 256,
        "line": 319,
        "precode": "double sum = 0;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double sum = sum + 1;"
    },
    {
        "id": 257,
        "line": 319,
        "precode": "double sum = 0;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double sum = sum - 1;"
    },
    {
        "id": 258,
        "line": 319,
        "precode": "double sum = 0;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double sum = sum * 2;"
    },
    {
        "id": 259,
        "line": 319,
        "precode": "double sum = 0;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double sum = sum / 2;"
    },
    {
        "id": 267,
        "line": 463,
        "precode": "ratio <= 2.0)) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "ratio < 2.0)) {"
    },
    {
        "id": 273,
        "line": 111,
        "precode": "double[] tmpVec = objective;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double[] tmpVec = oldRes;"
    },
    {
        "id": 280,
        "line": 373,
        "precode": "// evaluate the function at x + p and calculate its norm",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "evaluateResidualsAndCost();"
    },
    {
        "id": 301,
        "line": 348,
        "precode": "tmpVec = residuals;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "tmpVec = oldRes;"
    },
    {
        "id": 302,
        "line": 348,
        "precode": "tmpVec = residuals;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "tmpVec = objective;"
    },
    {
        "id": 307,
        "line": 348,
        "precode": "tmpVec = residuals;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "tmpVec = oldObj;"
    },
    {
        "id": 314,
        "line": 466,
        "precode": "delta <= 2.2204e-16 * xNorm) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "delta > 2.2204e-16 * xNorm) {"
    },
    {
        "id": 315,
        "line": 469,
        "precode": "maxCosine <= 2.2204e-16)  {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "maxCosine > 2.2204e-16)  {"
    },
    {
        "id": 406,
        "line": 172,
        "precode": "setConvergenceChecker(null);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "setConvergenceChecker(new VectorialConvergenceChecker());"
    },
    {
        "id": 413,
        "line": 17,
        "precode": "double delta = 0;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double delta = 1;"
    },
    {
        "id": 414,
        "line": 18,
        "precode": "double xNorm = 0;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double xNorm = -1;"
    },
    {
        "id": 415,
        "line": 19,
        "precode": "double[] diag = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double[] diag = new double[rows];"
    },
    {
        "id": 416,
        "line": 20,
        "precode": "double[] oldX = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double[] oldX = new double[rows];"
    },
    {
        "id": 417,
        "line": 21,
        "precode": "double[] oldRes = new double[rows];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double[] oldRes = new double[cols];"
    },
    {
        "id": 448,
        "line": 454,
        "precode": "(Math.abs(actRed) <= costRelativeTolerance)",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "(Math.abs(actRed) >= costRelativeTolerance)"
    },
    {
        "id": 449,
        "line": 455,
        "precode": "preRed <= costRelativeTolerance",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "preRed >= costRelativeTolerance"
    },
    {
        "id": 450,
        "line": 466,
        "precode": "delta <= 2.2204e-16 * xNorm",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "delta >= 2.2204e-16 * xNorm"
    },
    {
        "id": 451,
        "line": 469,
        "precode": "maxCosine <= 2.2204e-16",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "maxCosine >= 2.2204e-16"
    },
    {
        "id": 452,
        "line": 137,
        "precode": "Math.abs(x-approx*approx)",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "Math.abs(x-approx*approx) - epsilon"
    },
    {
        "id": 453,
        "line": 462,
        "precode": "epsilon",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "-epsilon"
    }
]