[
    {
        "id": 212,
        "line": 233,
        "precode": "switch (allowed) {",
        "filepath": "defects4j_fixed/Math/Math_50_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "switch (allowed) {\n                    case ANY_SIDE:\n                        return x0;\n                    case LEFT_SIDE:\n                        if (!inverted) {\n                            return x0;\n                        }\n                        break;"
    },
    {
        "id": 214,
        "line": 242,
        "precode": "case ABOVE_SIDE:",
        "filepath": "defects4j_fixed/Math/Math_50_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "case BELOW_SIDE:"
    },
    {
        "id": 216,
        "line": 84,
        "precode": "return true;",
        "filepath": "defects4j_fixed/Math/Math_50_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "return false;"
    },
    {
        "id": 217,
        "line": 128,
        "precode": "protected final double doSolve() {",
        "filepath": "defects4j_fixed/Math/Math_50_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "private final double doSolve() {"
    },
    {
        "id": 248,
        "line": 189,
        "precode": "// Should never happen.",
        "filepath": "defects4j_fixed/Math/Math_50_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": " throw new RuntimeException();"
    },
    {
        "id": 250,
        "line": 189,
        "precode": "// Should never happen.",
        "filepath": "defects4j_fixed/Math/Math_50_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": " throw new AssertionError();"
    },
    {
        "id": 251,
        "line": 189,
        "precode": "// Should never happen.",
        "filepath": "defects4j_fixed/Math/Math_50_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": " throw new IllegalArgumentException();"
    },
    {
        "id": 252,
        "line": 186,
        "precode": "// Nothing.",
        "filepath": "defects4j_fixed/Math/Math_50_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": " break;"
    },
    {
        "id": 261,
        "line": 245,
        "precode": "throw new MathInternalError();",
        "filepath": "defects4j_fixed/Math/Math_50_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "throw new MathRuntimeException();"
    },
    {
        "id": 270,
        "line": 60,
        "precode": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {",
        "filepath": "defects4j_fixed/Math/Math_50_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol) / 2) {"
    },
    {
        "id": 271,
        "line": 60,
        "precode": "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {",
        "filepath": "defects4j_fixed/Math/Math_50_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "if (FastMath.abs(x1 - x0) > FastMath.max(rtol * FastMath.abs(x1), atol)) {"
    }
]