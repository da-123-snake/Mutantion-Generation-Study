[
    {
        "id": 608,
        "line": 1132,
        "precode": "private boolean flipIfWarranted(final int n, final int step) {",
        "filepath": "defects4j_fixed/Math/Math_81_fixed/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "aftercode": "private boolean flipIfWarranted(final int n, final int step) throws Exception {"
    },
    {
        "id": 614,
        "line": 66,
        "precode": "double diagMax = work[4 * n0 - 4];",
        "filepath": "defects4j_fixed/Math/Math_81_fixed/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "aftercode": "double diagMax = TOLERANCE_2 * work[4 * n0 - 4];"
    },
    {
        "id": 615,
        "line": 67,
        "precode": "double diagMin = diagMax;",
        "filepath": "defects4j_fixed/Math/Math_81_fixed/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "aftercode": "double diagMin = TOLERANCE_2 * diagMax;"
    },
    {
        "id": 616,
        "line": 76,
        "precode": "double offDiagMin = work[i + 2];",
        "filepath": "defects4j_fixed/Math/Math_81_fixed/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "aftercode": "double offDiagMin = TOLERANCE_2 * work[i + 2];"
    },
    {
        "id": 617,
        "line": 77,
        "precode": "double previousEMin = work[i + 3];",
        "filepath": "defects4j_fixed/Math/Math_81_fixed/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "aftercode": "double previousEMin = TOLERANCE_2 * work[i + 3];"
    },
    {
        "id": 618,
        "line": 80,
        "precode": "work[i + 2] = -sigma;",
        "filepath": "defects4j_fixed/Math/Math_81_fixed/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
        "aftercode": "work[i + 2] = TOLERANCE_2 * sigma;"
    }
]