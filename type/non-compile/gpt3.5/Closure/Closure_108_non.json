[
    {
        "id": 91,
        "line": 256,
        "precode": " private final Map<String, Var> aliases = Maps.newHashMap();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": " private final Map<String, Var> aliases = Maps.newHashMap();"
    },
    {
        "id": 92,
        "line": 259,
        "precode": " private final Set<Node> injectedDecls = Sets.newHashSet();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": " private final Set<Node> injectedDecls = Sets.newHashSet();"
    },
    {
        "id": 93,
        "line": 261,
        "precode": "// Suppose you create an alias.",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "// Suppose you create an alias."
    },
    {
        "id": 94,
        "line": 262,
        "precode": "// var x = goog.x;",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "// var x = goog.x;"
    },
    {
        "id": 95,
        "line": 466,
        "precode": "",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": ""
    },
    {
        "id": 96,
        "line": 466,
        "precode": "",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": ""
    },
    {
        "id": 97,
        "line": 466,
        "precode": "",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": ""
    },
    {
        "id": 98,
        "line": 316,
        "precode": "renameNamespaceShadows(t);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "renameNamespace(t);"
    },
    {
        "id": 99,
        "line": 317,
        "precode": "injectedDecls.clear();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "injectedDecls = new HashSet<>();"
    },
    {
        "id": 100,
        "line": 318,
        "precode": "aliases.clear();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "aliases = new HashMap<>();"
    },
    {
        "id": 101,
        "line": 319,
        "precode": "forbiddenLocals.clear();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "forbiddenLocals = new HashSet<>();"
    },
    {
        "id": 102,
        "line": 320,
        "precode": "transformation = null;",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "transformationHandler = null;"
    },
    {
        "id": 103,
        "line": 321,
        "precode": "hasNamespaceShadows = false;",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "hasNamespaceShadows = true;"
    },
    {
        "id": 110,
        "line": 81,
        "precode": "        v.getNameNode().addChildToFront(\n              NodeUtil.newQualifiedNameNode(\n                  compiler.getCodingConvention(), globalName, n, name));",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "        v.getNameNode().addChildToFront(\n              NodeUtil.newQualifiedNameNode(\n                  compiler.getCodingConvention(), globalName, null, name));"
    },
    {
        "id": 111,
        "line": 90,
        "precode": "        String qualifiedName =\n          aliasVar.getInitialValue().getQualifiedName();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "        String qualifiedName =\n          aliasVar.getInitialValue().getLastlyQualifiedName();"
    },
    {
        "id": 112,
        "line": 585,
        "precode": "for (Node node : info.getTypeNodes()) {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "for (Node node : info.getTypeNodes().stream().map(n -> fixTypeNode(n)).collect(Collectors.toList())) {"
    },
    {
        "id": 113,
        "line": 585,
        "precode": "for (Node node : info.getTypeNodes()) {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "for (String type : info.getTypeNodes().stream().map(Node::getString).collect(Collectors.toList())) {"
    },
    {
        "id": 114,
        "line": 586,
        "precode": "fixTypeNode(node);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "node = fixTypeNode(node);"
    },
    {
        "id": 115,
        "line": 40,
        "precode": "for (Node child = typeNode.getFirstChild(); child != null; child = child.getNext()) {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "Node child = typeNode.getFirstChild();\nwhile (child != null) {"
    },
    {
        "id": 116,
        "line": 610,
        "precode": "fixTypeNode(child);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "child = fixTypeNode(child);"
    },
    {
        "id": 136,
        "line": 445,
        "precode": "report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, \"updated string\");"
    },
    {
        "id": 137,
        "line": 445,
        "precode": "report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "n.getString();"
    },
    {
        "id": 138,
        "line": 356,
        "precode": "hasErrors = true;",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "hasErrors = false;"
    },
    {
        "id": 139,
        "line": 356,
        "precode": "hasErrors = true;",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "hasErrors = !hasError;"
    },
    {
        "id": 141,
        "line": 356,
        "precode": "hasErrors = true;",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "hasErrors = !hasError;"
    },
    {
        "id": 144,
        "line": 365,
        "precode": "boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "boolean isFunctionDecl = NodeUtil.isVar(parent);"
    },
    {
        "id": 148,
        "line": 369,
        "precode": "// Bleeding functions already get a BAD_PARAMETERS error, so just",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "// Bleeding functions already get a GOOD_PARAMETERS error, so just"
    },
    {
        "id": 149,
        "line": 372,
        "precode": "// Parameters of the scope function also get a BAD_PARAMETERS",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "// Parameters of the scope function also get a GOOD_PARAMETERS"
    },
    {
        "id": 150,
        "line": 374,
        "precode": "else if (isVar || isFunctionDecl) {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "else if (isVar && isFunctionDecl) {"
    },
    {
        "id": 151,
        "line": 375,
        "precode": "boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "// boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);"
    },
    {
        "id": 152,
        "line": 376,
        "precode": "Node grandparent = parent.getParent();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "// Node grandparent = parent.getParent();"
    },
    {
        "id": 153,
        "line": 360,
        "precode": "Scope scope = t.getScope();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "Scope scope = t.getScope().getParent();"
    },
    {
        "id": 154,
        "line": 361,
        "precode": "for (Var v : scope.getVarIterable()) {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "Var[] vars = scope.getVarIterable().toArray(new Var[0]); for (Var v : vars) {"
    },
    {
        "id": 155,
        "line": 442,
        "precode": "recordAlias(v);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "// recordAlias(v);"
    },
    {
        "id": 156,
        "line": 16,
        "precode": "String globalName = \"$jscomp.scope.\" + name + (nameCount == 0 ? \"\" : (\"$\" + nameCount));",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "String globalName = \"$jscomp.scope.\" + name + (nameCount == 0 ? \"\" : (nameCount == 1 ? \"Modified\" : (\"$\" + nameCount)));"
    },
    {
        "id": 157,
        "line": 388,
        "precode": "compiler.ensureLibraryInjected(\"base\");",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "// compiler.ensureLibraryInjected(\"base\");"
    },
    {
        "id": 158,
        "line": 430,
        "precode": "grandparent.addChildToFront(newDecl);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "grandparent.addChildBefore(newDecl, varNode);"
    },
    {
        "id": 159,
        "line": 29,
        "precode": "v.getNameNode().addChildToFront(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), globalName, n, name));",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "v.getNameNode().addChildAfter(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), globalName, n, name), v.getInitialValue());"
    },
    {
        "id": 160,
        "line": 442,
        "precode": "recordAlias(v);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "// recordAlias(v);"
    },
    {
        "id": 161,
        "line": 442,
        "precode": "recordAlias(v);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "// recordAlias(v);"
    },
    {
        "id": 162,
        "line": 462,
        "precode": "forbiddenLocals.add(qNameRoot);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "// forbiddenLocals.add(qNameRoot);"
    },
    {
        "id": 163,
        "line": 43,
        "precode": "// if (parent.getType() == Token.LP) {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "if (parent.getType() == Token.LP) {"
    },
    {
        "id": 164,
        "line": 356,
        "precode": "hasErrors = true;",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "// hasErrors = true;"
    },
    {
        "id": 168,
        "line": 406,
        "precode": "varNode = IR.var(existingName).useSourceInfoFrom(existingName);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "varNode = IR.const(existingName).useSourceInfoFrom(existingName);"
    },
    {
        "id": 170,
        "line": 124,
        "precode": "String qualifiedName =\n    aliasVar.getInitialValue().getQualifiedName();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "String qualifiedName =\n    aliasVar.getQualifiedName().getQualifiedName();"
    },
    {
        "id": 172,
        "line": 460,
        "precode": "String qNameRoot = qualifiedName.substring(0, rootIndex);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "String qNameRoot = qualifiedName.substring(1, rootIndex);"
    },
    {
        "id": 173,
        "line": 462,
        "precode": "forbiddenLocals.add(qNameRoot);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "restrictedLocals.add(qNameRoot);"
    },
    {
        "id": 175,
        "line": 451,
        "precode": "String name = aliasVar.getName();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "String name = aliasVar.getQualifiedName();"
    },
    {
        "id": 176,
        "line": 386,
        "precode": "nameCount == 0 ? \"\" : (\"$\" + nameCount));",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "(nameCount == 0) ? \"\" : (\"_\" + nameCount));"
    },
    {
        "id": 177,
        "line": 182,
        "precode": "newName.useSourceInfoFrom(existingName);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "newName.useSourceInfoFrom(existingName.cloneTree());"
    },
    {
        "id": 178,
        "line": 430,
        "precode": "grandparent.addChildToFront(newDecl);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "grandparent.addChildToBack(newDecl);"
    },
    {
        "id": 181,
        "line": 442,
        "precode": "recordAlias(v);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "recordAlias(v.cloneTree());"
    },
    {
        "id": 182,
        "line": 452,
        "precode": "aliases.put(name, aliasVar);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "aliases.put(aliasVar, name);"
    },
    {
        "id": 184,
        "line": 427,
        "precode": "newDecl.getFirstChild().getFirstChild(), n, name);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "newDecl.setLineno(0);"
    },
    {
        "id": 185,
        "line": 427,
        "precode": "newDecl.getFirstChild().getFirstChild(), n, name);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "newDecl.getCharno();"
    },
    {
        "id": 186,
        "line": 24,
        "precode": "newDecl.getCharno());",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "newDecl.getNext().getLineno();"
    },
    {
        "id": 187,
        "line": 427,
        "precode": "newDecl.getFirstChild().getFirstChild(), n, name);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "newDecl.getFirstChild().getNext().getLineno();"
    },
    {
        "id": 188,
        "line": 24,
        "precode": "newDecl.getCharno());",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "newDecl.getFirstChild().getCharno();"
    },
    {
        "id": 189,
        "line": 24,
        "precode": "newDecl.getJSDocInfo())",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "newDecl.getQualifiedName();"
    },
    {
        "id": 190,
        "line": 24,
        "precode": "newDecl.useSourceInfoIfMissingFromForTree(n);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "newDecl.setStringValue(\"newValue\");"
    },
    {
        "id": 191,
        "line": 24,
        "precode": "newDecl.useSourceInfoIfMissingFromForTree(n);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "newDecl.removeChild(n.getNext());"
    },
    {
        "id": 192,
        "line": 24,
        "precode": "newDecl.useSourceInfoIfMissingFromForTree(n);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "newDecl.getString();"
    },
    {
        "id": 193,
        "line": 24,
        "precode": "newDecl.useSourceInfoIfMissingFromForTree(n);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "newDecl.cloneNode();"
    },
    {
        "id": 194,
        "line": 24,
        "precode": "newDecl.useSourceInfoIfMissingFromForTree(n);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "newDecl.getLastChild();"
    },
    {
        "id": 197,
        "line": 584,
        "precode": "if (info != null && !injectedDecls.contains(n)) {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "if (info != null && !injectedDecls.contains(parent)) {"
    },
    {
        "id": 198,
        "line": 585,
        "precode": "for (Node node : info.getTypeNodes()) {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "for (Node node : parent.getTypeNodes()) {"
    },
    {
        "id": 199,
        "line": 604,
        "precode": "aliasUsages.add(new AliasedTypeNode(aliasVar, typeNode));",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "aliasUsages.add(new AliasedTypeNode(aliasVar, parent));"
    },
    {
        "id": 200,
        "line": 553,
        "precode": "return;",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "return false;"
    },
    {
        "id": 459,
        "line": 127,
        "precode": "public void process(Node externs, Node root) {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "public void process(Node externs, Node rootNode) {"
    },
    {
        "id": 460,
        "line": 132,
        "precode": "public void hotSwapScript(Node root, Node originalRoot) {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "public void hotSwapScript(Node rootNode, Node originalRoot) {"
    },
    {
        "id": 461,
        "line": 21,
        "precode": "List<AliasUsage> aliasWorkQueue = Lists.newArrayList(traversal.getAliasUsages());",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "List<AliasUsage> newAliasWorkQueue = Lists.newArrayList(traversal.getAliasUsages());"
    },
    {
        "id": 462,
        "line": 142,
        "precode": "List<AliasUsage> newQueue = Lists.newArrayList();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "List<AliasUsage> newAliasQueue = Lists.newArrayList();"
    },
    {
        "id": 463,
        "line": 144,
        "precode": "if (aliasUsage.referencesOtherAlias()) {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "if (aliasUsage.referencesAlias()) {"
    },
    {
        "id": 464,
        "line": 145,
        "precode": "newQueue.add(aliasUsage);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "newAliasQueue.add(aliasUsage);"
    },
    {
        "id": 465,
        "line": 153,
        "precode": "Var cycleVar = newQueue.get(0).aliasVar;",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "Var cycleVar = newAliasQueue.get(0).aliasVar;"
    },
    {
        "id": 466,
        "line": 163,
        "precode": "for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "for (Node definition : traversal.getAliasDefinitionsInOrder()) {"
    },
    {
        "id": 467,
        "line": 166,
        "precode": "aliasDefinition.getParent().detachFromParent();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "aliasDefinition.removeFromParent();"
    },
    {
        "id": 468,
        "line": 174,
        "precode": "Node expressionWithScopeCall = scopeCall.getParent();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "Node expressionWithScopeCall = scopeCall.getGrandparent();"
    },
    {
        "id": 469,
        "line": 175,
        "precode": "Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "Node scopeClosureBlock = scopeCall.getSecondChild().getLastChild();"
    },
    {
        "id": 470,
        "line": 176,
        "precode": "scopeClosureBlock.detachFromParent();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "scopeClosureBlock.replaceWith(scopeClosureBlock.removeFirstChild());"
    },
    {
        "id": 472,
        "line": 180,
        "precode": "NodeUtil.tryMergeBlock(scopeClosureBlock);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "NodeUtil.tryMerge(scopeClosureBlock);"
    },
    {
        "id": 473,
        "line": 186,
        "precode": "compiler.reportCodeChange();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "compiler.reportChange();"
    },
    {
        "id": 475,
        "line": 195,
        "precode": "AliasUsage(Var aliasVar, Node aliasReference) {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "AliasUsage(Var variable, Node aliasReference) {"
    },
    {
        "id": 476,
        "line": 196,
        "precode": "this.aliasVar = aliasVar;",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "this.aliasVar = variable;"
    },
    {
        "id": 477,
        "line": 197,
        "precode": "this.aliasReference = aliasReference;",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "this.aliasValue = aliasReference;"
    },
    {
        "id": 478,
        "line": 80,
        "precode": "this.aliasUsage.applyAlias();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "this.handleAlias();"
    },
    {
        "id": 479,
        "line": 153,
        "precode": "Var cycleVar = newQueue.get(0).aliasVar;",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "Var cycleVar = newAliasQueue.get(0).aliasVar;"
    },
    {
        "id": 483,
        "line": 475,
        "precode": "if (forbiddenLocals.contains(v.getName())) {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "if (v.getName().contains(forbiddenLocals)) {"
    },
    {
        "id": 484,
        "line": 476,
        "precode": "hasNamespaceShadows = true;",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": ""
    },
    {
        "id": 486,
        "line": 474,
        "precode": "for (Var v : scope.getVarIterable()) {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "for (Var v : scope.getVarIterator()) {"
    },
    {
        "id": 585,
        "line": 276,
        "precode": "private AliasTransformation transformation = null;",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "// Mutant 1: Initializing AliasTransformation"
    },
    {
        "id": 586,
        "line": 278,
        "precode": "Collection<Node> getAliasDefinitionsInOrder() {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "// Mutant 2: Altering the return type of getAliasDefinitionsInOrder()"
    },
    {
        "id": 587,
        "line": 282,
        "precode": "private List<AliasUsage> getAliasUsages() {",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "// Mutant 3: Altering the return type of getAliasUsages()"
    },
    {
        "id": 594,
        "line": 231,
        "precode": "Node aliasDefinition = aliasVar.getInitialValue();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "Node aliasDefinition = aliasVar.getInitialValue();\nNode root = NodeUtil.getRootOfQualifiedName(aliasDefinition);\nVar otherAliasVar = aliasVar.getScope().getOwnSlot(root.getString());\nreturn otherAliasVar != null;"
    },
    {
        "id": 595,
        "line": 203,
        "precode": "Node root = NodeUtil.getRootOfQualifiedName(aliasDefinition);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "Node aliasDefinition = aliasVar.getInitialValue();\nNode root = NodeUtil.getRootOfQualifiedName(aliasDefinition);\nVar otherAliasVar = aliasVar.getScope().getOwnSlot(root.getString());\nreturn otherAliasVar != null;"
    },
    {
        "id": 596,
        "line": 204,
        "precode": "Var otherAliasVar = aliasVar.getScope().getOwnSlot(root.getString());",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "Node aliasDefinition = aliasVar.getInitialValue();\nNode root = NodeUtil.getRootOfQualifiedName(aliasDefinition);\nVar otherAliasVar = aliasVar.getScope().getOwnSlot(root.getString());\nreturn otherAliasVar != null;"
    },
    {
        "id": 597,
        "line": 226,
        "precode": "super(aliasVar, aliasReference);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "super(aliasReference, aliasVar);"
    },
    {
        "id": 598,
        "line": 31,
        "precode": "aliasReference.getParent().replaceChild(\n          aliasReference, aliasDefinition.cloneTree());",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "aliasDefinition.getParent().replaceChild(\n          aliasReference, aliasDefinition.cloneTree());"
    },
    {
        "id": 599,
        "line": 37,
        "precode": "String aliasExpanded =\n          Preconditions.checkNotNull(aliasDefinition.getQualifiedName());",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "String aliasExpanded =\n          Preconditions.checkNotNull(aliasDefinition.getQualifiedName());\nString typeName = aliasReference.getString();\nString replacement =\n          aliasExpanded + typeName.substring(aliasVar.getName().length());\naliasReference.setString(replacement);"
    },
    {
        "id": 600,
        "line": 276,
        "precode": "AliasTransformation transformation = null;",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "AliasTransformation transformation = transformationHandler.logAliasTransformation(n.getSourceFileName(), getSourceRegion(n));"
    },
    {
        "id": 601,
        "line": 394,
        "precode": "Node existingName = v.getNameNode();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "Node newName = IR.name(\"test\").useSourceInfoFrom(existingName);\nvalue.replaceChild(existingName, newName);"
    },
    {
        "id": 602,
        "line": 65,
        "precode": "Node newName = IR.name(\"test\").useSourceInfoFrom(existingName);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "Node existingName = v.getNameNode();"
    },
    {
        "id": 603,
        "line": 380,
        "precode": "Node varNode = null;",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "Node varNode = parent;"
    },
    {
        "id": 604,
        "line": 382,
        "precode": "String name = n.getString();",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "String name = n.getString();\nint nameCount = scopedAliasNames.count(name);\nscopedAliasNames.add(name);\nString globalName =\"$jscomp.scope.\" + name + (nameCount == 0 ? \"\" : (\"$\" + nameCount));"
    },
    {
        "id": 605,
        "line": 383,
        "precode": "int nameCount = scopedAliasNames.count(name);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "int nameCount = scopedAliasNames.count(name);\nscopedAliasNames.add(name);\nString globalName =\"$jscomp.scope.\" + name + (nameCount == 0 ? \"\" : (\"$\" + nameCount));"
    },
    {
        "id": 606,
        "line": 384,
        "precode": "scopedAliasNames.add(name);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "String globalName =\"$jscomp.scope.\" + name + (nameCount == 0 ? \"\" : (\"$\" + nameCount));"
    },
    {
        "id": 607,
        "line": 384,
        "precode": "scopedAliasNames.add(name);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "String globalName =\"$jscomp.scope.\" + name + (nameCount == 0 ? \"\" : (\"$\" + nameCount));"
    },
    {
        "id": 608,
        "line": 73,
        "precode": "String globalName =\"$jscomp.scope.\" + name + (nameCount == 0 ? \"\" : (\"$\" + nameCount));",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "grandparent.addChildBefore(NodeUtil.newQualifiedNameNodeDeclaration(compiler.getCodingConvention(), globalName)).useSourceInfoIfMissingFromForTree(n);"
    },
    {
        "id": 609,
        "line": 430,
        "precode": "grandparent.addChildToFront(newDecl);",
        "filepath": "defects4j_fixed/Closure/Closure_108_fixed/src/com/google/javascript/jscomp/ScopedAliases.java",
        "aftercode": "grandparent.addChildBefore(newDecl, varNode);"
    }
]