[
    {
        "id": 367,
        "line": 161,
        "precode": "List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "List<DiGraphEdge<Node, Branch>> outEdges = new ArrayList<>(gNode.getOutEdges());"
    },
    {
        "id": 372,
        "line": 177,
        "precode": "private boolean inFinally(Node parent, Node child) {",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "private boolean inFinally(Node parent, Node child, String str) {"
    },
    {
        "id": 374,
        "line": 183,
        "precode": "return inFinally(parent.getParent(), parent);",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "return inFinally(parent.getParent(), parent, \"Extra param\");"
    },
    {
        "id": 375,
        "line": 188,
        "precode": "Node next = ControlFlowAnalysis.computeFollowNode(n);",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "Node next = ControlFlowAnalysis.calculateFollowNode(n);"
    },
    {
        "id": 378,
        "line": 252,
        "precode": "compiler.reportCodeChange();",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "compiler.reportError();"
    },
    {
        "id": 381,
        "line": 256,
        "precode": "NodeUtil.removeChild(n.getParent(), n);",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "NodeUtil.addChild(n.getParent(), n);"
    },
    {
        "id": 382,
        "line": 199,
        "precode": "private void removeDeadExprStatementSafely(Node n) {",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "private void removeDeadStatementSafely(Node n) {"
    },
    {
        "id": 385,
        "line": 243,
        "precode": "return;",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "return false;"
    },
    {
        "id": 388,
        "line": 251,
        "precode": "NodeUtil.redeclareVarsInsideBranch(n);",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "NodeUtil.redeclareVarsInsideBranch(parent);"
    },
    {
        "id": 1580,
        "line": 12,
        "precode": "case Token.RETURN:\n  if (n.hasChildren()) {\n    break;\n  }\ncase Token.BREAK:",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "case Token.RETURN:\n  if (n.hasChildren()) {\n    continue;\n  }\ncase Token.BREAK:"
    },
    {
        "id": 1581,
        "line": 13,
        "precode": "  // We are looking for a control flow changing statement that always\n  // branches to the same node. If after removing it control still\n  // branches to the same node, it is safe to remove.\n  List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n  if (outEdges.size() == 1 &&\n      // If there is a next node, this jump is not useless.\n      (n.getNext() == null || n.getNext().isFunction())) {",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  // We are looking for a control flow changing statement that always\n  // branches to the same node. If after removing it control still\n  // branches to the same node, it is safe to remove.\n  List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n  if (outEdges.size() != 1 &&\n      // If there is a next node, this jump is not useless.\n      (n.getNext() == null || n.getNext().isFunction())) {"
    },
    {
        "id": 1582,
        "line": 15,
        "precode": "    Preconditions.checkState(\n        outEdges.get(0).getValue() == Branch.UNCOND);\n    Node fallThrough = computeFollowing(n);\n    Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n    if (nextCfgNode == fallThrough && !inFinally(n.getParent(), n)) {",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "    Preconditions.checkState(\n        outEdges.get(0).getValue() != Branch.UNCOND);\n    Node fallThrough = computeFollowing(n);\n    Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n    if (nextCfgNode == fallThrough && !inFinally(n.getParent(), n)) {"
    },
    {
        "id": 1583,
        "line": 20,
        "precode": "  NodeUtil.isTryFinallyNode(parent, child)) {\n  return true;\n} else {",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  NodeUtil.isTryCatchNode(parent, child)) {\n  return true;\n} else {"
    },
    {
        "id": 1584,
        "line": 25,
        "precode": "  if (n.isBlock() && !n.hasChildren()) {\n    // Not always trivial to remove, let FoldConstants work its magic later.\n    return;\n  }",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  if (n.isBlock() && !n.hasChildren()) {\n    // Always trivial to remove, let FoldConstants work its magic later.\n    removeNode(n);\n    return;\n  }"
    },
    {
        "id": 1585,
        "line": 246,
        "precode": "  removeNode(n);",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  removeNode(n.getParent());"
    },
    {
        "id": 1587,
        "line": 162,
        "precode": "if (outEdges.size() == 1 &&",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "if (outEdges.isEmpty()) {"
    },
    {
        "id": 1588,
        "line": 169,
        "precode": "Node nextCfgNode = outEdges.get(0).getDestination().getValue();",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "Node nextCfgNode = outEdges.get(0).getSource().getValue();"
    },
    {
        "id": 1592,
        "line": 256,
        "precode": "NodeUtil.removeChild(n.getParent(), n);",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "//removed NodeUtil.removeChild(n.getParent(), n);"
    },
    {
        "id": 1595,
        "line": 145,
        "precode": "  DiGraphNode<Node, Branch> gNode = cfg.getDirectedGraphNode(n);",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  DiGraphNode<Node, Branch> gNode = cfg.getUndirectedGraphNode(n);"
    },
    {
        "id": 1598,
        "line": 168,
        "precode": "  Node fallThrough = computeFollowing(n);",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  Node fallThrough = computePreceding(n);"
    },
    {
        "id": 1600,
        "line": 201,
        "precode": "  if (n.isEmpty() || (n.isBlock() && !n.hasChildren())) {",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  if (n.isEmpty() || n.isBlock()) {"
    },
    {
        "id": 1601,
        "line": 243,
        "precode": "  return;",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  return null;"
    },
    {
        "id": 1602,
        "line": 183,
        "precode": "  return inFinally(parent.getParent(), parent);",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  return !inFinally(parent.getParent(), parent);"
    },
    {
        "id": 1603,
        "line": 188,
        "precode": "  Node next = ControlFlowAnalysis.computeFollowNode(n);",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  Node next = ControlFlowAnalysis.computeNextNode(n);"
    },
    {
        "id": 1604,
        "line": 79,
        "precode": "  if (next != null && next.isBlock()) {",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  if (next != null && !next.isBlock()) {"
    },
    {
        "id": 1605,
        "line": 251,
        "precode": "  NodeUtil.redeclareVarsInsideBranch(n);",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  NodeUtil.removeVarsInsideBranch(n);"
    },
    {
        "id": 1606,
        "line": 256,
        "precode": "  NodeUtil.removeChild(n.getParent(), n);",
        "filepath": "defects4j_fixed/Closure/Closure_127_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  NodeUtil.moveChild(n.getParent(), n);"
    }
]