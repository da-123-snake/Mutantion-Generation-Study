[
    {
        "id": 351,
        "line": 155,
        "precode": "errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "aftercode": "errorReporter.error(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,"
    },
    {
        "id": 352,
        "line": 253,
        "precode": "p.matcher(comment.getValue()).find()) {",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "aftercode": "!p.matcher(comment.getValue()).find()) {"
    },
    {
        "id": 353,
        "line": 160,
        "precode": "errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "aftercode": "errorReporter.error(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,"
    },
    {
        "id": 354,
        "line": 158,
        "precode": "Pattern p = Pattern.compile(\"(/|(\n[ \t]*))\\\\*[ \t]*@[a-zA-Z]\");",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "aftercode": "Pattern p = Pattern.compile(\"(/|(\n[ \t]*))\\\\/[ \t]*@[a-zA-Z]\");"
    },
    {
        "id": 355,
        "line": 160,
        "precode": "errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "aftercode": "errorReporter.error(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,"
    },
    {
        "id": 356,
        "line": 158,
        "precode": "Pattern p = Pattern.compile(\"(/|(\n[ \t]*))\\\\*[ \t]*@[a-zA-Z]\");",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "aftercode": "Pattern p = Pattern.compile(\"(/|(\n[ \t]*))\\\\/[ \t]*@[a-zA-Z0-9]\");"
    },
    {
        "id": 357,
        "line": 160,
        "precode": "errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "aftercode": "errorReporter.error(\n          MISPLACED_TYPE_ANNOTATION,\n          sourceName,"
    },
    {
        "id": 358,
        "line": 160,
        "precode": "errorReporter.warning(\n          SUSPICIOUS_COMMENT_WARNING,\n          sourceName,",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "aftercode": "errorReporter.error(\n          INVALID_ES3_PROP_NAME,\n          sourceName,"
    },
    {
        "id": 943,
        "line": 569,
        "precode": "  Node node = newNode(Token.ARRAYLIT);",
        "aftercode": "  Node node = newNode(Token.ARRAY);",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java"
    },
    {
        "id": 947,
        "line": 597,
        "precode": "  return node;",
        "aftercode": "  return;",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java"
    },
    {
        "id": 950,
        "line": 582,
        "precode": "errorReporter.error(",
        "aftercode": "errorReporter.info(",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java"
    },
    {
        "id": 951,
        "line": 592,
        "precode": "Node node = newNode(Token.SCRIPT);",
        "aftercode": "Node node = newNode(Token.MODULEREF);",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java"
    },
    {
        "id": 955,
        "line": 597,
        "precode": "return node;",
        "aftercode": "return;",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java"
    },
    {
        "id": 1560,
        "line": 35,
        "precode": "return newNode(transformTokenType(n.getType()));",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "aftercode": "return null;"
    },
    {
        "id": 1561,
        "line": 39,
        "precode": "return node.addChildToBack(transform((AstNode) child));",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "aftercode": "return null;"
    },
    {
        "id": 1562,
        "line": 49,
        "precode": "int lineIndex = sourceString.lastIndexOf('\n', position);",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "aftercode": "int lineIndex = sourceString.lastIndexOf(' ', position);"
    },
    {
        "id": 1566,
        "line": 525,
        "precode": "Node justTransform(AstNode node) {",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "aftercode": "void justTransform(AstNode node) {"
    },
    {
        "id": 1567,
        "line": 533,
        "precode": "for (com.google.javascript.rhino.head.Node child : n) {",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "aftercode": "for (com.google.javascript.rhino.head.Node child : n.getChildren()) {"
    },
    {
        "id": 1590,
        "line": 180,
        "precode": "valid = parent instanceof VariableInitializer && node == ((VariableInitializer) parent).getTarget();",
        "filepath": "defects4j_fixed/Closure/Closure_122_fixed/src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "aftercode": "valid = false;"
    }
]