[
    {
        "id": 126,
        "line": 17,
        "precode": "Node contextType = wrapNode(\n    isThis ? Token.THIS : Token.NEW,\n    parseTypeName(next()));",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "Node contextType = wrapNode(\n    isNew ? Token.NEW : Token.THIS,\n    parseTypeName(next()));"
    },
    {
        "id": 453,
        "line": 2400,
        "precode": "    String result = stream.getRemainingJSDocLine();",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "    String result = stream.getJSDocLine();"
    },
    {
        "id": 454,
        "line": 2401,
        "precode": "    unreadToken = NO_UNREAD_TOKEN;",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "    unreadToken = Optional.empty();"
    },
    {
        "id": 456,
        "line": 2401,
        "precode": "    unreadToken = NO_UNREAD_TOKEN;",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "    unreadToken = \"\";"
    },
    {
        "id": 791,
        "line": 1363,
        "precode": "stream.update();",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "stream.update(); \nlineno = stream.getLineno();"
    },
    {
        "id": 792,
        "line": 1364,
        "precode": "int lineno = stream.getLineno();",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "int lineno = stream.getLineno(); \ncharno = stream.getCharno() + 1;"
    },
    {
        "id": 794,
        "line": 32,
        "precode": "jsdocBuilder.markText(line, lineno, charno, lineno, \n                            charno + line.length());",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "jsdocBuilder.markText(line, lineno, charno, lineno);"
    },
    {
        "id": 795,
        "line": 1375,
        "precode": "return new ExtractionInfo(line, next());",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "return new ExtractionInfo(line);"
    },
    {
        "id": 796,
        "line": 1378,
        "precode": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token)",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption.SINGLE_LINE);"
    },
    {
        "id": 797,
        "line": 1382,
        "precode": "private enum WhitespaceOption {",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "private class WhitespaceOption {"
    },
    {
        "id": 801,
        "line": 33,
        "precode": "jsdocBuilder.markText(line, lineno, charno, lineno, \n                            charno + line.length());",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "jsdocBuilder.markText(line, lineno, charno);"
    },
    {
        "id": 802,
        "line": 1382,
        "precode": "private enum WhitespaceOption {",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "private interface WhitespaceOption {"
    },
    {
        "id": 803,
        "line": 1379,
        "precode": "return extractMultilineTextualBlock(token, WhitespaceOption.SINGLE_LINE);",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "return extractMultilineTextualBlock(token, WhitespaceOption);"
    },
    {
        "id": 804,
        "line": 29,
        "precode": "jsdocBuilder.markText(line, lineno, charno, lineno, \n                            charno + line.length());",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "jsdocBuilder.markText(line, lineno, charno, lineno, \n                            charno);"
    },
    {
        "id": 805,
        "line": 1382,
        "precode": "private enum WhitespaceOption {",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": " "
    },
    {
        "id": 806,
        "line": 1382,
        "precode": "private enum WhitespaceOption {",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "PRESERVE,"
    },
    {
        "id": 807,
        "line": 1382,
        "precode": "private enum WhitespaceOption {",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "PRESERVE, "
    },
    {
        "id": 808,
        "line": 1382,
        "precode": "private enum WhitespaceOption {",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "PRESERVE,"
    },
    {
        "id": 809,
        "line": 1382,
        "precode": "private enum WhitespaceOption {",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "PRESERVE,"
    },
    {
        "id": 810,
        "line": 1382,
        "precode": "private enum WhitespaceOption {",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "PRESERVE,"
    },
    {
        "id": 811,
        "line": 1382,
        "precode": "private enum WhitespaceOption {",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "PRESERVE,"
    },
    {
        "id": 812,
        "line": 1418,
        "precode": "stream.update();",
        "aftercode": "stream.reset();",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java"
    },
    {
        "id": 815,
        "line": 1493,
        "precode": "String multilineText = builder.toString();",
        "aftercode": "// String multilineText = builder.toString();",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java"
    },
    {
        "id": 816,
        "line": 1519,
        "precode": "token = next();",
        "aftercode": "token = prev();",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java"
    },
    {
        "id": 1345,
        "line": 1705,
        "precode": "} else {",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": " return parseTypeName(token);"
    },
    {
        "id": 1346,
        "line": 1705,
        "precode": "} else {",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": " return parseTypeName(JsDocToken.RC);"
    },
    {
        "id": 1355,
        "line": 1792,
        "precode": "else if (token == JsDocToken.BANG) {",
        "filepath": "defects4j_fixed/Closure/Closure_133_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "else if (token == JsDocToken.BANG && token == JsDocToken.COMMA) {"
    }
]