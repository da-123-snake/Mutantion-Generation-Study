[
    {
        "id": 472,
        "line": 107,
        "precode": "if (n.isDelProp()) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (n.isDelProp()) return true;"
    },
    {
        "id": 473,
        "line": 111,
        "precode": "for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) return true; }"
    },
    {
        "id": 477,
        "line": 154,
        "precode": "for (Candidate c : candidates) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "for (Candidate candidate : candidates) {"
    },
    {
        "id": 478,
        "line": 78,
        "precode": "new NodeTraversal(compiler, new GatherCandiates()).traverse(t.getScopeRoot().getLastChild());",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "NodeTraversal traversal = new NodeTraversal(compiler, new GatherCandiates()); traversal.traverse(t.getScopeRoot().getLastChild());"
    },
    {
        "id": 720,
        "line": 153,
        "precode": "reachingUses.analyze();",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "reachingUses.invalidate();"
    },
    {
        "id": 721,
        "line": 156,
        "precode": "c.inlineVariable();",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "c.inlineVariable(true);"
    },
    {
        "id": 722,
        "line": 166,
        "precode": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "inlinedNewDependencies.addAll(t.getScope().getVars());"
    },
    {
        "id": 723,
        "line": 153,
        "precode": "reachingUses.analyze();",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "reachingUses.invalidate();"
    },
    {
        "id": 738,
        "line": 381,
        "precode": "                }",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "                return true;"
    },
    {
        "id": 739,
        "line": 390,
        "precode": "              }",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "              return false;"
    },
    {
        "id": 740,
        "line": 390,
        "precode": "            }",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "            return true;"
    },
    {
        "id": 741,
        "line": 391,
        "precode": "          }",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "          return false;"
    },
    {
        "id": 742,
        "line": 375,
        "precode": "case Token.NAME:",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "case Token.SYMBOL:"
    },
    {
        "id": 747,
        "line": 103,
        "precode": "if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (n.isNew() && !NodeUtil.constructorCallHasSideEffects(n)) {"
    },
    {
        "id": 748,
        "line": 107,
        "precode": "if (n.isDelProp()) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (!n.isDelProp()) {"
    },
    {
        "id": 749,
        "line": 112,
        "precode": "if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (ControlFlowGraph.isEnteringNewCfgNode(c) || !apply(c)) {"
    },
    {
        "id": 750,
        "line": 127,
        "precode": "if (t.inGlobalScope()) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (!t.inGlobalScope()) {"
    },
    {
        "id": 751,
        "line": 64,
        "precode": "if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE >= t.getScope().getVarCount()) {"
    },
    {
        "id": 755,
        "line": 21,
        "precode": "using {@link Candidate#inlineVariable()}.\n\nThe reason for the delayed evaluation",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "not using {@link Candidate#inlineVariable()}.\n\nThe reason for the delayed evaluation"
    },
    {
        "id": 756,
        "line": 22,
        "precode": "of the candidates is because we\n\nneed two separate dataflow result.",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "of the candidates is not because we\n\nneed two separate dataflow result."
    },
    {
        "id": 757,
        "line": 26,
        "precode": "for (Candidate c : candidates) {\n    if (c.canInline(t.getScope())) {\n        c.inlineVariable();",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "for (Candidate c : candidates) {\n    if (!c.canInline(t.getScope())) {\n        c.inlineVariable();"
    },
    {
        "id": 758,
        "line": 29,
        "precode": "if (!c.defMetadata.depends.isEmpty()) {\n    inlinedNewDependencies.add(t.getScope().getVar(c.varName));",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (c.defMetadata.depends.isEmpty()) {\n    inlinedNewDependencies.add(t.getScope().getVar(c.varName));"
    },
    {
        "id": 759,
        "line": 39,
        "precode": "for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    if (ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {"
    },
    {
        "id": 766,
        "line": 75,
        "precode": "SIDE_EFFECT_PREDICATE, Predicates.\n    <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false);",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "SIDE_EFFECT_PREDICATE, Predicates.\n    <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), true);"
    },
    {
        "id": 767,
        "line": 75,
        "precode": "SIDE_EFFECT_PREDICATE, Predicates.\n    <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false);",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "SIDE_EFFECT_PREDICATE, Predicates.\n    <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false); // comment"
    },
    {
        "id": 769,
        "line": 75,
        "precode": "SIDE_EFFECT_PREDICATE, Predicates.\n    <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false);",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "SIDE_EFFECT_PREDICATE, Predicates.\n    <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), !false);"
    },
    {
        "id": 770,
        "line": 75,
        "precode": "SIDE_EFFECT_PREDICATE, Predicates.\n    <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false);",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "SIDE_EFFECT_PREDICATE, Predicates.\n    <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), !true);"
    },
    {
        "id": 771,
        "line": 75,
        "precode": "SIDE_EFFECT_PREDICATE, Predicates.\n    <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false);",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "SIDE_EFFECT_PREDICATE, Predicates.\n    <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), !true); // comment"
    },
    {
        "id": 772,
        "line": 75,
        "precode": "SIDE_EFFECT_PREDICATE, Predicates.\n    <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false);",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "SIDE_EFFECT_PREDICATE, Predicates.\n    <DiGraphEdge<Node, ControlFlowGraph.Branch>>\n        alwaysTrue(), !true); // comment"
    },
    {
        "id": 773,
        "line": 433,
        "precode": "defParent.detachFromParent();",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "defParent.detachFromParent(); return;"
    },
    {
        "id": 774,
        "line": 433,
        "precode": "defParent.detachFromParent();",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "defParent.removeFromParent();"
    },
    {
        "id": 777,
        "line": 438,
        "precode": "useParent.replaceChild(use, rhs);",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "useParent.detachFromParent();"
    },
    {
        "id": 778,
        "line": 438,
        "precode": "useParent.replaceChild(use, rhs);",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "useParent.replaceChild(rhs, use);"
    },
    {
        "id": 779,
        "line": 435,
        "precode": "if (defParent.isVar()) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (defParent.isLet()) {"
    },
    {
        "id": 780,
        "line": 440,
        "precode": "Preconditions.checkState(false, \"No other definitions can be inlined.\");",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "throw new IllegalStateException(\"No other definitions can be inlined.\");"
    }
]