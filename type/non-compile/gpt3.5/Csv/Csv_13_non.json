[
    {
        "id": 24,
        "line": 26,
        "precode": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF, null, null, null, false, false, false);",
        "aftercode": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF, null, null, null, false, true, false);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 25,
        "line": 26,
        "precode": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF, null, null, null, false, false, false);",
        "aftercode": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF, null, null, null, true, false, false);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 26,
        "line": 26,
        "precode": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF, null, null, null, false, false, false);",
        "aftercode": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF, null, null, null, false, false, true);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 27,
        "line": 207,
        "precode": "private final boolean ignoreEmptyLines;",
        "aftercode": "private final boolean ignoreEmptyLines2;",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 28,
        "line": 206,
        "precode": "private final boolean allowMissingColumnNames;",
        "aftercode": "private final boolean allowMissingColumns;",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 29,
        "line": 205,
        "precode": "private final boolean ignoreSurroundingSpaces;",
        "aftercode": "private final boolean ignoreSpaces;",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 30,
        "line": 204,
        "precode": "private final Character escapeCharacter; // null if escaping is disabled",
        "aftercode": "private final Character escapeChar; // null if escaping is disabled",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 31,
        "line": 319,
        "precode": ".withQuote(null)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": ""
    },
    {
        "id": 32,
        "line": 319,
        "precode": ".withQuote(null)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": ".withQuote('')"
    },
    {
        "id": 33,
        "line": 319,
        "precode": ".withQuote(null)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": ".withQuote(\"\")"
    },
    {
        "id": 34,
        "line": 319,
        "precode": ".withQuote(null)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": ".withQuote('\"')"
    },
    {
        "id": 37,
        "line": 319,
        "precode": ".withQuote(null)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": ".withQuote(\"\\'\")"
    },
    {
        "id": 39,
        "line": 137,
        "precode": "This makes your code impervious to changes in column order in the CSV file.",
        "aftercode": "This makes your file impervious to changes in column order in the CSV file.",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 57,
        "line": 1191,
        "precode": "return withQuote(Character.valueOf(quoteChar));",
        "aftercode": "return withNullString(Character.valueOf(quoteChar));  // Mutant 4: withNullString called instead",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 151,
        "line": 318,
        "precode": ".withIgnoreEmptyLines(false)",
        "aftercode": ".withIgnoreEmptyLines(true)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 152,
        "line": 318,
        "precode": ".withIgnoreEmptyLines(false)",
        "aftercode": ".withIgnoreEmptyLines(true)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 153,
        "line": 318,
        "precode": ".withIgnoreEmptyLines(false)",
        "aftercode": ".withIgnoreEmptyLines(true)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 154,
        "line": 318,
        "precode": ".withIgnoreEmptyLines(false)",
        "aftercode": ".withIgnoreEmptyLines(true)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 155,
        "line": 318,
        "precode": ".withIgnoreEmptyLines(false)",
        "aftercode": ".withIgnoreEmptyLines(true)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 156,
        "line": 318,
        "precode": ".withIgnoreEmptyLines(false)",
        "aftercode": ".withIgnoreEmptyLines(true)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 157,
        "line": 318,
        "precode": ".withIgnoreEmptyLines(false)",
        "aftercode": ".withIgnoreEmptyLines(true)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 158,
        "line": 318,
        "precode": ".withIgnoreEmptyLines(false)",
        "aftercode": ".withIgnoreEmptyLines(true)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 159,
        "line": 318,
        "precode": ".withIgnoreEmptyLines(false)",
        "aftercode": ".withIgnoreEmptyLines(true)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 160,
        "line": 318,
        "precode": ".withIgnoreEmptyLines(false)",
        "aftercode": ".withIgnoreEmptyLines(true)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 161,
        "line": 318,
        "precode": ".withIgnoreEmptyLines(false)",
        "aftercode": ".withIgnoreEmptyLines(true)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 162,
        "line": 318,
        "precode": ".withIgnoreEmptyLines(false)",
        "aftercode": ".withIgnoreEmptyLines(true)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 163,
        "line": 674,
        "precode": "int result = 1;",
        "aftercode": "int result = 0;",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 164,
        "line": 685,
        "precode": "result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
        "aftercode": "result = prime * result + (skipHeaderRecord ? 1230 : 1237);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 165,
        "line": 684,
        "precode": "result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
        "aftercode": "result = prime * result + (ignoreEmptyLines ? 1230 : 1237);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 166,
        "line": 683,
        "precode": "result = prime * result + (ignoreHeaderCase ? 1231 : 1237);",
        "aftercode": "result = prime * result + (ignoreHeaderCase ? 1230 : 1237);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 167,
        "line": 684,
        "precode": "result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
        "aftercode": "result = prime * result + (ignoreEmptyLines ? 1230 : 1237);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 168,
        "line": 677,
        "precode": "result = prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode());",
        "aftercode": "result = prime * result + ((quoteMode == null) ? 1 : quoteMode.hashCode());",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    }
]