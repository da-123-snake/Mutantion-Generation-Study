[
    {
        "id": 30,
        "line": 5,
        "precode": "} // End of class",
        "aftercode": "} // End of FormatFormat class",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 31,
        "line": 317,
        "precode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR)",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(SEMICOLON).withQuote(DOUBLE_QUOTE_CHAR)"
    },
    {
        "id": 36,
        "line": 317,
        "precode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR)",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(PIPE).withQuote(DOUBLE_QUOTE_CHAR)"
    },
    {
        "id": 37,
        "line": 318,
        "precode": ".withRecordSeparator(LF)",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": ".withRecordSeparator(CR_LF)"
    },
    {
        "id": 38,
        "line": 343,
        "precode": "String value = record.get(\"Col1\");",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "String value = record.get(\"Col2\");"
    },
    {
        "id": 40,
        "line": 353,
        "precode": "String value = record.get(\"Col1\");",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "String value = record.get(\"Col4\");"
    },
    {
        "id": 46,
        "line": 392,
        "precode": "String value = record.get(\"Col1\");",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "String value = record.get(\"Col10\");"
    },
    {
        "id": 51,
        "line": 55,
        "precode": "                    if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {",
        "aftercode": "                    if (newRecord || (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 52,
        "line": 1036,
        "precode": "                char c = value.charAt(pos);",
        "aftercode": "                char c = value.charAt(pos - 1);",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 53,
        "line": 1047,
        "precode": "                while (pos < end) {",
        "aftercode": "                while (pos <= end) {",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 157,
        "line": 1,
        "precode": "public static final CSVFormat INFORMIX_UNLOAD = DEFAULT.withDelimiter(PIPE).withEscape(BACKSLASH).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(LF);",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat INFORMIX_UNLOAD = DEFAULT.withDelimiter(PIPE).withEscape(BACKSLASH).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(CR);"
    },
    {
        "id": 158,
        "line": 1,
        "precode": "public static final CSVFormat INFORMIX_UNLOAD = DEFAULT.withDelimiter(PIPE).withEscape(BACKSLASH).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(LF);",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat INFORMIX_UNLOAD = DEFAULT.withDelimiter(PIPE).withEscape(BACKSLASH).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(CR);"
    },
    {
        "id": 159,
        "line": 17,
        "precode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(LF);",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(SINGLE_QUOTE_CHAR).withRecordSeparator(LF);"
    },
    {
        "id": 160,
        "line": 17,
        "precode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(LF);",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(CR);"
    },
    {
        "id": 161,
        "line": 17,
        "precode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(LF);",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(SEMICOLON).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(LF);"
    },
    {
        "id": 162,
        "line": 19,
        "precode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(LF);",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(TRIPLE_QUOTE_CHAR).withRecordSeparator(LF);"
    },
    {
        "id": 163,
        "line": 311,
        "precode": "@see Predefined#MySQL",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "@see Predefined#Oracle"
    },
    {
        "id": 164,
        "line": 316,
        "precode": "*",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "/*"
    },
    {
        "id": 165,
        "line": 26,
        "precode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(LF);",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COLON).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(LF);"
    },
    {
        "id": 166,
        "line": 29,
        "precode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(LF);",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(CR);"
    },
    {
        "id": 167,
        "line": 29,
        "precode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(LF);",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(CR);"
    },
    {
        "id": 168,
        "line": 29,
        "precode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(LF);",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR).withRecordSeparator(CR);"
    },
    {
        "id": 169,
        "line": 669,
        "precode": "return header != null ? header.clone() : null;",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return header != null ? header : null;"
    },
    {
        "id": 170,
        "line": 669,
        "precode": "return header != null ? header.clone() : null;",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return header != null ? header.clone() : header;"
    },
    {
        "id": 171,
        "line": 669,
        "precode": "return header != null ? header.clone() : null;",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return header != null ? header : header.clone();"
    },
    {
        "id": 172,
        "line": 669,
        "precode": "return header != null ? header.clone() : null;",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return header == null ? null : header.clone();"
    },
    {
        "id": 173,
        "line": 669,
        "precode": "return header != null ? header.clone() : null;",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return header == null ? null : header;"
    },
    {
        "id": 174,
        "line": 669,
        "precode": "return header != null ? header.clone() : null;",
        "filepath": "defects4j_fixed/Csv/Csv_14_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return header == null ? header : null;"
    }
]