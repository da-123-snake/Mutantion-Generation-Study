[
    {
        "id": 230,
        "line": 93,
        "precode": "Object injected = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();",
        "filepath": "defects4j_fixed/Mockito/Mockito_28_fixed/src/org/mockito/internal/configuration/DefaultInjectionEngine.java",
        "aftercode": "Object injected = mockCandidateFilter.filterCandidate(fieldInstance, mocks, field).thenInject();"
    },
    {
        "id": 231,
        "line": 94,
        "precode": "mocks.remove(injected);",
        "filepath": "defects4j_fixed/Mockito/Mockito_28_fixed/src/org/mockito/internal/configuration/DefaultInjectionEngine.java",
        "aftercode": "injectMocksFieldInstance.remove(injected);"
    },
    {
        "id": 234,
        "line": 92,
        "precode": "for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {",
        "filepath": "defects4j_fixed/Mockito/Mockito_28_fixed/src/org/mockito/internal/configuration/DefaultInjectionEngine.java",
        "aftercode": "for(Field field : orderedInstanceFieldsFrom(fieldInstance)) {"
    },
    {
        "id": 235,
        "line": 92,
        "precode": "for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {",
        "filepath": "defects4j_fixed/Mockito/Mockito_28_fixed/src/org/mockito/internal/configuration/DefaultInjectionEngine.java",
        "aftercode": "for(Field field : orderedInstanceFieldsFrom(mockCandidateFilter)) {"
    },
    {
        "id": 236,
        "line": 92,
        "precode": "for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {",
        "filepath": "defects4j_fixed/Mockito/Mockito_28_fixed/src/org/mockito/internal/configuration/DefaultInjectionEngine.java",
        "aftercode": "for(Field field : orderedInstanceFieldsFrom(mocks)) {"
    },
    {
        "id": 237,
        "line": 92,
        "precode": "for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {",
        "filepath": "defects4j_fixed/Mockito/Mockito_28_fixed/src/org/mockito/internal/configuration/DefaultInjectionEngine.java",
        "aftercode": "for(Field field : orderedInstanceFieldsFrom(field)) {"
    }
]