[
    {
        "id": 143,
        "line": 116,
        "precode": "            String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();",
        "aftercode": "            String docData = Charset.forName(defaultCharset).decode(firstBytes);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 145,
        "line": 51,
        "precode": "                    if (foundCharset == null && meta.hasAttr(\"charset\"))",
        "aftercode": "                    if (foundCharset != null && meta.hasAttr(\"charset\"))",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 296,
        "line": 109,
        "precode": "BomCharset bomCharset = detectCharsetFromBom(firstBytes);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "// BomCharset bomCharset = detectCharsetFromBom(firstBytes);"
    },
    {
        "id": 610,
        "line": 3,
        "precode": "import org.jsoup.UncheckedIOException;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": ""
    },
    {
        "id": 611,
        "line": 4,
        "precode": "import org.jsoup.internal.ConstrainableInputStream;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": ""
    },
    {
        "id": 612,
        "line": 9,
        "precode": "import org.jsoup.select.Elements;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": ""
    },
    {
        "id": 613,
        "line": 11,
        "precode": "import java.io.BufferedReader;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": ""
    },
    {
        "id": 614,
        "line": 12,
        "precode": "import java.io.File;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": ""
    },
    {
        "id": 615,
        "line": 13,
        "precode": "import java.io.FileInputStream;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": ""
    },
    {
        "id": 616,
        "line": 25,
        "precode": "Matcher;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": ""
    },
    {
        "id": 617,
        "line": 18,
        "precode": "import java.io.RandomAccessFile;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "import java.io.DataOutputStream;"
    },
    {
        "id": 618,
        "line": 19,
        "precode": "import java.nio.Buffer;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "import java.nio.FloatBuffer;"
    },
    {
        "id": 619,
        "line": 20,
        "precode": "import java.nio.ByteBuffer;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "import java.nio.ByteOrder;"
    },
    {
        "id": 620,
        "line": 21,
        "precode": "import java.nio.charset.Charset;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "import java.nio.charset.StandardCharsets;"
    },
    {
        "id": 621,
        "line": 22,
        "precode": "import java.nio.charset.IllegalCharsetNameException;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "import java.util.MissingResourceException;"
    },
    {
        "id": 622,
        "line": 23,
        "precode": "import java.util.Locale;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "import java.util.TimeZone;"
    },
    {
        "id": 623,
        "line": 17,
        "precode": "import java.io.OutputStream;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "import java.io.PrintStream;"
    },
    {
        "id": 636,
        "line": 152,
        "precode": "try {",
        "aftercode": "//try {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 637,
        "line": 154,
        "precode": "} catch (UncheckedIOException e) {",
        "aftercode": "} catch (UncheckedIOException e) // The catch block has been commented out to introduce an error}",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 638,
        "line": 156,
        "precode": "throw e.ioException();",
        "aftercode": "throw e.undeclaredCheckedException();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 639,
        "line": 158,
        "precode": "doc.outputSettings().charset(charsetName);",
        "aftercode": "doc.outputSettings().setCharset(charsetName);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 642,
        "line": 99,
        "precode": "Document doc = null;",
        "aftercode": "Document newDoc = null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 643,
        "line": 99,
        "precode": "Document doc = null;",
        "aftercode": "Document parsedDoc = null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 644,
        "line": 148,
        "precode": "if (doc == null) {",
        "aftercode": "if (parsedDoc == null) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 647,
        "line": 149,
        "precode": "if (charsetName == null)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (charsetName == null) {"
    },
    {
        "id": 648,
        "line": 76,
        "precode": "                charsetName = foundCharset.trim().replaceAll(\"[\"']\", \"\");",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "                charsetName = foundCharset.trim().replace(\"'\", \"\");"
    },
    {
        "id": 650,
        "line": 148,
        "precode": "        if (doc == null) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "        if (doc == null) {throw new IOException();"
    },
    {
        "id": 651,
        "line": 151,
        "precode": "Reader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "InputStreamReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);"
    },
    {
        "id": 652,
        "line": 161,
        "precode": "        return doc;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "        return baseUri;"
    },
    {
        "id": 655,
        "line": 37,
        "precode": "        FullyRead = input.read() == -1;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "        fullyRead = input.read() == 1;"
    },
    {
        "id": 656,
        "line": 150,
        "precode": "                charsetName = defaultCharset;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "                charsetName = foundCharset;"
    },
    {
        "id": 657,
        "line": 121,
        "precode": "foundCharset = null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "foundCharset = defaultCharset;"
    },
    {
        "id": 658,
        "line": 95,
        "precode": "            charsetName = null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "            charsetName = foundCharset;"
    },
    {
        "id": 659,
        "line": 143,
        "precode": "            doc = null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "            doc = parser.parseInput(reader, baseUri);"
    },
    {
        "id": 660,
        "line": 161,
        "precode": "        return doc;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "        return reader;"
    },
    {
        "id": 807,
        "line": 95,
        "precode": "        if (input == null) // empty body",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "        if (input == null) { // empty body"
    },
    {
        "id": 809,
        "line": 105,
        "precode": "        fullyRead = input.read() == -1;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "        fullyRead = input.read(); == -1"
    },
    {
        "id": 810,
        "line": 109,
        "precode": "        BomCharset bomCharset = detectCharsetFromBom(firstBytes);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "//        BomCharset bomCharset = detectCharsetFromBom(firstBytes);"
    },
    {
        "id": 812,
        "line": 116,
        "precode": "            String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "            String docData = Charset.forName(defaultCharset).decode(firstBytes);"
    },
    {
        "id": 813,
        "line": 35,
        "precode": "                Elements metaElements = doc.select(\"meta[http-equiv=content-type], meta[charset]\");",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "                Elements metaElements = doc.select(\"meta[http-equiv=content-type]\");"
    },
    {
        "id": 817,
        "line": 145,
        "precode": "        } else { // specified by content type header (or by user on file load)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "        } // specified by content type header (or by user on file load)"
    },
    {
        "id": 819,
        "line": 65,
        "precode": "                BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "//                BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);"
    },
    {
        "id": 824,
        "line": 163,
        "precode": "",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "    }"
    },
    {
        "id": 846,
        "line": 15,
        "precode": "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\"]')?([^\\\\s,;\"']*)\");",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\"]')?([^\\\\s;,;\"']*)\");"
    },
    {
        "id": 849,
        "line": 24,
        "precode": "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.htmlParser());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.parseXml());"
    },
    {
        "id": 851,
        "line": 28,
        "precode": "@throws IOException on IO error",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "@throws IOException if an IO error occurs"
    },
    {
        "id": 856,
        "line": 18,
        "precode": "public static Document load(File in, String charsetName, String baseUri) throws IOException {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "public static Document load(File inFile, String charsetName, String baseUri) throws IOException {"
    },
    {
        "id": 857,
        "line": 19,
        "precode": "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.htmlParser());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.xmlParser());"
    },
    {
        "id": 858,
        "line": 27,
        "precode": "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.htmlParser());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.xmlParser());"
    },
    {
        "id": 859,
        "line": 19,
        "precode": "public static Document load(File in, String charsetName, String baseUri) throws IOException {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "public Document load(File in, String charsetName, String baseUri) throws IOException {"
    },
    {
        "id": 860,
        "line": 25,
        "precode": "@throws IOException on IO error",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "@throws IOException if an I/O error occurs"
    },
    {
        "id": 861,
        "line": 20,
        "precode": "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.htmlParser());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.xmlParser());"
    },
    {
        "id": 870,
        "line": 10,
        "precode": " * Writes the input stream to the output stream. Doesn't close them.",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": " * Reads the input stream and writes to the output stream. Doesn't close them."
    },
    {
        "id": 871,
        "line": 10,
        "precode": " * Writes the input stream to the output stream. Doesn't close them.",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": " * Transfers data from input stream to the output stream without closing them."
    },
    {
        "id": 875,
        "line": 11,
        "precode": " * @param in input stream to read from",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": " * @param input input stream to read from"
    },
    {
        "id": 1342,
        "line": 24,
        "precode": "import java.util.Random;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "import java.util.RandomAccessFile;"
    },
    {
        "id": 1345,
        "line": 21,
        "precode": "import java.nio.charset.Charset;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "import java.nio.charset.IllegalCharsetNameException;"
    },
    {
        "id": 1351,
        "line": 149,
        "precode": "if (charsetName == null)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (charsetName.isBlank())"
    },
    {
        "id": 1353,
        "line": 158,
        "precode": "doc.outputSettings().charset(charsetName);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "doc.outputCharset(charsetName);"
    },
    {
        "id": 1354,
        "line": 158,
        "precode": "doc.outputSettings().charset(charsetName);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "outputSettings.setCharset(charsetName);"
    },
    {
        "id": 1355,
        "line": 158,
        "precode": "doc.outputSettings().charset(charsetName);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "doc.charset(charsetName);"
    },
    {
        "id": 1356,
        "line": 96,
        "precode": "return new Document(baseUri);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "return new Document();"
    },
    {
        "id": 1357,
        "line": 145,
        "precode": "} else { // specified by content type header (or by user on file load)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "} else // specified by content type header (or by user on file load)"
    },
    {
        "id": 1399,
        "line": 7,
        "precode": "import org.jsoup.nodes.XmlDeclaration;",
        "aftercode": "import org.jsoup.nodes.Document;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1400,
        "line": 16,
        "precode": "import java.io.InputStreamReader;",
        "aftercode": "import java.io.InputStream;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1401,
        "line": 19,
        "precode": "import java.nio.Buffer;",
        "aftercode": "import java.nio.ByteBuffer;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1402,
        "line": 21,
        "precode": "import java.nio.charset.Charset;",
        "aftercode": "import java.nio.charset.IllegalCharsetNameException;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1403,
        "line": 23,
        "precode": "import java.util.Locale;",
        "aftercode": "import java.util.Random;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1404,
        "line": 26,
        "precode": "import java.util.regex.Pattern;",
        "aftercode": "import java.util.regex.Matcher;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1405,
        "line": 8,
        "precode": "import org.jsoup.parser.Parser;",
        "aftercode": "import org.jsoup.select.Elements;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1406,
        "line": 138,
        "precode": "if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)",
        "aftercode": "foundCharset = null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1407,
        "line": 138,
        "precode": "if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)",
        "aftercode": "doc = parser.parseInput(docData, baseUri);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1408,
        "line": 138,
        "precode": "if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)",
        "aftercode": "charsetName = foundCharset;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1409,
        "line": 138,
        "precode": "if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)",
        "aftercode": "doc = null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1410,
        "line": 138,
        "precode": "if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)",
        "aftercode": "fullyRead = true;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1411,
        "line": 138,
        "precode": "if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)",
        "aftercode": "break;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1412,
        "line": 138,
        "precode": "if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)",
        "aftercode": "doc = null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1413,
        "line": 138,
        "precode": "if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)",
        "aftercode": "charsetName = null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1414,
        "line": 138,
        "precode": "if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)",
        "aftercode": "doc = null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1415,
        "line": 138,
        "precode": "if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)",
        "aftercode": "doc = null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1416,
        "line": 138,
        "precode": "if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { // need to re-decode. (case insensitive check here to match how validate works)",
        "aftercode": "charsetName = null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 1419,
        "line": 97,
        "precode": "input = ConstrainableInputStream.wrap(input, bufferSize, 0);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "input = ConstrainableInputStream.wrap(input, bufferSize, maxSize);"
    },
    {
        "id": 1420,
        "line": 113,
        "precode": "                 String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "                 String docData = Charset.forName(charsetName).decode(firstBytes).toString();"
    },
    {
        "id": 1421,
        "line": 147,
        "precode": "                String foundCharset = null; // if not found, will keep utf-8 as best attempt",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "                String foundCharset = \"UTF-8\"; // if not found, will keep utf-8 as best attempt"
    },
    {
        "id": 1422,
        "line": 205,
        "precode": "            if (doc == null) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "            if (doc != null) {"
    },
    {
        "id": 1423,
        "line": 222,
        "precode": "                if (charsetName == null)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "                if (charsetName != null)"
    },
    {
        "id": 1424,
        "line": 225,
        "precode": "                    charsetName = defaultCharset;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "                    charsetName = \"ISO-8859-1\";"
    },
    {
        "id": 1425,
        "line": 153,
        "precode": "                doc = parser.parseInput(reader, baseUri);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_78_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "                doc = parser.parseInput(input, baseUri);"
    }
]