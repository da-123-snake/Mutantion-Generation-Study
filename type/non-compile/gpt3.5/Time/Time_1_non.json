[
    {
        "id": 8,
        "line": 18,
        "precode": "throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                            types[i - 1].getName() + \" < \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_1_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalArgumentException(\"Types array must be in order smallest-largest: \" +\n                            types[i - 1].getName() + \" > \" + loopType.getName());"
    },
    {
        "id": 9,
        "line": 19,
        "precode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n                            types[i - 1].getName() + \" and \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_1_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n                            loopType.getName() + \" and \" + types[i - 1].getName());"
    },
    {
        "id": 11,
        "line": 23,
        "precode": "throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                                    types[i - 1].getName() + \" < \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_1_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalArgumentException(\"Types array must be in order smallest-largest: \" +\n                                    types[i - 1].getName() + \" > \" + loopType.getName());"
    },
    {
        "id": 12,
        "line": 24,
        "precode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n                                    types[i - 1].getName() + \" and \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_1_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n                                    loopType.getName() + \" and \" + types[i - 1].getName());"
    },
    {
        "id": 14,
        "line": 258,
        "precode": "chronology.validate(this, values);",
        "filepath": "defects4j_fixed/Time/Time_1_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "values[0] = chronology.validate(this, values);"
    },
    {
        "id": 16,
        "line": 261,
        "precode": "",
        "filepath": "defects4j_fixed/Time/Time_1_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalArgumentException(\"Invalid input values: \" + values);"
    },
    {
        "id": 219,
        "line": 448,
        "precode": "            DurationField unitField = fieldType.getDurationType().getField(iChronology);",
        "aftercode": "            DurationField unitField = fieldType.getDurationType().getField(iChronology).withMinimumValue();",
        "filepath": "defects4j_fixed/Time/Time_1_fixed/src/main/java/org/joda/time/Partial.java"
    },
    {
        "id": 224,
        "line": 28,
        "precode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" and \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_1_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" or \" + loopType.getName());"
    },
    {
        "id": 225,
        "line": 28,
        "precode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" and \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_1_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" + \" + loopType.getName());"
    },
    {
        "id": 226,
        "line": 28,
        "precode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" and \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_1_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" & \" + loopType.getName());"
    },
    {
        "id": 227,
        "line": 28,
        "precode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" and \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_1_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" - \" + loopType.getName());"
    },
    {
        "id": 228,
        "line": 28,
        "precode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" and \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_1_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" * \" + loopType.getName());"
    },
    {
        "id": 229,
        "line": 28,
        "precode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" and \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_1_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" / \" + loopType.getName());"
    },
    {
        "id": 230,
        "line": 28,
        "precode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" and \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_1_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" % \" + loopType.getName());"
    },
    {
        "id": 231,
        "line": 28,
        "precode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" and \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_1_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" ^ \" + loopType.getName());"
    },
    {
        "id": 232,
        "line": 28,
        "precode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" and \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_1_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\r\ntypes[i - 1].getName() + \" | \" + loopType.getName());"
    }
]