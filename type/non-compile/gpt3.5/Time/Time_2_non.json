[
    {
        "id": 4,
        "line": 221,
        "precode": "if (compare == 0) {",
        "aftercode": "if (compare > 0) {",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java"
    },
    {
        "id": 6,
        "line": 15,
        "precode": "throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n\t\t\ttypes[i - 1].getName() + \" < \" + loopType.getName());",
        "aftercode": "throw new IllegalArgumentException(\"Types array must be in order largest-smallest or equal: \" +\n\t\t\ttypes[i - 1].getName() + \" <= \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java"
    },
    {
        "id": 8,
        "line": 19,
        "precode": "throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n\t\t\ttypes[i - 1].getName() + \" < \" + loopType.getName());",
        "aftercode": "throw new IllegalArgumentException(\"Types array must be in order largest-smallest or equal: \" +\n\t\t\ttypes[i - 1].getName() + \" <= \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java"
    },
    {
        "id": 9,
        "line": 20,
        "precode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n\t\t\t\t\t\ttypes[i - 1].getName() + \" and \" + loopType.getName());",
        "aftercode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n\t\t\t\t\t\tloopType.getName() + \" and \" + types[i - 1].getName());",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java"
    },
    {
        "id": 11,
        "line": 215,
        "precode": "DurationField loopUnitField = loopType.getDurationType().getField(iChronology);",
        "aftercode": "DurationField loopUnitField = lastUnitField.getDurationType().getField(iChronology);",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java"
    },
    {
        "id": 13,
        "line": 233,
        "precode": "DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);",
        "aftercode": "DurationField loopRangeField = lastUnitField.getRangeDurationType().getField(iChronology);",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java"
    },
    {
        "id": 15,
        "line": 31,
        "precode": "throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n\t\t\ttypes[i - 1].getName() + \" < \" + loopType.getName());",
        "aftercode": "throw new IllegalArgumentException(\"Types array must be in order largest-smallest or equal: \" +\n\t\t\ttypes[i - 1].getName() + \" <= \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java"
    },
    {
        "id": 20,
        "line": 252,
        "precode": "",
        "aftercode": "throw new IllegalArgumentException(\"This is an intentional exception for testing purposes\");",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java"
    },
    {
        "id": 213,
        "line": 30,
        "precode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n                                    types[i - 1].getName() + \" and \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalArgumentException(\"Types array must contain duplicate: \" +\n                                    types[i - 1].getName() + \" and \" + loopType.getName());"
    },
    {
        "id": 215,
        "line": 29,
        "precode": "if (loopType.getRangeDurationType() != null) {",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "if (loopType.getRangeDurationType() == null) {"
    },
    {
        "id": 222,
        "line": 439,
        "precode": "DurationField unitField = fieldType.getDurationType().getField(iChronology);",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "DurationField unitField = iChronology.getField(fieldType.getDurationType());"
    },
    {
        "id": 224,
        "line": 455,
        "precode": "break;",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "return;"
    },
    {
        "id": 225,
        "line": 20,
        "precode": "                            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n                                            types[i - 1].getName() + \" and \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "                            throw new IllegalArgumentException(\"Types array must contain duplicate: \" +\n                                            types[i - 1].getName() + \" and \" + loopType.getName());"
    },
    {
        "id": 226,
        "line": 22,
        "precode": "                            if (loopType.getRangeDurationType() == null) {",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "                            if (loopType.getRangeDurationType() != null) {"
    },
    {
        "id": 227,
        "line": 24,
        "precode": "                                throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                                        types[i - 1].getName() + \" < \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "                                throw new IllegalArgumentException(\"Types array must be in order smallest-largest: \" +\n                                        types[i - 1].getName() + \" < \" + loopType.getName());"
    },
    {
        "id": 228,
        "line": 25,
        "precode": "                                DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "                                DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(chronology);"
    },
    {
        "id": 229,
        "line": 26,
        "precode": "                                DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "                                DurationField loopRangeField = loopType.getRangeDurationType().getField(chronology);"
    },
    {
        "id": 230,
        "line": 248,
        "precode": "    iTypes = (DateTimeFieldType[]) types.clone();",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "    iTypes = (DateTimeFieldType[]) values.clone();"
    },
    {
        "id": 231,
        "line": 249,
        "precode": "    chronology.validate(this, values);",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "    chronology.validate(this, iTypes);"
    },
    {
        "id": 232,
        "line": 250,
        "precode": "    iValues = (int[]) values.clone();",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "    iValues = (int[]) types.clone();"
    },
    {
        "id": 233,
        "line": 20,
        "precode": "                            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n                                            types[i - 1].getName() + \" and \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": ""
    },
    {
        "id": 531,
        "line": 463,
        "precode": "newTypes[i] = fieldType;",
        "aftercode": "newTypes[i] = fieldType.getDurationType();",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java"
    },
    {
        "id": 535,
        "line": 467,
        "precode": "// use public constructor to ensure full validation",
        "aftercode": "Partial newPartial = new Partial(newTypes, newValues, iChronology);",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java"
    }
]