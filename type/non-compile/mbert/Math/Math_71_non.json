[
    {
        "id": 12,
        "line": 244,
        "precode": "        if (firstTime) {",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "        if (loop) {"
    },
    {
        "id": 14,
        "line": 246,
        "precode": "          if (vecAbsoluteTolerance == null) {",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "          if (vecAbsoluteTolerance=null) {"
    },
    {
        "id": 15,
        "line": 247,
        "precode": "              for (int i = 0; i < scale.length; ++i) {",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "              for (int i =1; i < scale.length; ++i) {"
    },
    {
        "id": 16,
        "line": 248,
        "precode": "                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "                scale[i]*= scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);"
    },
    {
        "id": 17,
        "line": 251,
        "precode": "              for (int i = 0; i < scale.length; ++i) {",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "              for (int i =1; i < scale.length; ++i) {"
    },
    {
        "id": 18,
        "line": 252,
        "precode": "                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "                scale[i]*= vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);"
    },
    {
        "id": 19,
        "line": 255,
        "precode": "          hNew = initializeStep(equations, forward, getOrder(), scale,",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "          hNew!= initializeStep(equations, forward, getOrder(), scale,"
    },
    {
        "id": 20,
        "line": 256,
        "precode": "                                stepStart, y, yDotK[0], yTmp, yDotK[1]);",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "          hNew = initializeStep(equations, forward, getOrder(), scale,x, y, yDotK[0], yTmp, yDotK[1]);"
    },
    {
        "id": 128,
        "line": 247,
        "precode": "              for (int i = 0; i < scale.length; ++i) {",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "              for (int i =1; i < scale.length; ++i) {"
    },
    {
        "id": 129,
        "line": 248,
        "precode": "                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "                scale[i]*= scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);"
    },
    {
        "id": 130,
        "line": 251,
        "precode": "              for (int i = 0; i < scale.length; ++i) {",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "              for (int i =1; i < scale.length; ++i) {"
    },
    {
        "id": 131,
        "line": 252,
        "precode": "                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "                scale[i]*= vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);"
    },
    {
        "id": 132,
        "line": 255,
        "precode": "          hNew = initializeStep(equations, forward, getOrder(), scale,",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "          hNew!= initializeStep(equations, forward, getOrder(), scale,"
    },
    {
        "id": 133,
        "line": 256,
        "precode": "                                stepStart, y, yDotK[0], yTmp, yDotK[1]);",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "          hNew = initializeStep(equations, forward, getOrder(), scale,x, y, yDotK[0], yTmp, yDotK[1]);"
    },
    {
        "id": 134,
        "line": 257,
        "precode": "          firstTime = false;",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "          firstTime!= false;"
    },
    {
        "id": 135,
        "line": 260,
        "precode": "        stepSize = hNew;",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "        stepSize*= hNew;"
    },
    {
        "id": 185,
        "line": 300,
        "precode": "                  interpolator.storeTime(stepStart);",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "                  interpolator.evaluate(stepStart);"
    },
    {
        "id": 186,
        "line": 301,
        "precode": "                  System.arraycopy(y, 0, yTmp, 0, y0.length);",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "                  System.copy(y, 0, yTmp, 0, y0.length);"
    },
    {
        "id": 187,
        "line": 302,
        "precode": "                  hNew     = 0;",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "                  hNewStep    = 0;"
    },
    {
        "id": 189,
        "line": 304,
        "precode": "                  loop     = false;",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "                  looped    = false;"
    },
    {
        "id": 190,
        "line": 180,
        "precode": "    return safety;",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_71_fixed/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
        "aftercode": "    return0;"
    }
]