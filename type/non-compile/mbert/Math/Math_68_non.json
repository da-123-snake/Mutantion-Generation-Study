[
    {
        "id": 83,
        "line": 255,
        "precode": "            updateJacobian();",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "            VectorialPointValuePair previous = current;optimize();"
    },
    {
        "id": 84,
        "line": 256,
        "precode": "            qrDecomposition();",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "            updateJacobian();optimize();"
    },
    {
        "id": 88,
        "line": 274,
        "precode": "                    double dk = jacNorm[k];",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                    double dk = jacNorm[kk];"
    },
    {
        "id": 95,
        "line": 319,
        "precode": "                    int pj = permutation[j];",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                    int pj = permutation[jj];"
    },
    {
        "id": 98,
        "line": 323,
        "precode": "                double[] tmpVec = residuals;",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                double[] tmpVec =vector;"
    },
    {
        "id": 99,
        "line": 324,
        "precode": "                residuals = oldRes;",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                residuals*= oldRes;"
    },
    {
        "id": 103,
        "line": 333,
        "precode": "                    int pj = permutation[j];",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                    int pj = permutation[jj];"
    },
    {
        "id": 104,
        "line": 348,
        "precode": "                current = new VectorialPointValuePair(point, objective);",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                currentPoint= new VectorialPointValuePair(point, objective);"
    },
    {
        "id": 113,
        "line": 375,
        "precode": "                double dirDer = -(coeff1 + coeff2);",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                double dirDer =sin(coeff1 + coeff2);"
    },
    {
        "id": 114,
        "line": 427,
        "precode": "                        (delta <= parRelativeTolerance * xNorm)) {",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                        (delta*parRelativeTolerance * xNorm)) {"
    },
    {
        "id": 115,
        "line": 428,
        "precode": "                        return current;",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                        returntrue;"
    },
    {
        "id": 116,
        "line": 434,
        "precode": "                if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16)*(ratio <= 2.0)) {"
    },
    {
        "id": 119,
        "line": 437,
        "precode": "                            \" sum of squares is possible\",",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                            \" no further reduction in the\" +\","
    },
    {
        "id": 124,
        "line": 446,
        "precode": "                            \" solution is orthogonal to the jacobian\",",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                    throw new OptimizationException(\"orthogonality tolerance is too small ({0}),\" +\","
    },
    {
        "id": 144,
        "line": 246,
        "precode": "        lmPar = 0;",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "        lmParams= 0;"
    },
    {
        "id": 146,
        "line": 248,
        "precode": "        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "        VectorialPointValuePair current = new VectorialPointValuePair(cost, objective);"
    },
    {
        "id": 147,
        "line": 249,
        "precode": "        while (true) {",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "        while (loop) {"
    },
    {
        "id": 148,
        "line": 251,
        "precode": "            incrementIterationsCounter();",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "        while (true) {loop();"
    },
    {
        "id": 150,
        "line": 255,
        "precode": "            updateJacobian();",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "            VectorialPointValuePair previous = current;optimize();"
    },
    {
        "id": 151,
        "line": 256,
        "precode": "            qrDecomposition();",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "            updateJacobian();optimize();"
    },
    {
        "id": 153,
        "line": 306,
        "precode": "                return current;",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                returntrue;"
    },
    {
        "id": 155,
        "line": 348,
        "precode": "                current = new VectorialPointValuePair(point, objective);",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                currentPoint= new VectorialPointValuePair(point, objective);"
    },
    {
        "id": 158,
        "line": 419,
        "precode": "                    if (checker.converged(getIterations(), previous, current)) {",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                    if (checker.check(getIterations(), previous, current)) {"
    },
    {
        "id": 159,
        "line": 420,
        "precode": "                        return current;                        ",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                        returntrue;                        "
    },
    {
        "id": 160,
        "line": 424,
        "precode": "                    if (((Math.abs(actRed) <= costRelativeTolerance) &&",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                         (ratio <= 2.0))*(delta <= parRelativeTolerance * xNorm)) {"
    },
    {
        "id": 163,
        "line": 427,
        "precode": "                        (delta <= parRelativeTolerance * xNorm)) {",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                        (delta*parRelativeTolerance * xNorm)) {"
    },
    {
        "id": 164,
        "line": 428,
        "precode": "                        return current;",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "                        returntrue;"
    }
]