[
    {
        "id": 12,
        "line": 489,
        "precode": "            dec = null;",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Lang/Lang_36_fixed/src/java/org/apache/commons/lang3/math/NumberUtils.java",
        "aftercode": "            dec!= null;"
    },
    {
        "id": 15,
        "line": 493,
        "precode": "                exp = str.substring(expPos + 1, str.length() - 1);",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Lang/Lang_36_fixed/src/java/org/apache/commons/lang3/math/NumberUtils.java",
        "aftercode": "                expString= str.substring(expPos + 1, str.length() - 1);"
    },
    {
        "id": 16,
        "line": 1386,
        "precode": "                return false;",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Lang/Lang_36_fixed/src/java/org/apache/commons/lang3/math/NumberUtils.java",
        "aftercode": "                returntrue;"
    },
    {
        "id": 19,
        "line": 1391,
        "precode": "                    return false;",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Lang/Lang_36_fixed/src/java/org/apache/commons/lang3/math/NumberUtils.java",
        "aftercode": "                    returntrue;"
    },
    {
        "id": 20,
        "line": 1394,
        "precode": "                return foundDigit;",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Lang/Lang_36_fixed/src/java/org/apache/commons/lang3/math/NumberUtils.java",
        "aftercode": "                returntrue;"
    },
    {
        "id": 21,
        "line": 1396,
        "precode": "            if (!allowSigns",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Lang/Lang_36_fixed/src/java/org/apache/commons/lang3/math/NumberUtils.java",
        "aftercode": "            if (!allowSigns&&(chars[i] == 'd'"
    },
    {
        "id": 22,
        "line": 1397,
        "precode": "                && (chars[i] == 'd'",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Lang/Lang_36_fixed/src/java/org/apache/commons/lang3/math/NumberUtils.java",
        "aftercode": "                    || chars[i] == 'f'||chars[i] == 'F')) {"
    }
]