[
    {
        "id": 62,
        "line": 1033,
        "precode": "    if (fnType.getTemplateTypeMap().getTemplateKeys().isEmpty()) {",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Closure/Closure_112_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "    if (fnType.getTemplateTypeMap().getTemplateKeys().empty()) {"
    },
    {
        "id": 63,
        "line": 1034,
        "precode": "      return Collections.emptyMap();",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Closure/Closure_112_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "      return Collections.empty();"
    },
    {
        "id": 64,
        "line": 1037,
        "precode": "    Map<TemplateType, JSType> resolvedTypes = Maps.newIdentityHashMap();",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Closure/Closure_112_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "    Map<TemplateType, JSType> resolvedTypes = Maps.create();"
    },
    {
        "id": 65,
        "line": 1039,
        "precode": "    Node callTarget = call.getFirstChild();",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Closure/Closure_112_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "    Node callTarget = call.next();"
    },
    {
        "id": 66,
        "line": 1040,
        "precode": "    if (NodeUtil.isGet(callTarget)) {",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Closure/Closure_112_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "    if (NodeUtil.empty(callTarget)) {"
    },
    {
        "id": 67,
        "line": 1041,
        "precode": "      Node obj = callTarget.getFirstChild();",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Closure/Closure_112_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "      Node obj = callTarget.next();"
    },
    {
        "id": 68,
        "line": 1052,
        "precode": "          resolvedTypes);",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Closure/Closure_112_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "          call.getChildAtIndex(1).siblings(),true);"
    },
    {
        "id": 69,
        "line": 1054,
        "precode": "    return resolvedTypes;",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Closure/Closure_112_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "    returnnull;"
    },
    {
        "id": 70,
        "line": 1061,
        "precode": "    if (paramType.isTemplateType()) {",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Closure/Closure_112_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "    if (paramType.is()) {"
    },
    {
        "id": 400,
        "line": 1192,
        "precode": "    Map<TemplateType, JSType> inferred = Maps.filterKeys(",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Closure/Closure_112_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "    Map<TemplateType, JSType> inferred = Maps.filter("
    },
    {
        "id": 401,
        "line": 1193,
        "precode": "        inferTemplateTypesFromParameters(fnType, n),",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Closure/Closure_112_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "    Map<TemplateType, JSType> inferred = Maps.filterKeys(transform(fnType, n),"
    },
    {
        "id": 470,
        "line": 1119,
        "precode": "    maybeResolveTemplateTypeFromNodes(",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Closure/Closure_112_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "      Map<TemplateType, JSType> resolvedTypes) {resolve("
    },
    {
        "id": 471,
        "line": 1120,
        "precode": "        declParams.iterator(), callParams.iterator(), resolvedTypes);",
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Closure/Closure_112_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "        declParams.Iterator(), callParams.iterator(), resolvedTypes);"
    }
]