[
    {
        "id": 53,
        "line": 591,
        "precode": "switch (modulus) {",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (modulus == 0) {"
    },
    {
        "id": 83,
        "line": 670,
        "precode": "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return AlternativeStringUtils.convertToString(encodeBase64(binaryData, false));"
    },
    {
        "id": 84,
        "line": 670,
        "precode": "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return StringUtils.newString(encodeBase64(binaryData, false));"
    },
    {
        "id": 85,
        "line": 670,
        "precode": "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return StringUtils.newStringUtf8(encodeBase64Alternative(binaryData, false));"
    },
    {
        "id": 86,
        "line": 670,
        "precode": "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return StringUtils.newStringUtf8(encodeBase64(binaryData, false), anotherParameter);"
    },
    {
        "id": 87,
        "line": 670,
        "precode": "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return SomeOtherEncodingMethod.encode(encodeBase64(binaryData, false));"
    },
    {
        "id": 88,
        "line": 670,
        "precode": "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return StringUtils.newStringUtf8(encodeBase64Undefined(binaryData));"
    },
    {
        "id": 95,
        "line": 162,
        "precode": "private final byte[] encodeTable;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "private final byte[] encodeTable = new byte[] {}; "
    },
    {
        "id": 96,
        "line": 168,
        "precode": "private final int lineLength;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "private final int lineLength = -1;"
    },
    {
        "id": 99,
        "line": 168,
        "precode": "private final int lineLength;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "private final int lineLength = 76;"
    },
    {
        "id": 100,
        "line": 162,
        "precode": "private final byte[] encodeTable;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "private final Object encodeTable;"
    },
    {
        "id": 104,
        "line": 825,
        "precode": "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, \"\");"
    }
]