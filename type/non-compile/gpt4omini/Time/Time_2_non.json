[
    {
        "id": 4,
        "line": 217,
        "precode": "int compare = lastUnitField.compareTo(loopUnitField);",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "int compare = lastUnitField.compare(loopUnitField);"
    },
    {
        "id": 12,
        "line": 238,
        "precode": "if (lastRangeField.compareTo(loopRangeField) == 0) {",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "if (lastRangeField.compare(loopRangeField) == 0) {"
    },
    {
        "id": 13,
        "line": 239,
        "precode": "throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalAccessException(\"Types array must not contain duplicate: \" +"
    },
    {
        "id": 15,
        "line": 249,
        "precode": "chronology.validate(this, values);",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "chronology.validate(values, this);"
    },
    {
        "id": 17,
        "line": 217,
        "precode": "int compare = lastUnitField.compareTo(loopUnitField);",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "int compare = lastUnitField.compare(loopUnitField);"
    },
    {
        "id": 19,
        "line": 234,
        "precode": "if (lastRangeField.compareTo(loopRangeField) < 0) {",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "if (lastRangeField.isGreaterThan(loopRangeField)) {"
    },
    {
        "id": 212,
        "line": 221,
        "precode": "if (compare == 0) {",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "if (compare != 0) {"
    },
    {
        "id": 213,
        "line": 19,
        "precode": "throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \" + loopType.getName());",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "throw new IllegalArgumentException(\"Types array must not be in order largest-smallest: \" + types[i - 1].getName() + \" > \" + loopType.getName());"
    },
    {
        "id": 216,
        "line": 452,
        "precode": "DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology).getFieldType();"
    },
    {
        "id": 218,
        "line": 448,
        "precode": "else if (compare == 0) {",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "else {"
    },
    {
        "id": 219,
        "line": 453,
        "precode": "DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology).getFieldType();"
    },
    {
        "id": 222,
        "line": 453,
        "precode": "DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);",
        "filepath": "defects4j_fixed/Time/Time_2_fixed/src/main/java/org/joda/time/Partial.java",
        "aftercode": "DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology).getFieldType();"
    }
]