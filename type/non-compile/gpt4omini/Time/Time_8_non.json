[
    {
        "id": 147,
        "line": 1171,
        "precode": "if (isFixed()) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (!isFixed()) {"
    },
    {
        "id": 148,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return true;"
    },
    {
        "id": 149,
        "line": 1175,
        "precode": "localDateTime.toDateTime(this);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "localDateTime.toDateTime(null);"
    },
    {
        "id": 150,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return true;"
    },
    {
        "id": 151,
        "line": 1177,
        "precode": "catch (IllegalInstantException ex) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "catch (Exception ex) {"
    },
    {
        "id": 152,
        "line": 1178,
        "precode": "return true;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return false;"
    },
    {
        "id": 153,
        "line": 1170,
        "precode": "public boolean isLocalDateTimeGap(LocalDateTime localDateTime) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public boolean isLocalDateTimeGap(LocalDateTime localDateTime, boolean check) {"
    },
    {
        "id": 154,
        "line": 1171,
        "precode": "if (isFixed()) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (!isFixed() && check) {"
    },
    {
        "id": 155,
        "line": 1174,
        "precode": "try {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "try { System.out.println(\"Checking gap...\");"
    },
    {
        "id": 156,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return !true;"
    },
    {
        "id": 157,
        "line": 1177,
        "precode": "catch (IllegalInstantException ex) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "catch (IllegalStateException ex) {"
    },
    {
        "id": 158,
        "line": 1178,
        "precode": "return true;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return false;"
    },
    {
        "id": 159,
        "line": 1170,
        "precode": "public boolean isLocalDateTimeGap(LocalDateTime localDateTime) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public boolean isLocalDateTimeGap(LocalDateTime localDateTime, boolean isChecking) {"
    },
    {
        "id": 160,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return isChecking;"
    },
    {
        "id": 161,
        "line": 1177,
        "precode": "catch (IllegalInstantException ex) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "catch (RuntimeException ex) {"
    },
    {
        "id": 162,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return null;"
    },
    {
        "id": 163,
        "line": 1171,
        "precode": "if (isFixed()) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (isFixed() || localDateTime == null) {"
    },
    {
        "id": 164,
        "line": 1175,
        "precode": "localDateTime.toDateTime(this);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "localDateTime.toDateTime(null);"
    },
    {
        "id": 165,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return localDateTime == null;"
    },
    {
        "id": 166,
        "line": 1174,
        "precode": "try {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (localDateTime == null) return true;"
    },
    {
        "id": 167,
        "line": 1171,
        "precode": "if (isFixed()) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (localDateTime.isBefore(LocalDateTime.now())) {"
    },
    {
        "id": 168,
        "line": 1178,
        "precode": "return true;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return false;"
    },
    {
        "id": 169,
        "line": 1171,
        "precode": "if (isFixed()) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (isFixed() && localDateTime.getYear() > 2000) {"
    },
    {
        "id": 170,
        "line": 1177,
        "precode": "catch (IllegalInstantException ex) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "catch (IllegalArgumentException ex) {"
    },
    {
        "id": 171,
        "line": 1178,
        "precode": "return true;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return false;"
    },
    {
        "id": 172,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return checkMethod(localDateTime);"
    },
    {
        "id": 173,
        "line": 1174,
        "precode": "try {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (localDateTime == null) { return false; }"
    },
    {
        "id": 174,
        "line": 1177,
        "precode": "catch (IllegalInstantException ex) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "catch (Exception ex) {"
    },
    {
        "id": 175,
        "line": 1175,
        "precode": "localDateTime.toDateTime(this);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "localDateTime.toDateTime(this, 1);"
    },
    {
        "id": 176,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return !true;"
    },
    {
        "id": 177,
        "line": 1170,
        "precode": "public boolean isLocalDateTimeGap(LocalDateTime localDateTime) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public boolean hasGapInLocalDateTime(LocalDateTime localDateTime) {"
    },
    {
        "id": 178,
        "line": 1177,
        "precode": "catch (IllegalInstantException ex) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "catch (Throwable ex) {"
    },
    {
        "id": 200,
        "line": 899,
        "precode": "the earlier instant.",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "the later instant."
    },
    {
        "id": 201,
        "line": 899,
        "precode": "to always favour",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "to sometimes favour"
    },
    {
        "id": 202,
        "line": 900,
        "precode": "standard (winter) time.",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "standard (winter) or summer time."
    },
    {
        "id": 203,
        "line": 902,
        "precode": "DST overlap behaviour",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "DST overlap consequences"
    },
    {
        "id": 204,
        "line": 902,
        "precode": "varied by hemisphere.",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "remained consistent."
    },
    {
        "id": 205,
        "line": 903,
        "precode": "DST gap behaviour was also",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "DST gap behaviour might have been"
    },
    {
        "id": 206,
        "line": 903,
        "precode": "not defined.",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "well defined."
    },
    {
        "id": 295,
        "line": 562,
        "precode": "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "nameProvider = (NameProvider) Class.forName(providerClass).getDeclaredConstructor().newInstance();"
    },
    {
        "id": 296,
        "line": 563,
        "precode": "} catch (Exception ex) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "} catch (Throwable ex) {"
    },
    {
        "id": 297,
        "line": 564,
        "precode": "Thread thread = Thread.currentThread();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "Thread thread = new Thread();"
    },
    {
        "id": 298,
        "line": 565,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().uncaughtException(Thread.currentThread(), ex);"
    },
    {
        "id": 299,
        "line": 572,
        "precode": "if (nameProvider == null) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (nameProvider != null) {"
    },
    {
        "id": 300,
        "line": 573,
        "precode": "nameProvider = new DefaultNameProvider();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "nameProvider = (NameProvider) new DefaultNameProvider();"
    },
    {
        "id": 301,
        "line": 559,
        "precode": "String providerClass = System.getProperty(\"org.joda.time.DateTimeZone.NameProvider\");",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "String providerClass = System.getenv(\"org.joda.time.DateTimeZone.NameProvider\");"
    },
    {
        "id": 302,
        "line": 562,
        "precode": "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "nameProvider = (NameProvider) Class.forName(providerClass).getMethod(\"newInstance\").invoke(null);"
    },
    {
        "id": 303,
        "line": 561,
        "precode": "try {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "try { System.out.println(\"Attempting to load provider...\");"
    },
    {
        "id": 304,
        "line": 572,
        "precode": "if (nameProvider == null) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (nameProvider != null) {"
    },
    {
        "id": 305,
        "line": 562,
        "precode": "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "nameProvider = (NameProvider) Class.forName(providerClass).getConstructor().newInstance();"
    },
    {
        "id": 306,
        "line": 557,
        "precode": "NameProvider nameProvider = null;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "NameProvider nameProvider = new DefaultNameProvider();"
    },
    {
        "id": 307,
        "line": 561,
        "precode": "try {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (false) {"
    },
    {
        "id": 308,
        "line": 559,
        "precode": "String providerClass = System.getProperty(\"org.joda.time.DateTimeZone.NameProvider\");",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "String providerClass = null;"
    },
    {
        "id": 309,
        "line": 560,
        "precode": "if (providerClass != null) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (providerClass == null) {"
    },
    {
        "id": 310,
        "line": 562,
        "precode": "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "nameProvider = (NameProvider) Class.forName(providerClass).getDeclaredConstructor().newInstance();"
    },
    {
        "id": 311,
        "line": 563,
        "precode": "catch (Exception ex) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "catch (Throwable ex) {"
    },
    {
        "id": 312,
        "line": 564,
        "precode": "Thread thread = Thread.currentThread();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "Thread thread = null;"
    },
    {
        "id": 313,
        "line": 565,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().interrupt();"
    },
    {
        "id": 314,
        "line": 572,
        "precode": "if (nameProvider == null) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (nameProvider != null) {"
    },
    {
        "id": 315,
        "line": 573,
        "precode": "nameProvider = new DefaultNameProvider();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "nameProvider = null;"
    },
    {
        "id": 316,
        "line": 576,
        "precode": "return nameProvider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return null;"
    },
    {
        "id": 317,
        "line": 577,
        "precode": "}",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "// return statement terminated"
    },
    {
        "id": 318,
        "line": 22,
        "precode": "private static synchronized String getConvertedId(String id) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "private static String getConvertedId(String id) {"
    },
    {
        "id": 319,
        "line": 24,
        "precode": "Map<String, String> map = cZoneIdConversion;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "Map<String, String> map = new HashMap<>();"
    },
    {
        "id": 320,
        "line": 26,
        "precode": "if (map == null) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (!map.isEmpty()) {"
    },
    {
        "id": 321,
        "line": 30,
        "precode": "map.put(\"GMT\", \"UTC\");",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"GMT\", \"GMT\");"
    },
    {
        "id": 322,
        "line": 31,
        "precode": "map.put(\"WET\", \"WET\");",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"WET\", \"UTC\");"
    },
    {
        "id": 323,
        "line": 34,
        "precode": "return the new style id, null if not found",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return \"not found\";"
    },
    {
        "id": 324,
        "line": 577,
        "precode": "}",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "// end of method"
    },
    {
        "id": 336,
        "line": 910,
        "precode": "final int offsetLocal = getOffset(instantLocal);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "final int offsetLocal = getStandardOffset(instantLocal);"
    },
    {
        "id": 337,
        "line": 912,
        "precode": "final long instantAdjusted = instantLocal - offsetLocal;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "final long instantAdjusted = instantLocal + offsetLocal;"
    },
    {
        "id": 338,
        "line": 913,
        "precode": "final int offsetAdjusted = getOffset(instantAdjusted);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "final int offsetAdjusted = getStandardOffset(instantAdjusted);"
    },
    {
        "id": 339,
        "line": 915,
        "precode": "if (offsetLocal != offsetAdjusted) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (offsetLocal == offsetAdjusted) {"
    },
    {
        "id": 340,
        "line": 918,
        "precode": "if ((offsetLocal - offsetAdjusted) < 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if ((offsetLocal - offsetAdjusted) > 0) {"
    },
    {
        "id": 341,
        "line": 938,
        "precode": "return offsetAdjusted;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return offsetLocal;"
    },
    {
        "id": 342,
        "line": 922,
        "precode": "long nextLocal = nextTransition(instantAdjusted);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "long nextLocal = previousTransition(instantAdjusted);"
    },
    {
        "id": 343,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev < diff) {"
    },
    {
        "id": 344,
        "line": 934,
        "precode": "return offsetPrev;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return offsetAdjusted + 100;"
    },
    {
        "id": 345,
        "line": 913,
        "precode": "final int offsetAdjusted = getOffset(instantAdjusted);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "final int offsetAdjusted = getOffset(instantLocal);"
    },
    {
        "id": 346,
        "line": 938,
        "precode": "return offsetAdjusted;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return -offsetAdjusted;"
    },
    {
        "id": 347,
        "line": 923,
        "precode": "long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "long nextAdjusted = nextTransition(instantLocal + offsetAdjusted);"
    },
    {
        "id": 348,
        "line": 913,
        "precode": "final int offsetAdjusted = getOffset(instantAdjusted);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "final int offsetAdjusted = getOffset(instantLocal + 1000);"
    },
    {
        "id": 349,
        "line": 922,
        "precode": "long nextLocal = nextTransition(instantAdjusted);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "long nextLocal = previousTransition(instantAdjusted);"
    },
    {
        "id": 350,
        "line": 924,
        "precode": "if (nextLocal != nextAdjusted) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (nextLocal == nextAdjusted) {"
    },
    {
        "id": 351,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev < diff) {"
    },
    {
        "id": 352,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev >= diff) {"
    },
    {
        "id": 353,
        "line": 934,
        "precode": "return offsetPrev;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return offsetLocal;"
    },
    {
        "id": 354,
        "line": 934,
        "precode": "return offsetPrev;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return offsetAdjusted;"
    },
    {
        "id": 355,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev < diff / 2) {"
    },
    {
        "id": 356,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev + 1 <= diff) {"
    },
    {
        "id": 357,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev != diff) {"
    },
    {
        "id": 358,
        "line": 934,
        "precode": "return offsetPrev;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return -offsetPrev;"
    },
    {
        "id": 359,
        "line": 934,
        "precode": "return offsetPrev;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return 0;"
    },
    {
        "id": 360,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (!(instantAdjusted - prev > diff)) {"
    },
    {
        "id": 361,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (diff <= instantAdjusted - prev) {"
    },
    {
        "id": 362,
        "line": 934,
        "precode": "return offsetPrev;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return offsetPrev + 1;"
    },
    {
        "id": 363,
        "line": 934,
        "precode": "return offsetPrev;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return Math.abs(offsetPrev);"
    },
    {
        "id": 364,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev == diff) {"
    },
    {
        "id": 365,
        "line": 934,
        "precode": "return offsetPrev;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return -1;"
    },
    {
        "id": 366,
        "line": 433,
        "precode": "setProvider0(provider);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "setProvider0(null);"
    },
    {
        "id": 367,
        "line": 433,
        "precode": "setProvider0(provider);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "setProvider0(provider); // commented"
    },
    {
        "id": 368,
        "line": 433,
        "precode": "setProvider0(provider);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "setProvider0(provider.clone());"
    },
    {
        "id": 369,
        "line": 433,
        "precode": "setProvider0(provider);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "setProvider0(new Provider());"
    },
    {
        "id": 370,
        "line": 433,
        "precode": "setProvider0(provider);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "setProvider0(provider == null ? new Provider() : provider);"
    },
    {
        "id": 371,
        "line": 433,
        "precode": "setProvider0(provider);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "setProvider0(provider != null ? provider : new Provider());"
    },
    {
        "id": 372,
        "line": 433,
        "precode": "setProvider0(provider);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "setProvider0(new CustomProvider(provider));"
    },
    {
        "id": 373,
        "line": 446,
        "precode": "Set<String> ids = provider.getAvailableIDs();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "Set<String> ids = provider.getAvailableIDs(); if (ids == null) ids = new HashSet<>();"
    },
    {
        "id": 374,
        "line": 447,
        "precode": "if (ids == null || ids.size() == 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (ids == null || ids.isEmpty()) {"
    },
    {
        "id": 375,
        "line": 451,
        "precode": "if (!ids.contains(\"UTC\")) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (ids.size() == 0 || !ids.contains(\"UTC\")) {"
    },
    {
        "id": 376,
        "line": 452,
        "precode": "throw new IllegalArgumentException(\"The provider doesn't support UTC\");",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new IllegalArgumentException(\"UTC is not supported by the provider\");"
    },
    {
        "id": 377,
        "line": 454,
        "precode": "if (!UTC.equals(provider.getZone(\"UTC\"))) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (UTC != provider.getZone(\"UTC\")) {"
    },
    {
        "id": 378,
        "line": 455,
        "precode": "throw new IllegalArgumentException(\"Invalid UTC zone provided\");",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new IllegalArgumentException(\"The UTC zone provided is not valid\");"
    },
    {
        "id": 379,
        "line": 457,
        "precode": "cProvider = provider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cProvider = null;"
    },
    {
        "id": 380,
        "line": 457,
        "precode": "cProvider = provider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cProvider = null;"
    },
    {
        "id": 381,
        "line": 458,
        "precode": "cAvailableIDs = ids;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cAvailableIDs = null;"
    },
    {
        "id": 382,
        "line": 457,
        "precode": "cProvider = provider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cProvider = getDefaultProvider();"
    },
    {
        "id": 383,
        "line": 458,
        "precode": "cAvailableIDs = ids;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cAvailableIDs = Collections.emptySet();"
    },
    {
        "id": 384,
        "line": 458,
        "precode": "cAvailableIDs = ids;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cAvailableIDs = new HashSet<>(ids);"
    },
    {
        "id": 385,
        "line": 457,
        "precode": "cProvider = provider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cProvider = provider == null ? getDefaultProvider() : provider;"
    },
    {
        "id": 386,
        "line": 457,
        "precode": "cProvider = provider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cProvider = ids.contains(\"UTC\") ? provider : null;"
    },
    {
        "id": 387,
        "line": 458,
        "precode": "cAvailableIDs = ids;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cAvailableIDs = new TreeSet<>(ids);"
    },
    {
        "id": 388,
        "line": 457,
        "precode": "cProvider = provider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cProvider = UTC.equals(provider.getZone(\"UTC\")) ? provider : null;"
    },
    {
        "id": 389,
        "line": 458,
        "precode": "cAvailableIDs = ids;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cAvailableIDs = new LinkedHashSet<>(ids);"
    },
    {
        "id": 390,
        "line": 458,
        "precode": "cAvailableIDs = ids;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cAvailableIDs = Collections.unmodifiableSet(ids);"
    },
    {
        "id": 391,
        "line": 457,
        "precode": "cProvider = provider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cProvider = UTC.equals(provider.getZone(\"UTC\")) ? provider : getDefaultProvider();"
    },
    {
        "id": 392,
        "line": 458,
        "precode": "cAvailableIDs = ids;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cAvailableIDs = new HashSet<>(Arrays.asList(\"UTC\"));"
    },
    {
        "id": 393,
        "line": 457,
        "precode": "cProvider = provider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cProvider = ids.isEmpty() ? null : provider;"
    },
    {
        "id": 394,
        "line": 478,
        "precode": "provider = (Provider) Class.forName(providerClass).newInstance();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "provider = (Provider) Class.forName(providerClass).getConstructor().newInstance();"
    },
    {
        "id": 395,
        "line": 478,
        "precode": "provider = (Provider) Class.forName(providerClass).newInstance();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "provider = (Provider) Class.forName(providerClass).cast(new Object());"
    },
    {
        "id": 396,
        "line": 478,
        "precode": "provider = (Provider) Class.forName(providerClass).newInstance();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "provider = (Provider) Class.forName(providerClass).getDeclaredConstructor().newInstance();"
    },
    {
        "id": 397,
        "line": 491,
        "precode": "} catch (Exception ex) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "} catch (Throwable ex) {"
    },
    {
        "id": 398,
        "line": 492,
        "precode": "Thread thread = Thread.currentThread();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "Thread thread = new Thread();"
    },
    {
        "id": 399,
        "line": 493,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().uncaughtException(Thread.currentThread(), ex);"
    },
    {
        "id": 400,
        "line": 498,
        "precode": "provider = new UTCProvider();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "provider = new UTCProvider(1);"
    },
    {
        "id": 401,
        "line": 529,
        "precode": "if (sm != null) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (sm == null) {"
    },
    {
        "id": 402,
        "line": 15,
        "precode": "securityManager.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProvider\"));",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "securityManager.checkPermission(new JodaTimePermission(\"DateTimeZone.getNameProvider\"));"
    },
    {
        "id": 403,
        "line": 532,
        "precode": "setNameProvider0(nameProvider);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "setNameProvider0(null);"
    },
    {
        "id": 404,
        "line": 528,
        "precode": "SecurityManager sm = System.getSecurityManager();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "SecurityManager sm = null;"
    },
    {
        "id": 405,
        "line": 530,
        "precode": "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProvider\"));",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.invalidPermission\"));"
    },
    {
        "id": 406,
        "line": 530,
        "precode": "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProvider\"));",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setProvider\"));"
    },
    {
        "id": 407,
        "line": 532,
        "precode": "setNameProvider0(nameProvider);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "setNameProvider0(new DefaultNameProvider());"
    },
    {
        "id": 408,
        "line": 542,
        "precode": "if (nameProvider == null) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (nameProvider != null) {"
    },
    {
        "id": 409,
        "line": 543,
        "precode": "nameProvider = getDefaultNameProvider();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "nameProvider = null;"
    },
    {
        "id": 410,
        "line": 545,
        "precode": "cNameProvider = nameProvider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cNameProvider = getDefaultNameProvider();"
    },
    {
        "id": 411,
        "line": 543,
        "precode": "nameProvider = getDefaultNameProvider();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "nameProvider = someOtherProvider();"
    },
    {
        "id": 412,
        "line": 545,
        "precode": "cNameProvider = nameProvider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cNameProvider = null;"
    },
    {
        "id": 413,
        "line": 542,
        "precode": "if (nameProvider == null) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (nameProvider == getDefaultNameProvider()) {"
    },
    {
        "id": 414,
        "line": 543,
        "precode": "nameProvider = getDefaultNameProvider();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "nameProvider = nullProviderMethod();"
    },
    {
        "id": 415,
        "line": 72,
        "precode": "either Standard Time or Daylight Saving Time depending on the time of year",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "either Standard Time or Daylight Saving Time regardless of the time of year"
    },
    {
        "id": 416,
        "line": 73,
        "precode": "and whether the location uses Daylight Saving Time.",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "or whether the location observes Daylight Saving Time."
    },
    {
        "id": 417,
        "line": 76,
        "precode": "Unlike the Java TimeZone class, DateTimeZone is immutable.",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "In contrast to the Java TimeZone class, DateTimeZone is changeable."
    },
    {
        "id": 418,
        "line": 199,
        "precode": "It also only supports long format time zone ids.",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "It primarily supports only long format time zone ids."
    },
    {
        "id": 419,
        "line": 77,
        "precode": "Thus EST and ECT are not accepted.",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "Therefore EST and ECT are not permitted."
    },
    {
        "id": 420,
        "line": 72,
        "precode": "depending on the time of year",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "according to the season"
    },
    {
        "id": 601,
        "line": 276,
        "precode": "if (hoursOffset < -23 || hoursOffset > 23) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset <= -23 || hoursOffset > 23) {"
    },
    {
        "id": 602,
        "line": 279,
        "precode": "if (minutesOffset < -59 || minutesOffset > 59) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (minutesOffset <= -59 || minutesOffset > 59) {"
    },
    {
        "id": 603,
        "line": 282,
        "precode": "if (hoursOffset > 0 && minutesOffset < 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset >= 0 && minutesOffset < 0) {"
    },
    {
        "id": 604,
        "line": 285,
        "precode": "int offset = 0;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int offset = -1;"
    },
    {
        "id": 605,
        "line": 286,
        "precode": "try {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "try { // Attempt to calculate offset"
    },
    {
        "id": 606,
        "line": 288,
        "precode": "if (hoursInMinutes < 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursInMinutes <= 0) {"
    },
    {
        "id": 607,
        "line": 289,
        "precode": "minutesOffset = hoursInMinutes - Math.abs(minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = hoursInMinutes + Math.abs(minutesOffset);"
    },
    {
        "id": 608,
        "line": 293,
        "precode": "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_SECOND);"
    },
    {
        "id": 609,
        "line": 295,
        "precode": "throw new IllegalArgumentException(\"Offset is too large\");",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new IllegalArgumentException(\"Offset exceeds maximum\");"
    },
    {
        "id": 610,
        "line": 276,
        "precode": "if (hoursOffset < -23 || hoursOffset > 23) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset < -22 || hoursOffset >= 24) {"
    },
    {
        "id": 611,
        "line": 279,
        "precode": "if (minutesOffset < -59 || minutesOffset > 59) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (minutesOffset <= -60 || minutesOffset > 60) {"
    },
    {
        "id": 612,
        "line": 291,
        "precode": "minutesOffset = hoursInMinutes + minutesOffset;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = hoursInMinutes - minutesOffset;"
    },
    {
        "id": 613,
        "line": 293,
        "precode": "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "offset = FieldUtils.safeAdd(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);"
    },
    {
        "id": 614,
        "line": 279,
        "precode": "if (minutesOffset < -59 || minutesOffset > 59) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (minutesOffset < -58 || minutesOffset > 60) {"
    },
    {
        "id": 615,
        "line": 282,
        "precode": "if (hoursOffset > 0 && minutesOffset < 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset >= 0 && minutesOffset < 0) {"
    },
    {
        "id": 616,
        "line": 293,
        "precode": "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "offset = FieldUtils.safeMultiply(Math.abs(minutesOffset), DateTimeConstants.MILLIS_PER_MINUTE);"
    },
    {
        "id": 617,
        "line": 276,
        "precode": "if (hoursOffset < -23 || hoursOffset > 23) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset < -24 || hoursOffset > 22) {"
    },
    {
        "id": 618,
        "line": 2,
        "precode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 1, 0);"
    },
    {
        "id": 619,
        "line": 3,
        "precode": "private static final int MAX_MILLIS = (86400 * 1000) - 1;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "private static final int MAX_MILLIS = 86400 * 1000;"
    },
    {
        "id": 620,
        "line": 4,
        "precode": "private static Provider cProvider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "private static Provider cProvider = null;"
    },
    {
        "id": 621,
        "line": 2,
        "precode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 1000);"
    },
    {
        "id": 622,
        "line": 3,
        "precode": "private static final int MAX_MILLIS = (86400 * 1000) - 1;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "private static final int MAX_MILLIS = (86400 * 500) - 1;"
    },
    {
        "id": 623,
        "line": 4,
        "precode": "private static Provider cProvider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "private static Provider cProvider = new Provider();"
    },
    {
        "id": 624,
        "line": 2,
        "precode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"Coordinated Universal Time\", 0, 0);"
    },
    {
        "id": 625,
        "line": 273,
        "precode": "if (hoursOffset == 0 && minutesOffset == 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset != 0 || minutesOffset == 0) {"
    },
    {
        "id": 626,
        "line": 279,
        "precode": "if (minutesOffset < -59 || minutesOffset > 59) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (minutesOffset <= -59 || minutesOffset >= 59) {"
    },
    {
        "id": 627,
        "line": 280,
        "precode": "throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new IllegalArgumentException(\"Invalid minutes: \" + minutesOffset);"
    },
    {
        "id": 628,
        "line": 282,
        "precode": "if (hoursOffset > 0 && minutesOffset < 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset >= 0 && minutesOffset < 0) {"
    },
    {
        "id": 629,
        "line": 288,
        "precode": "if (hoursInMinutes < 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursInMinutes <= 0) {"
    },
    {
        "id": 630,
        "line": 297,
        "precode": "return forOffsetMillis(offset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return forOffsetMillis(Math.abs(offset));"
    },
    {
        "id": 631,
        "line": 276,
        "precode": "if (hoursOffset < -23 || hoursOffset > 23) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset <= -23 || hoursOffset >= 23) {"
    },
    {
        "id": 632,
        "line": 274,
        "precode": "return DateTimeZone.UTC;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return new DateTimeZone(0);"
    },
    {
        "id": 633,
        "line": 12,
        "precode": "this method assumes 60 minutes in an hour, and standard length minutes.",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "this method assumes 60 minutes in an hour, and may not account for leap seconds."
    },
    {
        "id": 634,
        "line": 283,
        "precode": "throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new IllegalArgumentException(\"Invalid minute configuration for positive hours: \" + minutesOffset);"
    },
    {
        "id": 635,
        "line": 285,
        "precode": "int offset = 0;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int offset = -1;"
    },
    {
        "id": 636,
        "line": 276,
        "precode": "if (hoursOffset < -23 || hoursOffset > 23) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset <= -24 || hoursOffset >= 24) {"
    },
    {
        "id": 637,
        "line": 279,
        "precode": "if (minutesOffset < -59 || minutesOffset > 59) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (minutesOffset < -60 || minutesOffset > 60) {"
    },
    {
        "id": 638,
        "line": 289,
        "precode": "minutesOffset = hoursInMinutes - Math.abs(minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = hoursInMinutes + Math.abs(minutesOffset);"
    },
    {
        "id": 639,
        "line": 295,
        "precode": "throw new IllegalArgumentException(\"Offset is too large\");",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new RuntimeException(\"Offset exceeds limits\");"
    },
    {
        "id": 640,
        "line": 280,
        "precode": "IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "IllegalArgumentException(\"Minutes not valid: \" + minutesOffset);"
    },
    {
        "id": 641,
        "line": 288,
        "precode": "if (hoursInMinutes < 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursInMinutes > 0) {"
    },
    {
        "id": 642,
        "line": 297,
        "precode": "return forOffsetMillis(offset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return forOffsetMillis(offset * 2);"
    },
    {
        "id": 643,
        "line": 272,
        "precode": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws Exception {"
    },
    {
        "id": 644,
        "line": 283,
        "precode": "throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new IllegalArgumentException(\"Negative minutes are not allowed when hours are positive: \" + minutesOffset);"
    },
    {
        "id": 645,
        "line": 283,
        "precode": "throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new IllegalArgumentException(\"Hours must be positive if minutes are negative: \" + minutesOffset);"
    },
    {
        "id": 646,
        "line": 283,
        "precode": "throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new IllegalArgumentException(\"Positive hour offsets cannot have negative minute offsets: \" + minutesOffset);"
    },
    {
        "id": 647,
        "line": 282,
        "precode": "if (hoursOffset > 0 && minutesOffset < 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset >= 0 && minutesOffset < 0) {"
    },
    {
        "id": 648,
        "line": 285,
        "precode": "int offset = 0;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int offset = -1;"
    },
    {
        "id": 649,
        "line": 286,
        "precode": "try {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "try { // Attempting to calculate total offset"
    },
    {
        "id": 650,
        "line": 291,
        "precode": "minutesOffset = hoursInMinutes + minutesOffset;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = hoursInMinutes * 2 + minutesOffset;"
    },
    {
        "id": 651,
        "line": 295,
        "precode": "throw new IllegalArgumentException(\"Offset is too large\");",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new IllegalArgumentException(\"Offset exceeds maximum limit\");"
    },
    {
        "id": 652,
        "line": 287,
        "precode": "int hoursInMinutes = hoursOffset * 60;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int hoursInMinutes = hoursOffset * 61; // Introduced incorrect multiplication"
    }
]