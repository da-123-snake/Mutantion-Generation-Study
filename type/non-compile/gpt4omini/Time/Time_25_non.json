[
    {
        "id": 150,
        "line": 20,
        "precode": "public abstract long previousTransition(long instant);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public abstract long previousTransition(long value);"
    },
    {
        "id": 151,
        "line": 24,
        "precode": "no changes occur before the given instant.",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "no changes occur after the given instant."
    },
    {
        "id": 152,
        "line": 27,
        "precode": "returns milliseconds from 1970-01-01T00:00:00Z",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "returns seconds from 1970-01-01T00:00:00Z"
    },
    {
        "id": 153,
        "line": 34,
        "precode": "return java.util.TimeZone.getTimeZone(iID);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return java.util.TimeZone.getTimeZone(iName);"
    },
    {
        "id": 154,
        "line": 34,
        "precode": "java.util.TimeZone.getTimeZone(iID);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "java.util.TimeZone.getTimeZone(iID.toUpperCase());"
    },
    {
        "id": 155,
        "line": 1171,
        "precode": "public abstract long nextTransition(long instant);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public abstract long nextTransition(long instant, boolean isForward);"
    },
    {
        "id": 156,
        "line": 20,
        "precode": "public abstract long previousTransition(long instant);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public abstract long previousTransition(long instant, boolean isBackward);"
    },
    {
        "id": 160,
        "line": 34,
        "precode": "return java.util.TimeZone.getTimeZone(iID);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return java.util.TimeZone.getTimeZone(iID + \"_UTC\");"
    },
    {
        "id": 161,
        "line": 34,
        "precode": "return java.util.TimeZone.getTimeZone(iID);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return java.util.TimeZone.getTimeZone(iID.replace(\"GMT\", \"UTC\"));"
    },
    {
        "id": 162,
        "line": 1171,
        "precode": "public abstract long nextTransition(long instant);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public abstract long nextTransition(long instant, int offset);"
    },
    {
        "id": 163,
        "line": 20,
        "precode": "public abstract long previousTransition(long instant);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public abstract long previousTransition(long instant, int offset);"
    },
    {
        "id": 164,
        "line": 1171,
        "precode": "public abstract long nextTransition(long instant);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public abstract long nextTransition(long instant) throws Exception;"
    },
    {
        "id": 165,
        "line": 20,
        "precode": "public abstract long previousTransition(long instant);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public abstract long previousTransition(long instant) throws Exception;"
    },
    {
        "id": 167,
        "line": 20,
        "precode": "public abstract long previousTransition(long instant);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public abstract long previousTransition(long instant) throws IllegalArgumentException;"
    },
    {
        "id": 168,
        "line": 27,
        "precode": "returns milliseconds from 1970-01-01T00:00:00Z",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "returns milliseconds since 1970-01-01T00:00:00Z, adjusted to UTC"
    },
    {
        "id": 169,
        "line": 1171,
        "precode": "public abstract long nextTransition(long instant);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public abstract long nextTransition(long instant) final;"
    },
    {
        "id": 170,
        "line": 20,
        "precode": "public abstract long previousTransition(long instant);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public abstract long previousTransition(long instant) final;"
    },
    {
        "id": 171,
        "line": 34,
        "precode": "return java.util.TimeZone.getTimeZone(iID);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return java.util.TimeZone.getTimeZone(iID + \"_OFFSET\");"
    },
    {
        "id": 172,
        "line": 34,
        "precode": "return java.util.TimeZone.getTimeZone(iID);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return java.util.TimeZone.getTimeZone(iID.replace(\"UTC\", \"GMT\"));"
    },
    {
        "id": 173,
        "line": 27,
        "precode": "returns milliseconds from 1970-01-01T00:00:00Z",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "returns milliseconds from 1970-01-01T00:00:00Z, excluding leap seconds"
    },
    {
        "id": 174,
        "line": 1171,
        "precode": "public abstract long nextTransition(long instant);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public long nextTransition(long instant);"
    },
    {
        "id": 175,
        "line": 20,
        "precode": "public abstract long previousTransition(long instant);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public long previousTransition(long instant);"
    },
    {
        "id": 176,
        "line": 34,
        "precode": "return java.util.TimeZone.getTimeZone(iID);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return null; // Testing purpose"
    },
    {
        "id": 206,
        "line": 899,
        "precode": "else if (offsetLocal > 0) {",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "else if (offsetLocal >= 0) {"
    },
    {
        "id": 359,
        "line": 951,
        "precode": "long instantUTC = instantLocal - offsetOriginal;",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "long instantUTC = instantLocal * 2 - offsetOriginal;"
    },
    {
        "id": 360,
        "line": 953,
        "precode": "if (offsetLocalFromOriginal == offsetOriginal) {",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (offsetLocalFromOriginal < offsetOriginal) {"
    },
    {
        "id": 366,
        "line": 415,
        "precode": "if (provider == null) {",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (provider != null) {"
    },
    {
        "id": 367,
        "line": 419,
        "precode": "if (ids == null || ids.size() == 0) {",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (ids == null && ids.size() == 0) {"
    },
    {
        "id": 368,
        "line": 423,
        "precode": "if (!ids.contains(\"UTC\")) {",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (ids.contains(\"UTC\")) {"
    },
    {
        "id": 369,
        "line": 426,
        "precode": "if (!UTC.equals(provider.getZone(\"UTC\"))) {",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (UTC.equals(provider.getZone(\"UTC\"))) {"
    },
    {
        "id": 371,
        "line": 416,
        "precode": "provider = getDefaultProvider();",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "provider = null;"
    },
    {
        "id": 372,
        "line": 427,
        "precode": "throw new IllegalArgumentException(\"Invalid UTC zone provided\");",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new IllegalStateException(\"Invalid UTC zone provided\");"
    },
    {
        "id": 387,
        "line": 470,
        "precode": "provider = new UTCProvider();",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "provider = new UTCProvider(\"default\");"
    },
    {
        "id": 388,
        "line": 461,
        "precode": "try {",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "finally {"
    },
    {
        "id": 389,
        "line": 443,
        "precode": "Provider provider = null;",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "Provider provider = new NoProvider();"
    },
    {
        "id": 390,
        "line": 463,
        "precode": "catch (Exception ex) {",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "catch (Throwable ex) {"
    },
    {
        "id": 391,
        "line": 469,
        "precode": "if (provider == null) {",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (!isProviderAvailable()) {"
    },
    {
        "id": 392,
        "line": 473,
        "precode": "return provider;",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return provider != null ? provider : fallbackProvider();"
    },
    {
        "id": 396,
        "line": 465,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().handleUnexpectedException(thread, ex);"
    },
    {
        "id": 398,
        "line": 470,
        "precode": "provider = new UTCProvider();",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "provider = new DateTimeZoneProvider();"
    },
    {
        "id": 400,
        "line": 33,
        "precode": "The name provider is a pluggable instance factory that supplies the names of each DateTimeZone.",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "The name provider is a fixed instance factory that supplies the names of every DateTimeZone."
    },
    {
        "id": 405,
        "line": 545,
        "precode": "nameProvider = new DefaultNameProvider();",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "nameProvider = new CustomNameProvider();"
    },
    {
        "id": 410,
        "line": 537,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().uncaughtException(ex, thread);"
    },
    {
        "id": 411,
        "line": 537,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().uncaughtException(ex, this);"
    },
    {
        "id": 591,
        "line": 28,
        "precode": "Gets a time zone instance for a JDK TimeZone.",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "Gets a time zone instance for a custom TimeZone."
    },
    {
        "id": 592,
        "line": 30,
        "precode": "DateTimeZone only accepts a subset of the IDs from TimeZone.",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "DateTimeZone accepts all IDs from TimeZone."
    },
    {
        "id": 593,
        "line": 33,
        "precode": "This method will attempt to convert between time zones created using the",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "This method will avoid converting between time zones created using the"
    },
    {
        "id": 596,
        "line": 40,
        "precode": "return DateTimeZone object for the offset",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return TimeZone object for the offset"
    },
    {
        "id": 599,
        "line": 1,
        "precode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 1, 0);"
    },
    {
        "id": 600,
        "line": 1,
        "precode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 60);"
    },
    {
        "id": 604,
        "line": 3,
        "precode": "/** The instance that is providing time zone names. */",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "/** The instance that is configuring time zone names. */"
    },
    {
        "id": 605,
        "line": 3,
        "precode": "/** The instance that is providing time zone names. */",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "/** The instance that is managing time zone names. */"
    },
    {
        "id": 620,
        "line": 262,
        "precode": "int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",
        "filepath": "defects4j_fixed/Time/Time_25_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int hoursInMinutes = FieldUtils.safeDivide(hoursOffset, 60);"
    }
]