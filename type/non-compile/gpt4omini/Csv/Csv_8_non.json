[
    {
        "id": 25,
        "line": 216,
        "precode": ".withIgnoreSurroundingSpaces(true);",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": ".withTrimSpaces(true);"
    },
    {
        "id": 27,
        "line": 216,
        "precode": ".withIgnoreSurroundingSpaces(true);",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": ""
    },
    {
        "id": 28,
        "line": 216,
        "precode": ".withIgnoreSurroundingSpaces(true);",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": ".withIgnoreSurroundingSpaces(1);"
    },
    {
        "id": 29,
        "line": 216,
        "precode": ".withIgnoreSurroundingSpaces(true);",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": ".withIgnoreSurroundingSpaces(0);"
    },
    {
        "id": 30,
        "line": 216,
        "precode": ".withIgnoreSurroundingSpaces(true);",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": ".withIgnoreSurroundingSpaces(true).withOtherParameter(5);"
    },
    {
        "id": 31,
        "line": 316,
        "precode": "Set<String> dupCheck = new HashSet<String>();",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "Set<String> dupCheck = new TreeSet<String>();"
    },
    {
        "id": 35,
        "line": 316,
        "precode": "Set<String> dupCheck = new HashSet<String>();",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "List<String> dupCheck = new ArrayList<String>();"
    },
    {
        "id": 40,
        "line": 155,
        "precode": "private final boolean ignoreEmptyLines;",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "private final boolean ignoreEmptyLines = false;"
    },
    {
        "id": 44,
        "line": 145,
        "precode": "public final class CSVFormat implements Serializable {",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public abstract class CSVFormat implements Serializable {"
    },
    {
        "id": 46,
        "line": 149,
        "precode": "private final char delimiter;",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "private final char delimiter = ',';"
    },
    {
        "id": 128,
        "line": 316,
        "precode": "Set<String> dupCheck = new HashSet<String>();",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "Set<String> dupCheck = new TreeSet<String>();"
    },
    {
        "id": 129,
        "line": 317,
        "precode": "for(String hdr : header) {",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "for(int i = 0; i < header.length; i++) {"
    },
    {
        "id": 134,
        "line": 317,
        "precode": "for(String hdr : header) {",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "for(String hdr : new HashSet<>(Arrays.asList(header))) {"
    },
    {
        "id": 137,
        "line": 316,
        "precode": "Set<String> dupCheck = new HashSet<String>();",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "List<String> dupCheck = new ArrayList<>();"
    }
]