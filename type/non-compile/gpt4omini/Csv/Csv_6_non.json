[
    {
        "id": 66,
        "line": 107,
        "precode": "throw new IllegalArgumentException(String.format(",
        "filepath": "defects4j_fixed/Csv/Csv_6_fixed/src/main/java/org/apache/commons/csv/CSVRecord.java",
        "aftercode": "throw new IllegalArgumentException("
    },
    {
        "id": 67,
        "line": 23,
        "precode": "index for header '%s' is %d but CSVRecord only has %d values!\"",
        "filepath": "defects4j_fixed/Csv/Csv_6_fixed/src/main/java/org/apache/commons/csv/CSVRecord.java",
        "aftercode": "index for header '%s' not found!\""
    },
    {
        "id": 71,
        "line": 107,
        "precode": "throw new IllegalArgumentException(String.format(",
        "filepath": "defects4j_fixed/Csv/Csv_6_fixed/src/main/java/org/apache/commons/csv/CSVRecord.java",
        "aftercode": "throw new IndexOutOfBoundsException("
    },
    {
        "id": 73,
        "line": 96,
        "precode": "throw new IllegalStateException(",
        "filepath": "defects4j_fixed/Csv/Csv_6_fixed/src/main/java/org/apache/commons/csv/CSVRecord.java",
        "aftercode": "return null;"
    },
    {
        "id": 74,
        "line": 106,
        "precode": "catch (final ArrayIndexOutOfBoundsException e) {",
        "filepath": "defects4j_fixed/Csv/Csv_6_fixed/src/main/java/org/apache/commons/csv/CSVRecord.java",
        "aftercode": "catch (final Exception e) {"
    },
    {
        "id": 109,
        "line": 180,
        "precode": "for (final Entry<String, Integer> entry : mapping.entrySet()) {",
        "filepath": "defects4j_fixed/Csv/Csv_6_fixed/src/main/java/org/apache/commons/csv/CSVRecord.java",
        "aftercode": "for (final Entry<String, Integer> entry : mapping.entrySet().stream().filter(e -> e.getValue() > 0).collect(Collectors.toList())) {"
    }
]