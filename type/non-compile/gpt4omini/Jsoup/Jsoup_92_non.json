[
    {
        "id": 1310,
        "line": 316,
        "precode": "html(sb, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "html(sb, (new Document(\"\")).outputSettings().escapeMode(EscapeMode.base)); // altered escape mode in output settings"
    },
    {
        "id": 1311,
        "line": 316,
        "precode": "html(sb, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "html(sb, Document.createShell(\"\")); // using createShell instead of new Document"
    },
    {
        "id": 1312,
        "line": 316,
        "precode": "html(sb, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "html(sb, (new Document(\"\"\").outputSettings()).setForceAllElementAsBlock(true)); // changed document to force all elements as block"
    },
    {
        "id": 1866,
        "line": 3,
        "precode": "import org.jsoup.SerializationException;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "import org.jsoup.UnsupportedMimeTypeException;"
    },
    {
        "id": 1867,
        "line": 4,
        "precode": "import org.jsoup.helper.Validate;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "import org.jsoup.util.ValidationHelper;"
    },
    {
        "id": 1868,
        "line": 5,
        "precode": "import org.jsoup.internal.StringUtil;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "import org.jsoup.internal.StringManipulator;"
    },
    {
        "id": 1869,
        "line": 6,
        "precode": "import org.jsoup.parser.ParseSettings;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "import org.jsoup.parser.SettingsParser;"
    },
    {
        "id": 1870,
        "line": 8,
        "precode": "import java.io.IOException;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "import java.io.FileNotFoundException;"
    },
    {
        "id": 1871,
        "line": 9,
        "precode": "import java.util.AbstractMap;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "import java.util.HashMap;"
    },
    {
        "id": 1872,
        "line": 10,
        "precode": "import java.util.AbstractSet;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "import java.util.LinkedHashSet;"
    },
    {
        "id": 1885,
        "line": 2,
        "precode": "return size == 0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "return size != 0;"
    },
    {
        "id": 1886,
        "line": 2,
        "precode": "return size == 0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "return true;"
    },
    {
        "id": 1887,
        "line": 2,
        "precode": "return size == 0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "return size > 0;"
    },
    {
        "id": 1888,
        "line": 2,
        "precode": "return size == 0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "return size < 0;"
    },
    {
        "id": 1889,
        "line": 2,
        "precode": "return size == 0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "return size == 1;"
    },
    {
        "id": 1890,
        "line": 2,
        "precode": "return size == 0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "return size == -1;"
    },
    {
        "id": 1891,
        "line": 2,
        "precode": "return size == 0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "return size != 1;"
    },
    {
        "id": 1892,
        "line": 2,
        "precode": "return size == 0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "return true; // a constant true value"
    },
    {
        "id": 1893,
        "line": 2,
        "precode": "return size == 0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "return false;"
    },
    {
        "id": 1908,
        "line": 407,
        "precode": "OUTER: for (int i = 0; i < keys.length; i++) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "for (int i = 0; i <= keys.length - 1; i++) {"
    },
    {
        "id": 1913,
        "line": 413,
        "precode": "remove(j);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "attributes.remove(j);"
    },
    {
        "id": 1942,
        "line": 112,
        "precode": "return i == NotFound ? EmptyString : checkNotNull(vals[i]);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_92_fixed/src/main/java/org/jsoup/nodes/Attributes.java",
        "aftercode": "return i == NotFound ? EmptyString : Objects.requireNonNull(vals[i]);"
    }
]