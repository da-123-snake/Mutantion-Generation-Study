[
    {
        "id": 154,
        "line": 435,
        "precode": "childNodes.clear();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "childNodes.removeAll();"
    },
    {
        "id": 155,
        "line": 435,
        "precode": "childNodes.clear();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "childNodes = new ArrayList<>();"
    },
    {
        "id": 157,
        "line": 434,
        "precode": "public Element empty() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public void empty() {"
    },
    {
        "id": 159,
        "line": 436,
        "precode": "return this;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return new Element();"
    },
    {
        "id": 160,
        "line": 434,
        "precode": "public Element empty() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Element clear() {"
    },
    {
        "id": 163,
        "line": 434,
        "precode": "public Element empty() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Element flush() {"
    },
    {
        "id": 164,
        "line": 435,
        "precode": "childNodes.clear();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "childNodes.clearCollection();"
    },
    {
        "id": 165,
        "line": 436,
        "precode": "return this;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return this.element;"
    },
    {
        "id": 167,
        "line": 436,
        "precode": "return this;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return (Element) super.empty();"
    },
    {
        "id": 172,
        "line": 461,
        "precode": "for (Element el: elements)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "for (Element el: elements) { if (el != this) siblings.add(el); }"
    },
    {
        "id": 175,
        "line": 464,
        "precode": "return siblings;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return elements;"
    },
    {
        "id": 177,
        "line": 459,
        "precode": "List<Element> elements = parent().children();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "List<Element> elements = parent().childElements();"
    },
    {
        "id": 185,
        "line": 446,
        "precode": "public Element wrap(String html) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Element wrap(String html, String extra) {"
    },
    {
        "id": 187,
        "line": 435,
        "precode": "childNodes.clear();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "childNodes.removeAll();"
    },
    {
        "id": 190,
        "line": 446,
        "precode": "public Element wrap(String html) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Element wrap(String html) throws Exception {"
    },
    {
        "id": 193,
        "line": 446,
        "precode": "public Element wrap(String html) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Element wrap(String html, boolean ignoreWhitespace) {"
    },
    {
        "id": 196,
        "line": 12,
        "precode": "public Elements siblingElements() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "protected Elements siblingElements() {"
    },
    {
        "id": 197,
        "line": 13,
        "precode": "if the element has no sibling elements, returns an empty list.",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "if the element has no siblings, returns a new instance of Elements."
    },
    {
        "id": 199,
        "line": 478,
        "precode": "Integer index = indexInList(this, siblings);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Integer index = indexInList(siblings, this);"
    },
    {
        "id": 200,
        "line": 479,
        "precode": "Validate.notNull(index);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Validate.isNull(index);"
    },
    {
        "id": 203,
        "line": 8,
        "precode": "else return null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "else return siblings.get(siblings.size() - 1);"
    },
    {
        "id": 204,
        "line": 477,
        "precode": "List<Element> siblings = parent().children();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "List<Element> siblings = parent().childNodes();"
    },
    {
        "id": 208,
        "line": 24,
        "precode": "public class Element extends Node {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public class Element inherits Node {"
    },
    {
        "id": 209,
        "line": 25,
        "precode": "private Tag tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "private Tag elementTag;"
    },
    {
        "id": 210,
        "line": 26,
        "precode": "private Set<String> classNames;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "private List<String> classNames;"
    },
    {
        "id": 214,
        "line": 23,
        "precode": " *",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": " * A representation of an HTML element."
    },
    {
        "id": 339,
        "line": 267,
        "precode": "addChildren(child);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "addChildren(child); addChildren(new Node());"
    },
    {
        "id": 340,
        "line": 268,
        "precode": "return this;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return super.toString();"
    },
    {
        "id": 341,
        "line": 267,
        "precode": "addChildren(child);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "addChildren(child.getChild());"
    },
    {
        "id": 342,
        "line": 278,
        "precode": "Validate.notNull(child);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Validate.isNull(child);"
    },
    {
        "id": 346,
        "line": 277,
        "precode": "public Element prependChild(Node child) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Element appendChild(Node child) {"
    },
    {
        "id": 350,
        "line": 315,
        "precode": "appendChild(child);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "insertChild(getChildCount(), child);"
    },
    {
        "id": 353,
        "line": 315,
        "precode": "appendChild(child);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "replaceChild(child, getChild(0));"
    },
    {
        "id": 354,
        "line": 314,
        "precode": "Element child = new Element(Tag.valueOf(tagName), baseUri());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Element child = new Element(Tag.valueOf(tagName + 'Modified'), baseUri());"
    },
    {
        "id": 355,
        "line": 315,
        "precode": "appendChild(child);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "addChildAt(0, child);"
    },
    {
        "id": 356,
        "line": 25,
        "precode": "private Tag tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "private Object tag;"
    },
    {
        "id": 357,
        "line": 26,
        "precode": "private Set<String> classNames;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "private List<String> classNames;"
    },
    {
        "id": 358,
        "line": 6,
        "precode": "Create a new, standalone Element. (Standalone in that is has no parent.)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Create a new, standalone Element. (Standalone in that it has no parent.)"
    },
    {
        "id": 359,
        "line": 25,
        "precode": "private Tag tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "private Tag[] tag;"
    },
    {
        "id": 360,
        "line": 26,
        "precode": "private Set<String> classNames;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "private Set<String> classNames = new HashSet<>();"
    },
    {
        "id": 361,
        "line": 6,
        "precode": "classNames = new HashSet<>();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "classNames = null;"
    },
    {
        "id": 362,
        "line": 26,
        "precode": "Set<String> classNames;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Set<Object> classNames;"
    },
    {
        "id": 364,
        "line": 79,
        "precode": "        tag = Tag.valueOf(tagName);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "        tag = Tag.fromString(tagName);"
    },
    {
        "id": 365,
        "line": 79,
        "precode": "        tag = Tag.valueOf(tagName);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "        tag = Tag.get(tagName);"
    },
    {
        "id": 366,
        "line": 78,
        "precode": "        Validate.notEmpty(tagName, \"Tag name must not be empty.\");",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "        Validate.isNotBlank(tagName, \"Tag name must not be blank.\");"
    },
    {
        "id": 370,
        "line": 79,
        "precode": "        tag = Tag.valueOf(tagName);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "        tag = Tag.getTag(tagName);"
    },
    {
        "id": 371,
        "line": 78,
        "precode": "        Validate.notEmpty(tagName, \"Tag name must not be empty.\");",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "        Validate.notBlank(tagName, \"Tag name cannot be blank.\");"
    },
    {
        "id": 372,
        "line": 80,
        "precode": "        return this;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "        return new Element();"
    },
    {
        "id": 373,
        "line": 79,
        "precode": "        tag = Tag.valueOf(tagName);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "        tag = Tag.forName(tagName);"
    },
    {
        "id": 377,
        "line": 230,
        "precode": "for (Node node : childNodes) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "for (Node node : new ArrayList<>(childNodes)) {"
    },
    {
        "id": 382,
        "line": 255,
        "precode": "return Selector.select(cssQuery, this);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return Selector.select(cssQuery, null);"
    },
    {
        "id": 384,
        "line": 255,
        "precode": "return Selector.select(cssQuery, this);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return this; // just returning this"
    },
    {
        "id": 387,
        "line": 254,
        "precode": "public Elements select(String cssQuery) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public void select(String cssQuery) { // changed return type"
    },
    {
        "id": 396,
        "line": 26,
        "precode": "private Set<String> classNames;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "private List<String> classNames;"
    },
    {
        "id": 397,
        "line": 25,
        "precode": "private Tag tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "private Tag tag = new Tag();"
    },
    {
        "id": 398,
        "line": 26,
        "precode": "private Set<String> classNames;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "private Set<String> classNames = new HashSet<>();"
    },
    {
        "id": 401,
        "line": 25,
        "precode": "private Tag tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "private Object tag;"
    },
    {
        "id": 410,
        "line": 156,
        "precode": "Element parent = el.parent();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Element parent = el.child();"
    },
    {
        "id": 415,
        "line": 156,
        "precode": "Element parent = el.parent();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Element parent = el.previousSibling();"
    },
    {
        "id": 419,
        "line": 156,
        "precode": "Element parent = el.parent();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Element parent = el.closest(\"*=\");"
    },
    {
        "id": 423,
        "line": 156,
        "precode": "Element parent = el.parent();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Element parent = el.firstChild();"
    },
    {
        "id": 430,
        "line": 232,
        "precode": "dataNodes.add((DataNode) node);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "dataNodes.add((DataNode) this);"
    },
    {
        "id": 431,
        "line": 230,
        "precode": "for (Node node : childNodes)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "for (Node node : new ArrayList<>(childNodes))"
    },
    {
        "id": 446,
        "line": 294,
        "precode": "public Element insertChildren(int index, Collection<? extends Node> children) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Element insertChildren(int index, Node... children) {"
    },
    {
        "id": 454,
        "line": 294,
        "precode": "public Element insertChildren(int index, Collection<? extends Node> children) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public void insertChildren(int index, Collection<? extends Node> children) {"
    },
    {
        "id": 459,
        "line": 300,
        "precode": "ArrayList<Node> nodes = new ArrayList<Node>(children);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "ArrayList<Node> nodes = new ArrayList<>();"
    },
    {
        "id": 469,
        "line": 392,
        "precode": "public Element before(String html) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public void before(String html) {"
    },
    {
        "id": 472,
        "line": 392,
        "precode": "public Element before(String html) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Element before(String html, String extra) {"
    },
    {
        "id": 474,
        "line": 393,
        "precode": "return (Element) super.before(html);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return (Element) super.before(null);"
    },
    {
        "id": 475,
        "line": 392,
        "precode": "public Element before(String html) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Element before(String html, boolean someFlag) {"
    },
    {
        "id": 552,
        "line": 1137,
        "precode": "Element clone = (Element) super.clone();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Element clone = new Element();"
    },
    {
        "id": 553,
        "line": 1138,
        "precode": "clone.classNames = null; // derived on first hit, otherwise gets a pointer to source classnames",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "clone.classNames = new ArrayList<>(); // derived on first hit, otherwise gets a pointer to source classnames"
    },
    {
        "id": 556,
        "line": 1138,
        "precode": "clone.classNames = null; // derived on first hit, otherwise gets a pointer to source classnames",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "clone.classNames = new HashSet<>(); // derived on first hit, otherwise gets a pointer to source classnames"
    },
    {
        "id": 618,
        "line": 1102,
        "precode": "for (Node node : childNodes)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "for (Node node : childNodes) { if(node != null)"
    },
    {
        "id": 620,
        "line": 1098,
        "precode": "return accum.toString().trim();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return accum.toString().replaceAll(\"\\s+\", \" \");"
    },
    {
        "id": 621,
        "line": 1102,
        "precode": "for (Node node : childNodes)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "for (Node node : childNodes) { if(node != null) {"
    },
    {
        "id": 655,
        "line": 7,
        "precode": "else return null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "else return new Element();"
    },
    {
        "id": 657,
        "line": 7,
        "precode": "else return null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "else throw new NoSuchElementException(\"Element not found\");"
    },
    {
        "id": 952,
        "line": 1102,
        "precode": "for (Node node : childNodes)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "for (int i = 0; i < childNodes.size(); i++)"
    },
    {
        "id": 1010,
        "line": 89,
        "precode": "return tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return new Tag();"
    },
    {
        "id": 1011,
        "line": 89,
        "precode": "return tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return tag == null ? Tag.DEFAULT : tag;"
    },
    {
        "id": 1012,
        "line": 89,
        "precode": "return tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return (tag == null) ? new Tag() : tag;"
    },
    {
        "id": 1013,
        "line": 89,
        "precode": "return tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return tag.clone();"
    },
    {
        "id": 1014,
        "line": 89,
        "precode": "return tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return (tag != null) ? tag : Tag.INSTANCE;"
    },
    {
        "id": 1015,
        "line": 89,
        "precode": "return tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return tag.toString();"
    },
    {
        "id": 1084,
        "line": 10,
        "precode": "accum.append(\"<\").append(tagName());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "accum.append(\"<\").append(tagName()).append(\" attr='value'\");"
    },
    {
        "id": 1086,
        "line": 13,
        "precode": "else accum.append(\">\");",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "else accum.append(\">\").append(\"<inner>\");"
    },
    {
        "id": 1090,
        "line": 2,
        "precode": "StringBuilder accum = new StringBuilder();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "StringBuilder accum = new StringBuilder(256);"
    },
    {
        "id": 1091,
        "line": 5,
        "precode": "html(accum);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "html(accum.reverse());"
    },
    {
        "id": 1092,
        "line": 6,
        "precode": "return accum.toString().trim();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return accum.toString().replaceAll(\"\\s+\", \" \").trim();"
    },
    {
        "id": 1203,
        "line": 137,
        "precode": "return attributes.dataset();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return new HashMap<>();"
    },
    {
        "id": 1204,
        "line": 137,
        "precode": "return attributes.dataset();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return attributes.getDataset();"
    },
    {
        "id": 1206,
        "line": 142,
        "precode": "return (Element) parentNode;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return (Element) parentNode.getParent();"
    },
    {
        "id": 1208,
        "line": 137,
        "precode": "return attributes.dataset();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return attributes.getDataset();"
    },
    {
        "id": 1209,
        "line": 141,
        "precode": "public final Element parent() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "protected final Element parent() {"
    },
    {
        "id": 1210,
        "line": 137,
        "precode": "return attributes.dataset();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return attributes.dataset().clone();"
    },
    {
        "id": 1214,
        "line": 314,
        "precode": "Element child = new Element(Tag.valueOf(tagName), baseUri());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Element child = new Element(Tag.valueOf(tagName + '_child'), baseUri());"
    },
    {
        "id": 1216,
        "line": 316,
        "precode": "return child;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return new Element(Tag.valueOf('default'), baseUri());"
    },
    {
        "id": 1226,
        "line": 340,
        "precode": "appendChild(node);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "insertChildAtStart(node);"
    },
    {
        "id": 1231,
        "line": 341,
        "precode": "return this;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return super.getParent();"
    },
    {
        "id": 1233,
        "line": 352,
        "precode": "prependChild(node);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "insertChild(node);"
    },
    {
        "id": 1235,
        "line": 353,
        "precode": "return this;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return new Element();"
    },
    {
        "id": 1238,
        "line": 353,
        "precode": "return this;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return super.toString();"
    },
    {
        "id": 1239,
        "line": 377,
        "precode": "Validate.notNull(html);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Validate.isNull(html);"
    },
    {
        "id": 1254,
        "line": 478,
        "precode": "Integer index = indexInList(this, siblings);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Integer index = indexInList(siblings, this);"
    },
    {
        "id": 1256,
        "line": 7,
        "precode": "if (siblings.size() > index + 1)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "if (index + 1 < siblings.size())"
    },
    {
        "id": 1257,
        "line": 8,
        "precode": "return siblings.get(index + 1);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return index + 2 <= siblings.size() ? siblings.get(index + 1) : null;"
    },
    {
        "id": 1258,
        "line": 9,
        "precode": "else return null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "else return siblings.get(siblings.size() - 1);"
    },
    {
        "id": 1259,
        "line": 476,
        "precode": "if (parentNode == null) return null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "if (parentNode == null) return new Element();"
    },
    {
        "id": 1270,
        "line": 8,
        "precode": "else return null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "else return new Element();"
    },
    {
        "id": 1271,
        "line": 567,
        "precode": "Validate.notEmpty(id);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Validate.isEmpty(id);"
    },
    {
        "id": 1275,
        "line": 7,
        "precode": "Elements can have multiple classes (e.g. {@code <div class=\"header round first\">}. This method checks each class, so you can find the above with {@code el.getElementsByClass(\"header\");}.",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Elements can have multiple classes (e.g. {@code <div class=\"header round first\">}. This method checks only the first class, so you can find the above with {@code el.getElementsByClass(\"header\");}."
    },
    {
        "id": 1276,
        "line": 8,
        "precode": "Elements can have multiple classes (e.g. {@code <div class=\"header round first\">}. This method checks each class, so you can find the above with {@code el.getElementsByClass(\"header\");}.",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Elements may have multiple classes (e.g. {@code <div class=\"header round first\">}. This method checks each class, so you can find the above with {@code el.getElementsByClass(\"header\");}."
    },
    {
        "id": 1281,
        "line": 11,
        "precode": "Elements can have multiple classes (e.g. {@code <div class=\"header round first\">}. This method checks each class, so you can find the above with {@code el.getElementsByClass(\"header\");}.",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Elements can have multiple classes (e.g. {@code <div class=\"header round first\">}. This method checks each class, so you should search for it as {@code el.getElementsByClass(\"header round\");}."
    },
    {
        "id": 1289,
        "line": 648,
        "precode": "public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Elements getElementsByAttributeValueStarting(String key, String valueSuffix) {"
    },
    {
        "id": 1297,
        "line": 692,
        "precode": "Pattern pattern;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Matcher matcher;"
    },
    {
        "id": 1299,
        "line": 695,
        "precode": "catch (PatternSyntaxException e) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "catch (Exception e) {"
    },
    {
        "id": 1327,
        "line": 353,
        "precode": "return this;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return new Element();"
    },
    {
        "id": 1329,
        "line": 365,
        "precode": "List<Node> nodes = Parser.parseFragment(html, this, baseUri());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "List<Node> nodes = Parser.parseFragment(html, this, alternativeBaseUri());"
    },
    {
        "id": 1335,
        "line": 2,
        "precode": "public Element before(Node node) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Element before(Object node) {"
    },
    {
        "id": 1336,
        "line": 3,
        "precode": "return (Element) super.before(node);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return (Element) super.next(node);"
    },
    {
        "id": 1337,
        "line": 3,
        "precode": "return (Element) super.before(node);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return super.before(node);"
    },
    {
        "id": 1338,
        "line": 2,
        "precode": "public Element before(Node node) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "protected Element before(Node node) {"
    },
    {
        "id": 1339,
        "line": 2,
        "precode": "public Element before(Node node) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public void before(Node node) {"
    },
    {
        "id": 1340,
        "line": 3,
        "precode": "return (Element) super.before(node);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return super.before(node);"
    },
    {
        "id": 1341,
        "line": 2,
        "precode": "public Element before(Node node) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Element before(Node node, boolean flag) {"
    },
    {
        "id": 1342,
        "line": 3,
        "precode": "return (Element) super.before(node);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return (Element) super.insertBefore(node);"
    },
    {
        "id": 1343,
        "line": 3,
        "precode": "return (Element) super.before(node);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return (Element) super.before(null);"
    },
    {
        "id": 1344,
        "line": 3,
        "precode": "return (Element) super.before(node);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return null;"
    },
    {
        "id": 1345,
        "line": 2,
        "precode": "public Element before(Node node) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public abstract Element before(Node node) {"
    },
    {
        "id": 1362,
        "line": 573,
        "precode": "return null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return new Element();"
    },
    {
        "id": 1366,
        "line": 571,
        "precode": "return elements.get(0);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return (elements.size() > 0) ? elements.get(0) : new Element();"
    },
    {
        "id": 1367,
        "line": 600,
        "precode": "Validate.notEmpty(key);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Validate.isEmpty(key);"
    },
    {
        "id": 1400,
        "line": 698,
        "precode": "return getElementsByAttributeValueMatching(key, pattern);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return getElementsByAttributeValueMatching(key, null);"
    },
    {
        "id": 1403,
        "line": 707,
        "precode": "return Collector.collect(new Evaluator.IndexLessThan(index), this);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return Collector.collect(new Evaluator.IndexEqualTo(index), this);"
    },
    {
        "id": 1404,
        "line": 707,
        "precode": "return Collector.collect(new Evaluator.IndexLessThan(index), this);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return Collector.collect(new Evaluator.IndexLessThanOrEqualTo(index), this);"
    },
    {
        "id": 1405,
        "line": 707,
        "precode": "return Collector.collect(new Evaluator.IndexLessThan(index), this);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return Collector.collect(new Evaluator.IndexNotEqualTo(index), this);"
    },
    {
        "id": 1410,
        "line": 716,
        "precode": "return Collector.collect(new Evaluator.IndexGreaterThan(index), this);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return Collector.collect(new Evaluator.IndexGreaterThanOrEqualTo(index), this);"
    },
    {
        "id": 1411,
        "line": 716,
        "precode": "return Collector.collect(new Evaluator.IndexGreaterThan(index), this);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return Collector.collect(new Evaluator.IndexNotEqualTo(index), this);"
    },
    {
        "id": 1412,
        "line": 2,
        "precode": "public Elements getElementsByIndexEquals(int index) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Elements getElementsByIndexGreaterThanOrEqual(int index) {"
    },
    {
        "id": 1413,
        "line": 716,
        "precode": "return Collector.collect(new Evaluator.IndexGreaterThan(index), this);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return Collector.collect(new Evaluator.IndexNotGreaterThan(index), this);"
    },
    {
        "id": 1414,
        "line": 2,
        "precode": "public Elements getElementsByIndexEquals(int index) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Elements findElementsByIndex(int index) {"
    },
    {
        "id": 1416,
        "line": 724,
        "precode": "public Elements getElementsByIndexEquals(int index) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Elements getElementsByIndexEquals(int idx) {"
    },
    {
        "id": 1418,
        "line": 724,
        "precode": "public Elements getElementsByIndexEquals(int index) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Elements getElementsByIndexEquals(int index) { if (index < 0) return null; }"
    },
    {
        "id": 1422,
        "line": 725,
        "precode": "return Collector.collect(new Evaluator.IndexEquals(index), this);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return this; // Changed return type"
    },
    {
        "id": 1423,
        "line": 746,
        "precode": "public Elements getElementsContainingOwnText(String searchText) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Elements getElementsContainingOwnText(String searchTerm) {"
    },
    {
        "id": 1432,
        "line": 773,
        "precode": "return getElementsMatchingText(pattern);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "return getElementsMatchingText(pattern.matcher(\"\"));"
    },
    {
        "id": 1435,
        "line": 770,
        "precode": "catch (PatternSyntaxException e) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "catch (Exception e) {"
    },
    {
        "id": 1436,
        "line": 768,
        "precode": "try {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "try\ntest {"
    },
    {
        "id": 1442,
        "line": 766,
        "precode": "public Elements getElementsMatchingText(String regex) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public void getElementsMatchingText(String regex) {"
    },
    {
        "id": 1450,
        "line": 898,
        "precode": "empty();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "full();"
    },
    {
        "id": 1455,
        "line": 898,
        "precode": "empty();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "clear();"
    },
    {
        "id": 1459,
        "line": 910,
        "precode": "for (Node child: childNodes) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "for (Node child: childNodes) { if (child == null) continue; }"
    },
    {
        "id": 1463,
        "line": 909,
        "precode": "public boolean hasText() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public static boolean hasText() {"
    },
    {
        "id": 1472,
        "line": 1004,
        "precode": "classNames(classes);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "classNames(new HashSet<>(classes));"
    },
    {
        "id": 1473,
        "line": 1004,
        "precode": "classNames(classes);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "classNames(new LinkedHashSet<>(classes));"
    },
    {
        "id": 1474,
        "line": 1004,
        "precode": "classNames(classes);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "classNames(new TreeSet<>(classes));"
    },
    {
        "id": 1475,
        "line": 1004,
        "precode": "classNames(classes);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "classNames(new ArrayList<>(classes));"
    },
    {
        "id": 1476,
        "line": 1004,
        "precode": "classNames(classes);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "classNames(classes.isEmpty() ? new HashSet<>() : classes);"
    },
    {
        "id": 1477,
        "line": 1004,
        "precode": "classNames(classes);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "classNames(classes.stream().distinct().collect(Collectors.toSet()));"
    },
    {
        "id": 1479,
        "line": 1017,
        "precode": "Set<String> classes = classNames();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "List<String> classes = classNames();"
    },
    {
        "id": 1480,
        "line": 1018,
        "precode": "classes.remove(className);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "classes.removeIf(c -> c.equals(className));"
    },
    {
        "id": 1481,
        "line": 1019,
        "precode": "classNames(classes);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "classNames(new HashSet<>(classes));"
    },
    {
        "id": 1483,
        "line": 1017,
        "precode": "Set<String> classes = classNames();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "Set<String> classes = new HashSet<>(classNames());"
    },
    {
        "id": 1488,
        "line": 8,
        "precode": "accum.append(\"<\").append(tagName());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "accum.append(\"<\").append(tagName()).append(\" class='mutant'\");"
    },
    {
        "id": 1490,
        "line": 1081,
        "precode": "if (!(childNodes.isEmpty() && tag.isSelfClosing()))",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "if (!(childNodes.size() == 0 && tag.isSelfClosing()))"
    },
    {
        "id": 1492,
        "line": 3,
        "precode": "import org.jsoup.helper.StringUtil;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "import org.jsoup.helper.StringUtils;"
    },
    {
        "id": 1493,
        "line": 4,
        "precode": "import org.jsoup.helper.Validate;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "import org.jsoup.helper.Verifier;"
    },
    {
        "id": 1494,
        "line": 5,
        "precode": "import org.jsoup.parser.Parser;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "import org.jsoup.parser.Parsers;"
    },
    {
        "id": 1495,
        "line": 6,
        "precode": "import org.jsoup.parser.Tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "import org.jsoup.parser.Tags;"
    },
    {
        "id": 1496,
        "line": 7,
        "precode": "import org.jsoup.select.Collector;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "import org.jsoup.select.Collectors;"
    },
    {
        "id": 1497,
        "line": 8,
        "precode": "import org.jsoup.select.Elements;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "import org.jsoup.select.ElementArray;"
    },
    {
        "id": 1498,
        "line": 9,
        "precode": "import org.jsoup.select.Evaluator;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "import org.jsoup.select.Evaluators;"
    },
    {
        "id": 1503,
        "line": 5,
        "precode": " * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": " * A HTML element primarily consists of a tag name, attributes, and child nodes (including text nodes and"
    },
    {
        "id": 1507,
        "line": 26,
        "precode": "private Set<String> classNames;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "private List<String> classNames;"
    },
    {
        "id": 1509,
        "line": 26,
        "precode": "private Set<String> classNames;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "private Set<String> classNames = new HashSet<>();"
    },
    {
        "id": 1510,
        "line": 25,
        "precode": "private Tag tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "private Object tag;"
    },
    {
        "id": 1511,
        "line": 25,
        "precode": "private Tag tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "private Tag tag = new Tag();"
    },
    {
        "id": 1516,
        "line": 37,
        "precode": "public Element(Tag tag, String baseUri, Attributes attributes) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Element(Tag tag, Attributes attributes) {"
    },
    {
        "id": 1517,
        "line": 37,
        "precode": "public Element(Tag tag, String baseUri, Attributes attributes) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "public Element(String baseUri, Tag tag, Attributes attributes) {"
    },
    {
        "id": 1518,
        "line": 41,
        "precode": "this.tag = tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_32_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "aftercode": "this.tag = attributes.getValue(\"tag\");"
    }
]