[
    {
        "id": 3,
        "line": 144,
        "precode": "List<Node> toMove = new ArrayList<Node>();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "List<Node> toMove = new LinkedList<Node>();"
    },
    {
        "id": 4,
        "line": 125,
        "precode": "TextNode tn = (TextNode) node;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "TextNode tn = (TextNode) node.clone();"
    },
    {
        "id": 5,
        "line": 123,
        "precode": "for (Node node: element.childNodes) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "for (int i = 0; i < element.childNodes.size(); i++) {"
    },
    {
        "id": 7,
        "line": 125,
        "precode": "TextNode tn = (TextNode) node;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "TextNode tn = (TextNode) node; tn.setText(tn.getText().toUpperCase());"
    },
    {
        "id": 247,
        "line": 3,
        "precode": "import org.jsoup.helper.Validate;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "import org.jsoup.helper.Validation;"
    },
    {
        "id": 248,
        "line": 4,
        "precode": "import org.jsoup.parser.Tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "import org.jsoup.parser.Tags;"
    },
    {
        "id": 249,
        "line": 5,
        "precode": "import org.jsoup.select.Elements;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "import org.jsoup.select.ElementSelector;"
    },
    {
        "id": 250,
        "line": 7,
        "precode": "import java.nio.charset.Charset;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "import java.nio.charset.StandardCharsets;"
    },
    {
        "id": 251,
        "line": 8,
        "precode": "import java.nio.charset.CharsetEncoder;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "import java.nio.charset.CharsetDecoder;"
    },
    {
        "id": 252,
        "line": 9,
        "precode": "import java.util.ArrayList;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "import java.util.LinkedList;"
    },
    {
        "id": 696,
        "line": 4,
        "precode": "import org.jsoup.parser.Tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "import org.jsoup.parser.Element;"
    },
    {
        "id": 697,
        "line": 7,
        "precode": "import java.nio.charset.Charset;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "import java.nio.charset.StandardCharsets;"
    },
    {
        "id": 698,
        "line": 8,
        "precode": "import java.nio.charset.CharsetEncoder;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "import java.nio.charset.CharsetDecoder;"
    },
    {
        "id": 699,
        "line": 5,
        "precode": "import org.jsoup.select.Elements;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "import org.jsoup.select.NodeVisitor;"
    },
    {
        "id": 700,
        "line": 3,
        "precode": "import org.jsoup.helper.Validate;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "import org.jsoup.helper.StringUtil;"
    },
    {
        "id": 701,
        "line": 4,
        "precode": "import org.jsoup.parser.Tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "import org.jsoup.parser.Node;"
    },
    {
        "id": 702,
        "line": 7,
        "precode": "import java.nio.charset.Charset;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "import java.nio.charset.CharsetProvider;"
    },
    {
        "id": 714,
        "line": 147,
        "precode": "for (Node node : dupe.childNodes)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "for (Node node : dupe.childNodes.toArray())"
    },
    {
        "id": 716,
        "line": 157,
        "precode": "htmlEl.appendChild(master); // includes remove()",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "htmlEl.insertChild(master, 0); // includes remove()"
    },
    {
        "id": 717,
        "line": 140,
        "precode": "private void normaliseStructure(String tag, Element htmlEl) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "private void normaliseStructure(String tag, Element htmlEl, boolean performCheck) {"
    },
    {
        "id": 721,
        "line": 157,
        "precode": "htmlEl.appendChild(master); // includes remove()",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "htmlEl.addChild(master); // includes remove()"
    },
    {
        "id": 722,
        "line": 144,
        "precode": "List<Node> toMove = new ArrayList<Node>();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "List<Node> toMove = new LinkedList<Node>();"
    },
    {
        "id": 723,
        "line": 152,
        "precode": "for (Node dupe : toMove)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "for (Node dupe : new ArrayList<>(toMove))"
    },
    {
        "id": 725,
        "line": 143,
        "precode": "elements.size() > 1",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "elements.size() > 0"
    },
    {
        "id": 726,
        "line": 149,
        "precode": "dupe.remove();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "dupe.detach();"
    },
    {
        "id": 728,
        "line": 141,
        "precode": "Elements elements = this.getElementsByTag(tag);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "Elements elements = this.getElementsByTag(tag).clone();"
    },
    {
        "id": 730,
        "line": 156,
        "precode": "if (!master.parent().equals(htmlEl)) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (!master.parent() == htmlEl) {"
    },
    {
        "id": 731,
        "line": 147,
        "precode": "for (Node node : dupe.childNodes)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "for (Node node : dupe.childNodes.reversed())"
    },
    {
        "id": 732,
        "line": 149,
        "precode": "dupe.remove();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "dupe.clear();"
    },
    {
        "id": 733,
        "line": 152,
        "precode": "for (Node dupe : toMove)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "for (Node dupe : new HashSet<>(toMove))"
    },
    {
        "id": 734,
        "line": 153,
        "precode": "master.appendChild(dupe);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "master.insertChild(dupe, 0);"
    }
]