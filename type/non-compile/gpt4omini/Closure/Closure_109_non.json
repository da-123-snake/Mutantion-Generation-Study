[
    {
        "id": 143,
        "line": 1911,
        "precode": "return parseBasicTypeExpression(token);",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "return newNode(Token.RC);"
    },
    {
        "id": 148,
        "line": 1911,
        "precode": "return parseBasicTypeExpression(token);",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "return parseBasicTypeExpression(token).clone();"
    },
    {
        "id": 461,
        "line": 2404,
        "precode": "return null;",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "return new Node();"
    },
    {
        "id": 463,
        "line": 2404,
        "precode": "return null;",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "return new Node(Type.UNKNOWN);"
    },
    {
        "id": 464,
        "line": 2394,
        "precode": "Node templateNode = IR.script();",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "Node templateNode = IR.function();"
    },
    {
        "id": 465,
        "line": 2403,
        "precode": "parser.addTypeWarning(warning, stream.getLineno(), stream.getCharno());",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "parser.addWarning(warning + \" detected\", stream.getLineno(), stream.getCharno());"
    },
    {
        "id": 466,
        "line": 2399,
        "precode": "return templateNode;",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "return new Node(Type.TEMPLATE_NODE);"
    },
    {
        "id": 467,
        "line": 2394,
        "precode": "Node templateNode = IR.script();",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "Node templateNode = Node.newEmpty();"
    },
    {
        "id": 795,
        "line": 1382,
        "precode": "case RC:",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "case RC: return \"}\";"
    },
    {
        "id": 796,
        "line": 1385,
        "precode": "case RP:",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "case RP: return \"(\";"
    },
    {
        "id": 797,
        "line": 1382,
        "precode": "case RC:",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "case RC: return \"(}\";"
    },
    {
        "id": 798,
        "line": 1385,
        "precode": "case RP:",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "case RP: return \"]\";"
    },
    {
        "id": 799,
        "line": 1382,
        "precode": "case RC:",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "case RC: return \")}\";"
    },
    {
        "id": 800,
        "line": 1385,
        "precode": "case RP:",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "case RP: return \"}\";"
    },
    {
        "id": 801,
        "line": 1385,
        "precode": "case RP:",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "case RP: return \";\";"
    },
    {
        "id": 805,
        "line": 1398,
        "precode": "return stream.getString();",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "return stream.getInt();"
    },
    {
        "id": 809,
        "line": 1398,
        "precode": "return stream.getString();",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "return stream.getChar();"
    },
    {
        "id": 813,
        "line": 1398,
        "precode": "return stream.getString();",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "return stream.getDouble();"
    },
    {
        "id": 817,
        "line": 1398,
        "precode": "return stream.getString();",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "return stream.getFloat();"
    },
    {
        "id": 825,
        "line": 1419,
        "precode": "private static class ExtractionInfo {",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "private static class InfoExtraction {"
    },
    {
        "id": 826,
        "line": 1423,
        "precode": "public ExtractionInfo(String string, JsDocToken token) {",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "public ExtractionInfo(JsDocToken token, String string) {"
    },
    {
        "id": 1402,
        "line": 20,
        "precode": "// The current implementation tries to maintain backwards",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "// The current implementation attempts to maintain backwards"
    },
    {
        "id": 1405,
        "line": 20,
        "precode": "// The current implementation tries to maintain backwards",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "// This implementation aims to keep backwards"
    },
    {
        "id": 1411,
        "line": 1763,
        "precode": "else if (match(JsDocToken.EQUALS)) {",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "else if (match(JsDocToken.COLON)) {"
    },
    {
        "id": 1414,
        "line": 1766,
        "precode": "typeNode = wrapNode(Token.EQUALS, typeNode);",
        "filepath": "defects4j_fixed/Closure/Closure_109_fixed/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "aftercode": "typeNode = wrapNode(Token.GREATERTHAN, typeNode);"
    }
]