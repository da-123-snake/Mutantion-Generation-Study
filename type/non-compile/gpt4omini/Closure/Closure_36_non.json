[
    {
        "id": 318,
        "line": 301,
        "precode": "!maybeModifiedArguments &&",
        "filepath": "defects4j_fixed/Closure/Closure_36_fixed/src/com/google/javascript/jscomp/InlineVariables.java",
        "aftercode": "!maybeModifiedArguments ||"
    },
    {
        "id": 321,
        "line": 303,
        "precode": "referenceInfo.isAssignedOnceInLifetime()) {",
        "filepath": "defects4j_fixed/Closure/Closure_36_fixed/src/com/google/javascript/jscomp/InlineVariables.java",
        "aftercode": "referenceInfo.isAssignedTwiceInLifetime()) {"
    },
    {
        "id": 326,
        "line": 311,
        "precode": "Reference aliasInit;",
        "filepath": "defects4j_fixed/Closure/Closure_36_fixed/src/com/google/javascript/jscomp/InlineVariables.java",
        "aftercode": "Container aliasInit;"
    },
    {
        "id": 327,
        "line": 312,
        "precode": "aliasInit = candidate.refInfo.getInitializingReference();",
        "filepath": "defects4j_fixed/Closure/Closure_36_fixed/src/com/google/javascript/jscomp/InlineVariables.java",
        "aftercode": "aliasInit = candidate.refInfo.getDeclaringReference();"
    },
    {
        "id": 329,
        "line": 313,
        "precode": "Node value = aliasInit.getAssignedValue();",
        "filepath": "defects4j_fixed/Closure/Closure_36_fixed/src/com/google/javascript/jscomp/InlineVariables.java",
        "aftercode": "Node value = aliasInit.getReassignedValue();"
    },
    {
        "id": 847,
        "line": 575,
        "precode": "if (convention.getSingletonGetterClassName(callNode) != null) {",
        "filepath": "defects4j_fixed/Closure/Closure_36_fixed/src/com/google/javascript/jscomp/InlineVariables.java",
        "aftercode": "if (convention.getSingletonGetterClassName(callNode) != undefined) {"
    },
    {
        "id": 848,
        "line": 575,
        "precode": "if (convention.getSingletonGetterClassName(callNode) != null) {",
        "filepath": "defects4j_fixed/Closure/Closure_36_fixed/src/com/google/javascript/jscomp/InlineVariables.java",
        "aftercode": "if (convention.getSingletonGetterClassName(callNode) != System.class) {"
    }
]