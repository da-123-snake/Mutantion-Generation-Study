[
    {
        "id": 761,
        "line": 166,
        "precode": "inlinedNewDependencies.add(t.getScope().getVar(c.varName));",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "inlinedNewDependencies.add(t.getScope().getVar(c.varName + '_inline'));"
    },
    {
        "id": 773,
        "line": 16,
        "precode": "if (var != null && var.getParentNode().isCatch()) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (var == null || var.getParentNode().isCatch()) {"
    },
    {
        "id": 775,
        "line": 417,
        "precode": "}",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "break;"
    },
    {
        "id": 777,
        "line": 375,
        "precode": "case Token.NAME:",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "case Token.BOOLEAN:"
    },
    {
        "id": 778,
        "line": 16,
        "precode": "if (var != null && var.getParentNode().isCatch()) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (var != null && var.getParentNode().isFinally()) {"
    },
    {
        "id": 779,
        "line": 416,
        "precode": "return true;",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "return var != null;"
    },
    {
        "id": 780,
        "line": 417,
        "precode": "}",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "continue;"
    },
    {
        "id": 785,
        "line": 154,
        "precode": "for (Candidate c : candidates) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "for (Candidate c : candidates) { if (true) {"
    },
    {
        "id": 793,
        "line": 86,
        "precode": "private static final Predicate<Node> SIDE_EFFECT_PREDICATE =",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "private static final Predicate<Node> SIDE_EFFECT_PREDICATE = null;"
    },
    {
        "id": 794,
        "line": 77,
        "precode": "private final Set<Var> inlinedNewDependencies = Sets.newHashSet();",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "private final Set<Var> inlinedNewDependencies = Sets.newConcurrentHashMap();"
    },
    {
        "id": 797,
        "line": 403,
        "precode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Edge>"
    },
    {
        "id": 799,
        "line": 403,
        "precode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Node>"
    },
    {
        "id": 800,
        "line": 405,
        "precode": "cfg.getDirectedGraphNode(getDefCfgNode()),",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "cfg.getDirectedGraphNode(getDefCfgNode(), true),"
    },
    {
        "id": 801,
        "line": 406,
        "precode": "cfg.getDirectedGraphNode(useCfgNode),",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "cfg.getDirectedGraphNode(useCfgNode, true),"
    },
    {
        "id": 802,
        "line": 139,
        "precode": "SomeOtherClass<Node, ControlFlowGraph.Branch>",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "SomeOtherClass<Node, ControlFlowGraph.Edge>"
    },
    {
        "id": 805,
        "line": 403,
        "precode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Vertex>"
    },
    {
        "id": 814,
        "line": 438,
        "precode": "useParent.replaceChild(use, rhs);",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "useParent.replaceChild(use, new Node());"
    },
    {
        "id": 815,
        "line": 436,
        "precode": "Node rhs = def.getLastChild();",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "Node rhs = def.getNextSibling();"
    }
]