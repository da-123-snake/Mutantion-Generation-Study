[
    {
        "id": 494,
        "line": 1409,
        "precode": "switch (arrayFoldedChildren.size()) {",
        "filepath": "defects4j_fixed/Closure/Closure_74_fixed/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "aftercode": "if (arrayFoldedChildren.size() > 1) {"
    },
    {
        "id": 495,
        "line": 1415,
        "precode": "case 1:",
        "filepath": "defects4j_fixed/Closure/Closure_74_fixed/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "aftercode": "case 0:"
    },
    {
        "id": 497,
        "line": 1409,
        "precode": "switch (arrayFoldedChildren.size()) {",
        "filepath": "defects4j_fixed/Closure/Closure_74_fixed/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "aftercode": "for (Node node : arrayFoldedChildren) {"
    },
    {
        "id": 1220,
        "line": 906,
        "precode": "&& NodeUtil.isLiteralValue(right.getFirstChild(), false))",
        "filepath": "defects4j_fixed/Closure/Closure_74_fixed/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "aftercode": "|| NodeUtil.isLiteralValue(right.getFirstChild(), true))"
    },
    {
        "id": 1231,
        "line": 920,
        "precode": "case Token.NULL:",
        "filepath": "defects4j_fixed/Closure/Closure_74_fixed/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "aftercode": "case Token.UNDEFINED:"
    },
    {
        "id": 1232,
        "line": 1016,
        "precode": "Boolean compareResult = compareAsNumbers(op, left, right);",
        "filepath": "defects4j_fixed/Closure/Closure_74_fixed/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "aftercode": "Integer compareResult = compareAsNumbers(op, left, right);"
    },
    {
        "id": 1233,
        "line": 45,
        "precode": "return n;  // We only handle == and != here",
        "filepath": "defects4j_fixed/Closure/Closure_74_fixed/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "aftercode": "return null;  // We only handle == and != here"
    },
    {
        "id": 1235,
        "line": 984,
        "precode": "case Token.STRING:",
        "filepath": "defects4j_fixed/Closure/Closure_74_fixed/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "aftercode": "case Token.NUMBER:"
    },
    {
        "id": 1240,
        "line": 1047,
        "precode": "switch (op) {",
        "filepath": "defects4j_fixed/Closure/Closure_74_fixed/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "aftercode": "if (op == Token.EQ) {"
    },
    {
        "id": 1241,
        "line": 101,
        "precode": "default: return n;  // don't handle that op",
        "filepath": "defects4j_fixed/Closure/Closure_74_fixed/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "aftercode": "default: return null;  // don't handle that op"
    },
    {
        "id": 1245,
        "line": 115,
        "precode": "boolean result = compareToUndefined(right, op);",
        "filepath": "defects4j_fixed/Closure/Closure_74_fixed/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "aftercode": "boolean result = !compareToUndefined(right, op);"
    },
    {
        "id": 1356,
        "line": 743,
        "precode": "return null;",
        "filepath": "defects4j_fixed/Closure/Closure_74_fixed/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "aftercode": "return new Node(Token.NAME, \"undefined\");"
    },
    {
        "id": 1359,
        "line": 743,
        "precode": "return null;",
        "filepath": "defects4j_fixed/Closure/Closure_74_fixed/src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "aftercode": "return new Node(Token.NAME, \"zero division\");"
    }
]