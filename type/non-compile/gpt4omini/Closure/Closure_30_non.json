[
    {
        "id": 716,
        "line": 29,
        "precode": "if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE < t.getScope().getVarCount()) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <= t.getScope().getVarCount()) {"
    },
    {
        "id": 719,
        "line": 135,
        "precode": "candidates = Lists.newLinkedList();",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "candidates = new ArrayList<>();"
    },
    {
        "id": 720,
        "line": 157,
        "precode": "(new NodeTraversal(compiler, this)).traverseRoots(externs, root);",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "(new NodeTraversal(compiler, this)).traverse(externs, root);"
    },
    {
        "id": 722,
        "line": 282,
        "precode": "if (checkLeftOf(use, useCfgNode, SIDE_EFFECT_PREDICATE)) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (checkLeftOf(use, useCfgNode, SOME_OTHER_PREDICATE)) {"
    },
    {
        "id": 733,
        "line": 56,
        "precode": "defParent.getParent().removeChild(defParent);",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "defParent.getParent().addChildAfter(defParent, useParent);"
    },
    {
        "id": 734,
        "line": 57,
        "precode": "setUseParent();",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "resetUseParent();"
    },
    {
        "id": 738,
        "line": 56,
        "precode": "defParent.getParent().removeChild(defParent);",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "defParent.getParent().replaceChild(defParent, useParent);"
    },
    {
        "id": 742,
        "line": 157,
        "precode": "(new NodeTraversal(compiler, this)).traverseRoots(externs, root);",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "(new NodeTraversal(compiler)).traverseRoots(externs, root);"
    },
    {
        "id": 747,
        "line": 72,
        "precode": "  private final AbstractCompiler compiler;",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "  private static final AbstractCompiler compiler;"
    },
    {
        "id": 748,
        "line": 76,
        "precode": "  private ControlFlowGraph<Node> cfg;",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "  private ControlFlowGraph<Node> controlFlowGraph;"
    },
    {
        "id": 749,
        "line": 77,
        "precode": "  private List<Candidate> candidates;",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "  private List<Candidate> candidateList;"
    },
    {
        "id": 750,
        "line": 78,
        "precode": "  private MustBeReachingVariableDef reachingDef;",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "  private MustBeReachingVariableDef mustBeReachingDef;"
    },
    {
        "id": 751,
        "line": 79,
        "precode": "  private MaybeReachingVariableUse reachingUses;",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "  private MaybeReachingVariableUse maybeReachingUses;"
    },
    {
        "id": 752,
        "line": 135,
        "precode": "    candidates = Lists.newLinkedList();",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "    candidates = new ArrayList<>();"
    },
    {
        "id": 770,
        "line": 439,
        "precode": "n.getString().equals(varName) &&",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "n.getString().equalsIgnoreCase(varName) &&"
    },
    {
        "id": 773,
        "line": 439,
        "precode": "n.isName() && n.getString().equals(varName) &&",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "n.isName() || n.getString().equals(varName) &&"
    }
]