[
    {
        "id": 252,
        "line": 271,
        "precode": "while (true) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "while (false) {"
    },
    {
        "id": 255,
        "line": 275,
        "precode": "incrementIterationsCounter();",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "decrementIterationsCounter();"
    },
    {
        "id": 258,
        "line": 279,
        "precode": "updateJacobian();",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "resetJacobian();"
    },
    {
        "id": 275,
        "line": 430,
        "precode": "current = new VectorialPointValuePair(point, objective);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "current = new VectorialPointValuePair(point, 0);"
    },
    {
        "id": 276,
        "line": 430,
        "precode": "current = new VectorialPointValuePair(point, objective);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "current = new VectorialPointValuePair(point, someOtherValue);"
    },
    {
        "id": 277,
        "line": 430,
        "precode": "current = new VectorialPointValuePair(point, objective);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "current = new VectorialPointValuePair(point, point[0]);"
    },
    {
        "id": 279,
        "line": 374,
        "precode": "updateResidualsAndCost();",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateResidualsAndCostAlternative();"
    },
    {
        "id": 293,
        "line": 374,
        "precode": "updateResidualsAndCost();",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateCosts();"
    },
    {
        "id": 297,
        "line": 377,
        "precode": "double actRed = -1.0;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double actRed = someVariable;"
    },
    {
        "id": 299,
        "line": 1,
        "precode": "xNorm += xK * xK;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "xNorm += xK / xK;"
    },
    {
        "id": 311,
        "line": 430,
        "precode": "current = new VectorialPointValuePair(point, objective);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "current = new VectorialPointValuePair(point, cost);"
    },
    {
        "id": 320,
        "line": 116,
        "precode": "if (checker == null) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (checker != null) {"
    },
    {
        "id": 322,
        "line": 118,
        "precode": "            preRed <= costRelativeTolerance) && (ratio <= 2.0)) ||",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "            preRed < costRelativeTolerance) && (ratio < 2.0)) ||"
    },
    {
        "id": 323,
        "line": 179,
        "precode": "if (delta <= parRelativeTolerance * xNorm) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (delta < parRelativeTolerance * xNorm) {"
    },
    {
        "id": 324,
        "line": 179,
        "precode": "if (delta <= parRelativeTolerance * xNorm) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (delta <= 0.5 * parRelativeTolerance * xNorm) {"
    },
    {
        "id": 325,
        "line": 179,
        "precode": "if (delta <= parRelativeTolerance * xNorm) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (delta <= parRelativeTolerance * (xNorm + 1e-5)) {"
    },
    {
        "id": 326,
        "line": 179,
        "precode": "if (delta <= parRelativeTolerance * xNorm) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if ((delta + 1e-6) <= parRelativeTolerance * xNorm) {"
    },
    {
        "id": 328,
        "line": 179,
        "precode": "if (delta <= parRelativeTolerance * xNorm) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.abs(delta) <= parRelativeTolerance * xNorm) {"
    },
    {
        "id": 418,
        "line": 172,
        "precode": "setConvergenceChecker(null);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "setConvergenceChecker(new DefaultVectorialConvergenceChecker());"
    },
    {
        "id": 434,
        "line": 415,
        "precode": "else if ((lmPar == 0) || (ratio >= 0.75)) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "else if ((lmPar != 0) && (ratio < 0.75)) {"
    },
    {
        "id": 448,
        "line": 415,
        "precode": "else if ((lmPar == 0) || (ratio >= 0.75)) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "else if ((lmPar == 0) && (ratio > 0.75)) {"
    }
]