[
    {
        "id": 33,
        "line": 1034,
        "precode": "FastMath.sin(imaginary2) / d);",
        "filepath": "defects4j_fixed/Math/Math_47_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "MathUtils.cos(imaginary2) / d);"
    },
    {
        "id": 34,
        "line": 1025,
        "precode": "if (isNaN) {",
        "filepath": "defects4j_fixed/Math/Math_47_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "if (!isFinite(real) || !isFinite(imaginary)) {"
    },
    {
        "id": 36,
        "line": 1034,
        "precode": "FastMath.sin(imaginary2) / d);",
        "filepath": "defects4j_fixed/Math/Math_47_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "{return createComplex(0, 0);"
    },
    {
        "id": 42,
        "line": 1033,
        "precode": "return createComplex(MathUtils.sinh(real2) / d,",
        "filepath": "defects4j_fixed/Math/Math_47_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return createComplex(0, MathUtils.sinh(real2) / d);"
    },
    {
        "id": 45,
        "line": 1089,
        "precode": "final List<Complex> result = new ArrayList<Complex>();",
        "filepath": "defects4j_fixed/Math/Math_47_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "final List<Complex> result = new LinkedList<Complex>();"
    },
    {
        "id": 58,
        "line": 22,
        "precode": "throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, n);",
        "filepath": "defects4j_fixed/Math/Math_47_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "throw new IllegalArgumentException(\"Invalid n: \" + n);"
    },
    {
        "id": 188,
        "line": 1,
        "precode": "private final transient boolean isInfinite;",
        "filepath": "defects4j_fixed/Math/Math_47_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "private final transient boolean isNotInfinite;"
    },
    {
        "id": 190,
        "line": 3,
        "precode": "/** Record whether this complex number is zero. */",
        "filepath": "defects4j_fixed/Math/Math_47_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "/** Record whether this complex number is infinite. */"
    },
    {
        "id": 191,
        "line": 3,
        "precode": "/** Record whether this complex number is infinite. */",
        "filepath": "defects4j_fixed/Math/Math_47_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "/** Verify if this complex number is neither zero nor infinite. */"
    },
    {
        "id": 192,
        "line": 1,
        "precode": "private final transient boolean isInfinite;",
        "filepath": "defects4j_fixed/Math/Math_47_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "private final transient boolean isInfinite = false;"
    },
    {
        "id": 194,
        "line": 3,
        "precode": "/** Record whether this complex number is zero. */",
        "filepath": "defects4j_fixed/Math/Math_47_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "/** Check if this complex number is both zero and infinite. */"
    },
    {
        "id": 210,
        "line": 292,
        "precode": "return NaN;",
        "filepath": "defects4j_fixed/Math/Math_47_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return Double.NaN;"
    },
    {
        "id": 216,
        "line": 292,
        "precode": "return NaN;",
        "filepath": "defects4j_fixed/Math/Math_47_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return 0.0 / 0.0;"
    },
    {
        "id": 302,
        "line": 164,
        "precode": "real + addend.getReal(),",
        "filepath": "defects4j_fixed/Math/Math_47_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "real - addend.getReal(),"
    },
    {
        "id": 303,
        "line": 164,
        "precode": "real + addend.getReal(),",
        "filepath": "defects4j_fixed/Math/Math_47_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "real * addend.getReal(),"
    },
    {
        "id": 308,
        "line": 164,
        "precode": "real + addend.getReal(),",
        "filepath": "defects4j_fixed/Math/Math_47_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "real / addend.getReal(),"
    }
]