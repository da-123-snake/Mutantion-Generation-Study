[
    {
        "id": 221,
        "line": 255,
        "precode": "updateJacobian();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateJacobianAlternate();"
    },
    {
        "id": 222,
        "line": 256,
        "precode": "qrDecomposition();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "performQRDecomposition();"
    },
    {
        "id": 223,
        "line": 259,
        "precode": "qTy(residuals);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "qTyInverse(residuals);"
    },
    {
        "id": 227,
        "line": 256,
        "precode": "qrDecomposition();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "calculateQRDecomposition();"
    },
    {
        "id": 268,
        "line": 108,
        "precode": "if (maxCosine <= 2.2204e-16) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (maxCosine >= 2.2204e-16) {"
    },
    {
        "id": 307,
        "line": 138,
        "precode": "lamPar = Math.max(parl, lmPar + correction);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "lmPar = Math.min(parl, lmPar + correction);"
    },
    {
        "id": 376,
        "line": 166,
        "precode": "setConvergenceChecker(null);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "setConvergenceChecker(new DefaultConvergenceChecker());"
    },
    {
        "id": 385,
        "line": 249,
        "precode": "while (true) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "while (false) {"
    },
    {
        "id": 386,
        "line": 251,
        "precode": "incrementIterationsCounter();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "decrementIterationsCounter();"
    },
    {
        "id": 388,
        "line": 255,
        "precode": "updateJacobian();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "resetJacobian();"
    },
    {
        "id": 389,
        "line": 256,
        "precode": "qrDecomposition();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "alternateQrDecomposition();"
    },
    {
        "id": 402,
        "line": 347,
        "precode": "updateResidualsAndCost();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateResiduals();"
    },
    {
        "id": 403,
        "line": 348,
        "precode": "current = new VectorialPointValuePair(point, objective);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "current = new VectorialPointValuePair(point, 0);"
    },
    {
        "id": 407,
        "line": 347,
        "precode": "updateResidualsAndCost();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateCostAndResiduals();"
    },
    {
        "id": 421,
        "line": 428,
        "precode": "return current;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "return point;"
    },
    {
        "id": 424,
        "line": 26,
        "precode": "(costRelativeTolerance) ||",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "(costRelativeTolerance > 1.0) ||"
    }
]