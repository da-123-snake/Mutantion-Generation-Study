[
    {
        "id": 282,
        "line": 143,
        "precode": "for (Integer row : minRatioPositions) {",
        "filepath": "defects4j_fixed/Math/Math_28_fixed/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java",
        "aftercode": "for (Integer row : new ArrayList<>(minRatioPositions)) {"
    },
    {
        "id": 287,
        "line": 143,
        "precode": "for (Integer row : minRatioPositions) {",
        "filepath": "defects4j_fixed/Math/Math_28_fixed/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java",
        "aftercode": "for (int idx = 0; idx < minRatioPositions.size(); idx++) {"
    },
    {
        "id": 290,
        "line": 143,
        "precode": "for (Integer row : minRatioPositions) {",
        "filepath": "defects4j_fixed/Math/Math_28_fixed/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java",
        "aftercode": "for (int rowIndex = 0; rowIndex < minRatioPositions.size(); rowIndex++) {"
    },
    {
        "id": 301,
        "line": 141,
        "precode": "Integer minRow = null;",
        "filepath": "defects4j_fixed/Math/Math_28_fixed/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java",
        "aftercode": "Integer minRow = getNumObjectiveFunctions();"
    },
    {
        "id": 306,
        "line": 143,
        "precode": "for (Integer row : minRatioPositions) {",
        "filepath": "defects4j_fixed/Math/Math_28_fixed/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java",
        "aftercode": "for (int rowIdx = 0; rowIdx < minRatioPositions.size(); rowIdx++) {"
    }
]