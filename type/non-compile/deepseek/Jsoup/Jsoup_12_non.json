[
    {
        "id": 17,
        "line": 125,
        "precode": "if (tq.matchesAny(combinators)) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "if (!tq.matchesAny(combinators)) {"
    },
    {
        "id": 22,
        "line": 249,
        "precode": "} else {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "} if (tq.isEmpty()) {"
    },
    {
        "id": 23,
        "line": 113,
        "precode": "addElements(findElements());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "removeElements(findElements());"
    },
    {
        "id": 38,
        "line": 308,
        "precode": "String searchText = TokenQueue.unescape(tq.chompBalanced('(',')'));",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "String searchText = TokenQueue.escape(tq.chompBalanced('(',')'));"
    },
    {
        "id": 48,
        "line": 437,
        "precode": "return output;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "return elements;"
    },
    {
        "id": 49,
        "line": 437,
        "precode": "return output;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "return outs;"
    },
    {
        "id": 76,
        "line": 153,
        "precode": "elements.clear(); elements.addAll(output);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "elements.add(output);"
    },
    {
        "id": 80,
        "line": 153,
        "precode": "elements.clear(); elements.addAll(output);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "elements.clear(); elements = new LinkedHashSet<>(output);"
    },
    {
        "id": 81,
        "line": 153,
        "precode": "elements.clear(); elements.addAll(output);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "elements.clear(); elements.addAll(new ArrayList<>(output));"
    },
    {
        "id": 82,
        "line": 153,
        "precode": "elements.clear(); elements.addAll(output);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "elements.clear(); elements.addAll(output.stream().collect(Collectors.toList()));"
    },
    {
        "id": 84,
        "line": 153,
        "precode": "elements.clear(); elements.addAll(output);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "elements.clear(); elements.addAll(output.stream().filter(e -> e != null).collect(Collectors.toList()));"
    },
    {
        "id": 85,
        "line": 153,
        "precode": "elements.clear(); elements.addAll(output);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "elements.clear(); elements.addAll(output.stream().distinct().collect(Collectors.toList()));"
    },
    {
        "id": 86,
        "line": 153,
        "precode": "elements.clear(); elements.addAll(output);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "elements.clear(); elements.addAll(output.stream().limit(1).collect(Collectors.toList()));"
    },
    {
        "id": 87,
        "line": 153,
        "precode": "elements.clear(); elements.addAll(output);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "elements.clear(); elements.addAll(output.stream().skip(1).collect(Collectors.toList()));"
    },
    {
        "id": 88,
        "line": 153,
        "precode": "elements.clear(); elements.addAll(output);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "elements.clear(); elements.addAll(output.stream().sorted().collect(Collectors.toList()));"
    },
    {
        "id": 89,
        "line": 153,
        "precode": "elements.clear(); elements.addAll(output);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "elements.clear(); elements.addAll(output.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList()));"
    },
    {
        "id": 90,
        "line": 153,
        "precode": "elements.clear(); elements.addAll(output);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "elements.clear(); elements.addAll(output.stream().map(e -> e.clone()).collect(Collectors.toList()));"
    },
    {
        "id": 91,
        "line": 153,
        "precode": "elements.clear(); elements.addAll(output);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "elements.clear(); elements.addAll(output.stream().peek(e -> e.setSomething()).collect(Collectors.toList()));"
    },
    {
        "id": 92,
        "line": 153,
        "precode": "elements.clear(); elements.addAll(output);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "elements.clear(); elements.addAll(output.stream().filter(e -> e.isValid()).collect(Collectors.toList()));"
    },
    {
        "id": 93,
        "line": 153,
        "precode": "elements.clear(); elements.addAll(output);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_12_fixed/src/main/java/org/jsoup/select/Selector.java",
        "aftercode": "elements.clear(); elements.addAll(output.stream().filter(e -> !e.isValid()).collect(Collectors.toList()));"
    }
]