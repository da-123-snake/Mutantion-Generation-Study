[
    {
        "id": 235,
        "line": 255,
        "precode": "updateJacobian();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateJacobian(true);"
    },
    {
        "id": 236,
        "line": 256,
        "precode": "qrDecomposition();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "qrDecomposition(false);"
    },
    {
        "id": 239,
        "line": 255,
        "precode": "updateJacobian();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateJacobian(false);"
    },
    {
        "id": 240,
        "line": 256,
        "precode": "qrDecomposition();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "qrDecomposition(true);"
    },
    {
        "id": 297,
        "line": 435,
        "precode": "throw new OptimizationException(\"cost relative tolerance is too small ({0}),\" +",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "return current;"
    },
    {
        "id": 301,
        "line": 440,
        "precode": "throw new OptimizationException(\"parameters relative tolerance is too small\" +",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "return current;"
    },
    {
        "id": 304,
        "line": 445,
        "precode": "throw new OptimizationException(\"orthogonality tolerance is too small ({0}),\" +",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "return current;"
    },
    {
        "id": 307,
        "line": 250,
        "precode": "\"solution is orthogonal to the jacobian\",\n                            orthoTolerance);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "\"solution is orthogonal to the jacobian\",\n                            orthoTolerance * 2);"
    },
    {
        "id": 308,
        "line": 250,
        "precode": "\"solution is orthogonal to the jacobian\",\n                            orthoTolerance);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "\"solution is orthogonal to the jacobian\",\n                            orthoTolerance / 2);"
    },
    {
        "id": 309,
        "line": 250,
        "precode": "\"solution is orthogonal to the jacobian\",\n                            orthoTolerance);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "\"solution is orthogonal to the jacobian\",\n                            Math.sqrt(orthoTolerance));"
    },
    {
        "id": 310,
        "line": 250,
        "precode": "\"solution is orthogonal to the jacobian\",\n                            orthoTolerance);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "\"solution is orthogonal to the jacobian\",\n                            Math.pow(orthoTolerance, 2));"
    },
    {
        "id": 311,
        "line": 250,
        "precode": "\"solution is orthogonal to the jacobian\",\n                            orthoTolerance);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "\"solution is orthogonal to the jacobian\",\n                            orthoTolerance + 1);"
    },
    {
        "id": 312,
        "line": 250,
        "precode": "\"solution is orthogonal to the jacobian\",\n                            orthoTolerance);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "\"solution is orthogonal to the jacobian\",\n                            orthoTolerance - 1);"
    },
    {
        "id": 313,
        "line": 250,
        "precode": "\"solution is orthogonal to the jacobian\",\n                            orthoTolerance);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "\"solution is orthogonal to the jacobian\",\n                            orthoTolerance * 0.5);"
    },
    {
        "id": 314,
        "line": 250,
        "precode": "\"solution is orthogonal to the jacobian\",\n                            orthoTolerance);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "\"solution is orthogonal to the jacobian\",\n                            orthoTolerance / 0.5);"
    },
    {
        "id": 315,
        "line": 250,
        "precode": "\"solution is orthogonal to the jacobian\",\n                            orthoTolerance);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "\"solution is orthogonal to the jacobian\",\n                            orthoTolerance + 0.1);"
    },
    {
        "id": 406,
        "line": 249,
        "precode": "while (true) {",
        "aftercode": "while (false) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java"
    },
    {
        "id": 423,
        "line": 347,
        "precode": "updateResidualsAndCost();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateResidualsAndCost(point, objective);"
    },
    {
        "id": 424,
        "line": 347,
        "precode": "updateResidualsAndCost();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateResidualsAndCost(point);"
    },
    {
        "id": 425,
        "line": 348,
        "precode": "current = new VectorialPointValuePair(point, objective);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "current = new VectorialPointValuePair(point);"
    },
    {
        "id": 426,
        "line": 348,
        "precode": "current = new VectorialPointValuePair(point, objective);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "current = new VectorialPointValuePair(objective);"
    },
    {
        "id": 429,
        "line": 351,
        "precode": "double actRed = -1.0;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double actRed = actRedPrev;"
    },
    {
        "id": 440,
        "line": 434,
        "precode": "if ((Math.abs(actRed) <= 2.2204e-16) &&",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if ((Math.abs(actRed) > 2.2204e-16) &&"
    },
    {
        "id": 441,
        "line": 434,
        "precode": "if ((Math.abs(actRed) <= 2.2204e-16) &&",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if ((Math.abs(actRed) >= 2.2204e-16) &&"
    },
    {
        "id": 442,
        "line": 434,
        "precode": "(preRed <= 2.2204e-16) &&",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "(preRed > 2.2204e-16) &&"
    },
    {
        "id": 443,
        "line": 434,
        "precode": "(preRed <= 2.2204e-16) &&",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "(preRed >= 2.2204e-16) &&"
    },
    {
        "id": 444,
        "line": 434,
        "precode": "(ratio <= 2.0)) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "(ratio > 2.0)) {"
    },
    {
        "id": 445,
        "line": 434,
        "precode": "(ratio <= 2.0)) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "(ratio >= 2.0)) {"
    },
    {
        "id": 446,
        "line": 439,
        "precode": "if (delta <= 2.2204e-16 * xNorm) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (delta > 2.2204e-16 * xNorm) {"
    },
    {
        "id": 447,
        "line": 439,
        "precode": "if (delta <= 2.2204e-16 * xNorm) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (delta >= 2.2204e-16 * xNorm) {"
    },
    {
        "id": 448,
        "line": 444,
        "precode": "if (maxCosine <= 2.2204e-16)  {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (maxCosine > 2.2204e-16)  {"
    },
    {
        "id": 449,
        "line": 444,
        "precode": "if (maxCosine <= 2.2204e-16)  {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (maxCosine >= 2.2204e-16)  {"
    }
]