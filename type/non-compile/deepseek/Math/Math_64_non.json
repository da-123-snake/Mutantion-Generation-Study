[
    {
        "id": 259,
        "line": 271,
        "precode": "while (true) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "while (false) {"
    },
    {
        "id": 266,
        "line": 280,
        "precode": "qrDecomposition();",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "qrDecomposition(true);"
    },
    {
        "id": 267,
        "line": 280,
        "precode": "qrDecomposition();",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "qrDecomposition(false);"
    },
    {
        "id": 268,
        "line": 283,
        "precode": "qTy(qtf);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "qTy(qtf, true);"
    },
    {
        "id": 269,
        "line": 283,
        "precode": "qTy(qtf);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "qTy(qtf, false);"
    },
    {
        "id": 279,
        "line": 323,
        "precode": "maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "maxCosine = Math.max(maxCosine, Math.abs(sum) / (s ^ cost));"
    },
    {
        "id": 294,
        "line": 356,
        "precode": "determineLMParameter(qtf, delta, diag, work1, work2, work3);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "determineLMParameter(qtf, diag, delta, work1, work2, work3);"
    },
    {
        "id": 300,
        "line": 374,
        "precode": "updateResidualsAndCost();",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateResidualsAndCost(true);"
    },
    {
        "id": 301,
        "line": 374,
        "precode": "updateResidualsAndCost();",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateResidualsAndCost(false);"
    },
    {
        "id": 304,
        "line": 377,
        "precode": "double actRed = -1.0;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double actRed = actRedPrev;"
    },
    {
        "id": 327,
        "line": 478,
        "precode": "}",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (checker != null) {"
    },
    {
        "id": 426,
        "line": 172,
        "precode": "setConvergenceChecker(null);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "setConvergenceChecker(new DefaultConvergenceChecker());"
    },
    {
        "id": 458,
        "line": 415,
        "precode": "else if ((lmPar == 0) || (ratio >= 0.75)) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "else if ((lmPar != 0) && (ratio < 0.75)) {"
    }
]