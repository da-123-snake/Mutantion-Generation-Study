[
    {
        "id": 295,
        "line": 563,
        "precode": "map.put(\"GMT\", \"UTC\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"GMT\", \"WET\");"
    },
    {
        "id": 296,
        "line": 564,
        "precode": "map.put(\"WET\", \"WET\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"WET\", \"GMT\");"
    },
    {
        "id": 297,
        "line": 565,
        "precode": "map.put(\"CET\", \"CET\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"CET\", \"MET\");"
    },
    {
        "id": 298,
        "line": 566,
        "precode": "map.put(\"MET\", \"CET\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"MET\", \"EET\");"
    },
    {
        "id": 299,
        "line": 567,
        "precode": "map.put(\"ECT\", \"CET\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"ECT\", \"WET\");"
    },
    {
        "id": 300,
        "line": 568,
        "precode": "map.put(\"EET\", \"EET\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"EET\", \"CET\");"
    },
    {
        "id": 301,
        "line": 569,
        "precode": "map.put(\"MIT\", \"Pacific/Apia\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"MIT\", \"Pacific/Honolulu\");"
    },
    {
        "id": 302,
        "line": 570,
        "precode": "map.put(\"HST\", \"Pacific/Honolulu\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"HST\", \"America/Anchorage\");"
    },
    {
        "id": 303,
        "line": 571,
        "precode": "map.put(\"AST\", \"America/Anchorage\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"AST\", \"America/Los_Angeles\");"
    },
    {
        "id": 304,
        "line": 563,
        "precode": "map.put(\"GMT\", \"UTC\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"GMT\", \"GMT\");"
    },
    {
        "id": 305,
        "line": 564,
        "precode": "map.put(\"WET\", \"WET\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"WET\", \"UTC\");"
    },
    {
        "id": 306,
        "line": 574,
        "precode": "map.put(\"PNT\", \"America/Phoenix\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"PNT\", \"America/Denver\");"
    },
    {
        "id": 307,
        "line": 575,
        "precode": "map.put(\"CST\", \"America/Chicago\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"CST\", \"America/New_York\");"
    },
    {
        "id": 308,
        "line": 576,
        "precode": "map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"EST\", \"America/Chicago\");"
    },
    {
        "id": 309,
        "line": 577,
        "precode": "map.put(\"IET\", \"America/Indiana/Indianapolis\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"IET\", \"America/New_York\");"
    },
    {
        "id": 310,
        "line": 578,
        "precode": "map.put(\"PRT\", \"America/Puerto_Rico\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"PRT\", \"America/New_York\");"
    },
    {
        "id": 311,
        "line": 579,
        "precode": "map.put(\"CNT\", \"America/St_Johns\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"CNT\", \"America/New_York\");"
    },
    {
        "id": 312,
        "line": 580,
        "precode": "map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"AGT\", \"America/Sao_Paulo\");"
    },
    {
        "id": 313,
        "line": 581,
        "precode": "map.put(\"BET\", \"America/Sao_Paulo\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"BET\", \"America/Argentina/Buenos_Aires\");"
    },
    {
        "id": 314,
        "line": 582,
        "precode": "map.put(\"ART\", \"Africa/Cairo\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"ART\", \"Africa/Harare\");"
    },
    {
        "id": 315,
        "line": 583,
        "precode": "map.put(\"CAT\", \"Africa/Harare\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"CAT\", \"Africa/Cairo\");"
    },
    {
        "id": 316,
        "line": 584,
        "precode": "map.put(\"EAT\", \"Africa/Addis_Ababa\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"EAT\", \"Africa/Harare\");"
    },
    {
        "id": 317,
        "line": 585,
        "precode": "map.put(\"NET\", \"Asia/Yerevan\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"NET\", \"Asia/Karachi\");"
    },
    {
        "id": 318,
        "line": 586,
        "precode": "map.put(\"PLT\", \"Asia/Karachi\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"PLT\", \"Asia/Yerevan\");"
    },
    {
        "id": 319,
        "line": 587,
        "precode": "map.put(\"IST\", \"Asia/Kolkata\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"IST\", \"Asia/Karachi\");"
    },
    {
        "id": 320,
        "line": 588,
        "precode": "map.put(\"BST\", \"Asia/Dhaka\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"BST\", \"Asia/Kolkata\");"
    },
    {
        "id": 321,
        "line": 589,
        "precode": "map.put(\"VST\", \"Asia/Ho_Chi_Minh\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"VST\", \"Asia/Dhaka\");"
    },
    {
        "id": 322,
        "line": 590,
        "precode": "map.put(\"CTT\", \"Asia/Shanghai\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"CTT\", \"Asia/Tokyo\");"
    },
    {
        "id": 323,
        "line": 591,
        "precode": "map.put(\"JST\", \"Asia/Tokyo\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"JST\", \"Asia/Shanghai\");"
    },
    {
        "id": 324,
        "line": 592,
        "precode": "map.put(\"ACT\", \"Australia/Darwin\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "map.put(\"ACT\", \"Australia/Sydney\");"
    },
    {
        "id": 336,
        "line": 896,
        "precode": "if (nextLocal != nextAdjusted) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (nextLocal == nextAdjusted) {"
    },
    {
        "id": 337,
        "line": 896,
        "precode": "if (nextLocal != nextAdjusted) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (!(nextLocal == nextAdjusted)) {"
    },
    {
        "id": 338,
        "line": 897,
        "precode": "return offsetLocal;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return offsetAdjusted;"
    },
    {
        "id": 339,
        "line": 900,
        "precode": "} else if (offsetLocal > 0) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "} else if (offsetLocal >= 0) {"
    },
    {
        "id": 340,
        "line": 900,
        "precode": "} else if (offsetLocal > 0) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "} else if (offsetLocal < 0) {"
    },
    {
        "id": 341,
        "line": 902,
        "precode": "if (prev < instantAdjusted) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (prev <= instantAdjusted) {"
    },
    {
        "id": 342,
        "line": 902,
        "precode": "if (prev < instantAdjusted) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (prev > instantAdjusted) {"
    },
    {
        "id": 343,
        "line": 904,
        "precode": "int diff = offsetPrev - offsetLocal;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int diff = offsetLocal - offsetPrev;"
    },
    {
        "id": 344,
        "line": 905,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev < diff) {"
    },
    {
        "id": 345,
        "line": 905,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev >= diff) {"
    },
    {
        "id": 346,
        "line": 906,
        "precode": "return offsetPrev;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return offsetLocal;"
    },
    {
        "id": 347,
        "line": 910,
        "precode": "return offsetAdjusted;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return offsetLocal;"
    },
    {
        "id": 348,
        "line": 910,
        "precode": "return offsetAdjusted;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return 0;"
    },
    {
        "id": 349,
        "line": 910,
        "precode": "return offsetAdjusted;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return -1;"
    },
    {
        "id": 350,
        "line": 910,
        "precode": "return offsetAdjusted;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return 1;"
    },
    {
        "id": 351,
        "line": 924,
        "precode": "int offset = getOffset(instantUTC);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int offset = -getOffset(instantUTC);"
    },
    {
        "id": 352,
        "line": 925,
        "precode": "long instantLocal = instantUTC + offset;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "long instantLocal = instantUTC - offset;"
    },
    {
        "id": 353,
        "line": 927,
        "precode": "if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if ((instantUTC ^ instantLocal) > 0 && (instantUTC ^ offset) >= 0) {"
    },
    {
        "id": 354,
        "line": 927,
        "precode": "if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if ((instantUTC ^ instantLocal) < 0 || (instantUTC ^ offset) >= 0) {"
    },
    {
        "id": 355,
        "line": 928,
        "precode": "throw new ArithmeticException(\"Adding time zone offset caused overflow\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new IllegalArgumentException(\"Adding time zone offset caused overflow\");"
    },
    {
        "id": 356,
        "line": 930,
        "precode": "return instantLocal;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return instantUTC;"
    },
    {
        "id": 357,
        "line": 924,
        "precode": "int offset = getOffset(instantUTC);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int offset = getOffset(instantUTC) * 2;"
    },
    {
        "id": 358,
        "line": 925,
        "precode": "long instantLocal = instantUTC + offset;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "long instantLocal = instantUTC * offset;"
    },
    {
        "id": 359,
        "line": 927,
        "precode": "if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if ((instantUTC & instantLocal) < 0 && (instantUTC ^ offset) >= 0) {"
    },
    {
        "id": 360,
        "line": 927,
        "precode": "if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if ((instantUTC | instantLocal) < 0 && (instantUTC ^ offset) >= 0) {"
    },
    {
        "id": 361,
        "line": 928,
        "precode": "throw new ArithmeticException(\"Adding time zone offset caused overflow\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "System.out.println(\"Adding time zone offset caused overflow\");"
    },
    {
        "id": 362,
        "line": 930,
        "precode": "return instantLocal;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return offset;"
    },
    {
        "id": 363,
        "line": 924,
        "precode": "int offset = getOffset(instantUTC);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int offset = getOffset(instantUTC) / 2;"
    },
    {
        "id": 364,
        "line": 925,
        "precode": "long instantLocal = instantUTC + offset;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "long instantLocal = instantUTC % offset;"
    },
    {
        "id": 365,
        "line": 927,
        "precode": "if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if ((instantUTC ^ instantLocal) < 0 && (instantUTC & offset) >= 0) {"
    },
    {
        "id": 366,
        "line": 415,
        "precode": "if (provider == null) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (provider != null) {"
    },
    {
        "id": 367,
        "line": 418,
        "precode": "Set<String> ids = provider.getAvailableIDs();",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "Set<String> ids = null;"
    },
    {
        "id": 368,
        "line": 419,
        "precode": "if (ids == null || ids.size() == 0) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (ids != null && ids.size() > 0) {"
    },
    {
        "id": 369,
        "line": 423,
        "precode": "if (!ids.contains(\"UTC\")) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (ids.contains(\"UTC\")) {"
    },
    {
        "id": 370,
        "line": 426,
        "precode": "if (!UTC.equals(provider.getZone(\"UTC\"))) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (UTC.equals(provider.getZone(\"UTC\"))) {"
    },
    {
        "id": 371,
        "line": 429,
        "precode": "cProvider = provider;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cProvider = null;"
    },
    {
        "id": 372,
        "line": 430,
        "precode": "cAvailableIDs = ids;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cAvailableIDs = new HashSet<>();"
    },
    {
        "id": 373,
        "line": 5,
        "precode": "String providerClass = System.getProperty(\"org.joda.time.DateTimeZone.Provider\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "String providerClass = System.getenv(\"org.joda.time.DateTimeZone.Provider\");"
    },
    {
        "id": 374,
        "line": 448,
        "precode": "if (providerClass != null) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (providerClass == null) {"
    },
    {
        "id": 375,
        "line": 450,
        "precode": "provider = (Provider) Class.forName(providerClass).newInstance();",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "provider = (Provider) Class.forName(providerClass).getDeclaredConstructor().newInstance();"
    },
    {
        "id": 376,
        "line": 463,
        "precode": "} catch (Exception ex) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "} catch (Throwable ex) {"
    },
    {
        "id": 377,
        "line": 464,
        "precode": "Thread thread = Thread.currentThread();",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "Thread thread = new Thread();"
    },
    {
        "id": 378,
        "line": 465,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().uncaughtException(thread, new RuntimeException(\"Mutant Exception\"));"
    },
    {
        "id": 379,
        "line": 474,
        "precode": "}",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new RuntimeException(\"Mutant Exception\");"
    },
    {
        "id": 380,
        "line": 457,
        "precode": "// ignored",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "// caught"
    },
    {
        "id": 381,
        "line": 457,
        "precode": "// ignored",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "// not ignored"
    },
    {
        "id": 382,
        "line": 457,
        "precode": "// ignored",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "// silently ignored"
    },
    {
        "id": 383,
        "line": 457,
        "precode": "// ignored",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "// silently caught"
    },
    {
        "id": 384,
        "line": 457,
        "precode": "// ignored",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "// exception ignored"
    },
    {
        "id": 385,
        "line": 457,
        "precode": "// ignored",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "// exception caught"
    },
    {
        "id": 386,
        "line": 457,
        "precode": "// ignored",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "// silently handled"
    },
    {
        "id": 387,
        "line": 457,
        "precode": "// ignored",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "// handled"
    },
    {
        "id": 388,
        "line": 457,
        "precode": "// ignored",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "// not caught"
    },
    {
        "id": 389,
        "line": 457,
        "precode": "// ignored",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "// not handled"
    },
    {
        "id": 390,
        "line": 457,
        "precode": "// ignored",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "// silently not ignored"
    },
    {
        "id": 391,
        "line": 457,
        "precode": "// ignored",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "// silently not caught"
    },
    {
        "id": 392,
        "line": 457,
        "precode": "// ignored",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "// silently not handled"
    },
    {
        "id": 393,
        "line": 457,
        "precode": "// ignored",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "// silently not caught"
    },
    {
        "id": 394,
        "line": 486,
        "precode": "return cNameProvider;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return null;"
    },
    {
        "id": 395,
        "line": 486,
        "precode": "return cNameProvider;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return new NameProvider();"
    },
    {
        "id": 396,
        "line": 486,
        "precode": "return cNameProvider;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return getNameProvider();"
    },
    {
        "id": 397,
        "line": 486,
        "precode": "return cNameProvider;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return cNameProvider == null ? new NameProvider() : cNameProvider;"
    },
    {
        "id": 398,
        "line": 486,
        "precode": "return cNameProvider;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return cNameProvider != null ? cNameProvider : new NameProvider();"
    },
    {
        "id": 399,
        "line": 486,
        "precode": "return cNameProvider;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return cNameProvider.clone();"
    },
    {
        "id": 400,
        "line": 486,
        "precode": "return cNameProvider;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return cNameProvider.getInstance();"
    },
    {
        "id": 401,
        "line": 531,
        "precode": "String providerClass = System.getProperty(\"org.joda.time.DateTimeZone.NameProvider\");",
        "aftercode": "String providerClass = null;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 402,
        "line": 532,
        "precode": "if (providerClass != null) {",
        "aftercode": "if (providerClass == null) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 403,
        "line": 534,
        "precode": "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        "aftercode": "nameProvider = new DefaultNameProvider();",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 404,
        "line": 536,
        "precode": "Thread thread = Thread.currentThread();",
        "aftercode": "Thread thread = null;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 405,
        "line": 537,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "aftercode": "ex.printStackTrace();",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 406,
        "line": 544,
        "precode": "if (nameProvider == null) {",
        "aftercode": "if (true) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 407,
        "line": 545,
        "precode": "nameProvider = new DefaultNameProvider();",
        "aftercode": "nameProvider = null;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 408,
        "line": 537,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().uncaughtException(thread, new RuntimeException());"
    },
    {
        "id": 409,
        "line": 537,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().uncaughtException(thread, null);"
    },
    {
        "id": 410,
        "line": 537,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().uncaughtException(Thread.currentThread(), ex);"
    },
    {
        "id": 411,
        "line": 537,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().uncaughtException(thread, ex.getCause());"
    },
    {
        "id": 412,
        "line": 537,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().uncaughtException(thread, new Exception());"
    },
    {
        "id": 413,
        "line": 537,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().uncaughtException(thread, new Throwable());"
    },
    {
        "id": 414,
        "line": 537,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().uncaughtException(thread, new Error());"
    },
    {
        "id": 415,
        "line": 72,
        "precode": " * <li>Wall Time - This is what a local clock on the wall reads. This will be",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * <li>Wall Time - This is what a local clock on the wall reads. This might be"
    },
    {
        "id": 416,
        "line": 73,
        "precode": " * either Standard Time or Daylight Saving Time depending on the time of year",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * only Standard Time regardless of the time of year"
    },
    {
        "id": 417,
        "line": 74,
        "precode": " * and whether the location uses Daylight Saving Time.",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * and regardless of whether the location uses Daylight Saving Time."
    },
    {
        "id": 418,
        "line": 77,
        "precode": " * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * Similar to the Java TimeZone class, DateTimeZone is mutable. It also only"
    },
    {
        "id": 419,
        "line": 78,
        "precode": " * supports long format time zone ids. Thus EST and ECT are not accepted.",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * supports only short format time zone ids. Thus EST and ECT are accepted."
    },
    {
        "id": 420,
        "line": 79,
        "precode": " * However, the factory that accepts a TimeZone will attempt to convert from",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * However, the factory that accepts a TimeZone will not attempt to convert from"
    },
    {
        "id": 582,
        "line": 281,
        "precode": "public static DateTimeZone forOffsetMillis(int millisOffset) {",
        "aftercode": "public static DateTimeZone forOffsetMillis(long millisOffset) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 583,
        "line": 282,
        "precode": "String id = printOffset(millisOffset);",
        "aftercode": "String id = printOffset(-millisOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 584,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "aftercode": "return fixedOffsetZone(id, -millisOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 585,
        "line": 282,
        "precode": "String id = printOffset(millisOffset);",
        "aftercode": "String id = printOffset(millisOffset * 2);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 586,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "aftercode": "return fixedOffsetZone(id, millisOffset / 2);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 587,
        "line": 282,
        "precode": "String id = printOffset(millisOffset);",
        "aftercode": "String id = printOffset(millisOffset + 1000);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 588,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "aftercode": "return fixedOffsetZone(id, millisOffset - 1000);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 589,
        "line": 282,
        "precode": "String id = printOffset(millisOffset);",
        "aftercode": "String id = printOffset(Math.abs(millisOffset));",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 590,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "aftercode": "return fixedOffsetZone(id, millisOffset % 1000);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 591,
        "line": 282,
        "precode": "String id = printOffset(millisOffset);",
        "aftercode": "String id = printOffset(millisOffset >> 1);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 592,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "aftercode": "return fixedOffsetZone(id, millisOffset << 1);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 593,
        "line": 282,
        "precode": "String id = printOffset(millisOffset);",
        "aftercode": "String id = printOffset(millisOffset ^ 1);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 594,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "aftercode": "return fixedOffsetZone(id, millisOffset | 1);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 595,
        "line": 282,
        "precode": "String id = printOffset(millisOffset);",
        "aftercode": "String id = printOffset(millisOffset & 1);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 596,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "aftercode": "return fixedOffsetZone(id, ~millisOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 597,
        "line": 282,
        "precode": "String id = printOffset(millisOffset);",
        "aftercode": "String id = printOffset(millisOffset + 500);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 598,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "aftercode": "return fixedOffsetZone(id, millisOffset - 500);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 599,
        "line": 92,
        "precode": "private static final long serialVersionUID = 5546345482340108586L;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "private static final long serialVersionUID = 5546345482340108587L;"
    },
    {
        "id": 600,
        "line": 92,
        "precode": "private static final long serialVersionUID = 5546345482340108586L;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "protected static final long serialVersionUID = 5546345482340108586L;"
    },
    {
        "id": 601,
        "line": 4,
        "precode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"GMT\", \"GMT\", 0, 0);"
    },
    {
        "id": 602,
        "line": 4,
        "precode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 1, 0);"
    },
    {
        "id": 603,
        "line": 6,
        "precode": "private static Provider cProvider;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "private Provider cProvider;"
    },
    {
        "id": 604,
        "line": 6,
        "precode": "private static Provider cProvider;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "protected static Provider cProvider;"
    },
    {
        "id": 605,
        "line": 7,
        "precode": "/** The instance that is providing time zone names. */",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "/** The instance that is providing time zone identifiers. */"
    },
    {
        "id": 606,
        "line": 255,
        "precode": "return DateTimeZone.UTC;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return null;"
    },
    {
        "id": 607,
        "line": 255,
        "precode": "return DateTimeZone.UTC;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return DateTimeZone.getDefault();"
    },
    {
        "id": 608,
        "line": 257,
        "precode": "if (minutesOffset < 0 || minutesOffset > 59) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (minutesOffset <= 0 || minutesOffset >= 59) {"
    },
    {
        "id": 609,
        "line": 257,
        "precode": "if (minutesOffset < 0 || minutesOffset > 59) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (minutesOffset < 1 || minutesOffset > 58) {"
    },
    {
        "id": 610,
        "line": 258,
        "precode": "throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new RuntimeException(\"Minutes out of range: \" + minutesOffset);"
    },
    {
        "id": 611,
        "line": 260,
        "precode": "int offset = 0;",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int offset = 1;"
    },
    {
        "id": 612,
        "line": 262,
        "precode": "int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 30);"
    },
    {
        "id": 613,
        "line": 263,
        "precode": "if (hoursInMinutes < 0) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursInMinutes <= 0) {"
    },
    {
        "id": 614,
        "line": 264,
        "precode": "minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);"
    },
    {
        "id": 615,
        "line": 266,
        "precode": "minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);"
    },
    {
        "id": 616,
        "line": 268,
        "precode": "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_HOUR);"
    },
    {
        "id": 617,
        "line": 270,
        "precode": "throw new IllegalArgumentException(\"Offset is too large\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new ArithmeticException(\"Offset is too large\");"
    },
    {
        "id": 618,
        "line": 272,
        "precode": "return forOffsetMillis(offset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return forOffsetMillis(-offset);"
    },
    {
        "id": 619,
        "line": 272,
        "precode": "return forOffsetMillis(offset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return null;"
    },
    {
        "id": 620,
        "line": 263,
        "precode": "if (hoursInMinutes < 0) {",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursInMinutes > 0) {"
    },
    {
        "id": 621,
        "line": 264,
        "precode": "minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = FieldUtils.safeAdd(hoursInMinutes, 0);"
    },
    {
        "id": 622,
        "line": 266,
        "precode": "minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = FieldUtils.safeAdd(hoursInMinutes, 0);"
    },
    {
        "id": 623,
        "line": 268,
        "precode": "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "offset = FieldUtils.safeMultiply(minutesOffset, 1000);"
    },
    {
        "id": 624,
        "line": 270,
        "precode": "throw new IllegalArgumentException(\"Offset is too large\");",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new IllegalStateException(\"Offset is too large\");"
    },
    {
        "id": 625,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return fixedOffsetZone(id, -millisOffset);"
    },
    {
        "id": 626,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return fixedOffsetZone(id, millisOffset + 1000);"
    },
    {
        "id": 627,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return fixedOffsetZone(id, millisOffset / 2);"
    },
    {
        "id": 628,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return fixedOffsetZone(id, millisOffset * 2);"
    },
    {
        "id": 629,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return fixedOffsetZone(id, millisOffset % 1000);"
    },
    {
        "id": 630,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return fixedOffsetZone(id, Math.abs(millisOffset));"
    },
    {
        "id": 631,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return fixedOffsetZone(id, millisOffset ^ 1);"
    },
    {
        "id": 632,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return fixedOffsetZone(id, millisOffset | 1);"
    },
    {
        "id": 633,
        "line": 283,
        "precode": "return fixedOffsetZone(id, millisOffset);",
        "filepath": "defects4j_fixed/Time/Time_23_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return fixedOffsetZone(id, millisOffset & 1);"
    }
]