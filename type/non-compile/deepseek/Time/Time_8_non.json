[
    {
        "id": 147,
        "line": 1171,
        "precode": "if (isFixed()) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (!isFixed()) {"
    },
    {
        "id": 148,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return true;"
    },
    {
        "id": 149,
        "line": 1174,
        "precode": "try {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (true) {"
    },
    {
        "id": 150,
        "line": 1175,
        "precode": "localDateTime.toDateTime(this);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "localDateTime.toDateTime(null);"
    },
    {
        "id": 151,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return true;"
    },
    {
        "id": 152,
        "line": 1177,
        "precode": "} catch (IllegalInstantException ex) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "} catch (Exception ex) {"
    },
    {
        "id": 153,
        "line": 1178,
        "precode": "return true;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return false;"
    },
    {
        "id": 154,
        "line": 1171,
        "precode": "if (isFixed()) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (true) {"
    },
    {
        "id": 155,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return true;"
    },
    {
        "id": 156,
        "line": 1174,
        "precode": "try {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (false) {"
    },
    {
        "id": 157,
        "line": 1175,
        "precode": "localDateTime.toDateTime(this);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "localDateTime.toDateTime(this);"
    },
    {
        "id": 158,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return true;"
    },
    {
        "id": 159,
        "line": 1177,
        "precode": "} catch (IllegalInstantException ex) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "} catch (IllegalStateException ex) {"
    },
    {
        "id": 160,
        "line": 1178,
        "precode": "return true;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return false;"
    },
    {
        "id": 161,
        "line": 1171,
        "precode": "if (isFixed()) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (false) {"
    },
    {
        "id": 162,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return true;"
    },
    {
        "id": 163,
        "line": 1174,
        "precode": "try {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (true) {"
    },
    {
        "id": 164,
        "line": 1175,
        "precode": "localDateTime.toDateTime(this);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "localDateTime.toDateTime(this);"
    },
    {
        "id": 165,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return true;"
    },
    {
        "id": 166,
        "line": 1177,
        "precode": "} catch (IllegalInstantException ex) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "} catch (NullPointerException ex) {"
    },
    {
        "id": 167,
        "line": 1178,
        "precode": "return true;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return false;"
    },
    {
        "id": 168,
        "line": 1171,
        "precode": "if (isFixed()) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (true) {"
    },
    {
        "id": 169,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return true;"
    },
    {
        "id": 170,
        "line": 1174,
        "precode": "try {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (false) {"
    },
    {
        "id": 171,
        "line": 1175,
        "precode": "localDateTime.toDateTime(this);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "localDateTime.toDateTime(this);"
    },
    {
        "id": 172,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return true;"
    },
    {
        "id": 173,
        "line": 1177,
        "precode": "} catch (IllegalInstantException ex) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "} catch (Exception ex) {"
    },
    {
        "id": 174,
        "line": 1178,
        "precode": "return true;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return false;"
    },
    {
        "id": 175,
        "line": 1171,
        "precode": "if (isFixed()) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (false) {"
    },
    {
        "id": 176,
        "line": 1176,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return true;"
    },
    {
        "id": 177,
        "line": 1174,
        "precode": "try {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (true) {"
    },
    {
        "id": 178,
        "line": 1175,
        "precode": "localDateTime.toDateTime(this);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "localDateTime.toDateTime(null);"
    },
    {
        "id": 200,
        "line": 898,
        "precode": " * During a DST overlap (where the local time is ambiguous) this method will return",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * During a DST overlap (where the local time is ambiguous) this method will return the later instant."
    },
    {
        "id": 201,
        "line": 899,
        "precode": " * the earlier instant. The combination of these two rules is to always favour",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * the earlier instant. The combination of these two rules is to always disfavour"
    },
    {
        "id": 202,
        "line": 900,
        "precode": " * daylight (summer) time over standard (winter) time.",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * standard (winter) time over daylight (summer) time."
    },
    {
        "id": 203,
        "line": 902,
        "precode": " * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * NOTE: Prior to v2.0, the DST overlap behaviour was well defined and consistent by hemisphere."
    },
    {
        "id": 204,
        "line": 903,
        "precode": " * Prior to v1.5, the DST gap behaviour was also not defined.",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * Prior to v1.5, the DST gap behaviour was well defined."
    },
    {
        "id": 205,
        "line": 898,
        "precode": " * During a DST overlap (where the local time is ambiguous) this method will return",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * During a DST overlap (where the local time is ambiguous) this method will return the same instant."
    },
    {
        "id": 206,
        "line": 899,
        "precode": " * the earlier instant. The combination of these two rules is to always favour",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * the earlier instant. The combination of these two rules is to sometimes favour"
    },
    {
        "id": 295,
        "line": 562,
        "precode": "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "nameProvider = (NameProvider) Class.forName(providerClass).newInstance() instanceof NameProvider ? (NameProvider) Class.forName(providerClass).newInstance() : null;"
    },
    {
        "id": 296,
        "line": 562,
        "precode": "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "nameProvider = (NameProvider) Class.forName(providerClass).getDeclaredConstructor().newInstance();"
    },
    {
        "id": 297,
        "line": 564,
        "precode": "Thread thread = Thread.currentThread();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "Thread thread = new Thread();"
    },
    {
        "id": 298,
        "line": 565,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().uncaughtException(Thread.currentThread(), ex);"
    },
    {
        "id": 299,
        "line": 565,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "System.out.println(ex);"
    },
    {
        "id": 300,
        "line": 562,
        "precode": "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "nameProvider = null;"
    },
    {
        "id": 301,
        "line": 564,
        "precode": "Thread thread = Thread.currentThread();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "Thread thread = null;"
    },
    {
        "id": 302,
        "line": 565,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().uncaughtException(thread, new RuntimeException(\"Mutated Exception\"));"
    },
    {
        "id": 303,
        "line": 562,
        "precode": "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "try { nameProvider = (NameProvider) Class.forName(providerClass).newInstance(); } catch (Exception ex) { throw new RuntimeException(ex); }"
    },
    {
        "id": 304,
        "line": 564,
        "precode": "Thread thread = Thread.currentThread();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "Thread thread = Thread.currentThread().getThreadGroup().getParent().activeCount() > 0 ? Thread.currentThread() : null;"
    },
    {
        "id": 305,
        "line": 565,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "thread.getThreadGroup().uncaughtException(thread, ex instanceof NullPointerException ? new IllegalArgumentException() : ex);"
    },
    {
        "id": 306,
        "line": 559,
        "precode": "String providerClass = System.getProperty(\"org.joda.time.DateTimeZone.NameProvider\");",
        "aftercode": "String providerClass = System.getenv(\"org.joda.time.DateTimeZone.NameProvider\");",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 307,
        "line": 562,
        "precode": "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        "aftercode": "nameProvider = (NameProvider) Class.forName(providerClass).getDeclaredConstructor().newInstance();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 308,
        "line": 564,
        "precode": "Thread thread = Thread.currentThread();",
        "aftercode": "Thread thread = new Thread();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 309,
        "line": 565,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "aftercode": "Thread.getDefaultUncaughtExceptionHandler().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 310,
        "line": 572,
        "precode": "if (nameProvider == null) {",
        "aftercode": "if (nameProvider != null) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 311,
        "line": 573,
        "precode": "nameProvider = new DefaultNameProvider();",
        "aftercode": "nameProvider = null;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 312,
        "line": 576,
        "precode": "return nameProvider;",
        "aftercode": "return null;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 313,
        "line": 559,
        "precode": "String providerClass = System.getProperty(\"org.joda.time.DateTimeZone.NameProvider\");",
        "aftercode": "String providerClass = null;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 314,
        "line": 562,
        "precode": "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        "aftercode": "nameProvider = new DefaultNameProvider();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 315,
        "line": 564,
        "precode": "Thread thread = Thread.currentThread();",
        "aftercode": "Thread thread = null;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 316,
        "line": 565,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "aftercode": "ex.printStackTrace();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 317,
        "line": 572,
        "precode": "if (nameProvider == null) {",
        "aftercode": "if (true) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 318,
        "line": 573,
        "precode": "nameProvider = new DefaultNameProvider();",
        "aftercode": "nameProvider = new NameProvider() {};",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 319,
        "line": 576,
        "precode": "return nameProvider;",
        "aftercode": "return new DefaultNameProvider();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 320,
        "line": 559,
        "precode": "String providerClass = System.getProperty(\"org.joda.time.DateTimeZone.NameProvider\");",
        "aftercode": "String providerClass = \"org.joda.time.DateTimeZone.DefaultNameProvider\";",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 321,
        "line": 562,
        "precode": "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
        "aftercode": "nameProvider = (NameProvider) Class.forName(\"org.joda.time.DateTimeZone.DefaultNameProvider\").newInstance();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 322,
        "line": 564,
        "precode": "Thread thread = Thread.currentThread();",
        "aftercode": "Thread thread = Thread.currentThread().getThreadGroup().getParent().activeCount() > 0 ? Thread.currentThread() : null;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 323,
        "line": 565,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "aftercode": "if (thread != null) thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 324,
        "line": 572,
        "precode": "if (nameProvider == null) {",
        "aftercode": "if (nameProvider instanceof DefaultNameProvider) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 336,
        "line": 908,
        "precode": "public int getOffsetFromLocal(long instantLocal) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public int getOffsetFromLocal(int instantLocal) {"
    },
    {
        "id": 337,
        "line": 910,
        "precode": "final int offsetLocal = getOffset(instantLocal);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "final int offsetLocal = getOffset(instantLocal + 1000);"
    },
    {
        "id": 338,
        "line": 912,
        "precode": "final long instantAdjusted = instantLocal - offsetLocal;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "final long instantAdjusted = instantLocal + offsetLocal;"
    },
    {
        "id": 339,
        "line": 913,
        "precode": "final int offsetAdjusted = getOffset(instantAdjusted);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "final int offsetAdjusted = getOffset(instantAdjusted + 1000);"
    },
    {
        "id": 340,
        "line": 915,
        "precode": "if (offsetLocal != offsetAdjusted) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (offsetLocal == offsetAdjusted) {"
    },
    {
        "id": 341,
        "line": 918,
        "precode": "if ((offsetLocal - offsetAdjusted) < 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if ((offsetLocal - offsetAdjusted) > 0) {"
    },
    {
        "id": 342,
        "line": 922,
        "precode": "long nextLocal = nextTransition(instantAdjusted);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "long nextLocal = nextTransition(instantAdjusted + 1000);"
    },
    {
        "id": 343,
        "line": 923,
        "precode": "long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "long nextAdjusted = nextTransition(instantLocal + offsetAdjusted);"
    },
    {
        "id": 344,
        "line": 924,
        "precode": "if (nextLocal != nextAdjusted) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (nextLocal == nextAdjusted) {"
    },
    {
        "id": 345,
        "line": 928,
        "precode": "if (offsetLocal >= 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (offsetLocal < 0) {"
    },
    {
        "id": 346,
        "line": 929,
        "precode": "long prev = previousTransition(instantAdjusted);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "long prev = previousTransition(instantAdjusted + 1000);"
    },
    {
        "id": 347,
        "line": 930,
        "precode": "if (prev < instantAdjusted) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (prev >= instantAdjusted) {"
    },
    {
        "id": 348,
        "line": 931,
        "precode": "int offsetPrev = getOffset(prev);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int offsetPrev = getOffset(prev + 1000);"
    },
    {
        "id": 349,
        "line": 932,
        "precode": "int diff = offsetPrev - offsetLocal;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int diff = offsetLocal - offsetPrev;"
    },
    {
        "id": 350,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev > diff) {"
    },
    {
        "id": 351,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev < diff) {"
    },
    {
        "id": 352,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev >= diff) {"
    },
    {
        "id": 353,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev == diff) {"
    },
    {
        "id": 354,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev > diff) {"
    },
    {
        "id": 355,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev != diff) {"
    },
    {
        "id": 356,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev + 1 <= diff) {"
    },
    {
        "id": 357,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev - 1 <= diff) {"
    },
    {
        "id": 358,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev * 2 <= diff) {"
    },
    {
        "id": 359,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev / 2 <= diff) {"
    },
    {
        "id": 360,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev % 2 <= diff) {"
    },
    {
        "id": 361,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev ^ 1 <= diff) {"
    },
    {
        "id": 362,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev | 1 <= diff) {"
    },
    {
        "id": 363,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev & 1 <= diff) {"
    },
    {
        "id": 364,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev << 1 <= diff) {"
    },
    {
        "id": 365,
        "line": 933,
        "precode": "if (instantAdjusted - prev <= diff) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (instantAdjusted - prev >> 1 <= diff) {"
    },
    {
        "id": 366,
        "line": 433,
        "precode": "setProvider0(provider);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "setProvider0(null);"
    },
    {
        "id": 367,
        "line": 433,
        "precode": "setProvider0(provider);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "setProvider0(new Provider());"
    },
    {
        "id": 368,
        "line": 433,
        "precode": "setProvider0(provider);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "setProvider0(provider.clone());"
    },
    {
        "id": 369,
        "line": 433,
        "precode": "setProvider0(provider);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "setProvider0(provider == null ? new Provider() : provider);"
    },
    {
        "id": 370,
        "line": 433,
        "precode": "setProvider0(provider);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "setProvider0(provider != null ? provider : new Provider());"
    },
    {
        "id": 371,
        "line": 433,
        "precode": "setProvider0(provider);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "setProvider0(provider.getProvider());"
    },
    {
        "id": 372,
        "line": 433,
        "precode": "setProvider0(provider);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "setProvider0(provider.getInstance());"
    },
    {
        "id": 373,
        "line": 446,
        "precode": "Set<String> ids = provider.getAvailableIDs();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "Set<String> ids = null;"
    },
    {
        "id": 374,
        "line": 447,
        "precode": "if (ids == null || ids.size() == 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (ids != null && ids.size() > 0) {"
    },
    {
        "id": 375,
        "line": 447,
        "precode": "if (ids == null || ids.size() == 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (ids == null && ids.size() == 0) {"
    },
    {
        "id": 376,
        "line": 11,
        "precode": "throw new IllegalArgumentException(\"The provider doesn't have any available ids\");",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new RuntimeException(\"The provider doesn't have any available ids\");"
    },
    {
        "id": 377,
        "line": 451,
        "precode": "if (!ids.contains(\"UTC\")) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (ids.contains(\"UTC\")) {"
    },
    {
        "id": 378,
        "line": 451,
        "precode": "if (!ids.contains(\"UTC\")) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (!ids.contains(\"GMT\")) {"
    },
    {
        "id": 379,
        "line": 452,
        "precode": "throw new IllegalArgumentException(\"The provider doesn't support UTC\");",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new RuntimeException(\"The provider doesn't support UTC\");"
    },
    {
        "id": 380,
        "line": 457,
        "precode": "cProvider = provider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cProvider = null;"
    },
    {
        "id": 381,
        "line": 457,
        "precode": "cProvider = provider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cProvider = getDefaultProvider();"
    },
    {
        "id": 382,
        "line": 457,
        "precode": "cProvider = provider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cProvider = new Provider();"
    },
    {
        "id": 383,
        "line": 458,
        "precode": "cAvailableIDs = ids;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cAvailableIDs = null;"
    },
    {
        "id": 384,
        "line": 458,
        "precode": "cAvailableIDs = ids;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cAvailableIDs = new HashSet<>();"
    },
    {
        "id": 385,
        "line": 458,
        "precode": "cAvailableIDs = ids;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cAvailableIDs = provider.getAvailableIDs();"
    },
    {
        "id": 386,
        "line": 457,
        "precode": "cProvider = provider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cProvider = provider.getZone(\"UTC\");"
    },
    {
        "id": 387,
        "line": 458,
        "precode": "cAvailableIDs = ids;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cAvailableIDs = ids.stream().filter(id -> !id.equals(\"UTC\")).collect(Collectors.toSet());"
    },
    {
        "id": 388,
        "line": 457,
        "precode": "cProvider = provider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cProvider = provider == null ? getDefaultProvider() : provider;"
    },
    {
        "id": 389,
        "line": 458,
        "precode": "cAvailableIDs = ids;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cAvailableIDs = ids == null ? new HashSet<>() : ids;"
    },
    {
        "id": 390,
        "line": 457,
        "precode": "cProvider = provider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cProvider = provider != null ? provider : getDefaultProvider();"
    },
    {
        "id": 391,
        "line": 458,
        "precode": "cAvailableIDs = ids;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cAvailableIDs = ids != null ? ids : new HashSet<>();"
    },
    {
        "id": 392,
        "line": 457,
        "precode": "cProvider = provider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cProvider = provider instanceof Provider ? provider : getDefaultProvider();"
    },
    {
        "id": 393,
        "line": 458,
        "precode": "cAvailableIDs = ids;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "cAvailableIDs = ids instanceof Set ? ids : new HashSet<>();"
    },
    {
        "id": 394,
        "line": 478,
        "precode": "provider = (Provider) Class.forName(providerClass).newInstance();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "provider = (Provider) Class.forName(providerClass).getDeclaredConstructor().newInstance();"
    },
    {
        "id": 395,
        "line": 478,
        "precode": "provider = (Provider) Class.forName(providerClass).newInstance();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "provider = null;"
    },
    {
        "id": 396,
        "line": 491,
        "precode": "} catch (Exception ex) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "} catch (Throwable ex) {"
    },
    {
        "id": 397,
        "line": 493,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "System.err.println(ex);"
    },
    {
        "id": 398,
        "line": 493,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "ex.printStackTrace();"
    },
    {
        "id": 399,
        "line": 493,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "Thread.getDefaultUncaughtExceptionHandler().uncaughtException(thread, ex);"
    },
    {
        "id": 400,
        "line": 493,
        "precode": "thread.getThreadGroup().uncaughtException(thread, ex);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new RuntimeException(ex);"
    },
    {
        "id": 401,
        "line": 529,
        "precode": "if (sm != null) {",
        "aftercode": "if (sm == null) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 402,
        "line": 530,
        "precode": "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProvider\"));",
        "aftercode": "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProviderInvalid\"));",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 403,
        "line": 529,
        "precode": "if (sm != null) {",
        "aftercode": "if (true) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 404,
        "line": 530,
        "precode": "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProvider\"));",
        "aftercode": "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProvider\")); return;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 405,
        "line": 529,
        "precode": "if (sm != null) {",
        "aftercode": "if (sm == null || sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProvider\")) == null) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 406,
        "line": 530,
        "precode": "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProvider\"));",
        "aftercode": "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProvider\")); throw new SecurityException();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 407,
        "line": 529,
        "precode": "if (sm != null) {",
        "aftercode": "if (sm != null && sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProvider\")) != null) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 408,
        "line": 542,
        "precode": "if (nameProvider == null) {",
        "aftercode": "if (nameProvider != null) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 409,
        "line": 543,
        "precode": "nameProvider = getDefaultNameProvider();",
        "aftercode": "nameProvider = null;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 410,
        "line": 545,
        "precode": "cNameProvider = nameProvider;",
        "aftercode": "cNameProvider = null;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 411,
        "line": 542,
        "precode": "if (nameProvider == null) {",
        "aftercode": "if (true) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 412,
        "line": 543,
        "precode": "nameProvider = getDefaultNameProvider();",
        "aftercode": "nameProvider = new NameProvider();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 413,
        "line": 545,
        "precode": "cNameProvider = nameProvider;",
        "aftercode": "cNameProvider = getDefaultNameProvider();",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 414,
        "line": 542,
        "precode": "if (nameProvider == null) {",
        "aftercode": "if (false) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java"
    },
    {
        "id": 415,
        "line": 72,
        "precode": " * either Standard Time or Daylight Saving Time depending on the time of year",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * either Daylight Saving Time or Standard Time depending on the time of year"
    },
    {
        "id": 416,
        "line": 73,
        "precode": " * and whether the location uses Daylight Saving Time.",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * or if the location does not use Daylight Saving Time."
    },
    {
        "id": 417,
        "line": 76,
        "precode": " * Unlike the Java TimeZone class, DateTimeZone is immutable. It also only",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * Similar to the Java TimeZone class, DateTimeZone is mutable. It also only"
    },
    {
        "id": 418,
        "line": 77,
        "precode": " * supports long format time zone ids. Thus EST and ECT are not accepted.",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * supports short format time zone ids. Thus EST and ECT are accepted."
    },
    {
        "id": 419,
        "line": 72,
        "precode": " * either Standard Time or Daylight Saving Time depending on the time of year",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * only Standard Time regardless of the time of year"
    },
    {
        "id": 420,
        "line": 73,
        "precode": " * and whether the location uses Daylight Saving Time.",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": " * and regardless of whether the location uses Daylight Saving Time."
    },
    {
        "id": 601,
        "line": 276,
        "precode": "if (hoursOffset < -23 || hoursOffset > 23) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset <= -23 || hoursOffset >= 23) {"
    },
    {
        "id": 602,
        "line": 276,
        "precode": "if (hoursOffset < -23 || hoursOffset > 23) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset < -22 || hoursOffset > 22) {"
    },
    {
        "id": 603,
        "line": 276,
        "precode": "if (hoursOffset < -23 || hoursOffset > 23) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset <= -22 || hoursOffset >= 22) {"
    },
    {
        "id": 604,
        "line": 279,
        "precode": "if (minutesOffset < -59 || minutesOffset > 59) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (minutesOffset <= -59 || minutesOffset >= 59) {"
    },
    {
        "id": 605,
        "line": 279,
        "precode": "if (minutesOffset < -59 || minutesOffset > 59) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (minutesOffset < -58 || minutesOffset > 58) {"
    },
    {
        "id": 606,
        "line": 279,
        "precode": "if (minutesOffset < -59 || minutesOffset > 59) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (minutesOffset <= -58 || minutesOffset >= 58) {"
    },
    {
        "id": 607,
        "line": 282,
        "precode": "if (hoursOffset > 0 && minutesOffset < 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset >= 0 && minutesOffset < 0) {"
    },
    {
        "id": 608,
        "line": 282,
        "precode": "if (hoursOffset > 0 && minutesOffset < 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset > 0 && minutesOffset <= 0) {"
    },
    {
        "id": 609,
        "line": 282,
        "precode": "if (hoursOffset > 0 && minutesOffset < 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset >= 0 && minutesOffset <= 0) {"
    },
    {
        "id": 610,
        "line": 287,
        "precode": "int hoursInMinutes = hoursOffset * 60;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int hoursInMinutes = hoursOffset * 59;"
    },
    {
        "id": 611,
        "line": 287,
        "precode": "int hoursInMinutes = hoursOffset * 60;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int hoursInMinutes = hoursOffset * 61;"
    },
    {
        "id": 612,
        "line": 288,
        "precode": "if (hoursInMinutes < 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursInMinutes <= 0) {"
    },
    {
        "id": 613,
        "line": 289,
        "precode": "minutesOffset = hoursInMinutes - Math.abs(minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = hoursInMinutes + Math.abs(minutesOffset);"
    },
    {
        "id": 614,
        "line": 291,
        "precode": "minutesOffset = hoursInMinutes + minutesOffset;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = hoursInMinutes - minutesOffset;"
    },
    {
        "id": 615,
        "line": 291,
        "precode": "minutesOffset = hoursInMinutes + minutesOffset;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = hoursInMinutes * minutesOffset;"
    },
    {
        "id": 616,
        "line": 291,
        "precode": "minutesOffset = hoursInMinutes + minutesOffset;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = hoursInMinutes / minutesOffset;"
    },
    {
        "id": 617,
        "line": 291,
        "precode": "minutesOffset = hoursInMinutes + minutesOffset;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = hoursInMinutes % minutesOffset;"
    },
    {
        "id": 618,
        "line": 2,
        "precode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"GMT\", 0, 0);"
    },
    {
        "id": 619,
        "line": 2,
        "precode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"GMT\", \"GMT\", 0, 0);"
    },
    {
        "id": 620,
        "line": 3,
        "precode": "private static final int MAX_MILLIS = (86400 * 1000) - 1;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "private static final int MAX_MILLIS = (86400 * 1000); // No subtraction"
    },
    {
        "id": 621,
        "line": 3,
        "precode": "private static final int MAX_MILLIS = (86400 * 1000) - 1;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "private static final int MAX_MILLIS = (86400 * 1000) + 1; // Addition instead of subtraction"
    },
    {
        "id": 622,
        "line": 5,
        "precode": "private static Provider cProvider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "private static Provider cProvider = new Provider(); // Initialize the provider"
    },
    {
        "id": 623,
        "line": 5,
        "precode": "private static Provider cProvider;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "private static Provider cProvider = null; // Explicitly set to null"
    },
    {
        "id": 624,
        "line": 2,
        "precode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 1, 0); // Change offset"
    },
    {
        "id": 625,
        "line": 273,
        "precode": "if (hoursOffset == 0 && minutesOffset == 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset != 0 && minutesOffset == 0) {"
    },
    {
        "id": 626,
        "line": 274,
        "precode": "return DateTimeZone.UTC;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return null;"
    },
    {
        "id": 627,
        "line": 276,
        "precode": "if (hoursOffset < -23 || hoursOffset > 23) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset < -24 || hoursOffset > 24) {"
    },
    {
        "id": 628,
        "line": 277,
        "precode": "throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new RuntimeException(\"Hours out of range: \" + hoursOffset);"
    },
    {
        "id": 629,
        "line": 279,
        "precode": "if (minutesOffset < -59 || minutesOffset > 59) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (minutesOffset < -60 || minutesOffset > 60) {"
    },
    {
        "id": 630,
        "line": 280,
        "precode": "throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new RuntimeException(\"Minutes out of range: \" + minutesOffset);"
    },
    {
        "id": 631,
        "line": 282,
        "precode": "if (hoursOffset > 0 && minutesOffset < 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset > 0 && minutesOffset <= 0) {"
    },
    {
        "id": 632,
        "line": 283,
        "precode": "throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new RuntimeException(\"Positive hours must not have negative minutes: \" + minutesOffset);"
    },
    {
        "id": 633,
        "line": 285,
        "precode": "int offset = 0;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int offset = 1;"
    },
    {
        "id": 634,
        "line": 287,
        "precode": "int hoursInMinutes = hoursOffset * 60;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int hoursInMinutes = hoursOffset * 59;"
    },
    {
        "id": 635,
        "line": 288,
        "precode": "if (hoursInMinutes < 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursInMinutes <= 0) {"
    },
    {
        "id": 636,
        "line": 289,
        "precode": "minutesOffset = hoursInMinutes - Math.abs(minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = hoursInMinutes + Math.abs(minutesOffset);"
    },
    {
        "id": 637,
        "line": 291,
        "precode": "minutesOffset = hoursInMinutes + minutesOffset;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = hoursInMinutes - minutesOffset;"
    },
    {
        "id": 638,
        "line": 293,
        "precode": "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_SECOND);"
    },
    {
        "id": 639,
        "line": 295,
        "precode": "throw new IllegalArgumentException(\"Offset is too large\");",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new RuntimeException(\"Offset is too large\");"
    },
    {
        "id": 640,
        "line": 297,
        "precode": "return forOffsetMillis(offset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "return null;"
    },
    {
        "id": 641,
        "line": 273,
        "precode": "if (hoursOffset == 0 && minutesOffset == 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset == 0 || minutesOffset == 0) {"
    },
    {
        "id": 642,
        "line": 276,
        "precode": "if (hoursOffset < -23 || hoursOffset > 23) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursOffset <= -23 || hoursOffset >= 23) {"
    },
    {
        "id": 643,
        "line": 279,
        "precode": "if (minutesOffset < -59 || minutesOffset > 59) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (minutesOffset <= -59 || minutesOffset >= 59) {"
    },
    {
        "id": 644,
        "line": 283,
        "precode": "throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new IllegalArgumentException(\"Negative minutes not allowed with positive hours: \" + minutesOffset);"
    },
    {
        "id": 645,
        "line": 285,
        "precode": "int offset = 0;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int offset = 1;"
    },
    {
        "id": 646,
        "line": 287,
        "precode": "int hoursInMinutes = hoursOffset * 60;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "int hoursInMinutes = hoursOffset * 30;"
    },
    {
        "id": 647,
        "line": 288,
        "precode": "if (hoursInMinutes < 0) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "if (hoursInMinutes <= 0) {"
    },
    {
        "id": 648,
        "line": 289,
        "precode": "minutesOffset = hoursInMinutes - Math.abs(minutesOffset);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = hoursInMinutes + Math.abs(minutesOffset);"
    },
    {
        "id": 649,
        "line": 291,
        "precode": "minutesOffset = hoursInMinutes + minutesOffset;",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "minutesOffset = hoursInMinutes - minutesOffset;"
    },
    {
        "id": 650,
        "line": 293,
        "precode": "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_HOUR);"
    },
    {
        "id": 651,
        "line": 294,
        "precode": "} catch (ArithmeticException ex) {",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "} catch (Exception ex) {"
    },
    {
        "id": 652,
        "line": 295,
        "precode": "throw new IllegalArgumentException(\"Offset is too large\");",
        "filepath": "defects4j_fixed/Time/Time_8_fixed/src/main/java/org/joda/time/DateTimeZone.java",
        "aftercode": "throw new ArithmeticException(\"Offset is too large\");"
    }
]