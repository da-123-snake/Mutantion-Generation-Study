[
    {
        "id": 746,
        "line": 277,
        "precode": "return defMetadata.node;",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "return defMetadata.node.getPrevious();"
    },
    {
        "id": 748,
        "line": 372,
        "precode": "case Token.REGEXP:",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "case Token.ARRAYLIT:"
    },
    {
        "id": 749,
        "line": 373,
        "precode": "case Token.NEW:",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "case Token.OBJECTLIT:"
    },
    {
        "id": 750,
        "line": 206,
        "precode": "if (var != null && var.getParentNode().isCatch()) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (var == null || !var.getParentNode().isCatch()) {"
    },
    {
        "id": 751,
        "line": 372,
        "precode": "case Token.REGEXP:",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "case Token.GETELEM:"
    },
    {
        "id": 752,
        "line": 373,
        "precode": "case Token.NEW:",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "case Token.GETPROP:"
    },
    {
        "id": 753,
        "line": 206,
        "precode": "if (var != null && var.getParentNode().isCatch()) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (var != null && !var.getParentNode().isCatch()) {"
    },
    {
        "id": 754,
        "line": 372,
        "precode": "case Token.REGEXP:",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "case Token.NAME:"
    },
    {
        "id": 755,
        "line": 373,
        "precode": "case Token.NEW:",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "case Token.ARRAYLIT:"
    },
    {
        "id": 756,
        "line": 206,
        "precode": "if (var != null && var.getParentNode().isCatch()) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (var == null && var.getParentNode().isCatch()) {"
    },
    {
        "id": 757,
        "line": 372,
        "precode": "case Token.REGEXP:",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "case Token.OBJECTLIT:"
    },
    {
        "id": 758,
        "line": 373,
        "precode": "case Token.NEW:",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "case Token.REGEXP:"
    },
    {
        "id": 759,
        "line": 206,
        "precode": "if (var != null && var.getParentNode().isCatch()) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (var != null || var.getParentNode().isCatch()) {"
    },
    {
        "id": 766,
        "line": 156,
        "precode": "c.inlineVariable();",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "c.inlineVariable(t.getScope());"
    },
    {
        "id": 770,
        "line": 156,
        "precode": "c.inlineVariable();",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "c.inlineVariable(t.getScope());"
    },
    {
        "id": 771,
        "line": 155,
        "precode": "if (c.canInline(t.getScope())) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (c.canInline()) {"
    },
    {
        "id": 772,
        "line": 156,
        "precode": "c.inlineVariable();",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "c.performInlining();"
    },
    {
        "id": 773,
        "line": 155,
        "precode": "if (c.canInline(t.getScope())) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (c.isSafeToInline(t.getScope())) {"
    },
    {
        "id": 774,
        "line": 145,
        "precode": "if (NodeUtil.isStatementBlock(getDefCfgNode().getParent()) && getDefCfgNode().getNext() != useCfgNode) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (NodeUtil.isStatementBlock(getDefCfgNode().getParent()) || getDefCfgNode().getNext() != useCfgNode) {"
    },
    {
        "id": 775,
        "line": 145,
        "precode": "if (NodeUtil.isStatementBlock(getDefCfgNode().getParent()) && getDefCfgNode().getNext() != useCfgNode) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (!NodeUtil.isStatementBlock(getDefCfgNode().getParent()) && getDefCfgNode().getNext() != useCfgNode) {"
    },
    {
        "id": 776,
        "line": 145,
        "precode": "if (NodeUtil.isStatementBlock(getDefCfgNode().getParent()) && getDefCfgNode().getNext() != useCfgNode) {",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (NodeUtil.isStatementBlock(getDefCfgNode().getParent()) && getDefCfgNode().getNext() == useCfgNode) {"
    },
    {
        "id": 777,
        "line": 146,
        "precode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(cfg, cfg.getDirectedGraphNode(getDefCfgNode()), cfg.getDirectedGraphNode(useCfgNode()), SIDE_EFFECT_PREDICATE, Predicates.<DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysFalse(), false);"
    },
    {
        "id": 778,
        "line": 146,
        "precode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(cfg, cfg.getDirectedGraphNode(getDefCfgNode()), cfg.getDirectedGraphNode(useCfgNode()), SIDE_EFFECT_PREDICATE, Predicates.<DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), true);"
    },
    {
        "id": 779,
        "line": 146,
        "precode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(cfg, cfg.getDirectedGraphNode(getDefCfgNode()), cfg.getDirectedGraphNode(useCfgNode()), SIDE_EFFECT_PREDICATE, Predicates.<DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), true);"
    },
    {
        "id": 780,
        "line": 146,
        "precode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(cfg, cfg.getDirectedGraphNode(getDefCfgNode()), cfg.getDirectedGraphNode(useCfgNode()), SIDE_EFFECT_PREDICATE, Predicates.<DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false);"
    },
    {
        "id": 781,
        "line": 146,
        "precode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(cfg, cfg.getDirectedGraphNode(getDefCfgNode()), cfg.getDirectedGraphNode(useCfgNode()), SIDE_EFFECT_PREDICATE, Predicates.<DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), true);"
    },
    {
        "id": 782,
        "line": 146,
        "precode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(cfg, cfg.getDirectedGraphNode(getDefCfgNode()), cfg.getDirectedGraphNode(useCfgNode()), SIDE_EFFECT_PREDICATE, Predicates.<DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false);"
    },
    {
        "id": 783,
        "line": 146,
        "precode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(cfg, cfg.getDirectedGraphNode(getDefCfgNode()), cfg.getDirectedGraphNode(useCfgNode()), SIDE_EFFECT_PREDICATE, Predicates.<DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), true);"
    },
    {
        "id": 784,
        "line": 146,
        "precode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(cfg, cfg.getDirectedGraphNode(getDefCfgNode()), cfg.getDirectedGraphNode(useCfgNode()), SIDE_EFFECT_PREDICATE, Predicates.<DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false);"
    },
    {
        "id": 785,
        "line": 146,
        "precode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(cfg, cfg.getDirectedGraphNode(getDefCfgNode()), cfg.getDirectedGraphNode(useCfgNode()), SIDE_EFFECT_PREDICATE, Predicates.<DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), true);"
    },
    {
        "id": 786,
        "line": 146,
        "precode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch> pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(cfg, cfg.getDirectedGraphNode(getDefCfgNode()), cfg.getDirectedGraphNode(useCfgNode()), SIDE_EFFECT_PREDICATE, Predicates.<DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(), false);"
    },
    {
        "id": 787,
        "line": 433,
        "precode": "defParent.detachFromParent();",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "defParent.replaceWith(defParent.getNextSibling());"
    },
    {
        "id": 793,
        "line": 433,
        "precode": "defParent.detachFromParent();",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "defParent.removeFromParent();"
    },
    {
        "id": 795,
        "line": 437,
        "precode": "def.removeChild(rhs);",
        "filepath": "defects4j_fixed/Closure/Closure_3_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "def.detachChild(rhs);"
    }
]