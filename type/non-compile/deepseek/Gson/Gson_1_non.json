[
    {
        "id": 6,
        "line": 96,
        "precode": "do {",
        "filepath": "defects4j_fixed/Gson/Gson_1_fixed/gson/src/main/java/com/google/gson/TypeInfoFactory.java",
        "aftercode": "while (true) {"
    },
    {
        "id": 7,
        "line": 97,
        "precode": "theSearchedType = extractTypeForHierarchy(parentType, (TypeVariable<?>) typeToEvaluate);",
        "filepath": "defects4j_fixed/Gson/Gson_1_fixed/gson/src/main/java/com/google/gson/TypeInfoFactory.java",
        "aftercode": "theSearchedType = extractTypeForHierarchy(parentType, typeToEvaluate);"
    },
    {
        "id": 11,
        "line": 105,
        "precode": "throw new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType",
        "filepath": "defects4j_fixed/Gson/Gson_1_fixed/gson/src/main/java/com/google/gson/TypeInfoFactory.java",
        "aftercode": "throw new IllegalArgumentException(\"Unexpected type: \" + parentType);"
    },
    {
        "id": 19,
        "line": 19,
        "precode": "Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass);",
        "filepath": "defects4j_fixed/Gson/Gson_1_fixed/gson/src/main/java/com/google/gson/TypeInfoFactory.java",
        "aftercode": "Type[] actualTypeParameters = castedType.getActualTypeArguments();"
    },
    {
        "id": 22,
        "line": 139,
        "precode": "if (parentType instanceof ParameterizedType) {",
        "filepath": "defects4j_fixed/Gson/Gson_1_fixed/gson/src/main/java/com/google/gson/TypeInfoFactory.java",
        "aftercode": "if (!(parentType instanceof ParameterizedType)) {"
    },
    {
        "id": 27,
        "line": 70,
        "precode": "if (superClass instanceof ParameterizedType && ((ParameterizedType) superClass).getRawType() == typeToEvaluate.getGenericDeclaration()) {",
        "filepath": "defects4j_fixed/Gson/Gson_1_fixed/gson/src/main/java/com/google/gson/TypeInfoFactory.java",
        "aftercode": "if (!(superClass instanceof ParameterizedType) || ((ParameterizedType) superClass).getRawType() != typeToEvaluate.getGenericDeclaration()) {"
    },
    {
        "id": 33,
        "line": 105,
        "precode": "throw new IllegalStateException(\"How can the type variable not be present in the class declaration!\");",
        "filepath": "defects4j_fixed/Gson/Gson_1_fixed/gson/src/main/java/com/google/gson/TypeInfoFactory.java",
        "aftercode": "return -1;"
    },
    {
        "id": 41,
        "line": 69,
        "precode": "if (typeToEvaluate instanceof GenericArrayType) {",
        "filepath": "defects4j_fixed/Gson/Gson_1_fixed/gson/src/main/java/com/google/gson/TypeInfoFactory.java",
        "aftercode": "if (!(typeToEvaluate instanceof GenericArrayType)) {"
    },
    {
        "id": 44,
        "line": 93,
        "precode": "if (typeToEvaluate instanceof TypeVariable<?>) {",
        "filepath": "defects4j_fixed/Gson/Gson_1_fixed/gson/src/main/java/com/google/gson/TypeInfoFactory.java",
        "aftercode": "if (!(typeToEvaluate instanceof TypeVariable<?>)) {"
    },
    {
        "id": 57,
        "line": 225,
        "precode": "throw new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType + \".\\n Are you missing the use of TypeToken idiom?\\n See http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\");",
        "filepath": "defects4j_fixed/Gson/Gson_1_fixed/gson/src/main/java/com/google/gson/TypeInfoFactory.java",
        "aftercode": "return typeToEvaluate;"
    },
    {
        "id": 58,
        "line": 108,
        "precode": "if (typeToEvaluate instanceof WildcardType) {",
        "filepath": "defects4j_fixed/Gson/Gson_1_fixed/gson/src/main/java/com/google/gson/TypeInfoFactory.java",
        "aftercode": "if (!(typeToEvaluate instanceof WildcardType)) {"
    }
]