[
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "        elements.add(element);",
        "line": 45,
        "aftercode": "this.element = element;"
    },
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "        elements.add(element);",
        "line": 45,
        "aftercode": "elements.add();"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 97,
        "aftercode": "if(el.hasAttr(\"null\")){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 97,
        "aftercode": "if((option != null)){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 97,
        "aftercode": "if(\"null\"){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 97,
        "aftercode": "if((el.val().length() > 0)){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 97,
        "aftercode": "if(\"null\"){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            if (name.length() == 0) continue;",
        "line": 82,
        "aftercode": "return;"
    },
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "        elements.add(element);",
        "line": 45,
        "aftercode": "add(element);"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 97,
        "aftercode": "if(!set){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            if (name.length() == 0) continue;",
        "line": 82,
        "aftercode": "break;"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 97,
        "aftercode": "if(el.val()){"
    },
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "        elements.add(element);",
        "line": 45,
        "aftercode": "add();"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs",
        "line": 80,
        "aftercode": ""
    },
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "    public FormElement addElement(Element element) {",
        "line": 44,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 97,
        "aftercode": "if(el.val().length()){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "                    data.add(HttpConnection.KeyVal.create(name, option.val()));",
        "line": 89,
        "aftercode": "data.add(name, option.val());"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 97,
        "aftercode": "if(el.hasAttr(\"null\")){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 97,
        "aftercode": "if(el.hasAttr(\"null\")){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "                    final String val = el.val().length() >  0 ? el.val() : \"on\";",
        "line": 100,
        "aftercode": "Element option = el.select(\"null\").first();"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 97,
        "aftercode": "if((name.length() == 0)){"
    },
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "        elements.add(element);",
        "line": 45,
        "aftercode": "elements.get(element).add(element);"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs",
        "line": 80,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 97,
        "aftercode": "if((option != null)){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 78,
        "aftercode": "package org.jsoup.nodes;\n\nimport org.jsoup.Connection;\nimport org.jsoup.Jsoup;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.helper.Validate;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Elements;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * A HTML Form Element provides ready access to the form fields/controls that are associated with it. It also allows a\n * form to easily be submitted.\n */\npublic class FormElement extends Element {\n    private final Elements elements = new Elements();\n\n    /**\n     * Create a new, standalone form element.\n     *\n     * @param tag        tag of this element\n     * @param baseUri    the base URI\n     * @param attributes initial attributes\n     */\n    public FormElement(Tag tag, String baseUri, Attributes attributes) {\n        super(tag, baseUri, attributes);\n    }\n\n    /**\n     * Get the list of form control elements associated with this form.\n     * @return form controls associated with this element.\n     */\n    public Elements elements() {\n        return elements;\n    }\n\n    /**\n     * Add a form control element to this form.\n     * @param element form control to add\n     * @return this form element, for chaining\n     */\n    public FormElement addElement(Element element) {\n        elements.add(element);\n        return this;\n    }\n\n    /**\n     * Prepare to submit this form. A Connection object is created with the request set up from the form values. You\n     * can then set up other options (like user-agent, timeout, cookies), then execute it.\n     * @return a connection prepared from the values of this form.\n     * @throws IllegalArgumentException if the form's absolute action URL cannot be determined. Make sure you pass the\n     * document's base URI when parsing.\n     */\n    public Connection submit() {\n        String action = hasAttr(\"action\") ? absUrl(\"action\") : baseUri();\n        Validate.notEmpty(action, \"Could not determine a form action URL for submit. Ensure you set a base URI when parsing.\");\n        Connection.Method method = attr(\"method\").toUpperCase().equals(\"POST\") ?\n                Connection.Method.POST : Connection.Method.GET;\n\n        Connection con = Jsoup.connect(action)\n                .data(formData())\n                .method(method);\n\n        return con;\n    }\n\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\nif(el.hasAttr(\"null\")){\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val().length() >  0 ? el.val() : \"on\";\n\ndata.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        return super.equals(o);\n    }\n}"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs",
        "line": 80,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable",
        "line": 79,
        "aftercode": "if(el.tag().isFormSubmittable()){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 97,
        "aftercode": "if((\"null\" || \"null\")){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable",
        "line": 79,
        "aftercode": "if(el.tag()){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 97,
        "aftercode": "if((option != null)){"
    },
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "        elements.add(element);",
        "line": 45,
        "aftercode": "elements.add(element.getName());"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            if (name.length() == 0) continue;",
        "line": 82,
        "aftercode": "if(el.hasAttr(\"null\")){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 97,
        "aftercode": "if(\"null\"){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs",
        "line": 80,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            if (name.length() == 0) continue;",
        "line": 82,
        "aftercode": "set = true;"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 78,
        "aftercode": "package org.jsoup.nodes;\n\nimport org.jsoup.Connection;\nimport org.jsoup.Jsoup;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.helper.Validate;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Elements;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * A HTML Form Element provides ready access to the form fields/controls that are associated with it. It also allows a\n * form to easily be submitted.\n */\npublic class FormElement extends Element {\n    private final Elements elements = new Elements();\n\n    /**\n     * Create a new, standalone form element.\n     *\n     * @param tag        tag of this element\n     * @param baseUri    the base URI\n     * @param attributes initial attributes\n     */\n    public FormElement(Tag tag, String baseUri, Attributes attributes) {\n        super(tag, baseUri, attributes);\n    }\n\n    /**\n     * Get the list of form control elements associated with this form.\n     * @return form controls associated with this element.\n     */\n    public Elements elements() {\n        return elements;\n    }\n\n    /**\n     * Add a form control element to this form.\n     * @param element form control to add\n     * @return this form element, for chaining\n     */\n    public FormElement addElement(Element element) {\n        elements.add(element);\n        return this;\n    }\n\n    /**\n     * Prepare to submit this form. A Connection object is created with the request set up from the form values. You\n     * can then set up other options (like user-agent, timeout, cookies), then execute it.\n     * @return a connection prepared from the values of this form.\n     * @throws IllegalArgumentException if the form's absolute action URL cannot be determined. Make sure you pass the\n     * document's base URI when parsing.\n     */\n    public Connection submit() {\n        String action = hasAttr(\"action\") ? absUrl(\"action\") : baseUri();\n        Validate.notEmpty(action, \"Could not determine a form action URL for submit. Ensure you set a base URI when parsing.\");\n        Connection.Method method = attr(\"method\").toUpperCase().equals(\"POST\") ?\n                Connection.Method.POST : Connection.Method.GET;\n\n        Connection con = Jsoup.connect(action)\n                .data(formData())\n                .method(method);\n\n        return con;\n    }\n\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\nif((option != null)){\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val().length() >  0 ? el.val() : \"on\";\n\ndata.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        return super.equals(o);\n    }\n}"
    },
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "    public FormElement addElement(Element element) {",
        "line": 44,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "                    data.add(HttpConnection.KeyVal.create(name, option.val()));",
        "line": 89,
        "aftercode": "data.add(option.val());"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "                data.add(HttpConnection.KeyVal.create(name, el.val()));",
        "line": 104,
        "aftercode": "data.add(HttpConnection.KeyVal.create(name, option.val()));"
    },
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "        elements.add(element);",
        "line": 45,
        "aftercode": "this.element.add(element);"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs",
        "line": 80,
        "aftercode": "break;"
    },
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "        elements.add(element);",
        "line": 45,
        "aftercode": "elements.add(true);"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "                Elements options = el.select(\"option[selected]\");",
        "line": 86,
        "aftercode": "Elements options = el.select();"
    },
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "        elements.add(element);",
        "line": 45,
        "aftercode": "elements.add(this, element);"
    },
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "        elements.add(element);",
        "line": 45,
        "aftercode": "elements.add(element, false);"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "                data.add(HttpConnection.KeyVal.create(name, el.val()));",
        "line": 104,
        "aftercode": "data.add(el.val());"
    },
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "        elements.add(element);",
        "line": 45,
        "aftercode": "elements.add(element.toString());"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 78,
        "aftercode": "package org.jsoup.nodes;\n\nimport org.jsoup.Connection;\nimport org.jsoup.Jsoup;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.helper.Validate;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Elements;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * A HTML Form Element provides ready access to the form fields/controls that are associated with it. It also allows a\n * form to easily be submitted.\n */\npublic class FormElement extends Element {\n    private final Elements elements = new Elements();\n\n    /**\n     * Create a new, standalone form element.\n     *\n     * @param tag        tag of this element\n     * @param baseUri    the base URI\n     * @param attributes initial attributes\n     */\n    public FormElement(Tag tag, String baseUri, Attributes attributes) {\n        super(tag, baseUri, attributes);\n    }\n\n    /**\n     * Get the list of form control elements associated with this form.\n     * @return form controls associated with this element.\n     */\n    public Elements elements() {\n        return elements;\n    }\n\n    /**\n     * Add a form control element to this form.\n     * @param element form control to add\n     * @return this form element, for chaining\n     */\n    public FormElement addElement(Element element) {\n        elements.add(element);\n        return this;\n    }\n\n    /**\n     * Prepare to submit this form. A Connection object is created with the request set up from the form values. You\n     * can then set up other options (like user-agent, timeout, cookies), then execute it.\n     * @return a connection prepared from the values of this form.\n     * @throws IllegalArgumentException if the form's absolute action URL cannot be determined. Make sure you pass the\n     * document's base URI when parsing.\n     */\n    public Connection submit() {\n        String action = hasAttr(\"action\") ? absUrl(\"action\") : baseUri();\n        Validate.notEmpty(action, \"Could not determine a form action URL for submit. Ensure you set a base URI when parsing.\");\n        Connection.Method method = attr(\"method\").toUpperCase().equals(\"POST\") ?\n                Connection.Method.POST : Connection.Method.GET;\n\n        Connection con = Jsoup.connect(action)\n                .data(formData())\n                .method(method);\n\n        return con;\n    }\n\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\nif(!set){\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n                    final String val = el.val().length() >  0 ? el.val() : \"on\";\n\ndata.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        return super.equals(o);\n    }\n}"
    },
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "        elements.add(element);",
        "line": 45,
        "aftercode": "this.element = element;"
    },
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "    public FormElement addElement(Element element) {",
        "line": 44,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "                data.add(HttpConnection.KeyVal.create(name, el.val()));",
        "line": 104,
        "aftercode": "data.add(name, el.val());"
    },
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "        elements.add(element);",
        "line": 45,
        "aftercode": "element = elements.add(element);"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {",
        "line": 78,
        "aftercode": "package org.jsoup.nodes;\n\nimport org.jsoup.Connection;\nimport org.jsoup.Jsoup;\nimport org.jsoup.helper.HttpConnection;\nimport org.jsoup.helper.Validate;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Elements;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * A HTML Form Element provides ready access to the form fields/controls that are associated with it. It also allows a\n * form to easily be submitted.\n */\npublic class FormElement extends Element {\n    private final Elements elements = new Elements();\n\n    /**\n     * Create a new, standalone form element.\n     *\n     * @param tag        tag of this element\n     * @param baseUri    the base URI\n     * @param attributes initial attributes\n     */\n    public FormElement(Tag tag, String baseUri, Attributes attributes) {\n        super(tag, baseUri, attributes);\n    }\n\n    /**\n     * Get the list of form control elements associated with this form.\n     * @return form controls associated with this element.\n     */\n    public Elements elements() {\n        return elements;\n    }\n\n    /**\n     * Add a form control element to this form.\n     * @param element form control to add\n     * @return this form element, for chaining\n     */\n    public FormElement addElement(Element element) {\n        elements.add(element);\n        return this;\n    }\n\n    /**\n     * Prepare to submit this form. A Connection object is created with the request set up from the form values. You\n     * can then set up other options (like user-agent, timeout, cookies), then execute it.\n     * @return a connection prepared from the values of this form.\n     * @throws IllegalArgumentException if the form's absolute action URL cannot be determined. Make sure you pass the\n     * document's base URI when parsing.\n     */\n    public Connection submit() {\n        String action = hasAttr(\"action\") ? absUrl(\"action\") : baseUri();\n        Validate.notEmpty(action, \"Could not determine a form action URL for submit. Ensure you set a base URI when parsing.\");\n        Connection.Method method = attr(\"method\").toUpperCase().equals(\"POST\") ?\n                Connection.Method.POST : Connection.Method.GET;\n\n        Connection con = Jsoup.connect(action)\n                .data(formData())\n                .method(method);\n\n        return con;\n    }\n\n    /**\n     * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the\n     * list will not be reflected in the DOM.\n     * @return a list of key vals\n     */\n    public List<Connection.KeyVal> formData() {\n        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();\n\n        // iterate the form control elements and accumulate their values\n        for (Element el: elements) {\n            if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n            if (el.hasAttr(\"disabled\")) continue; // skip disabled form inputs\n            String name = el.attr(\"name\");\n            if (name.length() == 0) continue;\n            String type = el.attr(\"type\");\n\n            if (\"select\".equals(el.tagName())) {\n                Elements options = el.select(\"option[selected]\");\n                boolean set = false;\n                for (Element option: options) {\n                    data.add(HttpConnection.KeyVal.create(name, option.val()));\n                    set = true;\n                }\n                if (!set) {\n                    Element option = el.select(\"option\").first();\n                    if (option != null)\n                        data.add(HttpConnection.KeyVal.create(name, option.val()));\n                }\nif(\"null\"){\n                // only add checkbox or radio if they have the checked attribute\n                if (el.hasAttr(\"checked\")) {\n\nString val = ((el.val().length() > 0))?el.val():\"null\";\n                    data.add(HttpConnection.KeyVal.create(name, val));\n                }\n            } else {\n                data.add(HttpConnection.KeyVal.create(name, el.val()));\n            }\n        }\n        return data;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        return super.equals(o);\n    }\n}"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "                    data.add(HttpConnection.KeyVal.create(name, val));",
        "line": 101,
        "aftercode": "data.add(HttpConnection.KeyVal.create(name, option.val()));"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            if (\"select\".equals(el.tagName())) {",
        "line": 85,
        "aftercode": "if(!set){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "                        data.add(HttpConnection.KeyVal.create(name, option.val()));",
        "line": 95,
        "aftercode": "data.add(name, option.val());"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            if (name.length() == 0) continue;",
        "line": 82,
        "aftercode": "if(\"null\"){"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "        ArrayList<Connection.KeyVal> data = new ArrayList<Connection.KeyVal>();",
        "line": 75,
        "aftercode": "ArrayList<Connection> data = new ArrayList<Connection>();"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "            if (name.length() == 0) continue;",
        "line": 82,
        "aftercode": "continue;"
    },
    {
        "id": 47,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "        elements.add(element);",
        "line": 45,
        "aftercode": "elements.add(false);"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_42_fixed/src/main/java/org/jsoup/nodes/FormElement.java",
        "precode": "                    Element option = el.select(\"option\").first();",
        "line": 93,
        "aftercode": "Elements options = el.select(\"null\");"
    }
]