[
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if(((c == \"null\") || (c == \"null\"))){"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if(((c == \"null\") || (c == TokeniserState.nullChar))){"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if((c == \"null\")){"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if(((c == \"null\") || (c == \"null\"))){"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if(isEmpty){"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if(input){"
    },
    {
        "id": 44,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            String consumed = cacheString(pos, offset);",
        "line": 117,
        "aftercode": "String consumed = cacheString(offset);"
    },
    {
        "id": 44,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            String consumed = cacheString(pos, offset);",
        "line": 117,
        "aftercode": "String consumed = cacheString(pos);"
    },
    {
        "id": 44,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            String consumed = cacheString(pos, offset);",
        "line": 117,
        "aftercode": "String consumed = cacheString(seq);"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if((((c == \"null\") || (c == \"null\")) || (c == TokeniserState.nullChar))){"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        final int remaining = length;",
        "line": 158,
        "aftercode": "char[] remaining = length;"
    },
    {
        "id": 45,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        final int remaining = length;",
        "line": 127,
        "aftercode": "int val = input;"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if(((c == \"null\") || (c == TokeniserState.nullChar))){"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if((isEmpty() && Character.isLetter(c))){"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if((isEmpty() || Character.isLetter(c))){"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "char c = input[pos];"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        char c = input[pos];",
        "line": 299,
        "aftercode": "char c = false;"
    },
    {
        "id": 35,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) { /* empty */ }",
        "line": 95,
        "aftercode": ""
    },
    {
        "id": 45,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        final int remaining = length;",
        "line": 127,
        "aftercode": "char[] val = input;"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        char c = input[pos];",
        "line": 299,
        "aftercode": "char c = true;"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if(((c == \"null\") && (c == TokeniserState.nullChar))){"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if(input){"
    },
    {
        "id": 45,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "                    break OUTER;",
        "line": 133,
        "aftercode": "return;"
    },
    {
        "id": 44,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "    String consumeTo(String seq) {",
        "line": 114,
        "aftercode": ""
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if((((c == \"null\") && (c == \"null\")) || (c == TokeniserState.nullChar))){"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if(isEmpty){"
    },
    {
        "id": 35,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (offset < length && last <= length) {",
        "line": 94,
        "aftercode": "if((i + seq.length())){"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if((c == \"null\")){"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if(!isEmpty()){"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if((pos == \"null\")){"
    },
    {
        "id": 35,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) { /* empty */ }",
        "line": 95,
        "aftercode": ""
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        final int remaining = length;",
        "line": 158,
        "aftercode": "char[] val = input;"
    },
    {
        "id": 45,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            for (char c : chars) {",
        "line": 131,
        "aftercode": "char c = ;"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if(isEmpty()){"
    },
    {
        "id": 45,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        final int start = pos;",
        "line": 126,
        "aftercode": "char start = pos;"
    },
    {
        "id": 45,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            pos++;",
        "line": 135,
        "aftercode": "return;"
    },
    {
        "id": 44,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            return consumeToEnd();",
        "line": 121,
        "aftercode": "consumeToEnd();"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if((c == TokeniserState.nullChar)){"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if((isEmpty() && Character.isLetter(c))){"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        final int remaining = length;",
        "line": 158,
        "aftercode": "int val = input;"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if((isEmpty() || Character.isLetter(c))){"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            pos++;",
        "line": 165,
        "aftercode": "return;"
    },
    {
        "id": 35,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) { /* empty */ }",
        "line": 95,
        "aftercode": ""
    },
    {
        "id": 29,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "    boolean matches(char c) {",
        "line": 250,
        "aftercode": ""
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if(pos){"
    },
    {
        "id": 45,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            for (char c : chars) {",
        "line": 131,
        "aftercode": "(char c = ;"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if(((c == \"null\") || (c == TokeniserState.nullChar))){"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        final int start = pos;",
        "line": 157,
        "aftercode": "int remaining = length;"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if(isEmpty){"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if(input[pos]){"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if((Character.size() == 0)){"
    },
    {
        "id": 45,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        final int remaining = length;",
        "line": 127,
        "aftercode": "char[] remaining = length;"
    },
    {
        "id": 44,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "    String consumeTo(String seq) {",
        "line": 114,
        "aftercode": ""
    },
    {
        "id": 44,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            pos += offset;",
        "line": 118,
        "aftercode": "pos = \"null\";"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if((((c == \"null\") || (c == \"null\")) || (c == TokeniserState.nullChar))){"
    },
    {
        "id": 44,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            String consumed = cacheString(pos, offset);",
        "line": 117,
        "aftercode": "String consumed = (String)offset;"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if(input){"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if((cacheString(start, (pos - start)) || (c == TokeniserState.nullChar))){"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        final char[] val = input;",
        "line": 158,
        "aftercode": "package org.jsoup.parser;\n\nimport org.jsoup.helper.Validate;\n\nimport java.util.Arrays;\nimport java.util.Locale;\n\n/**\n CharacterReader consumes tokens off a string. To replace the old TokenQueue.\n */\nfinal class CharacterReader {\n    static final char EOF = (char) -1;\n    private static final int maxCacheLen = 12;\n\n    private final char[] input;\n    private final int length;\n    private int pos = 0;\n    private int mark = 0;\n    private final String[] stringCache = new String[512]; // holds reused strings in this doc, to lessen garbage\n\n    CharacterReader(String input) {\n        Validate.notNull(input);\n        this.input = input.toCharArray();\n        this.length = this.input.length;\n    }\n\n    int pos() {\n        return pos;\n    }\n\n    boolean isEmpty() {\n        return pos >= length;\n    }\n\n    char current() {\n        return pos >= length ? EOF : input[pos];\n    }\n\n    char consume() {\n        char val = pos >= length ? EOF : input[pos];\n        pos++;\n        return val;\n    }\n\n    void unconsume() {\n        pos--;\n    }\n\n    void advance() {\n        pos++;\n    }\n\n    void mark() {\n        mark = pos;\n    }\n\n    void rewindToMark() {\n        pos = mark;\n    }\n\n    String consumeAsString() {\n        return new String(input, pos++, 1);\n    }\n\n    /**\n     * Returns the number of characters between the current position and the next instance of the input char\n     * @param c scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(char c) {\n        // doesn't handle scanning for surrogates\n        for (int i = pos; i < length; i++) {\n            if (c == input[i])\n                return i - pos;\n        }\n        return -1;\n    }\n\n    /**\n     * Returns the number of characters between the current position and the next instance of the input sequence\n     *\n     * @param seq scan target\n     * @return offset between current position and next instance of target. -1 if not found.\n     */\n    int nextIndexOf(CharSequence seq) {\n        // doesn't handle scanning for surrogates\n        char startChar = seq.charAt(0);\n        for (int offset = pos; offset < length; offset++) {\n            // scan to first instance of startchar:\n            if (startChar != input[offset])\n                while(++offset < length && startChar != input[offset]) { /* empty */ }\n            int i = offset + 1;\n            int last = i + seq.length()-1;\n            if (offset < length && last <= length) {\n                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) { /* empty */ }\n                if (i == last) // found full sequence\n                    return offset - pos;\n            }\n        }\n        return -1;\n    }\n\n    String consumeTo(char c) {\n        int offset = nextIndexOf(c);\n        if (offset != -1) {\n            String consumed = cacheString(pos, offset);\n            pos += offset;\n            return consumed;\n        } else {\n            return consumeToEnd();\n        }\n    }\n\n    String consumeTo(String seq) {\n        int offset = nextIndexOf(seq);\n        if (offset != -1) {\n            String consumed = cacheString(pos, offset);\n            pos += offset;\n            return consumed;\n        } else {\n            return consumeToEnd();\n        }\n    }\n\n    String consumeToAny(final char... chars) {\n        final int start = pos;\n        final int remaining = length;\n        final char[] val = input;\n\n        OUTER: while (pos < remaining) {\n            for (char c : chars) {\n                if (val[pos] == c)\n                    break OUTER;\n            }\n            pos++;\n        }\n\n        return pos > start ? cacheString(start, pos-start) : \"\";\n    }\n\n    String consumeToAnySorted(final char... chars) {\n        final int start = pos;\n        final int remaining = length;\n        final char[] val = input;\n\n        while (pos < remaining) {\n            if (Arrays.binarySearch(chars, val[pos]) >= 0)\n                break;\n            pos++;\n        }\n\n        return pos > start ? cacheString(start, pos-start) : \"\";\n    }\n\n    String consumeData() {\n        // &, <, null\n        final int start = pos;\n        final int remaining = length;\nchar[] val = input;\n\n        while (pos < remaining) {\n            final char c = val[pos];\n\nif(((c == \"null\") || (c == \"null\"))){\n                break;\n            pos++;\n        }\n\n        return pos > start ? cacheString(start, pos-start) : \"\";\n    }\n\n    String consumeTagName() {\n        // '\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar\n        final int start = pos;\n        final int remaining = length;\n        final char[] val = input;\n\n        while (pos < remaining) {\n            final char c = val[pos];\n            if (c == '\\t'|| c ==  '\\n'|| c ==  '\\r'|| c ==  '\\f'|| c ==  ' '|| c ==  '/'|| c ==  '>'|| c ==  TokeniserState.nullChar)\n                break;\n            pos++;\n        }\n\n        return pos > start ? cacheString(start, pos-start) : \"\";\n    }\n\n    String consumeToEnd() {\n        String data = cacheString(pos, length-pos);\n        pos = length;\n        return data;\n    }\n\n    String consumeLetterSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\n                pos++;\n            else\n                break;\n        }\n\n        return cacheString(start, pos - start);\n    }\n\n    String consumeLetterThenDigitSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\n                pos++;\n            else\n                break;\n        }\n        while (!isEmpty()) {\n            char c = input[pos];\n            if (c >= '0' && c <= '9')\n                pos++;\n            else\n                break;\n        }\n\n        return cacheString(start, pos - start);\n    }\n\n    String consumeHexSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))\n                pos++;\n            else\n                break;\n        }\n        return cacheString(start, pos - start);\n    }\n\n    String consumeDigitSequence() {\n        int start = pos;\n        while (pos < length) {\n            char c = input[pos];\n            if (c >= '0' && c <= '9')\n                pos++;\n            else\n                break;\n        }\n        return cacheString(start, pos - start);\n    }\n\n    boolean matches(char c) {\n        return !isEmpty() && input[pos] == c;\n\n    }\n\n    boolean matches(String seq) {\n        int scanLength = seq.length();\n        if (scanLength > length - pos)\n            return false;\n\n        for (int offset = 0; offset < scanLength; offset++)\n            if (seq.charAt(offset) != input[pos+offset])\n                return false;\n        return true;\n    }\n\n    boolean matchesIgnoreCase(String seq) {\n        int scanLength = seq.length();\n        if (scanLength > length - pos)\n            return false;\n\n        for (int offset = 0; offset < scanLength; offset++) {\n            char upScan = Character.toUpperCase(seq.charAt(offset));\n            char upTarget = Character.toUpperCase(input[pos + offset]);\n            if (upScan != upTarget)\n                return false;\n        }\n        return true;\n    }\n\n    boolean matchesAny(char... seq) {\n        if (isEmpty())\n            return false;\n\n        char c = input[pos];\n        for (char seek : seq) {\n            if (seek == c)\n                return true;\n        }\n        return false;\n    }\n\n    boolean matchesAnySorted(char[] seq) {\n        return !isEmpty() && Arrays.binarySearch(seq, input[pos]) >= 0;\n    }\n\n    boolean matchesLetter() {\n        if (isEmpty())\n            return false;\n        char c = input[pos];\n        return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);\n    }\n\n    boolean matchesDigit() {\n        if (isEmpty())\n            return false;\n        char c = input[pos];\n        return (c >= '0' && c <= '9');\n    }\n\n    boolean matchConsume(String seq) {\n        if (matches(seq)) {\n            pos += seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    boolean matchConsumeIgnoreCase(String seq) {\n        if (matchesIgnoreCase(seq)) {\n            pos += seq.length();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    boolean containsIgnoreCase(String seq) {\n        // used to check presence of </title>, </style>. only finds consistent case.\n        String loScan = seq.toLowerCase(Locale.ENGLISH);\n        String hiScan = seq.toUpperCase(Locale.ENGLISH);\n        return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);\n    }\n\n    @Override\n    public String toString() {\n        return new String(input, pos, length - pos);\n    }\n\n    /**\n     * Caches short strings, as a flywheel pattern, to reduce GC load. Just for this doc, to prevent leaks.\n     * <p />\n     * Simplistic, and on hash collisions just falls back to creating a new string, vs a full HashMap with Entry list.\n     * That saves both having to create objects as hash keys, and running through the entry list, at the expense of\n     * some more duplicates.\n     */\n    private String cacheString(final int start, final int count) {\n        final char[] val = input;\n        final String[] cache = stringCache;\n\n        // limit (no cache):\n        if (count > maxCacheLen)\n            return new String(val, start, count);\n\n        // calculate hash:\n        int hash = 0;\n        int offset = start;\n        for (int i = 0; i < count; i++) {\n            hash = 31 * hash + val[offset++];\n        }\n\n        // get from cache\n        final int index = hash & cache.length - 1;\n        String cached = cache[index];\n\n        if (cached == null) { // miss, add\n            cached = new String(val, start, count);\n            cache[index] = cached;\n        } else { // hashcode hit, check equality\n            if (rangeEquals(start, count, cached)) { // hit\n                return cached;\n            } else { // hashcode conflict\n                cached = new String(val, start, count);\n                cache[index] = cached; // update the cache, as recently used strings are more likely to show up again\n            }\n        }\n        return cached;\n    }\n\n    /**\n     * Check if the value of the provided range equals the string.\n     */\n    boolean rangeEquals(final int start, int count, final String cached) {\n        if (count == cached.length()) {\n            char one[] = input;\n            int i = start;\n            int j = 0;\n            while (count-- != 0) {\n                if (one[i++] != cached.charAt(j++))\n                    return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if((pos != \"null\")){"
    },
    {
        "id": 44,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            pos += offset;",
        "line": 118,
        "aftercode": "pos = null;"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if(((c == \"null\") || (c == TokeniserState.nullChar))){"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if(((c == \"null\") || (c == \"null\"))){"
    },
    {
        "id": 45,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        final char[] val = input;",
        "line": 128,
        "aftercode": "int val = input;"
    },
    {
        "id": 45,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            for (char c : chars) {",
        "line": 131,
        "aftercode": "(String c = ;"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            return false;",
        "line": 298,
        "aftercode": ""
    },
    {
        "id": 44,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            String consumed = cacheString(pos, offset);",
        "line": 117,
        "aftercode": "cacheString(pos, offset);"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if((input == \"null\")){"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if((pos == \"null\")){"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        return pos > start ? cacheString(start, pos-start) : \"\";",
        "line": 138,
        "aftercode": ""
    },
    {
        "id": 29,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "    boolean matches(char c) {",
        "line": 250,
        "aftercode": ""
    },
    {
        "id": 44,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "    String consumeTo(String seq) {",
        "line": 114,
        "aftercode": ""
    },
    {
        "id": 45,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            pos++;",
        "line": 135,
        "aftercode": "final char[] val = input;"
    },
    {
        "id": 44,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            String consumed = cacheString(pos, offset);",
        "line": 117,
        "aftercode": "String consumed = (String)pos;"
    },
    {
        "id": 44,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            String consumed = cacheString(pos, offset);",
        "line": 117,
        "aftercode": "String consumed = nextIndexOf(seq);"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        final char[] val = input;",
        "line": 159,
        "aftercode": "char val = input;"
    },
    {
        "id": 35,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        char startChar = seq.charAt(0);",
        "line": 87,
        "aftercode": "char startChar = seq.charAt();"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if((pos == false)){"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        return pos > start ? cacheString(start, pos-start) : \"\";",
        "line": 138,
        "aftercode": ""
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if((pos == 0)){"
    },
    {
        "id": 35,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "                    return offset - pos;",
        "line": 97,
        "aftercode": "(offset - pos);"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if((((c >= \"null\") && (c <= \"null\")) || ((c >= \"null\") && (c <= \"null\")))){"
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": ""
    },
    {
        "id": 12,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        if (isEmpty())",
        "line": 297,
        "aftercode": "if(isEmpty()){"
    },
    {
        "id": 35,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (offset < length && last <= length) {",
        "line": 94,
        "aftercode": "if((seq.charAt(j) == input[i])){"
    },
    {
        "id": 29,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "        return !isEmpty() && input[pos] == c;",
        "line": 251,
        "aftercode": "(!isEmpty() && (input[pos] == c));"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "                break;",
        "line": 164,
        "aftercode": "return;"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if(((c == \"null\") || (c == \"null\"))){"
    },
    {
        "id": 30,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (c == '&'|| c ==  '<' || c ==  TokeniserState.nullChar)",
        "line": 163,
        "aftercode": "if((c == \"null\")){"
    },
    {
        "id": 35,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) { /* empty */ }",
        "line": 95,
        "aftercode": ""
    },
    {
        "id": 35,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) { /* empty */ }",
        "line": 95,
        "aftercode": ""
    },
    {
        "id": 35,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) { /* empty */ }",
        "line": 95,
        "aftercode": ""
    },
    {
        "id": 35,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "            if (offset < length && last <= length) {",
        "line": 94,
        "aftercode": "if(((i + seq.length()) && (last <= length))){"
    },
    {
        "id": 35,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) { /* empty */ }",
        "line": 95,
        "aftercode": ""
    },
    {
        "id": 35,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) { /* empty */ }",
        "line": 95,
        "aftercode": ""
    },
    {
        "id": 35,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_51_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "precode": "                for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++) { /* empty */ }",
        "line": 95,
        "aftercode": ""
    }
]