[
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        return false;",
        "line": 635,
        "aftercode": ""
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByAttributeValueContaining(String key, String match) {",
        "line": 527,
        "aftercode": ""
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByAttributeValueContaining(String key, String match) {",
        "line": 527,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Element child = new Element(Tag.valueOf(tagName), baseUri());",
        "line": 219,
        "aftercode": "Element child = new Element(Tag.valueOf(tagName));"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Integer index = indexInList(this, siblings);",
        "line": 376,
        "aftercode": "Integer index = indexInList(siblings);"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Element text(String text) {",
        "line": 609,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Element child = new Element(Tag.valueOf(tagName), baseUri());",
        "line": 219,
        "aftercode": "Element child = new Element(tagName);"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Integer index = indexInList(this, siblings);",
        "line": 376,
        "aftercode": "Integer index = indexInList(this);"
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByAttributeValueContaining(String key, String match) {",
        "line": 527,
        "aftercode": ""
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByClass(String className) {",
        "line": 457,
        "aftercode": ""
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByAttributeValueContaining(String key, String match) {",
        "line": 527,
        "aftercode": ""
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                sb.append(data.getWholeData());",
        "line": 648,
        "aftercode": "sb.append(elementData);"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Integer index = indexInList(this, siblings);",
        "line": 376,
        "aftercode": "Integer index = indexInList(index);"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByClass(String className) {",
        "line": 457,
        "aftercode": ""
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                if (!textNode.isBlank())",
        "line": 627,
        "aftercode": "if(textNode.isBlank()){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        TextNode textNode = new TextNode(text, baseUri);",
        "line": 613,
        "aftercode": "TextNode textNode = new TextNode(text);"
    },
    {
        "id": 10,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Element addClass(String className) {",
        "line": 706,
        "aftercode": ""
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByClass(String className) {",
        "line": 457,
        "aftercode": ""
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                if (!textNode.isBlank())",
        "line": 627,
        "aftercode": "if(!textNode.isBlank()){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            } else if (child instanceof Element) {",
        "line": 629,
        "aftercode": "if(!textNode.isBlank()){"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            } else if (childNode instanceof Element) {",
        "line": 649,
        "aftercode": "if((childNode instanceof Element)){"
    },
    {
        "id": 5,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notEmpty(key);",
        "line": 470,
        "aftercode": "Validate.notEmpty();"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Element text(String text) {",
        "line": 609,
        "aftercode": ""
    },
    {
        "id": 10,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(className);",
        "line": 707,
        "aftercode": "Validate.notNull();"
    },
    {
        "id": 5,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByAttribute(String key) {",
        "line": 469,
        "aftercode": ""
    },
    {
        "id": 5,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByAttribute(String key) {",
        "line": 469,
        "aftercode": ""
    },
    {
        "id": 5,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        key = key.trim().toLowerCase();",
        "line": 471,
        "aftercode": "this.key = key.trim().toLowerCase();"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            } else if (child instanceof Element) {",
        "line": 629,
        "aftercode": "if(!textNode.isBlank()){"
    },
    {
        "id": 11,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(className);",
        "line": 737,
        "aftercode": "classes.remove(className);"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Element child = new Element(Tag.valueOf(tagName), baseUri());",
        "line": 219,
        "aftercode": "Element child = new Element(baseUri());"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Element child = new Element(Tag.valueOf(tagName), baseUri());",
        "line": 219,
        "aftercode": "Element child = Tag.valueOf(tagName);"
    },
    {
        "id": 11,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Element toggleClass(String className) {",
        "line": 736,
        "aftercode": ""
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Element text(String text) {",
        "line": 609,
        "aftercode": ""
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        TextNode textNode = new TextNode(text, baseUri);",
        "line": 613,
        "aftercode": "TextNode textNode = new TextNode(textNode);"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            } else if (childNode instanceof Element) {",
        "line": 649,
        "aftercode": "if((childNode instanceof DataNode)){"
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByAttributeValueContaining(String key, String match) {",
        "line": 527,
        "aftercode": ""
    },
    {
        "id": 11,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(className);",
        "line": 737,
        "aftercode": "classes.add(className);"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            } else if (child instanceof Element) {",
        "line": 629,
        "aftercode": "if(el.hasText()){"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Integer index = indexInList(this, siblings);",
        "line": 376,
        "aftercode": "Integer index = indexInList(siblings, this);"
    },
    {
        "id": 10,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Set<String> classes = classNames();",
        "line": 709,
        "aftercode": "String classes = classNames();"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Element child = new Element(Tag.valueOf(tagName), baseUri());",
        "line": 219,
        "aftercode": "Element child = new Element(tagName, Tag.valueOf(tagName));"
    },
    {
        "id": 5,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByAttribute(String key) {",
        "line": 469,
        "aftercode": ""
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(index);",
        "line": 377,
        "aftercode": "Validate.notNull();"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                    return true;",
        "line": 628,
        "aftercode": ""
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(text);",
        "line": 610,
        "aftercode": "Validate.notNull();"
    },
    {
        "id": 11,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(className);",
        "line": 737,
        "aftercode": "classNames(classes);"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notEmpty(className);",
        "line": 458,
        "aftercode": "Validate.notEmpty();"
    },
    {
        "id": 11,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        if (classes.contains(className))",
        "line": 740,
        "aftercode": "classes.contains(className);"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            } else if (child instanceof Element) {",
        "line": 629,
        "aftercode": "if(el.hasText()){"
    },
    {
        "id": 5,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notEmpty(key);",
        "line": 470,
        "aftercode": "Validate.notEmpty(this);"
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByAttributeValueContaining(String key, String match) {",
        "line": 527,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Element appendElement(String tagName) {",
        "line": 218,
        "aftercode": ""
    },
    {
        "id": 5,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        key = key.trim().toLowerCase();",
        "line": 471,
        "aftercode": "key = key.trim(key);"
    },
    {
        "id": 10,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(className);",
        "line": 707,
        "aftercode": "classNames(classes);"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notEmpty(className);",
        "line": 458,
        "aftercode": "Validate.notEmpty(this);"
    },
    {
        "id": 5,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notEmpty(key);",
        "line": 470,
        "aftercode": "notEmpty(key);"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Element text(String text) {",
        "line": 609,
        "aftercode": ""
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(text);",
        "line": 610,
        "aftercode": "appendChild(textNode);"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByClass(String className) {",
        "line": 457,
        "aftercode": ""
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Element text(String text) {",
        "line": 609,
        "aftercode": ""
    },
    {
        "id": 10,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(className);",
        "line": 707,
        "aftercode": "classes.add(className);"
    },
    {
        "id": 10,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(className);",
        "line": 707,
        "aftercode": "notNull(className);"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        appendChild(child);",
        "line": 220,
        "aftercode": "appendChild();"
    },
    {
        "id": 5,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        key = key.trim().toLowerCase();",
        "line": 471,
        "aftercode": "this.key = key;"
    },
    {
        "id": 11,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        if (classes.contains(className))",
        "line": 740,
        "aftercode": "if(!classes.contains(className)){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        TextNode textNode = new TextNode(text, baseUri);",
        "line": 613,
        "aftercode": "textNode = new TextNode(text, baseUri);"
    },
    {
        "id": 5,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        key = key.trim().toLowerCase();",
        "line": 471,
        "aftercode": "key = (Attribute)key.trim().toLowerCase();"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Element child = new Element(Tag.valueOf(tagName), baseUri());",
        "line": 219,
        "aftercode": "Element child = new Element(child);"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        TextNode textNode = new TextNode(text, baseUri);",
        "line": 613,
        "aftercode": "TextNode textNode = new TextNode(baseUri);"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                DataNode data = (DataNode) childNode;",
        "line": 647,
        "aftercode": "DataNode data = data.getWholeData();"
    },
    {
        "id": 5,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByAttribute(String key) {",
        "line": 469,
        "aftercode": ""
    },
    {
        "id": 11,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(className);",
        "line": 737,
        "aftercode": "Validate.notNull();"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notEmpty(className);",
        "line": 458,
        "aftercode": "notEmpty(className);"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                    return true;",
        "line": 628,
        "aftercode": ""
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                sb.append(data.getWholeData());",
        "line": 648,
        "aftercode": "sb.append();"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                sb.append(elementData);",
        "line": 652,
        "aftercode": "sb.append(data.getWholeData());"
    },
    {
        "id": 10,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Set<String> classes = classNames();",
        "line": 709,
        "aftercode": "List<String> classes = classNames();"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        appendChild(textNode);",
        "line": 614,
        "aftercode": "appendChild();"
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByAttributeValueContaining(String key, String match) {",
        "line": 527,
        "aftercode": ""
    },
    {
        "id": 10,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Set<String> classes = classNames();",
        "line": 709,
        "aftercode": "String [] classes = classNames();"
    },
    {
        "id": 5,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        key = key.trim().toLowerCase();",
        "line": 471,
        "aftercode": "key = (Elements)key.trim().toLowerCase();"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            } else if (child instanceof Element) {",
        "line": 629,
        "aftercode": "if((child instanceof Element)){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            if (child instanceof TextNode) {",
        "line": 625,
        "aftercode": "TextNode textNode = (TextNode)child;"
    },
    {
        "id": 10,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(className);",
        "line": 707,
        "aftercode": "Validate.notNull(classes);"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                sb.append(elementData);",
        "line": 652,
        "aftercode": "sb.append();"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            if (child instanceof TextNode) {",
        "line": 625,
        "aftercode": "if(el.hasText()){"
    },
    {
        "id": 10,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(className);",
        "line": 707,
        "aftercode": "className.notNull();"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByClass(String className) {",
        "line": 457,
        "aftercode": ""
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Integer index = indexInList(this, siblings);",
        "line": 376,
        "aftercode": "Integer index = indexInList();"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        for (Node childNode : childNodes) {",
        "line": 645,
        "aftercode": "(DataNode childNode = ;"
    },
    {
        "id": 11,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(className);",
        "line": 737,
        "aftercode": "Validate.notNull(classes);"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            } else if (child instanceof Element) {",
        "line": 629,
        "aftercode": "if((child instanceof Element)){"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            } else if (childNode instanceof Element) {",
        "line": 646,
        "aftercode": "package org.jsoup.nodes;\n\nimport org.apache.commons.lang.Validate;\nimport org.apache.commons.lang.StringUtils;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Collector;\nimport org.jsoup.select.Elements;\nimport org.jsoup.select.Selector;\n\nimport java.util.*;\n\n/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private final Tag tag;\n    private Set<String> classNames;\n    \n    /**\n     * Create a new, standalone Element. (Standalone in that is has no parent.)\n     * \n     * @param tag tag of this element\n     * @param baseUri the base URI\n     * @param attributes initial attributes\n     * @see #appendChild(Node)\n     * @see #appendElement(String)\n     */\n    public Element(Tag tag, String baseUri, Attributes attributes) {\n        super(baseUri, attributes);\n        \n        Validate.notNull(tag);    \n        this.tag = tag;\n    }\n    \n    /**\n     * Create a new Element from a tag and a base URI.\n     * \n     * @param tag element tag\n     * @param baseUri the base URI of this element. It is acceptable for the base URI to be an empty\n     *            string, but not null.\n     * @see Tag#valueOf(String)\n     */\n    public Element(Tag tag, String baseUri) {\n        this(tag, baseUri, new Attributes());\n    }\n\n    @Override\n    public String nodeName() {\n        return tag.getName();\n    }\n\n    /**\n     * Get the name of the tag for this element. E.g. {@code div}\n     * \n     * @return the tag name\n     */\n    public String tagName() {\n        return tag.getName();\n    }\n\n    /**\n     * Get the Tag for this element.\n     * \n     * @return the tag object\n     */\n    public Tag tag() {\n        return tag;\n    }\n    \n    /**\n     * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element\n     * {@code <p> == false}).\n     * \n     * @return true if block, false if not (and thus inline)\n     */\n    public boolean isBlock() {\n        return tag.isBlock();\n    }\n\n    /**\n     * Get the {@code id} attribute of this element.\n     * \n     * @return The id attribute, if present, or an empty string if not.\n     */\n    public String id() {\n        String id = attr(\"id\");\n        return id == null ? \"\" : id;\n    }\n\n    /**\n     * Set an attribute value on this element. If this element already has an attribute with the\n     * key, its value is updated; otherwise, a new attribute is added.\n     * \n     * @return this element\n     */\n    public Element attr(String attributeKey, String attributeValue) {\n        super.attr(attributeKey, attributeValue);\n        return this;\n    }\n\n    @Override\n    public Element parent() {\n        return (Element) super.parent();\n    }\n\n    /**\n     * Get this element's parent and ancestors, up to the document root.\n     * @return this element's stack of parents, closest first.\n     */\n    public Elements parents() {\n        Elements parents = new Elements();\n        accumulateParents(this, parents);\n        return parents;\n    }\n\n    private static void accumulateParents(Element el, Elements parents) {\n        Element parent = el.parent();\n        if (parent != null && !parent.tagName().equals(\"#root\")) {\n            parents.add(parent);\n            accumulateParents(parent, parents);\n        }\n    }\n\n    /**\n     * Get a child element of this element, by its 0-based index number.\n     * <p/>\n     * Note that an element can have both mixed Nodes and Elements as children. This method inspects\n     * a filtered list of children that are elements, and the index is based on that filtered list.\n     * \n     * @param index the index number of the element to retrieve\n     * @return the child element, if it exists, or {@code null} if absent.\n     * @see #childNode(int)\n     */\n    public Element child(int index) {\n        return children().get(index);\n    }\n\n    /**\n     * Get this element's child elements.\n     * <p/>\n     * This is effectively a filter on {@link #childNodes()} to get Element nodes.\n     * @return child elements. If this element has no children, returns an\n     * empty list.\n     * @see #childNodes()\n     */\n    public Elements children() {\n        // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n        List<Element> elements = new ArrayList<Element>();\n        for (Node node : childNodes) {\n            if (node instanceof Element)\n                elements.add((Element) node);\n        }\n        return new Elements(elements);\n    }\n\n    /**\n     * Find elements that match the selector query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param query a {@link Selector} query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String query) {\n        return Selector.select(query, this);\n    }\n    \n    /**\n     * Add a node to the last child of this element.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element appendChild(Node child) {\n        Validate.notNull(child);\n        \n        child.setParentNode(this);\n        childNodes.add(child);\n        return this;\n    }\n    \n    /**\n     * Add a node to the start of this element's children.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element prependChild(Node child) {\n        Validate.notNull(child);\n        \n        child.setParentNode(this);\n        childNodes.add(0, child);\n        return this;\n    }\n    \n    /**\n     * Create a new element by tag name, and add it as the last child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.appendElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element appendElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        appendChild(child);\n        return child;\n    }\n    \n    /**\n     * Create a new element by tag name, and add it as the first child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.prependElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element prependElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        prependChild(child);\n        return child;\n    }\n    \n    /**\n     * Create and append a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element appendText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        appendChild(node);\n        return this;\n    }\n    \n    /**\n     * Create and prepend a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element prependText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        prependChild(node);\n        return this;\n    }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n     * @param html HTML to add inside this element, after the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element append(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        for (Node node : fragment.childNodes()) {\n            node.parentNode = null;\n            appendChild(node);\n        }\n        return this;\n    }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node prepended to the start of the children.\n     * @param html HTML to add inside this element, before the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element prepend(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        List<Node> nodes = fragment.childNodes();\n        for (int i = nodes.size() - 1; i >= 0; i--) {\n            Node node = nodes.get(i);\n            node.parentNode = null;\n            prependChild(node);\n        }\n        return this;\n    }\n    \n    /**\n     * Remove all of the element's child nodes. Any attributes are left as-is.\n     * @return this element\n     */\n    public Element empty() {\n        childNodes.clear();\n        return this;\n    }\n\n    /**\n     Wrap the supplied HTML around this element.\n     @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitralily deep.\n     @return this element, for chaining.\n     */\n    public Element wrap(String html) {\n        Validate.notEmpty(html);\n\n        Element wrapBody = Parser.parseBodyFragmentRelaxed(html, baseUri).body();\n        Elements wrapChildren = wrapBody.children();\n        Element wrap = wrapChildren.first();\n        if (wrap == null) // nothing to wrap with; noop\n            return null;\n\n        Element deepest = getDeepChild(wrap);\n        parentNode.replaceChild(this, wrap);\n        deepest.addChild(this);\n\n        // remainder (unbalananced wrap, like <div></div><p></p> -- The <p> is remainder\n        if (wrapChildren.size() > 1) {\n            for (int i = 1; i < wrapChildren.size(); i++) { // skip first\n                Element remainder = wrapChildren.get(i);\n                remainder.parentNode.removeChild(remainder);\n                wrap.appendChild(remainder);\n            }\n        }\n        return this;\n    }\n\n    private Element getDeepChild(Element el) {\n        List<Element> children = el.children();\n        if (children.size() > 0)\n            return getDeepChild(children.get(0));\n        else\n            return el;\n    }\n    \n    /**\n     * Get sibling elements.\n     * @return sibling elements\n     */\n    public Elements siblingElements() {\n        return parent().children();\n    }\n\n    /**\n     * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s, \n     * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.\n     * <p/>\n     * This is similar to {@link #nextSibling()}, but specifically finds only Elements\n     * @return the next element, or null if there is no next element\n     * @see #previousElementSibling()\n     */\n    public Element nextElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (siblings.size() > index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }\n\n    /**\n     * Gets the previous element sibling of this element.\n     * @return the previous element, or null if there is no previous element\n     * @see #nextElementSibling()\n     */\n    public Element previousElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (index > 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }\n\n    /**\n     * Gets the first element sibling of this element.\n     * @return the first sibling that is an element (aka the parent's first element child) \n     */\n    public Element firstElementSibling() {\n        // todo: should firstSibling() exclude this?\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(0) : null;\n    }\n    \n    /**\n     * Get the list index of this element in its element sibling list. I.e. if this is the first element\n     * sibling, returns 0.\n     * @return position in element sibling list\n     */\n    public Integer elementSiblingIndex() {\n       if (parent() == null) return 0;\n       return indexInList(this, parent().children()); \n    }\n\n    /**\n     * Gets the last element sibling of this element\n     * @return the last sibling that is an element (aka the parent's last element child) \n     */\n    public Element lastElementSibling() {\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;\n    }\n\n    // DOM type methods\n\n    /**\n     * Finds elements, including and recursively under this element, with the specified tag name.\n     * @param tagName The tag name to search for (case insensitively).\n     * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.\n     */\n    public Elements getElementsByTag(String tagName) {\n        Validate.notEmpty(tagName);\n        tagName = tagName.toLowerCase().trim();\n\n        return Collector.collect(new Evaluator.Tag(tagName), this);\n    }\n\n    /**\n     * Find an element by ID, including or under this element.\n     * <p>\n     * Note that this finds the first matching ID, starting with this element. If you search down from a different\n     * starting point, it is possible to find a different element by ID. For unique element by ID within a Document,\n     * use {@link Document#getElementById(String)}\n     * @param id The ID to search for.\n     * @return The first matching element by ID, starting with this element, or null if none found.\n     */\n    public Element getElementById(String id) {\n        Validate.notEmpty(id);\n        \n        Elements elements = Collector.collect(new Evaluator.Id(id), this);\n        if (elements.size() > 0)\n            return elements.get(0);\n        else\n            return null;\n    }\n\n    /**\n     * Find elements that have this class, including or under this element. Case insensitive.\n     * <p>\n     * Elements can have multiple classes (e.g. {@code <div class=\"header round first\">}. This method\n     * checks each class, so you can find the above with {@code el.getElementsByClass(\"header\");}.\n     * \n     * @param className the name of the class to search for.\n     * @return elements with the supplied class name, empty if none\n     * @see #hasClass(String)\n     * @see #classNames()\n     */\n    public Elements getElementsByClass(String className) {\n        Validate.notEmpty(className);\n\n        return Collector.collect(new Evaluator.Class(className), this);\n    }\n\n    /**\n     * Find elements that have a named attribute set. Case insensitive.\n     *\n     * @param key name of the attribute\n     * @return elements that have this attribute, empty if none\n     */\n    public Elements getElementsByAttribute(String key) {\n        Validate.notEmpty(key);\n        key = key.trim().toLowerCase();\n\n        return Collector.collect(new Evaluator.Attribute(key), this);\n    }\n\n    /**\n     * Find elements that have an attribute with the specific value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that have this attribute with this value, empty if none\n     */\n    public Elements getElementsByAttributeValue(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);\n    }\n\n    /**\n     * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that do not have a matching attribute\n     */\n    public Elements getElementsByAttributeValueNot(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);\n    }\n\n    /**\n     * Find elements that have attributes that start with the value prefix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valuePrefix start of attribute value\n     * @return elements that have attributes that start with the value prefix\n     */\n    public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {\n        return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);\n    }\n\n    /**\n     * Find elements that have attributes that end with the value suffix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valueSuffix end of the attribute value\n     * @return elements that have attributes that end with the value suffix\n     */\n    public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {\n        return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);\n    }\n\n    /**\n     * Find elements that have attributes whose value contains the match string. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param match substring of value to search for\n     * @return elements that have attributes containing this text\n     */\n    public Elements getElementsByAttributeValueContaining(String key, String match) {\n        return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is less than the supplied index.\n     * @param index 0-based index\n     * @return elements less than index\n     */\n    public Elements getElementsByIndexLessThan(int index) {\n        return Collector.collect(new Evaluator.IndexLessThan(index), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is greater than the supplied index.\n     * @param index 0-based index\n     * @return elements greater than index\n     */\n    public Elements getElementsByIndexGreaterThan(int index) {\n        return Collector.collect(new Evaluator.IndexGreaterThan(index), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is equal to the supplied index.\n     * @param index 0-based index\n     * @return elements equal to index\n     */\n    public Elements getElementsByIndexEquals(int index) {\n        return Collector.collect(new Evaluator.IndexEquals(index), this);\n    }\n    \n    /**\n     * Find all elements under this element (including self, and children of children).\n     * \n     * @return all elements\n     */\n    public Elements getAllElements() {\n        return Collector.collect(new Evaluator.AllElements(), this);\n    }\n\n    /**\n     * Gets the combined text of this element and all its children.\n     * \n     * @return unencoded text, or empty string if none.\n     */\n    public String text() {\n        StringBuilder sb = new StringBuilder();\n        text(sb);\n        return sb.toString().trim();\n    }\n\n    private void text(StringBuilder accum) {\n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\n                String text = textNode.getWholeText();\n\n                if (!preserveWhitespace()) {\n                    text = TextNode.normaliseWhitespace(text);\n                    if (TextNode.lastCharIsWhitespace(accum))\n                        text = TextNode.stripLeadingWhitespace(text);\n                }\n                accum.append(text);\n\n            } else if (child instanceof Element) {\n                Element element = (Element) child;\n                if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum))\n                    accum.append(\" \");\n                element.text(accum);\n            }\n        }\n    }\n\n    boolean preserveWhitespace() {\n        return tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace();\n    }\n\n    /**\n     * Set the text of this element. Any existing contents (text or elements) will be cleared\n     * @param text unencoded text\n     * @return this element\n     */\n    public Element text(String text) {\n        Validate.notNull(text);\n\n        empty();\n        TextNode textNode = new TextNode(text, baseUri);\n        appendChild(textNode);\n\n        return this;\n    }\n\n    /**\n     Test if this element has any text content (that is not just whitespace).\n     @return true if element has non-blank text content.\n     */\n    public boolean hasText() {\n        for (Node child: childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\n                if (!textNode.isBlank())\n                    return true;\n            } else if (child instanceof Element) {\n                Element el = (Element) child;\n                if (el.hasText())\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag.\n     * @return the data, or empty string if none\n     */\n    public String data() {\n        StringBuilder sb = new StringBuilder();\n\n        for (Node childNode : childNodes) {\n            if (childNode instanceof DataNode) {\n                DataNode data = (DataNode) childNode;\n                sb.append(data.getWholeData());\nif((childNode instanceof Element)){\n                Element element = (Element) childNode;\n                String elementData = element.data();\n\nsb.append(elementData);\n            }\n        }\n        return sb.toString();\n    }   \n\n    /**\n     * Gets the literal value of this element's \"class\" attribute, which may include multiple class names, space\n     * separated. (E.g. on <code>&lt;div class=\"header gray\"></code> returns, \"<code>header gray</code>\")\n     * @return The literal class attribute, or <b>empty string</b> if no class attribute set.\n     */\n    public String className() {\n        return attributes.hasKey(\"class\") ? attributes.get(\"class\") : \"\";\n    }\n\n    /**\n     * Get all of the element's class names. E.g. on element {@code <div class=\"header gray\"}>},\n     * returns a set of two elements {@code \"header\", \"gray\"}. Note that modifications to this set are not pushed to\n     * the backing {@code class} attribute; use the {@link #classNames(java.util.Set)} method to persist them.\n     * @return set of classnames, empty if no class attribute\n     */\n    public Set<String> classNames() {\n        if (classNames == null) {\n            String[] names = className().split(\"\\\\s+\");\n            classNames = new LinkedHashSet<String>(Arrays.asList(names));\n        }\n        return classNames;\n    }\n\n    /**\n     Set the element's {@code class} attribute to the supplied class names.\n     @param classNames set of classes\n     @return this element, for chaining\n     */\n    public Element classNames(Set<String> classNames) {\n        Validate.notNull(classNames);\n        attributes.put(\"class\", StringUtils.join(classNames, \" \"));\n        return this;\n    }\n\n    /**\n     * Tests if this element has a class.\n     * @param className name of class to check for\n     * @return true if it does, false if not\n     */\n    public boolean hasClass(String className) {\n        return classNames().contains(className);\n    }\n\n    /**\n     Add a class name to this element's {@code class} attribute.\n     @param className class name to add\n     @return this element\n     */\n    public Element addClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.add(className);\n        classNames(classes);\n\n        return this;\n    }\n\n    /**\n     Remove a class name from this element's {@code class} attribute.\n     @param className class name to remove\n     @return this element\n     */\n    public Element removeClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.remove(className);\n        classNames(classes);\n\n        return this;\n    }\n\n    /**\n     Toggle a class name on this element's {@code class} attribute: if present, remove it; otherwise add it.\n     @param className class name to toggle\n     @return this element\n     */\n    public Element toggleClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        if (classes.contains(className))\n            classes.remove(className);\n        else\n            classes.add(className);\n        classNames(classes);\n\n        return this;\n    }\n    \n    /**\n     * Get the value of a form element (input, textarea, etc).\n     * @return the value of the form element, or empty string if not set.\n     */\n    public String val() {\n        if (tagName().equals(\"textarea\"))\n            return text();\n        else\n            return attr(\"value\");\n    }\n    \n    /**\n     * Set the value of a form element (input, textarea, etc).\n     * @param value value to set\n     * @return this element (for chaining)\n     */\n    public Element val(String value) {\n        if (tagName().equals(\"textarea\"))\n            text(value);\n        else\n            attr(\"value\", value);\n        return this;\n    }\n\n    void outerHtml(StringBuilder accum) {\n        if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0))\n            indent(accum);\n        accum\n                .append(\"<\")\n                .append(tagName())\n                .append(attributes.html());\n\n        if (childNodes.isEmpty() && tag.isEmpty()) {\n            accum.append(\" />\");\n        } else {\n            accum.append(\">\");\n            html(accum);\n            if (tag.canContainBlock()) indent(accum);\n            accum.append(\"</\").append(tagName()).append(\">\");\n        }\n    }\n\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html() {\n        StringBuilder accum = new StringBuilder();\n        html(accum); \n        return accum.toString().trim();\n    }\n\n    private void html(StringBuilder accum) {\n        for (Node node : childNodes)\n            node.outerHtml(accum);\n    }\n    \n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html) {\n        empty();\n        append(html);\n        return this;\n    }\n\n    public String toString() {\n        return outerHtml();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Element)) return false;\n        if (!super.equals(o)) return false;\n\n        Element element = (Element) o;\n\n        if (tag != null ? !tag.equals(element.tag) : element.tag != null) return false;\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (tag != null ? tag.hashCode() : 0);\n        return result;\n    }\n}"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        TextNode textNode = new TextNode(text, baseUri);",
        "line": 613,
        "aftercode": "TextNode textNode = new TextNode();"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notEmpty(className);",
        "line": 458,
        "aftercode": "notEmpty();"
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByAttributeValueContaining(String key, String match) {",
        "line": 527,
        "aftercode": ""
    },
    {
        "id": 11,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            classes.add(className);",
        "line": 743,
        "aftercode": "classes.add(true);"
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Elements getElementsByAttributeValueContaining(String key, String match) {",
        "line": 527,
        "aftercode": ""
    },
    {
        "id": 10,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(className);",
        "line": 707,
        "aftercode": "notNull();"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                sb.append(data.getWholeData());",
        "line": 648,
        "aftercode": "sb.append(elementData);"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Integer index = indexInList(this, siblings);",
        "line": 376,
        "aftercode": "index = indexInList(this, siblings);"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                sb.append(data.getWholeData());",
        "line": 646,
        "aftercode": "package org.jsoup.nodes;\n\nimport org.apache.commons.lang.Validate;\nimport org.apache.commons.lang.StringUtils;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Collector;\nimport org.jsoup.select.Elements;\nimport org.jsoup.select.Selector;\n\nimport java.util.*;\n\n/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private final Tag tag;\n    private Set<String> classNames;\n    \n    /**\n     * Create a new, standalone Element. (Standalone in that is has no parent.)\n     * \n     * @param tag tag of this element\n     * @param baseUri the base URI\n     * @param attributes initial attributes\n     * @see #appendChild(Node)\n     * @see #appendElement(String)\n     */\n    public Element(Tag tag, String baseUri, Attributes attributes) {\n        super(baseUri, attributes);\n        \n        Validate.notNull(tag);    \n        this.tag = tag;\n    }\n    \n    /**\n     * Create a new Element from a tag and a base URI.\n     * \n     * @param tag element tag\n     * @param baseUri the base URI of this element. It is acceptable for the base URI to be an empty\n     *            string, but not null.\n     * @see Tag#valueOf(String)\n     */\n    public Element(Tag tag, String baseUri) {\n        this(tag, baseUri, new Attributes());\n    }\n\n    @Override\n    public String nodeName() {\n        return tag.getName();\n    }\n\n    /**\n     * Get the name of the tag for this element. E.g. {@code div}\n     * \n     * @return the tag name\n     */\n    public String tagName() {\n        return tag.getName();\n    }\n\n    /**\n     * Get the Tag for this element.\n     * \n     * @return the tag object\n     */\n    public Tag tag() {\n        return tag;\n    }\n    \n    /**\n     * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element\n     * {@code <p> == false}).\n     * \n     * @return true if block, false if not (and thus inline)\n     */\n    public boolean isBlock() {\n        return tag.isBlock();\n    }\n\n    /**\n     * Get the {@code id} attribute of this element.\n     * \n     * @return The id attribute, if present, or an empty string if not.\n     */\n    public String id() {\n        String id = attr(\"id\");\n        return id == null ? \"\" : id;\n    }\n\n    /**\n     * Set an attribute value on this element. If this element already has an attribute with the\n     * key, its value is updated; otherwise, a new attribute is added.\n     * \n     * @return this element\n     */\n    public Element attr(String attributeKey, String attributeValue) {\n        super.attr(attributeKey, attributeValue);\n        return this;\n    }\n\n    @Override\n    public Element parent() {\n        return (Element) super.parent();\n    }\n\n    /**\n     * Get this element's parent and ancestors, up to the document root.\n     * @return this element's stack of parents, closest first.\n     */\n    public Elements parents() {\n        Elements parents = new Elements();\n        accumulateParents(this, parents);\n        return parents;\n    }\n\n    private static void accumulateParents(Element el, Elements parents) {\n        Element parent = el.parent();\n        if (parent != null && !parent.tagName().equals(\"#root\")) {\n            parents.add(parent);\n            accumulateParents(parent, parents);\n        }\n    }\n\n    /**\n     * Get a child element of this element, by its 0-based index number.\n     * <p/>\n     * Note that an element can have both mixed Nodes and Elements as children. This method inspects\n     * a filtered list of children that are elements, and the index is based on that filtered list.\n     * \n     * @param index the index number of the element to retrieve\n     * @return the child element, if it exists, or {@code null} if absent.\n     * @see #childNode(int)\n     */\n    public Element child(int index) {\n        return children().get(index);\n    }\n\n    /**\n     * Get this element's child elements.\n     * <p/>\n     * This is effectively a filter on {@link #childNodes()} to get Element nodes.\n     * @return child elements. If this element has no children, returns an\n     * empty list.\n     * @see #childNodes()\n     */\n    public Elements children() {\n        // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n        List<Element> elements = new ArrayList<Element>();\n        for (Node node : childNodes) {\n            if (node instanceof Element)\n                elements.add((Element) node);\n        }\n        return new Elements(elements);\n    }\n\n    /**\n     * Find elements that match the selector query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param query a {@link Selector} query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String query) {\n        return Selector.select(query, this);\n    }\n    \n    /**\n     * Add a node to the last child of this element.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element appendChild(Node child) {\n        Validate.notNull(child);\n        \n        child.setParentNode(this);\n        childNodes.add(child);\n        return this;\n    }\n    \n    /**\n     * Add a node to the start of this element's children.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element prependChild(Node child) {\n        Validate.notNull(child);\n        \n        child.setParentNode(this);\n        childNodes.add(0, child);\n        return this;\n    }\n    \n    /**\n     * Create a new element by tag name, and add it as the last child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.appendElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element appendElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        appendChild(child);\n        return child;\n    }\n    \n    /**\n     * Create a new element by tag name, and add it as the first child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.prependElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element prependElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        prependChild(child);\n        return child;\n    }\n    \n    /**\n     * Create and append a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element appendText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        appendChild(node);\n        return this;\n    }\n    \n    /**\n     * Create and prepend a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element prependText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        prependChild(node);\n        return this;\n    }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n     * @param html HTML to add inside this element, after the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element append(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        for (Node node : fragment.childNodes()) {\n            node.parentNode = null;\n            appendChild(node);\n        }\n        return this;\n    }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node prepended to the start of the children.\n     * @param html HTML to add inside this element, before the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element prepend(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        List<Node> nodes = fragment.childNodes();\n        for (int i = nodes.size() - 1; i >= 0; i--) {\n            Node node = nodes.get(i);\n            node.parentNode = null;\n            prependChild(node);\n        }\n        return this;\n    }\n    \n    /**\n     * Remove all of the element's child nodes. Any attributes are left as-is.\n     * @return this element\n     */\n    public Element empty() {\n        childNodes.clear();\n        return this;\n    }\n\n    /**\n     Wrap the supplied HTML around this element.\n     @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitralily deep.\n     @return this element, for chaining.\n     */\n    public Element wrap(String html) {\n        Validate.notEmpty(html);\n\n        Element wrapBody = Parser.parseBodyFragmentRelaxed(html, baseUri).body();\n        Elements wrapChildren = wrapBody.children();\n        Element wrap = wrapChildren.first();\n        if (wrap == null) // nothing to wrap with; noop\n            return null;\n\n        Element deepest = getDeepChild(wrap);\n        parentNode.replaceChild(this, wrap);\n        deepest.addChild(this);\n\n        // remainder (unbalananced wrap, like <div></div><p></p> -- The <p> is remainder\n        if (wrapChildren.size() > 1) {\n            for (int i = 1; i < wrapChildren.size(); i++) { // skip first\n                Element remainder = wrapChildren.get(i);\n                remainder.parentNode.removeChild(remainder);\n                wrap.appendChild(remainder);\n            }\n        }\n        return this;\n    }\n\n    private Element getDeepChild(Element el) {\n        List<Element> children = el.children();\n        if (children.size() > 0)\n            return getDeepChild(children.get(0));\n        else\n            return el;\n    }\n    \n    /**\n     * Get sibling elements.\n     * @return sibling elements\n     */\n    public Elements siblingElements() {\n        return parent().children();\n    }\n\n    /**\n     * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s, \n     * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.\n     * <p/>\n     * This is similar to {@link #nextSibling()}, but specifically finds only Elements\n     * @return the next element, or null if there is no next element\n     * @see #previousElementSibling()\n     */\n    public Element nextElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (siblings.size() > index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }\n\n    /**\n     * Gets the previous element sibling of this element.\n     * @return the previous element, or null if there is no previous element\n     * @see #nextElementSibling()\n     */\n    public Element previousElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (index > 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }\n\n    /**\n     * Gets the first element sibling of this element.\n     * @return the first sibling that is an element (aka the parent's first element child) \n     */\n    public Element firstElementSibling() {\n        // todo: should firstSibling() exclude this?\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(0) : null;\n    }\n    \n    /**\n     * Get the list index of this element in its element sibling list. I.e. if this is the first element\n     * sibling, returns 0.\n     * @return position in element sibling list\n     */\n    public Integer elementSiblingIndex() {\n       if (parent() == null) return 0;\n       return indexInList(this, parent().children()); \n    }\n\n    /**\n     * Gets the last element sibling of this element\n     * @return the last sibling that is an element (aka the parent's last element child) \n     */\n    public Element lastElementSibling() {\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;\n    }\n\n    // DOM type methods\n\n    /**\n     * Finds elements, including and recursively under this element, with the specified tag name.\n     * @param tagName The tag name to search for (case insensitively).\n     * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.\n     */\n    public Elements getElementsByTag(String tagName) {\n        Validate.notEmpty(tagName);\n        tagName = tagName.toLowerCase().trim();\n\n        return Collector.collect(new Evaluator.Tag(tagName), this);\n    }\n\n    /**\n     * Find an element by ID, including or under this element.\n     * <p>\n     * Note that this finds the first matching ID, starting with this element. If you search down from a different\n     * starting point, it is possible to find a different element by ID. For unique element by ID within a Document,\n     * use {@link Document#getElementById(String)}\n     * @param id The ID to search for.\n     * @return The first matching element by ID, starting with this element, or null if none found.\n     */\n    public Element getElementById(String id) {\n        Validate.notEmpty(id);\n        \n        Elements elements = Collector.collect(new Evaluator.Id(id), this);\n        if (elements.size() > 0)\n            return elements.get(0);\n        else\n            return null;\n    }\n\n    /**\n     * Find elements that have this class, including or under this element. Case insensitive.\n     * <p>\n     * Elements can have multiple classes (e.g. {@code <div class=\"header round first\">}. This method\n     * checks each class, so you can find the above with {@code el.getElementsByClass(\"header\");}.\n     * \n     * @param className the name of the class to search for.\n     * @return elements with the supplied class name, empty if none\n     * @see #hasClass(String)\n     * @see #classNames()\n     */\n    public Elements getElementsByClass(String className) {\n        Validate.notEmpty(className);\n\n        return Collector.collect(new Evaluator.Class(className), this);\n    }\n\n    /**\n     * Find elements that have a named attribute set. Case insensitive.\n     *\n     * @param key name of the attribute\n     * @return elements that have this attribute, empty if none\n     */\n    public Elements getElementsByAttribute(String key) {\n        Validate.notEmpty(key);\n        key = key.trim().toLowerCase();\n\n        return Collector.collect(new Evaluator.Attribute(key), this);\n    }\n\n    /**\n     * Find elements that have an attribute with the specific value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that have this attribute with this value, empty if none\n     */\n    public Elements getElementsByAttributeValue(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);\n    }\n\n    /**\n     * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that do not have a matching attribute\n     */\n    public Elements getElementsByAttributeValueNot(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);\n    }\n\n    /**\n     * Find elements that have attributes that start with the value prefix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valuePrefix start of attribute value\n     * @return elements that have attributes that start with the value prefix\n     */\n    public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {\n        return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);\n    }\n\n    /**\n     * Find elements that have attributes that end with the value suffix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valueSuffix end of the attribute value\n     * @return elements that have attributes that end with the value suffix\n     */\n    public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {\n        return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);\n    }\n\n    /**\n     * Find elements that have attributes whose value contains the match string. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param match substring of value to search for\n     * @return elements that have attributes containing this text\n     */\n    public Elements getElementsByAttributeValueContaining(String key, String match) {\n        return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is less than the supplied index.\n     * @param index 0-based index\n     * @return elements less than index\n     */\n    public Elements getElementsByIndexLessThan(int index) {\n        return Collector.collect(new Evaluator.IndexLessThan(index), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is greater than the supplied index.\n     * @param index 0-based index\n     * @return elements greater than index\n     */\n    public Elements getElementsByIndexGreaterThan(int index) {\n        return Collector.collect(new Evaluator.IndexGreaterThan(index), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is equal to the supplied index.\n     * @param index 0-based index\n     * @return elements equal to index\n     */\n    public Elements getElementsByIndexEquals(int index) {\n        return Collector.collect(new Evaluator.IndexEquals(index), this);\n    }\n    \n    /**\n     * Find all elements under this element (including self, and children of children).\n     * \n     * @return all elements\n     */\n    public Elements getAllElements() {\n        return Collector.collect(new Evaluator.AllElements(), this);\n    }\n\n    /**\n     * Gets the combined text of this element and all its children.\n     * \n     * @return unencoded text, or empty string if none.\n     */\n    public String text() {\n        StringBuilder sb = new StringBuilder();\n        text(sb);\n        return sb.toString().trim();\n    }\n\n    private void text(StringBuilder accum) {\n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\n                String text = textNode.getWholeText();\n\n                if (!preserveWhitespace()) {\n                    text = TextNode.normaliseWhitespace(text);\n                    if (TextNode.lastCharIsWhitespace(accum))\n                        text = TextNode.stripLeadingWhitespace(text);\n                }\n                accum.append(text);\n\n            } else if (child instanceof Element) {\n                Element element = (Element) child;\n                if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum))\n                    accum.append(\" \");\n                element.text(accum);\n            }\n        }\n    }\n\n    boolean preserveWhitespace() {\n        return tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace();\n    }\n\n    /**\n     * Set the text of this element. Any existing contents (text or elements) will be cleared\n     * @param text unencoded text\n     * @return this element\n     */\n    public Element text(String text) {\n        Validate.notNull(text);\n\n        empty();\n        TextNode textNode = new TextNode(text, baseUri);\n        appendChild(textNode);\n\n        return this;\n    }\n\n    /**\n     Test if this element has any text content (that is not just whitespace).\n     @return true if element has non-blank text content.\n     */\n    public boolean hasText() {\n        for (Node child: childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\n                if (!textNode.isBlank())\n                    return true;\n            } else if (child instanceof Element) {\n                Element el = (Element) child;\n                if (el.hasText())\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag.\n     * @return the data, or empty string if none\n     */\n    public String data() {\n        StringBuilder sb = new StringBuilder();\n\n        for (Node childNode : childNodes) {\n            if (childNode instanceof DataNode) {\n                DataNode data = (DataNode) childNode;\nsb.append(elementData);\n            } else if (childNode instanceof Element) {\n                Element element = (Element) childNode;\n                String elementData = element.data();\n\nsb.append(elementData);\n            }\n        }\n        return sb.toString();\n    }   \n\n    /**\n     * Gets the literal value of this element's \"class\" attribute, which may include multiple class names, space\n     * separated. (E.g. on <code>&lt;div class=\"header gray\"></code> returns, \"<code>header gray</code>\")\n     * @return The literal class attribute, or <b>empty string</b> if no class attribute set.\n     */\n    public String className() {\n        return attributes.hasKey(\"class\") ? attributes.get(\"class\") : \"\";\n    }\n\n    /**\n     * Get all of the element's class names. E.g. on element {@code <div class=\"header gray\"}>},\n     * returns a set of two elements {@code \"header\", \"gray\"}. Note that modifications to this set are not pushed to\n     * the backing {@code class} attribute; use the {@link #classNames(java.util.Set)} method to persist them.\n     * @return set of classnames, empty if no class attribute\n     */\n    public Set<String> classNames() {\n        if (classNames == null) {\n            String[] names = className().split(\"\\\\s+\");\n            classNames = new LinkedHashSet<String>(Arrays.asList(names));\n        }\n        return classNames;\n    }\n\n    /**\n     Set the element's {@code class} attribute to the supplied class names.\n     @param classNames set of classes\n     @return this element, for chaining\n     */\n    public Element classNames(Set<String> classNames) {\n        Validate.notNull(classNames);\n        attributes.put(\"class\", StringUtils.join(classNames, \" \"));\n        return this;\n    }\n\n    /**\n     * Tests if this element has a class.\n     * @param className name of class to check for\n     * @return true if it does, false if not\n     */\n    public boolean hasClass(String className) {\n        return classNames().contains(className);\n    }\n\n    /**\n     Add a class name to this element's {@code class} attribute.\n     @param className class name to add\n     @return this element\n     */\n    public Element addClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.add(className);\n        classNames(classes);\n\n        return this;\n    }\n\n    /**\n     Remove a class name from this element's {@code class} attribute.\n     @param className class name to remove\n     @return this element\n     */\n    public Element removeClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.remove(className);\n        classNames(classes);\n\n        return this;\n    }\n\n    /**\n     Toggle a class name on this element's {@code class} attribute: if present, remove it; otherwise add it.\n     @param className class name to toggle\n     @return this element\n     */\n    public Element toggleClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        if (classes.contains(className))\n            classes.remove(className);\n        else\n            classes.add(className);\n        classNames(classes);\n\n        return this;\n    }\n    \n    /**\n     * Get the value of a form element (input, textarea, etc).\n     * @return the value of the form element, or empty string if not set.\n     */\n    public String val() {\n        if (tagName().equals(\"textarea\"))\n            return text();\n        else\n            return attr(\"value\");\n    }\n    \n    /**\n     * Set the value of a form element (input, textarea, etc).\n     * @param value value to set\n     * @return this element (for chaining)\n     */\n    public Element val(String value) {\n        if (tagName().equals(\"textarea\"))\n            text(value);\n        else\n            attr(\"value\", value);\n        return this;\n    }\n\n    void outerHtml(StringBuilder accum) {\n        if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0))\n            indent(accum);\n        accum\n                .append(\"<\")\n                .append(tagName())\n                .append(attributes.html());\n\n        if (childNodes.isEmpty() && tag.isEmpty()) {\n            accum.append(\" />\");\n        } else {\n            accum.append(\">\");\n            html(accum);\n            if (tag.canContainBlock()) indent(accum);\n            accum.append(\"</\").append(tagName()).append(\">\");\n        }\n    }\n\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html() {\n        StringBuilder accum = new StringBuilder();\n        html(accum); \n        return accum.toString().trim();\n    }\n\n    private void html(StringBuilder accum) {\n        for (Node node : childNodes)\n            node.outerHtml(accum);\n    }\n    \n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html) {\n        empty();\n        append(html);\n        return this;\n    }\n\n    public String toString() {\n        return outerHtml();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Element)) return false;\n        if (!super.equals(o)) return false;\n\n        Element element = (Element) o;\n\n        if (tag != null ? !tag.equals(element.tag) : element.tag != null) return false;\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (tag != null ? tag.hashCode() : 0);\n        return result;\n    }\n}"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        if (index > 0)",
        "line": 378,
        "aftercode": "if((index > 0)){"
    },
    {
        "id": 11,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Set<String> classes = classNames();",
        "line": 739,
        "aftercode": "String [] classes = classNames();"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Element child = new Element(Tag.valueOf(tagName), baseUri());",
        "line": 219,
        "aftercode": "Element child = new Element();"
    },
    {
        "id": 10,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(className);",
        "line": 709,
        "aftercode": "package org.jsoup.nodes;\n\nimport org.apache.commons.lang.Validate;\nimport org.apache.commons.lang.StringUtils;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Collector;\nimport org.jsoup.select.Elements;\nimport org.jsoup.select.Selector;\n\nimport java.util.*;\n\n/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private final Tag tag;\n    private Set<String> classNames;\n    \n    /**\n     * Create a new, standalone Element. (Standalone in that is has no parent.)\n     * \n     * @param tag tag of this element\n     * @param baseUri the base URI\n     * @param attributes initial attributes\n     * @see #appendChild(Node)\n     * @see #appendElement(String)\n     */\n    public Element(Tag tag, String baseUri, Attributes attributes) {\n        super(baseUri, attributes);\n        \n        Validate.notNull(tag);    \n        this.tag = tag;\n    }\n    \n    /**\n     * Create a new Element from a tag and a base URI.\n     * \n     * @param tag element tag\n     * @param baseUri the base URI of this element. It is acceptable for the base URI to be an empty\n     *            string, but not null.\n     * @see Tag#valueOf(String)\n     */\n    public Element(Tag tag, String baseUri) {\n        this(tag, baseUri, new Attributes());\n    }\n\n    @Override\n    public String nodeName() {\n        return tag.getName();\n    }\n\n    /**\n     * Get the name of the tag for this element. E.g. {@code div}\n     * \n     * @return the tag name\n     */\n    public String tagName() {\n        return tag.getName();\n    }\n\n    /**\n     * Get the Tag for this element.\n     * \n     * @return the tag object\n     */\n    public Tag tag() {\n        return tag;\n    }\n    \n    /**\n     * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element\n     * {@code <p> == false}).\n     * \n     * @return true if block, false if not (and thus inline)\n     */\n    public boolean isBlock() {\n        return tag.isBlock();\n    }\n\n    /**\n     * Get the {@code id} attribute of this element.\n     * \n     * @return The id attribute, if present, or an empty string if not.\n     */\n    public String id() {\n        String id = attr(\"id\");\n        return id == null ? \"\" : id;\n    }\n\n    /**\n     * Set an attribute value on this element. If this element already has an attribute with the\n     * key, its value is updated; otherwise, a new attribute is added.\n     * \n     * @return this element\n     */\n    public Element attr(String attributeKey, String attributeValue) {\n        super.attr(attributeKey, attributeValue);\n        return this;\n    }\n\n    @Override\n    public Element parent() {\n        return (Element) super.parent();\n    }\n\n    /**\n     * Get this element's parent and ancestors, up to the document root.\n     * @return this element's stack of parents, closest first.\n     */\n    public Elements parents() {\n        Elements parents = new Elements();\n        accumulateParents(this, parents);\n        return parents;\n    }\n\n    private static void accumulateParents(Element el, Elements parents) {\n        Element parent = el.parent();\n        if (parent != null && !parent.tagName().equals(\"#root\")) {\n            parents.add(parent);\n            accumulateParents(parent, parents);\n        }\n    }\n\n    /**\n     * Get a child element of this element, by its 0-based index number.\n     * <p/>\n     * Note that an element can have both mixed Nodes and Elements as children. This method inspects\n     * a filtered list of children that are elements, and the index is based on that filtered list.\n     * \n     * @param index the index number of the element to retrieve\n     * @return the child element, if it exists, or {@code null} if absent.\n     * @see #childNode(int)\n     */\n    public Element child(int index) {\n        return children().get(index);\n    }\n\n    /**\n     * Get this element's child elements.\n     * <p/>\n     * This is effectively a filter on {@link #childNodes()} to get Element nodes.\n     * @return child elements. If this element has no children, returns an\n     * empty list.\n     * @see #childNodes()\n     */\n    public Elements children() {\n        // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n        List<Element> elements = new ArrayList<Element>();\n        for (Node node : childNodes) {\n            if (node instanceof Element)\n                elements.add((Element) node);\n        }\n        return new Elements(elements);\n    }\n\n    /**\n     * Find elements that match the selector query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param query a {@link Selector} query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String query) {\n        return Selector.select(query, this);\n    }\n    \n    /**\n     * Add a node to the last child of this element.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element appendChild(Node child) {\n        Validate.notNull(child);\n        \n        child.setParentNode(this);\n        childNodes.add(child);\n        return this;\n    }\n    \n    /**\n     * Add a node to the start of this element's children.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element prependChild(Node child) {\n        Validate.notNull(child);\n        \n        child.setParentNode(this);\n        childNodes.add(0, child);\n        return this;\n    }\n    \n    /**\n     * Create a new element by tag name, and add it as the last child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.appendElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element appendElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        appendChild(child);\n        return child;\n    }\n    \n    /**\n     * Create a new element by tag name, and add it as the first child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.prependElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element prependElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        prependChild(child);\n        return child;\n    }\n    \n    /**\n     * Create and append a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element appendText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        appendChild(node);\n        return this;\n    }\n    \n    /**\n     * Create and prepend a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element prependText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        prependChild(node);\n        return this;\n    }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n     * @param html HTML to add inside this element, after the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element append(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        for (Node node : fragment.childNodes()) {\n            node.parentNode = null;\n            appendChild(node);\n        }\n        return this;\n    }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node prepended to the start of the children.\n     * @param html HTML to add inside this element, before the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element prepend(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        List<Node> nodes = fragment.childNodes();\n        for (int i = nodes.size() - 1; i >= 0; i--) {\n            Node node = nodes.get(i);\n            node.parentNode = null;\n            prependChild(node);\n        }\n        return this;\n    }\n    \n    /**\n     * Remove all of the element's child nodes. Any attributes are left as-is.\n     * @return this element\n     */\n    public Element empty() {\n        childNodes.clear();\n        return this;\n    }\n\n    /**\n     Wrap the supplied HTML around this element.\n     @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitralily deep.\n     @return this element, for chaining.\n     */\n    public Element wrap(String html) {\n        Validate.notEmpty(html);\n\n        Element wrapBody = Parser.parseBodyFragmentRelaxed(html, baseUri).body();\n        Elements wrapChildren = wrapBody.children();\n        Element wrap = wrapChildren.first();\n        if (wrap == null) // nothing to wrap with; noop\n            return null;\n\n        Element deepest = getDeepChild(wrap);\n        parentNode.replaceChild(this, wrap);\n        deepest.addChild(this);\n\n        // remainder (unbalananced wrap, like <div></div><p></p> -- The <p> is remainder\n        if (wrapChildren.size() > 1) {\n            for (int i = 1; i < wrapChildren.size(); i++) { // skip first\n                Element remainder = wrapChildren.get(i);\n                remainder.parentNode.removeChild(remainder);\n                wrap.appendChild(remainder);\n            }\n        }\n        return this;\n    }\n\n    private Element getDeepChild(Element el) {\n        List<Element> children = el.children();\n        if (children.size() > 0)\n            return getDeepChild(children.get(0));\n        else\n            return el;\n    }\n    \n    /**\n     * Get sibling elements.\n     * @return sibling elements\n     */\n    public Elements siblingElements() {\n        return parent().children();\n    }\n\n    /**\n     * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s, \n     * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.\n     * <p/>\n     * This is similar to {@link #nextSibling()}, but specifically finds only Elements\n     * @return the next element, or null if there is no next element\n     * @see #previousElementSibling()\n     */\n    public Element nextElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (siblings.size() > index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }\n\n    /**\n     * Gets the previous element sibling of this element.\n     * @return the previous element, or null if there is no previous element\n     * @see #nextElementSibling()\n     */\n    public Element previousElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (index > 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }\n\n    /**\n     * Gets the first element sibling of this element.\n     * @return the first sibling that is an element (aka the parent's first element child) \n     */\n    public Element firstElementSibling() {\n        // todo: should firstSibling() exclude this?\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(0) : null;\n    }\n    \n    /**\n     * Get the list index of this element in its element sibling list. I.e. if this is the first element\n     * sibling, returns 0.\n     * @return position in element sibling list\n     */\n    public Integer elementSiblingIndex() {\n       if (parent() == null) return 0;\n       return indexInList(this, parent().children()); \n    }\n\n    /**\n     * Gets the last element sibling of this element\n     * @return the last sibling that is an element (aka the parent's last element child) \n     */\n    public Element lastElementSibling() {\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;\n    }\n\n    // DOM type methods\n\n    /**\n     * Finds elements, including and recursively under this element, with the specified tag name.\n     * @param tagName The tag name to search for (case insensitively).\n     * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.\n     */\n    public Elements getElementsByTag(String tagName) {\n        Validate.notEmpty(tagName);\n        tagName = tagName.toLowerCase().trim();\n\n        return Collector.collect(new Evaluator.Tag(tagName), this);\n    }\n\n    /**\n     * Find an element by ID, including or under this element.\n     * <p>\n     * Note that this finds the first matching ID, starting with this element. If you search down from a different\n     * starting point, it is possible to find a different element by ID. For unique element by ID within a Document,\n     * use {@link Document#getElementById(String)}\n     * @param id The ID to search for.\n     * @return The first matching element by ID, starting with this element, or null if none found.\n     */\n    public Element getElementById(String id) {\n        Validate.notEmpty(id);\n        \n        Elements elements = Collector.collect(new Evaluator.Id(id), this);\n        if (elements.size() > 0)\n            return elements.get(0);\n        else\n            return null;\n    }\n\n    /**\n     * Find elements that have this class, including or under this element. Case insensitive.\n     * <p>\n     * Elements can have multiple classes (e.g. {@code <div class=\"header round first\">}. This method\n     * checks each class, so you can find the above with {@code el.getElementsByClass(\"header\");}.\n     * \n     * @param className the name of the class to search for.\n     * @return elements with the supplied class name, empty if none\n     * @see #hasClass(String)\n     * @see #classNames()\n     */\n    public Elements getElementsByClass(String className) {\n        Validate.notEmpty(className);\n\n        return Collector.collect(new Evaluator.Class(className), this);\n    }\n\n    /**\n     * Find elements that have a named attribute set. Case insensitive.\n     *\n     * @param key name of the attribute\n     * @return elements that have this attribute, empty if none\n     */\n    public Elements getElementsByAttribute(String key) {\n        Validate.notEmpty(key);\n        key = key.trim().toLowerCase();\n\n        return Collector.collect(new Evaluator.Attribute(key), this);\n    }\n\n    /**\n     * Find elements that have an attribute with the specific value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that have this attribute with this value, empty if none\n     */\n    public Elements getElementsByAttributeValue(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);\n    }\n\n    /**\n     * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that do not have a matching attribute\n     */\n    public Elements getElementsByAttributeValueNot(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);\n    }\n\n    /**\n     * Find elements that have attributes that start with the value prefix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valuePrefix start of attribute value\n     * @return elements that have attributes that start with the value prefix\n     */\n    public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {\n        return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);\n    }\n\n    /**\n     * Find elements that have attributes that end with the value suffix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valueSuffix end of the attribute value\n     * @return elements that have attributes that end with the value suffix\n     */\n    public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {\n        return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);\n    }\n\n    /**\n     * Find elements that have attributes whose value contains the match string. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param match substring of value to search for\n     * @return elements that have attributes containing this text\n     */\n    public Elements getElementsByAttributeValueContaining(String key, String match) {\n        return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is less than the supplied index.\n     * @param index 0-based index\n     * @return elements less than index\n     */\n    public Elements getElementsByIndexLessThan(int index) {\n        return Collector.collect(new Evaluator.IndexLessThan(index), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is greater than the supplied index.\n     * @param index 0-based index\n     * @return elements greater than index\n     */\n    public Elements getElementsByIndexGreaterThan(int index) {\n        return Collector.collect(new Evaluator.IndexGreaterThan(index), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is equal to the supplied index.\n     * @param index 0-based index\n     * @return elements equal to index\n     */\n    public Elements getElementsByIndexEquals(int index) {\n        return Collector.collect(new Evaluator.IndexEquals(index), this);\n    }\n    \n    /**\n     * Find all elements under this element (including self, and children of children).\n     * \n     * @return all elements\n     */\n    public Elements getAllElements() {\n        return Collector.collect(new Evaluator.AllElements(), this);\n    }\n\n    /**\n     * Gets the combined text of this element and all its children.\n     * \n     * @return unencoded text, or empty string if none.\n     */\n    public String text() {\n        StringBuilder sb = new StringBuilder();\n        text(sb);\n        return sb.toString().trim();\n    }\n\n    private void text(StringBuilder accum) {\n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\n                String text = textNode.getWholeText();\n\n                if (!preserveWhitespace()) {\n                    text = TextNode.normaliseWhitespace(text);\n                    if (TextNode.lastCharIsWhitespace(accum))\n                        text = TextNode.stripLeadingWhitespace(text);\n                }\n                accum.append(text);\n\n            } else if (child instanceof Element) {\n                Element element = (Element) child;\n                if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum))\n                    accum.append(\" \");\n                element.text(accum);\n            }\n        }\n    }\n\n    boolean preserveWhitespace() {\n        return tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace();\n    }\n\n    /**\n     * Set the text of this element. Any existing contents (text or elements) will be cleared\n     * @param text unencoded text\n     * @return this element\n     */\n    public Element text(String text) {\n        Validate.notNull(text);\n\n        empty();\n        TextNode textNode = new TextNode(text, baseUri);\n        appendChild(textNode);\n\n        return this;\n    }\n\n    /**\n     Test if this element has any text content (that is not just whitespace).\n     @return true if element has non-blank text content.\n     */\n    public boolean hasText() {\n        for (Node child: childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\n                if (!textNode.isBlank())\n                    return true;\n            } else if (child instanceof Element) {\n                Element el = (Element) child;\n                if (el.hasText())\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag.\n     * @return the data, or empty string if none\n     */\n    public String data() {\n        StringBuilder sb = new StringBuilder();\n\n        for (Node childNode : childNodes) {\n            if (childNode instanceof DataNode) {\n                DataNode data = (DataNode) childNode;\n                sb.append(data.getWholeData());\n            } else if (childNode instanceof Element) {\n                Element element = (Element) childNode;\n                String elementData = element.data();\n                sb.append(elementData);\n            }\n        }\n        return sb.toString();\n    }   \n\n    /**\n     * Gets the literal value of this element's \"class\" attribute, which may include multiple class names, space\n     * separated. (E.g. on <code>&lt;div class=\"header gray\"></code> returns, \"<code>header gray</code>\")\n     * @return The literal class attribute, or <b>empty string</b> if no class attribute set.\n     */\n    public String className() {\n        return attributes.hasKey(\"class\") ? attributes.get(\"class\") : \"\";\n    }\n\n    /**\n     * Get all of the element's class names. E.g. on element {@code <div class=\"header gray\"}>},\n     * returns a set of two elements {@code \"header\", \"gray\"}. Note that modifications to this set are not pushed to\n     * the backing {@code class} attribute; use the {@link #classNames(java.util.Set)} method to persist them.\n     * @return set of classnames, empty if no class attribute\n     */\n    public Set<String> classNames() {\n        if (classNames == null) {\n            String[] names = className().split(\"\\\\s+\");\n            classNames = new LinkedHashSet<String>(Arrays.asList(names));\n        }\n        return classNames;\n    }\n\n    /**\n     Set the element's {@code class} attribute to the supplied class names.\n     @param classNames set of classes\n     @return this element, for chaining\n     */\n    public Element classNames(Set<String> classNames) {\n        Validate.notNull(classNames);\n        attributes.put(\"class\", StringUtils.join(classNames, \" \"));\n        return this;\n    }\n\n    /**\n     * Tests if this element has a class.\n     * @param className name of class to check for\n     * @return true if it does, false if not\n     */\n    public boolean hasClass(String className) {\n        return classNames().contains(className);\n    }\n\n    /**\n     Add a class name to this element's {@code class} attribute.\n     @param className class name to add\n     @return this element\n     */\n    public Element addClass(String className) {\nif((className == null)){\n        Validate.notNull(className);\n        Set<String> classes = classNames();\n        classes.add(className);\n        classNames(classes);\n\n        return this;\n}\n    }\n\n    /**\n     Remove a class name from this element's {@code class} attribute.\n     @param className class name to remove\n     @return this element\n     */\n    public Element removeClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.remove(className);\n        classNames(classes);\n\n        return this;\n    }\n\n    /**\n     Toggle a class name on this element's {@code class} attribute: if present, remove it; otherwise add it.\n     @param className class name to toggle\n     @return this element\n     */\n    public Element toggleClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        if (classes.contains(className))\n            classes.remove(className);\n        else\n            classes.add(className);\n        classNames(classes);\n\n        return this;\n    }\n    \n    /**\n     * Get the value of a form element (input, textarea, etc).\n     * @return the value of the form element, or empty string if not set.\n     */\n    public String val() {\n        if (tagName().equals(\"textarea\"))\n            return text();\n        else\n            return attr(\"value\");\n    }\n    \n    /**\n     * Set the value of a form element (input, textarea, etc).\n     * @param value value to set\n     * @return this element (for chaining)\n     */\n    public Element val(String value) {\n        if (tagName().equals(\"textarea\"))\n            text(value);\n        else\n            attr(\"value\", value);\n        return this;\n    }\n\n    void outerHtml(StringBuilder accum) {\n        if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0))\n            indent(accum);\n        accum\n                .append(\"<\")\n                .append(tagName())\n                .append(attributes.html());\n\n        if (childNodes.isEmpty() && tag.isEmpty()) {\n            accum.append(\" />\");\n        } else {\n            accum.append(\">\");\n            html(accum);\n            if (tag.canContainBlock()) indent(accum);\n            accum.append(\"</\").append(tagName()).append(\">\");\n        }\n    }\n\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html() {\n        StringBuilder accum = new StringBuilder();\n        html(accum); \n        return accum.toString().trim();\n    }\n\n    private void html(StringBuilder accum) {\n        for (Node node : childNodes)\n            node.outerHtml(accum);\n    }\n    \n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html) {\n        empty();\n        append(html);\n        return this;\n    }\n\n    public String toString() {\n        return outerHtml();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Element)) return false;\n        if (!super.equals(o)) return false;\n\n        Element element = (Element) o;\n\n        if (tag != null ? !tag.equals(element.tag) : element.tag != null) return false;\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (tag != null ? tag.hashCode() : 0);\n        return result;\n    }\n}"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            if (child instanceof TextNode) {",
        "line": 625,
        "aftercode": "if(!textNode.isBlank()){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Element text(String text) {",
        "line": 609,
        "aftercode": "String text        Validate.notNull(text);"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(index);",
        "line": 377,
        "aftercode": "index.notNull();"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notEmpty(className);",
        "line": 458,
        "aftercode": "Validate.notEmpty(null);"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                Element element = (Element) childNode;",
        "line": 650,
        "aftercode": "Element element = data.getWholeData();"
    },
    {
        "id": 10,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(className);",
        "line": 707,
        "aftercode": "this.className = className;"
    },
    {
        "id": 11,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        if (classes.contains(className))",
        "line": 740,
        "aftercode": "if(classes.contains(className)){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(text);",
        "line": 610,
        "aftercode": "notNull(text);"
    },
    {
        "id": 11,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(className);",
        "line": 737,
        "aftercode": "notNull(className);"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Element child = new Element(Tag.valueOf(tagName), baseUri());",
        "line": 219,
        "aftercode": "child = new Element(Tag.valueOf(tagName), baseUri());"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        empty();",
        "line": 612,
        "aftercode": "TextNode textNode = new TextNode(text, baseUri);"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            if (child instanceof TextNode) {",
        "line": 625,
        "aftercode": "if(child.isBlank()){"
    },
    {
        "id": 10,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        classes.add(className);",
        "line": 710,
        "aftercode": "classes.add(true);"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        appendChild(child);",
        "line": 220,
        "aftercode": "tagName = appendChild(child);"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(text);",
        "line": 610,
        "aftercode": "Validate.notNull(textNode);"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                sb.append(data.getWholeData());",
        "line": 648,
        "aftercode": "sb.getWholeData().append(data.getWholeData());"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Element text(String text) {",
        "line": 609,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Element child = new Element(Tag.valueOf(tagName), baseUri());",
        "line": 219,
        "aftercode": "Element child = new Element(baseUri(), baseUri());"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            } else if (childNode instanceof Element) {",
        "line": 646,
        "aftercode": "package org.jsoup.nodes;\n\nimport org.apache.commons.lang.Validate;\nimport org.apache.commons.lang.StringUtils;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Collector;\nimport org.jsoup.select.Elements;\nimport org.jsoup.select.Selector;\n\nimport java.util.*;\n\n/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private final Tag tag;\n    private Set<String> classNames;\n    \n    /**\n     * Create a new, standalone Element. (Standalone in that is has no parent.)\n     * \n     * @param tag tag of this element\n     * @param baseUri the base URI\n     * @param attributes initial attributes\n     * @see #appendChild(Node)\n     * @see #appendElement(String)\n     */\n    public Element(Tag tag, String baseUri, Attributes attributes) {\n        super(baseUri, attributes);\n        \n        Validate.notNull(tag);    \n        this.tag = tag;\n    }\n    \n    /**\n     * Create a new Element from a tag and a base URI.\n     * \n     * @param tag element tag\n     * @param baseUri the base URI of this element. It is acceptable for the base URI to be an empty\n     *            string, but not null.\n     * @see Tag#valueOf(String)\n     */\n    public Element(Tag tag, String baseUri) {\n        this(tag, baseUri, new Attributes());\n    }\n\n    @Override\n    public String nodeName() {\n        return tag.getName();\n    }\n\n    /**\n     * Get the name of the tag for this element. E.g. {@code div}\n     * \n     * @return the tag name\n     */\n    public String tagName() {\n        return tag.getName();\n    }\n\n    /**\n     * Get the Tag for this element.\n     * \n     * @return the tag object\n     */\n    public Tag tag() {\n        return tag;\n    }\n    \n    /**\n     * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element\n     * {@code <p> == false}).\n     * \n     * @return true if block, false if not (and thus inline)\n     */\n    public boolean isBlock() {\n        return tag.isBlock();\n    }\n\n    /**\n     * Get the {@code id} attribute of this element.\n     * \n     * @return The id attribute, if present, or an empty string if not.\n     */\n    public String id() {\n        String id = attr(\"id\");\n        return id == null ? \"\" : id;\n    }\n\n    /**\n     * Set an attribute value on this element. If this element already has an attribute with the\n     * key, its value is updated; otherwise, a new attribute is added.\n     * \n     * @return this element\n     */\n    public Element attr(String attributeKey, String attributeValue) {\n        super.attr(attributeKey, attributeValue);\n        return this;\n    }\n\n    @Override\n    public Element parent() {\n        return (Element) super.parent();\n    }\n\n    /**\n     * Get this element's parent and ancestors, up to the document root.\n     * @return this element's stack of parents, closest first.\n     */\n    public Elements parents() {\n        Elements parents = new Elements();\n        accumulateParents(this, parents);\n        return parents;\n    }\n\n    private static void accumulateParents(Element el, Elements parents) {\n        Element parent = el.parent();\n        if (parent != null && !parent.tagName().equals(\"#root\")) {\n            parents.add(parent);\n            accumulateParents(parent, parents);\n        }\n    }\n\n    /**\n     * Get a child element of this element, by its 0-based index number.\n     * <p/>\n     * Note that an element can have both mixed Nodes and Elements as children. This method inspects\n     * a filtered list of children that are elements, and the index is based on that filtered list.\n     * \n     * @param index the index number of the element to retrieve\n     * @return the child element, if it exists, or {@code null} if absent.\n     * @see #childNode(int)\n     */\n    public Element child(int index) {\n        return children().get(index);\n    }\n\n    /**\n     * Get this element's child elements.\n     * <p/>\n     * This is effectively a filter on {@link #childNodes()} to get Element nodes.\n     * @return child elements. If this element has no children, returns an\n     * empty list.\n     * @see #childNodes()\n     */\n    public Elements children() {\n        // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n        List<Element> elements = new ArrayList<Element>();\n        for (Node node : childNodes) {\n            if (node instanceof Element)\n                elements.add((Element) node);\n        }\n        return new Elements(elements);\n    }\n\n    /**\n     * Find elements that match the selector query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param query a {@link Selector} query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String query) {\n        return Selector.select(query, this);\n    }\n    \n    /**\n     * Add a node to the last child of this element.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element appendChild(Node child) {\n        Validate.notNull(child);\n        \n        child.setParentNode(this);\n        childNodes.add(child);\n        return this;\n    }\n    \n    /**\n     * Add a node to the start of this element's children.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element prependChild(Node child) {\n        Validate.notNull(child);\n        \n        child.setParentNode(this);\n        childNodes.add(0, child);\n        return this;\n    }\n    \n    /**\n     * Create a new element by tag name, and add it as the last child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.appendElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element appendElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        appendChild(child);\n        return child;\n    }\n    \n    /**\n     * Create a new element by tag name, and add it as the first child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.prependElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element prependElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        prependChild(child);\n        return child;\n    }\n    \n    /**\n     * Create and append a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element appendText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        appendChild(node);\n        return this;\n    }\n    \n    /**\n     * Create and prepend a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element prependText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        prependChild(node);\n        return this;\n    }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n     * @param html HTML to add inside this element, after the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element append(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        for (Node node : fragment.childNodes()) {\n            node.parentNode = null;\n            appendChild(node);\n        }\n        return this;\n    }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node prepended to the start of the children.\n     * @param html HTML to add inside this element, before the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element prepend(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        List<Node> nodes = fragment.childNodes();\n        for (int i = nodes.size() - 1; i >= 0; i--) {\n            Node node = nodes.get(i);\n            node.parentNode = null;\n            prependChild(node);\n        }\n        return this;\n    }\n    \n    /**\n     * Remove all of the element's child nodes. Any attributes are left as-is.\n     * @return this element\n     */\n    public Element empty() {\n        childNodes.clear();\n        return this;\n    }\n\n    /**\n     Wrap the supplied HTML around this element.\n     @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitralily deep.\n     @return this element, for chaining.\n     */\n    public Element wrap(String html) {\n        Validate.notEmpty(html);\n\n        Element wrapBody = Parser.parseBodyFragmentRelaxed(html, baseUri).body();\n        Elements wrapChildren = wrapBody.children();\n        Element wrap = wrapChildren.first();\n        if (wrap == null) // nothing to wrap with; noop\n            return null;\n\n        Element deepest = getDeepChild(wrap);\n        parentNode.replaceChild(this, wrap);\n        deepest.addChild(this);\n\n        // remainder (unbalananced wrap, like <div></div><p></p> -- The <p> is remainder\n        if (wrapChildren.size() > 1) {\n            for (int i = 1; i < wrapChildren.size(); i++) { // skip first\n                Element remainder = wrapChildren.get(i);\n                remainder.parentNode.removeChild(remainder);\n                wrap.appendChild(remainder);\n            }\n        }\n        return this;\n    }\n\n    private Element getDeepChild(Element el) {\n        List<Element> children = el.children();\n        if (children.size() > 0)\n            return getDeepChild(children.get(0));\n        else\n            return el;\n    }\n    \n    /**\n     * Get sibling elements.\n     * @return sibling elements\n     */\n    public Elements siblingElements() {\n        return parent().children();\n    }\n\n    /**\n     * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s, \n     * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.\n     * <p/>\n     * This is similar to {@link #nextSibling()}, but specifically finds only Elements\n     * @return the next element, or null if there is no next element\n     * @see #previousElementSibling()\n     */\n    public Element nextElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (siblings.size() > index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }\n\n    /**\n     * Gets the previous element sibling of this element.\n     * @return the previous element, or null if there is no previous element\n     * @see #nextElementSibling()\n     */\n    public Element previousElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (index > 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }\n\n    /**\n     * Gets the first element sibling of this element.\n     * @return the first sibling that is an element (aka the parent's first element child) \n     */\n    public Element firstElementSibling() {\n        // todo: should firstSibling() exclude this?\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(0) : null;\n    }\n    \n    /**\n     * Get the list index of this element in its element sibling list. I.e. if this is the first element\n     * sibling, returns 0.\n     * @return position in element sibling list\n     */\n    public Integer elementSiblingIndex() {\n       if (parent() == null) return 0;\n       return indexInList(this, parent().children()); \n    }\n\n    /**\n     * Gets the last element sibling of this element\n     * @return the last sibling that is an element (aka the parent's last element child) \n     */\n    public Element lastElementSibling() {\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;\n    }\n\n    // DOM type methods\n\n    /**\n     * Finds elements, including and recursively under this element, with the specified tag name.\n     * @param tagName The tag name to search for (case insensitively).\n     * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.\n     */\n    public Elements getElementsByTag(String tagName) {\n        Validate.notEmpty(tagName);\n        tagName = tagName.toLowerCase().trim();\n\n        return Collector.collect(new Evaluator.Tag(tagName), this);\n    }\n\n    /**\n     * Find an element by ID, including or under this element.\n     * <p>\n     * Note that this finds the first matching ID, starting with this element. If you search down from a different\n     * starting point, it is possible to find a different element by ID. For unique element by ID within a Document,\n     * use {@link Document#getElementById(String)}\n     * @param id The ID to search for.\n     * @return The first matching element by ID, starting with this element, or null if none found.\n     */\n    public Element getElementById(String id) {\n        Validate.notEmpty(id);\n        \n        Elements elements = Collector.collect(new Evaluator.Id(id), this);\n        if (elements.size() > 0)\n            return elements.get(0);\n        else\n            return null;\n    }\n\n    /**\n     * Find elements that have this class, including or under this element. Case insensitive.\n     * <p>\n     * Elements can have multiple classes (e.g. {@code <div class=\"header round first\">}. This method\n     * checks each class, so you can find the above with {@code el.getElementsByClass(\"header\");}.\n     * \n     * @param className the name of the class to search for.\n     * @return elements with the supplied class name, empty if none\n     * @see #hasClass(String)\n     * @see #classNames()\n     */\n    public Elements getElementsByClass(String className) {\n        Validate.notEmpty(className);\n\n        return Collector.collect(new Evaluator.Class(className), this);\n    }\n\n    /**\n     * Find elements that have a named attribute set. Case insensitive.\n     *\n     * @param key name of the attribute\n     * @return elements that have this attribute, empty if none\n     */\n    public Elements getElementsByAttribute(String key) {\n        Validate.notEmpty(key);\n        key = key.trim().toLowerCase();\n\n        return Collector.collect(new Evaluator.Attribute(key), this);\n    }\n\n    /**\n     * Find elements that have an attribute with the specific value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that have this attribute with this value, empty if none\n     */\n    public Elements getElementsByAttributeValue(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);\n    }\n\n    /**\n     * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that do not have a matching attribute\n     */\n    public Elements getElementsByAttributeValueNot(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);\n    }\n\n    /**\n     * Find elements that have attributes that start with the value prefix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valuePrefix start of attribute value\n     * @return elements that have attributes that start with the value prefix\n     */\n    public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {\n        return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);\n    }\n\n    /**\n     * Find elements that have attributes that end with the value suffix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valueSuffix end of the attribute value\n     * @return elements that have attributes that end with the value suffix\n     */\n    public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {\n        return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);\n    }\n\n    /**\n     * Find elements that have attributes whose value contains the match string. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param match substring of value to search for\n     * @return elements that have attributes containing this text\n     */\n    public Elements getElementsByAttributeValueContaining(String key, String match) {\n        return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is less than the supplied index.\n     * @param index 0-based index\n     * @return elements less than index\n     */\n    public Elements getElementsByIndexLessThan(int index) {\n        return Collector.collect(new Evaluator.IndexLessThan(index), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is greater than the supplied index.\n     * @param index 0-based index\n     * @return elements greater than index\n     */\n    public Elements getElementsByIndexGreaterThan(int index) {\n        return Collector.collect(new Evaluator.IndexGreaterThan(index), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is equal to the supplied index.\n     * @param index 0-based index\n     * @return elements equal to index\n     */\n    public Elements getElementsByIndexEquals(int index) {\n        return Collector.collect(new Evaluator.IndexEquals(index), this);\n    }\n    \n    /**\n     * Find all elements under this element (including self, and children of children).\n     * \n     * @return all elements\n     */\n    public Elements getAllElements() {\n        return Collector.collect(new Evaluator.AllElements(), this);\n    }\n\n    /**\n     * Gets the combined text of this element and all its children.\n     * \n     * @return unencoded text, or empty string if none.\n     */\n    public String text() {\n        StringBuilder sb = new StringBuilder();\n        text(sb);\n        return sb.toString().trim();\n    }\n\n    private void text(StringBuilder accum) {\n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\n                String text = textNode.getWholeText();\n\n                if (!preserveWhitespace()) {\n                    text = TextNode.normaliseWhitespace(text);\n                    if (TextNode.lastCharIsWhitespace(accum))\n                        text = TextNode.stripLeadingWhitespace(text);\n                }\n                accum.append(text);\n\n            } else if (child instanceof Element) {\n                Element element = (Element) child;\n                if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum))\n                    accum.append(\" \");\n                element.text(accum);\n            }\n        }\n    }\n\n    boolean preserveWhitespace() {\n        return tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace();\n    }\n\n    /**\n     * Set the text of this element. Any existing contents (text or elements) will be cleared\n     * @param text unencoded text\n     * @return this element\n     */\n    public Element text(String text) {\n        Validate.notNull(text);\n\n        empty();\n        TextNode textNode = new TextNode(text, baseUri);\n        appendChild(textNode);\n\n        return this;\n    }\n\n    /**\n     Test if this element has any text content (that is not just whitespace).\n     @return true if element has non-blank text content.\n     */\n    public boolean hasText() {\n        for (Node child: childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\n                if (!textNode.isBlank())\n                    return true;\n            } else if (child instanceof Element) {\n                Element el = (Element) child;\n                if (el.hasText())\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag.\n     * @return the data, or empty string if none\n     */\n    public String data() {\n        StringBuilder sb = new StringBuilder();\n\n        for (Node childNode : childNodes) {\n            if (childNode instanceof DataNode) {\n                DataNode data = (DataNode) childNode;\n                sb.append(data.getWholeData());\nif((childNode instanceof DataNode)){\n                Element element = (Element) childNode;\n                String elementData = element.data();\n\nsb.append(data.getWholeData());\n            }\n        }\n        return sb.toString();\n    }   \n\n    /**\n     * Gets the literal value of this element's \"class\" attribute, which may include multiple class names, space\n     * separated. (E.g. on <code>&lt;div class=\"header gray\"></code> returns, \"<code>header gray</code>\")\n     * @return The literal class attribute, or <b>empty string</b> if no class attribute set.\n     */\n    public String className() {\n        return attributes.hasKey(\"class\") ? attributes.get(\"class\") : \"\";\n    }\n\n    /**\n     * Get all of the element's class names. E.g. on element {@code <div class=\"header gray\"}>},\n     * returns a set of two elements {@code \"header\", \"gray\"}. Note that modifications to this set are not pushed to\n     * the backing {@code class} attribute; use the {@link #classNames(java.util.Set)} method to persist them.\n     * @return set of classnames, empty if no class attribute\n     */\n    public Set<String> classNames() {\n        if (classNames == null) {\n            String[] names = className().split(\"\\\\s+\");\n            classNames = new LinkedHashSet<String>(Arrays.asList(names));\n        }\n        return classNames;\n    }\n\n    /**\n     Set the element's {@code class} attribute to the supplied class names.\n     @param classNames set of classes\n     @return this element, for chaining\n     */\n    public Element classNames(Set<String> classNames) {\n        Validate.notNull(classNames);\n        attributes.put(\"class\", StringUtils.join(classNames, \" \"));\n        return this;\n    }\n\n    /**\n     * Tests if this element has a class.\n     * @param className name of class to check for\n     * @return true if it does, false if not\n     */\n    public boolean hasClass(String className) {\n        return classNames().contains(className);\n    }\n\n    /**\n     Add a class name to this element's {@code class} attribute.\n     @param className class name to add\n     @return this element\n     */\n    public Element addClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.add(className);\n        classNames(classes);\n\n        return this;\n    }\n\n    /**\n     Remove a class name from this element's {@code class} attribute.\n     @param className class name to remove\n     @return this element\n     */\n    public Element removeClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.remove(className);\n        classNames(classes);\n\n        return this;\n    }\n\n    /**\n     Toggle a class name on this element's {@code class} attribute: if present, remove it; otherwise add it.\n     @param className class name to toggle\n     @return this element\n     */\n    public Element toggleClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        if (classes.contains(className))\n            classes.remove(className);\n        else\n            classes.add(className);\n        classNames(classes);\n\n        return this;\n    }\n    \n    /**\n     * Get the value of a form element (input, textarea, etc).\n     * @return the value of the form element, or empty string if not set.\n     */\n    public String val() {\n        if (tagName().equals(\"textarea\"))\n            return text();\n        else\n            return attr(\"value\");\n    }\n    \n    /**\n     * Set the value of a form element (input, textarea, etc).\n     * @param value value to set\n     * @return this element (for chaining)\n     */\n    public Element val(String value) {\n        if (tagName().equals(\"textarea\"))\n            text(value);\n        else\n            attr(\"value\", value);\n        return this;\n    }\n\n    void outerHtml(StringBuilder accum) {\n        if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0))\n            indent(accum);\n        accum\n                .append(\"<\")\n                .append(tagName())\n                .append(attributes.html());\n\n        if (childNodes.isEmpty() && tag.isEmpty()) {\n            accum.append(\" />\");\n        } else {\n            accum.append(\">\");\n            html(accum);\n            if (tag.canContainBlock()) indent(accum);\n            accum.append(\"</\").append(tagName()).append(\">\");\n        }\n    }\n\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html() {\n        StringBuilder accum = new StringBuilder();\n        html(accum); \n        return accum.toString().trim();\n    }\n\n    private void html(StringBuilder accum) {\n        for (Node node : childNodes)\n            node.outerHtml(accum);\n    }\n    \n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html) {\n        empty();\n        append(html);\n        return this;\n    }\n\n    public String toString() {\n        return outerHtml();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Element)) return false;\n        if (!super.equals(o)) return false;\n\n        Element element = (Element) o;\n\n        if (tag != null ? !tag.equals(element.tag) : element.tag != null) return false;\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (tag != null ? tag.hashCode() : 0);\n        return result;\n    }\n}"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Element text(String text) {",
        "line": 609,
        "aftercode": "String text        Validate.notNull(text);"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        empty();",
        "line": 612,
        "aftercode": "appendChild(textNode);"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Element child = new Element(Tag.valueOf(tagName), baseUri());",
        "line": 219,
        "aftercode": "Element child = new Element(valueOf(tagName), baseUri());"
    },
    {
        "id": 11,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        if (classes.contains(className))",
        "line": 740,
        "aftercode": "classes.add(className);"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        appendChild(textNode);",
        "line": 614,
        "aftercode": "appendChild(text);"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            if (childNode instanceof DataNode) {",
        "line": 646,
        "aftercode": "if(childNode.isEmpty()){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Validate.notNull(text);",
        "line": 610,
        "aftercode": "text.notNull();"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        appendChild(child);",
        "line": 220,
        "aftercode": "this.child = child;"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        appendChild(child);",
        "line": 220,
        "aftercode": "tagName = new Element(Tag.valueOf(tagName), baseUri());"
    },
    {
        "id": 11,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        if (classes.contains(className))",
        "line": 740,
        "aftercode": "classNames(classes);"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "    public Element appendElement(String tagName) {",
        "line": 218,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        appendChild(child);",
        "line": 220,
        "aftercode": "this.tagName = tagName;"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                sb.append(elementData);",
        "line": 652,
        "aftercode": "sb.append(data.getWholeData());"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Element child = new Element(Tag.valueOf(tagName), baseUri());",
        "line": 219,
        "aftercode": "Element child = new Element(Tag.valueOf(), Tag.valueOf());"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            if (childNode instanceof DataNode) {",
        "line": 646,
        "aftercode": "package org.jsoup.nodes;\n\nimport org.apache.commons.lang.Validate;\nimport org.apache.commons.lang.StringUtils;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Collector;\nimport org.jsoup.select.Elements;\nimport org.jsoup.select.Selector;\n\nimport java.util.*;\n\n/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private final Tag tag;\n    private Set<String> classNames;\n    \n    /**\n     * Create a new, standalone Element. (Standalone in that is has no parent.)\n     * \n     * @param tag tag of this element\n     * @param baseUri the base URI\n     * @param attributes initial attributes\n     * @see #appendChild(Node)\n     * @see #appendElement(String)\n     */\n    public Element(Tag tag, String baseUri, Attributes attributes) {\n        super(baseUri, attributes);\n        \n        Validate.notNull(tag);    \n        this.tag = tag;\n    }\n    \n    /**\n     * Create a new Element from a tag and a base URI.\n     * \n     * @param tag element tag\n     * @param baseUri the base URI of this element. It is acceptable for the base URI to be an empty\n     *            string, but not null.\n     * @see Tag#valueOf(String)\n     */\n    public Element(Tag tag, String baseUri) {\n        this(tag, baseUri, new Attributes());\n    }\n\n    @Override\n    public String nodeName() {\n        return tag.getName();\n    }\n\n    /**\n     * Get the name of the tag for this element. E.g. {@code div}\n     * \n     * @return the tag name\n     */\n    public String tagName() {\n        return tag.getName();\n    }\n\n    /**\n     * Get the Tag for this element.\n     * \n     * @return the tag object\n     */\n    public Tag tag() {\n        return tag;\n    }\n    \n    /**\n     * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element\n     * {@code <p> == false}).\n     * \n     * @return true if block, false if not (and thus inline)\n     */\n    public boolean isBlock() {\n        return tag.isBlock();\n    }\n\n    /**\n     * Get the {@code id} attribute of this element.\n     * \n     * @return The id attribute, if present, or an empty string if not.\n     */\n    public String id() {\n        String id = attr(\"id\");\n        return id == null ? \"\" : id;\n    }\n\n    /**\n     * Set an attribute value on this element. If this element already has an attribute with the\n     * key, its value is updated; otherwise, a new attribute is added.\n     * \n     * @return this element\n     */\n    public Element attr(String attributeKey, String attributeValue) {\n        super.attr(attributeKey, attributeValue);\n        return this;\n    }\n\n    @Override\n    public Element parent() {\n        return (Element) super.parent();\n    }\n\n    /**\n     * Get this element's parent and ancestors, up to the document root.\n     * @return this element's stack of parents, closest first.\n     */\n    public Elements parents() {\n        Elements parents = new Elements();\n        accumulateParents(this, parents);\n        return parents;\n    }\n\n    private static void accumulateParents(Element el, Elements parents) {\n        Element parent = el.parent();\n        if (parent != null && !parent.tagName().equals(\"#root\")) {\n            parents.add(parent);\n            accumulateParents(parent, parents);\n        }\n    }\n\n    /**\n     * Get a child element of this element, by its 0-based index number.\n     * <p/>\n     * Note that an element can have both mixed Nodes and Elements as children. This method inspects\n     * a filtered list of children that are elements, and the index is based on that filtered list.\n     * \n     * @param index the index number of the element to retrieve\n     * @return the child element, if it exists, or {@code null} if absent.\n     * @see #childNode(int)\n     */\n    public Element child(int index) {\n        return children().get(index);\n    }\n\n    /**\n     * Get this element's child elements.\n     * <p/>\n     * This is effectively a filter on {@link #childNodes()} to get Element nodes.\n     * @return child elements. If this element has no children, returns an\n     * empty list.\n     * @see #childNodes()\n     */\n    public Elements children() {\n        // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n        List<Element> elements = new ArrayList<Element>();\n        for (Node node : childNodes) {\n            if (node instanceof Element)\n                elements.add((Element) node);\n        }\n        return new Elements(elements);\n    }\n\n    /**\n     * Find elements that match the selector query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param query a {@link Selector} query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String query) {\n        return Selector.select(query, this);\n    }\n    \n    /**\n     * Add a node to the last child of this element.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element appendChild(Node child) {\n        Validate.notNull(child);\n        \n        child.setParentNode(this);\n        childNodes.add(child);\n        return this;\n    }\n    \n    /**\n     * Add a node to the start of this element's children.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element prependChild(Node child) {\n        Validate.notNull(child);\n        \n        child.setParentNode(this);\n        childNodes.add(0, child);\n        return this;\n    }\n    \n    /**\n     * Create a new element by tag name, and add it as the last child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.appendElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element appendElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        appendChild(child);\n        return child;\n    }\n    \n    /**\n     * Create a new element by tag name, and add it as the first child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.prependElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element prependElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        prependChild(child);\n        return child;\n    }\n    \n    /**\n     * Create and append a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element appendText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        appendChild(node);\n        return this;\n    }\n    \n    /**\n     * Create and prepend a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element prependText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        prependChild(node);\n        return this;\n    }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n     * @param html HTML to add inside this element, after the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element append(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        for (Node node : fragment.childNodes()) {\n            node.parentNode = null;\n            appendChild(node);\n        }\n        return this;\n    }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node prepended to the start of the children.\n     * @param html HTML to add inside this element, before the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element prepend(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        List<Node> nodes = fragment.childNodes();\n        for (int i = nodes.size() - 1; i >= 0; i--) {\n            Node node = nodes.get(i);\n            node.parentNode = null;\n            prependChild(node);\n        }\n        return this;\n    }\n    \n    /**\n     * Remove all of the element's child nodes. Any attributes are left as-is.\n     * @return this element\n     */\n    public Element empty() {\n        childNodes.clear();\n        return this;\n    }\n\n    /**\n     Wrap the supplied HTML around this element.\n     @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitralily deep.\n     @return this element, for chaining.\n     */\n    public Element wrap(String html) {\n        Validate.notEmpty(html);\n\n        Element wrapBody = Parser.parseBodyFragmentRelaxed(html, baseUri).body();\n        Elements wrapChildren = wrapBody.children();\n        Element wrap = wrapChildren.first();\n        if (wrap == null) // nothing to wrap with; noop\n            return null;\n\n        Element deepest = getDeepChild(wrap);\n        parentNode.replaceChild(this, wrap);\n        deepest.addChild(this);\n\n        // remainder (unbalananced wrap, like <div></div><p></p> -- The <p> is remainder\n        if (wrapChildren.size() > 1) {\n            for (int i = 1; i < wrapChildren.size(); i++) { // skip first\n                Element remainder = wrapChildren.get(i);\n                remainder.parentNode.removeChild(remainder);\n                wrap.appendChild(remainder);\n            }\n        }\n        return this;\n    }\n\n    private Element getDeepChild(Element el) {\n        List<Element> children = el.children();\n        if (children.size() > 0)\n            return getDeepChild(children.get(0));\n        else\n            return el;\n    }\n    \n    /**\n     * Get sibling elements.\n     * @return sibling elements\n     */\n    public Elements siblingElements() {\n        return parent().children();\n    }\n\n    /**\n     * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s, \n     * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.\n     * <p/>\n     * This is similar to {@link #nextSibling()}, but specifically finds only Elements\n     * @return the next element, or null if there is no next element\n     * @see #previousElementSibling()\n     */\n    public Element nextElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (siblings.size() > index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }\n\n    /**\n     * Gets the previous element sibling of this element.\n     * @return the previous element, or null if there is no previous element\n     * @see #nextElementSibling()\n     */\n    public Element previousElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (index > 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }\n\n    /**\n     * Gets the first element sibling of this element.\n     * @return the first sibling that is an element (aka the parent's first element child) \n     */\n    public Element firstElementSibling() {\n        // todo: should firstSibling() exclude this?\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(0) : null;\n    }\n    \n    /**\n     * Get the list index of this element in its element sibling list. I.e. if this is the first element\n     * sibling, returns 0.\n     * @return position in element sibling list\n     */\n    public Integer elementSiblingIndex() {\n       if (parent() == null) return 0;\n       return indexInList(this, parent().children()); \n    }\n\n    /**\n     * Gets the last element sibling of this element\n     * @return the last sibling that is an element (aka the parent's last element child) \n     */\n    public Element lastElementSibling() {\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;\n    }\n\n    // DOM type methods\n\n    /**\n     * Finds elements, including and recursively under this element, with the specified tag name.\n     * @param tagName The tag name to search for (case insensitively).\n     * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.\n     */\n    public Elements getElementsByTag(String tagName) {\n        Validate.notEmpty(tagName);\n        tagName = tagName.toLowerCase().trim();\n\n        return Collector.collect(new Evaluator.Tag(tagName), this);\n    }\n\n    /**\n     * Find an element by ID, including or under this element.\n     * <p>\n     * Note that this finds the first matching ID, starting with this element. If you search down from a different\n     * starting point, it is possible to find a different element by ID. For unique element by ID within a Document,\n     * use {@link Document#getElementById(String)}\n     * @param id The ID to search for.\n     * @return The first matching element by ID, starting with this element, or null if none found.\n     */\n    public Element getElementById(String id) {\n        Validate.notEmpty(id);\n        \n        Elements elements = Collector.collect(new Evaluator.Id(id), this);\n        if (elements.size() > 0)\n            return elements.get(0);\n        else\n            return null;\n    }\n\n    /**\n     * Find elements that have this class, including or under this element. Case insensitive.\n     * <p>\n     * Elements can have multiple classes (e.g. {@code <div class=\"header round first\">}. This method\n     * checks each class, so you can find the above with {@code el.getElementsByClass(\"header\");}.\n     * \n     * @param className the name of the class to search for.\n     * @return elements with the supplied class name, empty if none\n     * @see #hasClass(String)\n     * @see #classNames()\n     */\n    public Elements getElementsByClass(String className) {\n        Validate.notEmpty(className);\n\n        return Collector.collect(new Evaluator.Class(className), this);\n    }\n\n    /**\n     * Find elements that have a named attribute set. Case insensitive.\n     *\n     * @param key name of the attribute\n     * @return elements that have this attribute, empty if none\n     */\n    public Elements getElementsByAttribute(String key) {\n        Validate.notEmpty(key);\n        key = key.trim().toLowerCase();\n\n        return Collector.collect(new Evaluator.Attribute(key), this);\n    }\n\n    /**\n     * Find elements that have an attribute with the specific value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that have this attribute with this value, empty if none\n     */\n    public Elements getElementsByAttributeValue(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);\n    }\n\n    /**\n     * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that do not have a matching attribute\n     */\n    public Elements getElementsByAttributeValueNot(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);\n    }\n\n    /**\n     * Find elements that have attributes that start with the value prefix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valuePrefix start of attribute value\n     * @return elements that have attributes that start with the value prefix\n     */\n    public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {\n        return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);\n    }\n\n    /**\n     * Find elements that have attributes that end with the value suffix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valueSuffix end of the attribute value\n     * @return elements that have attributes that end with the value suffix\n     */\n    public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {\n        return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);\n    }\n\n    /**\n     * Find elements that have attributes whose value contains the match string. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param match substring of value to search for\n     * @return elements that have attributes containing this text\n     */\n    public Elements getElementsByAttributeValueContaining(String key, String match) {\n        return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is less than the supplied index.\n     * @param index 0-based index\n     * @return elements less than index\n     */\n    public Elements getElementsByIndexLessThan(int index) {\n        return Collector.collect(new Evaluator.IndexLessThan(index), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is greater than the supplied index.\n     * @param index 0-based index\n     * @return elements greater than index\n     */\n    public Elements getElementsByIndexGreaterThan(int index) {\n        return Collector.collect(new Evaluator.IndexGreaterThan(index), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is equal to the supplied index.\n     * @param index 0-based index\n     * @return elements equal to index\n     */\n    public Elements getElementsByIndexEquals(int index) {\n        return Collector.collect(new Evaluator.IndexEquals(index), this);\n    }\n    \n    /**\n     * Find all elements under this element (including self, and children of children).\n     * \n     * @return all elements\n     */\n    public Elements getAllElements() {\n        return Collector.collect(new Evaluator.AllElements(), this);\n    }\n\n    /**\n     * Gets the combined text of this element and all its children.\n     * \n     * @return unencoded text, or empty string if none.\n     */\n    public String text() {\n        StringBuilder sb = new StringBuilder();\n        text(sb);\n        return sb.toString().trim();\n    }\n\n    private void text(StringBuilder accum) {\n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\n                String text = textNode.getWholeText();\n\n                if (!preserveWhitespace()) {\n                    text = TextNode.normaliseWhitespace(text);\n                    if (TextNode.lastCharIsWhitespace(accum))\n                        text = TextNode.stripLeadingWhitespace(text);\n                }\n                accum.append(text);\n\n            } else if (child instanceof Element) {\n                Element element = (Element) child;\n                if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum))\n                    accum.append(\" \");\n                element.text(accum);\n            }\n        }\n    }\n\n    boolean preserveWhitespace() {\n        return tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace();\n    }\n\n    /**\n     * Set the text of this element. Any existing contents (text or elements) will be cleared\n     * @param text unencoded text\n     * @return this element\n     */\n    public Element text(String text) {\n        Validate.notNull(text);\n\n        empty();\n        TextNode textNode = new TextNode(text, baseUri);\n        appendChild(textNode);\n\n        return this;\n    }\n\n    /**\n     Test if this element has any text content (that is not just whitespace).\n     @return true if element has non-blank text content.\n     */\n    public boolean hasText() {\n        for (Node child: childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\n                if (!textNode.isBlank())\n                    return true;\n            } else if (child instanceof Element) {\n                Element el = (Element) child;\n                if (el.hasText())\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag.\n     * @return the data, or empty string if none\n     */\n    public String data() {\n        StringBuilder sb = new StringBuilder();\n\n        for (Node childNode : childNodes) {\nif((childNode instanceof Element)){\n                DataNode data = (DataNode) childNode;\n\nsb.append(elementData);\n            } else if (childNode instanceof Element) {\n                Element element = (Element) childNode;\n                String elementData = element.data();\n                sb.append(elementData);\n            }\n        }\n        return sb.toString();\n    }   \n\n    /**\n     * Gets the literal value of this element's \"class\" attribute, which may include multiple class names, space\n     * separated. (E.g. on <code>&lt;div class=\"header gray\"></code> returns, \"<code>header gray</code>\")\n     * @return The literal class attribute, or <b>empty string</b> if no class attribute set.\n     */\n    public String className() {\n        return attributes.hasKey(\"class\") ? attributes.get(\"class\") : \"\";\n    }\n\n    /**\n     * Get all of the element's class names. E.g. on element {@code <div class=\"header gray\"}>},\n     * returns a set of two elements {@code \"header\", \"gray\"}. Note that modifications to this set are not pushed to\n     * the backing {@code class} attribute; use the {@link #classNames(java.util.Set)} method to persist them.\n     * @return set of classnames, empty if no class attribute\n     */\n    public Set<String> classNames() {\n        if (classNames == null) {\n            String[] names = className().split(\"\\\\s+\");\n            classNames = new LinkedHashSet<String>(Arrays.asList(names));\n        }\n        return classNames;\n    }\n\n    /**\n     Set the element's {@code class} attribute to the supplied class names.\n     @param classNames set of classes\n     @return this element, for chaining\n     */\n    public Element classNames(Set<String> classNames) {\n        Validate.notNull(classNames);\n        attributes.put(\"class\", StringUtils.join(classNames, \" \"));\n        return this;\n    }\n\n    /**\n     * Tests if this element has a class.\n     * @param className name of class to check for\n     * @return true if it does, false if not\n     */\n    public boolean hasClass(String className) {\n        return classNames().contains(className);\n    }\n\n    /**\n     Add a class name to this element's {@code class} attribute.\n     @param className class name to add\n     @return this element\n     */\n    public Element addClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.add(className);\n        classNames(classes);\n\n        return this;\n    }\n\n    /**\n     Remove a class name from this element's {@code class} attribute.\n     @param className class name to remove\n     @return this element\n     */\n    public Element removeClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.remove(className);\n        classNames(classes);\n\n        return this;\n    }\n\n    /**\n     Toggle a class name on this element's {@code class} attribute: if present, remove it; otherwise add it.\n     @param className class name to toggle\n     @return this element\n     */\n    public Element toggleClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        if (classes.contains(className))\n            classes.remove(className);\n        else\n            classes.add(className);\n        classNames(classes);\n\n        return this;\n    }\n    \n    /**\n     * Get the value of a form element (input, textarea, etc).\n     * @return the value of the form element, or empty string if not set.\n     */\n    public String val() {\n        if (tagName().equals(\"textarea\"))\n            return text();\n        else\n            return attr(\"value\");\n    }\n    \n    /**\n     * Set the value of a form element (input, textarea, etc).\n     * @param value value to set\n     * @return this element (for chaining)\n     */\n    public Element val(String value) {\n        if (tagName().equals(\"textarea\"))\n            text(value);\n        else\n            attr(\"value\", value);\n        return this;\n    }\n\n    void outerHtml(StringBuilder accum) {\n        if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0))\n            indent(accum);\n        accum\n                .append(\"<\")\n                .append(tagName())\n                .append(attributes.html());\n\n        if (childNodes.isEmpty() && tag.isEmpty()) {\n            accum.append(\" />\");\n        } else {\n            accum.append(\">\");\n            html(accum);\n            if (tag.canContainBlock()) indent(accum);\n            accum.append(\"</\").append(tagName()).append(\">\");\n        }\n    }\n\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html() {\n        StringBuilder accum = new StringBuilder();\n        html(accum); \n        return accum.toString().trim();\n    }\n\n    private void html(StringBuilder accum) {\n        for (Node node : childNodes)\n            node.outerHtml(accum);\n    }\n    \n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html) {\n        empty();\n        append(html);\n        return this;\n    }\n\n    public String toString() {\n        return outerHtml();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Element)) return false;\n        if (!super.equals(o)) return false;\n\n        Element element = (Element) o;\n\n        if (tag != null ? !tag.equals(element.tag) : element.tag != null) return false;\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (tag != null ? tag.hashCode() : 0);\n        return result;\n    }\n}"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                sb.append(data.getWholeData());",
        "line": 648,
        "aftercode": "sb.append(data.getName());"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                if (!textNode.isBlank())",
        "line": 630,
        "aftercode": "package org.jsoup.nodes;\n\nimport org.apache.commons.lang.Validate;\nimport org.apache.commons.lang.StringUtils;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Collector;\nimport org.jsoup.select.Elements;\nimport org.jsoup.select.Selector;\n\nimport java.util.*;\n\n/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private final Tag tag;\n    private Set<String> classNames;\n    \n    /**\n     * Create a new, standalone Element. (Standalone in that is has no parent.)\n     * \n     * @param tag tag of this element\n     * @param baseUri the base URI\n     * @param attributes initial attributes\n     * @see #appendChild(Node)\n     * @see #appendElement(String)\n     */\n    public Element(Tag tag, String baseUri, Attributes attributes) {\n        super(baseUri, attributes);\n        \n        Validate.notNull(tag);    \n        this.tag = tag;\n    }\n    \n    /**\n     * Create a new Element from a tag and a base URI.\n     * \n     * @param tag element tag\n     * @param baseUri the base URI of this element. It is acceptable for the base URI to be an empty\n     *            string, but not null.\n     * @see Tag#valueOf(String)\n     */\n    public Element(Tag tag, String baseUri) {\n        this(tag, baseUri, new Attributes());\n    }\n\n    @Override\n    public String nodeName() {\n        return tag.getName();\n    }\n\n    /**\n     * Get the name of the tag for this element. E.g. {@code div}\n     * \n     * @return the tag name\n     */\n    public String tagName() {\n        return tag.getName();\n    }\n\n    /**\n     * Get the Tag for this element.\n     * \n     * @return the tag object\n     */\n    public Tag tag() {\n        return tag;\n    }\n    \n    /**\n     * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element\n     * {@code <p> == false}).\n     * \n     * @return true if block, false if not (and thus inline)\n     */\n    public boolean isBlock() {\n        return tag.isBlock();\n    }\n\n    /**\n     * Get the {@code id} attribute of this element.\n     * \n     * @return The id attribute, if present, or an empty string if not.\n     */\n    public String id() {\n        String id = attr(\"id\");\n        return id == null ? \"\" : id;\n    }\n\n    /**\n     * Set an attribute value on this element. If this element already has an attribute with the\n     * key, its value is updated; otherwise, a new attribute is added.\n     * \n     * @return this element\n     */\n    public Element attr(String attributeKey, String attributeValue) {\n        super.attr(attributeKey, attributeValue);\n        return this;\n    }\n\n    @Override\n    public Element parent() {\n        return (Element) super.parent();\n    }\n\n    /**\n     * Get this element's parent and ancestors, up to the document root.\n     * @return this element's stack of parents, closest first.\n     */\n    public Elements parents() {\n        Elements parents = new Elements();\n        accumulateParents(this, parents);\n        return parents;\n    }\n\n    private static void accumulateParents(Element el, Elements parents) {\n        Element parent = el.parent();\n        if (parent != null && !parent.tagName().equals(\"#root\")) {\n            parents.add(parent);\n            accumulateParents(parent, parents);\n        }\n    }\n\n    /**\n     * Get a child element of this element, by its 0-based index number.\n     * <p/>\n     * Note that an element can have both mixed Nodes and Elements as children. This method inspects\n     * a filtered list of children that are elements, and the index is based on that filtered list.\n     * \n     * @param index the index number of the element to retrieve\n     * @return the child element, if it exists, or {@code null} if absent.\n     * @see #childNode(int)\n     */\n    public Element child(int index) {\n        return children().get(index);\n    }\n\n    /**\n     * Get this element's child elements.\n     * <p/>\n     * This is effectively a filter on {@link #childNodes()} to get Element nodes.\n     * @return child elements. If this element has no children, returns an\n     * empty list.\n     * @see #childNodes()\n     */\n    public Elements children() {\n        // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n        List<Element> elements = new ArrayList<Element>();\n        for (Node node : childNodes) {\n            if (node instanceof Element)\n                elements.add((Element) node);\n        }\n        return new Elements(elements);\n    }\n\n    /**\n     * Find elements that match the selector query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param query a {@link Selector} query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String query) {\n        return Selector.select(query, this);\n    }\n    \n    /**\n     * Add a node to the last child of this element.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element appendChild(Node child) {\n        Validate.notNull(child);\n        \n        child.setParentNode(this);\n        childNodes.add(child);\n        return this;\n    }\n    \n    /**\n     * Add a node to the start of this element's children.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element prependChild(Node child) {\n        Validate.notNull(child);\n        \n        child.setParentNode(this);\n        childNodes.add(0, child);\n        return this;\n    }\n    \n    /**\n     * Create a new element by tag name, and add it as the last child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.appendElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element appendElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        appendChild(child);\n        return child;\n    }\n    \n    /**\n     * Create a new element by tag name, and add it as the first child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.prependElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element prependElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        prependChild(child);\n        return child;\n    }\n    \n    /**\n     * Create and append a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element appendText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        appendChild(node);\n        return this;\n    }\n    \n    /**\n     * Create and prepend a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element prependText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        prependChild(node);\n        return this;\n    }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n     * @param html HTML to add inside this element, after the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element append(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        for (Node node : fragment.childNodes()) {\n            node.parentNode = null;\n            appendChild(node);\n        }\n        return this;\n    }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node prepended to the start of the children.\n     * @param html HTML to add inside this element, before the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element prepend(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        List<Node> nodes = fragment.childNodes();\n        for (int i = nodes.size() - 1; i >= 0; i--) {\n            Node node = nodes.get(i);\n            node.parentNode = null;\n            prependChild(node);\n        }\n        return this;\n    }\n    \n    /**\n     * Remove all of the element's child nodes. Any attributes are left as-is.\n     * @return this element\n     */\n    public Element empty() {\n        childNodes.clear();\n        return this;\n    }\n\n    /**\n     Wrap the supplied HTML around this element.\n     @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitralily deep.\n     @return this element, for chaining.\n     */\n    public Element wrap(String html) {\n        Validate.notEmpty(html);\n\n        Element wrapBody = Parser.parseBodyFragmentRelaxed(html, baseUri).body();\n        Elements wrapChildren = wrapBody.children();\n        Element wrap = wrapChildren.first();\n        if (wrap == null) // nothing to wrap with; noop\n            return null;\n\n        Element deepest = getDeepChild(wrap);\n        parentNode.replaceChild(this, wrap);\n        deepest.addChild(this);\n\n        // remainder (unbalananced wrap, like <div></div><p></p> -- The <p> is remainder\n        if (wrapChildren.size() > 1) {\n            for (int i = 1; i < wrapChildren.size(); i++) { // skip first\n                Element remainder = wrapChildren.get(i);\n                remainder.parentNode.removeChild(remainder);\n                wrap.appendChild(remainder);\n            }\n        }\n        return this;\n    }\n\n    private Element getDeepChild(Element el) {\n        List<Element> children = el.children();\n        if (children.size() > 0)\n            return getDeepChild(children.get(0));\n        else\n            return el;\n    }\n    \n    /**\n     * Get sibling elements.\n     * @return sibling elements\n     */\n    public Elements siblingElements() {\n        return parent().children();\n    }\n\n    /**\n     * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s, \n     * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.\n     * <p/>\n     * This is similar to {@link #nextSibling()}, but specifically finds only Elements\n     * @return the next element, or null if there is no next element\n     * @see #previousElementSibling()\n     */\n    public Element nextElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (siblings.size() > index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }\n\n    /**\n     * Gets the previous element sibling of this element.\n     * @return the previous element, or null if there is no previous element\n     * @see #nextElementSibling()\n     */\n    public Element previousElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (index > 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }\n\n    /**\n     * Gets the first element sibling of this element.\n     * @return the first sibling that is an element (aka the parent's first element child) \n     */\n    public Element firstElementSibling() {\n        // todo: should firstSibling() exclude this?\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(0) : null;\n    }\n    \n    /**\n     * Get the list index of this element in its element sibling list. I.e. if this is the first element\n     * sibling, returns 0.\n     * @return position in element sibling list\n     */\n    public Integer elementSiblingIndex() {\n       if (parent() == null) return 0;\n       return indexInList(this, parent().children()); \n    }\n\n    /**\n     * Gets the last element sibling of this element\n     * @return the last sibling that is an element (aka the parent's last element child) \n     */\n    public Element lastElementSibling() {\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;\n    }\n\n    // DOM type methods\n\n    /**\n     * Finds elements, including and recursively under this element, with the specified tag name.\n     * @param tagName The tag name to search for (case insensitively).\n     * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.\n     */\n    public Elements getElementsByTag(String tagName) {\n        Validate.notEmpty(tagName);\n        tagName = tagName.toLowerCase().trim();\n\n        return Collector.collect(new Evaluator.Tag(tagName), this);\n    }\n\n    /**\n     * Find an element by ID, including or under this element.\n     * <p>\n     * Note that this finds the first matching ID, starting with this element. If you search down from a different\n     * starting point, it is possible to find a different element by ID. For unique element by ID within a Document,\n     * use {@link Document#getElementById(String)}\n     * @param id The ID to search for.\n     * @return The first matching element by ID, starting with this element, or null if none found.\n     */\n    public Element getElementById(String id) {\n        Validate.notEmpty(id);\n        \n        Elements elements = Collector.collect(new Evaluator.Id(id), this);\n        if (elements.size() > 0)\n            return elements.get(0);\n        else\n            return null;\n    }\n\n    /**\n     * Find elements that have this class, including or under this element. Case insensitive.\n     * <p>\n     * Elements can have multiple classes (e.g. {@code <div class=\"header round first\">}. This method\n     * checks each class, so you can find the above with {@code el.getElementsByClass(\"header\");}.\n     * \n     * @param className the name of the class to search for.\n     * @return elements with the supplied class name, empty if none\n     * @see #hasClass(String)\n     * @see #classNames()\n     */\n    public Elements getElementsByClass(String className) {\n        Validate.notEmpty(className);\n\n        return Collector.collect(new Evaluator.Class(className), this);\n    }\n\n    /**\n     * Find elements that have a named attribute set. Case insensitive.\n     *\n     * @param key name of the attribute\n     * @return elements that have this attribute, empty if none\n     */\n    public Elements getElementsByAttribute(String key) {\n        Validate.notEmpty(key);\n        key = key.trim().toLowerCase();\n\n        return Collector.collect(new Evaluator.Attribute(key), this);\n    }\n\n    /**\n     * Find elements that have an attribute with the specific value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that have this attribute with this value, empty if none\n     */\n    public Elements getElementsByAttributeValue(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);\n    }\n\n    /**\n     * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that do not have a matching attribute\n     */\n    public Elements getElementsByAttributeValueNot(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);\n    }\n\n    /**\n     * Find elements that have attributes that start with the value prefix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valuePrefix start of attribute value\n     * @return elements that have attributes that start with the value prefix\n     */\n    public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {\n        return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);\n    }\n\n    /**\n     * Find elements that have attributes that end with the value suffix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valueSuffix end of the attribute value\n     * @return elements that have attributes that end with the value suffix\n     */\n    public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {\n        return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);\n    }\n\n    /**\n     * Find elements that have attributes whose value contains the match string. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param match substring of value to search for\n     * @return elements that have attributes containing this text\n     */\n    public Elements getElementsByAttributeValueContaining(String key, String match) {\n        return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is less than the supplied index.\n     * @param index 0-based index\n     * @return elements less than index\n     */\n    public Elements getElementsByIndexLessThan(int index) {\n        return Collector.collect(new Evaluator.IndexLessThan(index), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is greater than the supplied index.\n     * @param index 0-based index\n     * @return elements greater than index\n     */\n    public Elements getElementsByIndexGreaterThan(int index) {\n        return Collector.collect(new Evaluator.IndexGreaterThan(index), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is equal to the supplied index.\n     * @param index 0-based index\n     * @return elements equal to index\n     */\n    public Elements getElementsByIndexEquals(int index) {\n        return Collector.collect(new Evaluator.IndexEquals(index), this);\n    }\n    \n    /**\n     * Find all elements under this element (including self, and children of children).\n     * \n     * @return all elements\n     */\n    public Elements getAllElements() {\n        return Collector.collect(new Evaluator.AllElements(), this);\n    }\n\n    /**\n     * Gets the combined text of this element and all its children.\n     * \n     * @return unencoded text, or empty string if none.\n     */\n    public String text() {\n        StringBuilder sb = new StringBuilder();\n        text(sb);\n        return sb.toString().trim();\n    }\n\n    private void text(StringBuilder accum) {\n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\n                String text = textNode.getWholeText();\n\n                if (!preserveWhitespace()) {\n                    text = TextNode.normaliseWhitespace(text);\n                    if (TextNode.lastCharIsWhitespace(accum))\n                        text = TextNode.stripLeadingWhitespace(text);\n                }\n                accum.append(text);\n\n            } else if (child instanceof Element) {\n                Element element = (Element) child;\n                if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum))\n                    accum.append(\" \");\n                element.text(accum);\n            }\n        }\n    }\n\n    boolean preserveWhitespace() {\n        return tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace();\n    }\n\n    /**\n     * Set the text of this element. Any existing contents (text or elements) will be cleared\n     * @param text unencoded text\n     * @return this element\n     */\n    public Element text(String text) {\n        Validate.notNull(text);\n\n        empty();\n        TextNode textNode = new TextNode(text, baseUri);\n        appendChild(textNode);\n\n        return this;\n    }\n\n    /**\n     Test if this element has any text content (that is not just whitespace).\n     @return true if element has non-blank text content.\n     */\n    public boolean hasText() {\n        for (Node child: childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\nif(textNode.isBlank()){\n                    return true;\n\nif(textNode.isBlank()){\n                Element el = (Element) child;\n                if (el.hasText())\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag.\n     * @return the data, or empty string if none\n     */\n    public String data() {\n        StringBuilder sb = new StringBuilder();\n\n        for (Node childNode : childNodes) {\n            if (childNode instanceof DataNode) {\n                DataNode data = (DataNode) childNode;\n                sb.append(data.getWholeData());\n            } else if (childNode instanceof Element) {\n                Element element = (Element) childNode;\n                String elementData = element.data();\n                sb.append(elementData);\n            }\n        }\n        return sb.toString();\n    }   \n\n    /**\n     * Gets the literal value of this element's \"class\" attribute, which may include multiple class names, space\n     * separated. (E.g. on <code>&lt;div class=\"header gray\"></code> returns, \"<code>header gray</code>\")\n     * @return The literal class attribute, or <b>empty string</b> if no class attribute set.\n     */\n    public String className() {\n        return attributes.hasKey(\"class\") ? attributes.get(\"class\") : \"\";\n    }\n\n    /**\n     * Get all of the element's class names. E.g. on element {@code <div class=\"header gray\"}>},\n     * returns a set of two elements {@code \"header\", \"gray\"}. Note that modifications to this set are not pushed to\n     * the backing {@code class} attribute; use the {@link #classNames(java.util.Set)} method to persist them.\n     * @return set of classnames, empty if no class attribute\n     */\n    public Set<String> classNames() {\n        if (classNames == null) {\n            String[] names = className().split(\"\\\\s+\");\n            classNames = new LinkedHashSet<String>(Arrays.asList(names));\n        }\n        return classNames;\n    }\n\n    /**\n     Set the element's {@code class} attribute to the supplied class names.\n     @param classNames set of classes\n     @return this element, for chaining\n     */\n    public Element classNames(Set<String> classNames) {\n        Validate.notNull(classNames);\n        attributes.put(\"class\", StringUtils.join(classNames, \" \"));\n        return this;\n    }\n\n    /**\n     * Tests if this element has a class.\n     * @param className name of class to check for\n     * @return true if it does, false if not\n     */\n    public boolean hasClass(String className) {\n        return classNames().contains(className);\n    }\n\n    /**\n     Add a class name to this element's {@code class} attribute.\n     @param className class name to add\n     @return this element\n     */\n    public Element addClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.add(className);\n        classNames(classes);\n\n        return this;\n    }\n\n    /**\n     Remove a class name from this element's {@code class} attribute.\n     @param className class name to remove\n     @return this element\n     */\n    public Element removeClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.remove(className);\n        classNames(classes);\n\n        return this;\n    }\n\n    /**\n     Toggle a class name on this element's {@code class} attribute: if present, remove it; otherwise add it.\n     @param className class name to toggle\n     @return this element\n     */\n    public Element toggleClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        if (classes.contains(className))\n            classes.remove(className);\n        else\n            classes.add(className);\n        classNames(classes);\n\n        return this;\n    }\n    \n    /**\n     * Get the value of a form element (input, textarea, etc).\n     * @return the value of the form element, or empty string if not set.\n     */\n    public String val() {\n        if (tagName().equals(\"textarea\"))\n            return text();\n        else\n            return attr(\"value\");\n    }\n    \n    /**\n     * Set the value of a form element (input, textarea, etc).\n     * @param value value to set\n     * @return this element (for chaining)\n     */\n    public Element val(String value) {\n        if (tagName().equals(\"textarea\"))\n            text(value);\n        else\n            attr(\"value\", value);\n        return this;\n    }\n\n    void outerHtml(StringBuilder accum) {\n        if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0))\n            indent(accum);\n        accum\n                .append(\"<\")\n                .append(tagName())\n                .append(attributes.html());\n\n        if (childNodes.isEmpty() && tag.isEmpty()) {\n            accum.append(\" />\");\n        } else {\n            accum.append(\">\");\n            html(accum);\n            if (tag.canContainBlock()) indent(accum);\n            accum.append(\"</\").append(tagName()).append(\">\");\n        }\n    }\n\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html() {\n        StringBuilder accum = new StringBuilder();\n        html(accum); \n        return accum.toString().trim();\n    }\n\n    private void html(StringBuilder accum) {\n        for (Node node : childNodes)\n            node.outerHtml(accum);\n    }\n    \n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html) {\n        empty();\n        append(html);\n        return this;\n    }\n\n    public String toString() {\n        return outerHtml();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Element)) return false;\n        if (!super.equals(o)) return false;\n\n        Element element = (Element) o;\n\n        if (tag != null ? !tag.equals(element.tag) : element.tag != null) return false;\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (tag != null ? tag.hashCode() : 0);\n        return result;\n    }\n}"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                if (!textNode.isBlank())",
        "line": 630,
        "aftercode": "package org.jsoup.nodes;\n\nimport org.apache.commons.lang.Validate;\nimport org.apache.commons.lang.StringUtils;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Collector;\nimport org.jsoup.select.Elements;\nimport org.jsoup.select.Selector;\n\nimport java.util.*;\n\n/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private final Tag tag;\n    private Set<String> classNames;\n    \n    /**\n     * Create a new, standalone Element. (Standalone in that is has no parent.)\n     * \n     * @param tag tag of this element\n     * @param baseUri the base URI\n     * @param attributes initial attributes\n     * @see #appendChild(Node)\n     * @see #appendElement(String)\n     */\n    public Element(Tag tag, String baseUri, Attributes attributes) {\n        super(baseUri, attributes);\n        \n        Validate.notNull(tag);    \n        this.tag = tag;\n    }\n    \n    /**\n     * Create a new Element from a tag and a base URI.\n     * \n     * @param tag element tag\n     * @param baseUri the base URI of this element. It is acceptable for the base URI to be an empty\n     *            string, but not null.\n     * @see Tag#valueOf(String)\n     */\n    public Element(Tag tag, String baseUri) {\n        this(tag, baseUri, new Attributes());\n    }\n\n    @Override\n    public String nodeName() {\n        return tag.getName();\n    }\n\n    /**\n     * Get the name of the tag for this element. E.g. {@code div}\n     * \n     * @return the tag name\n     */\n    public String tagName() {\n        return tag.getName();\n    }\n\n    /**\n     * Get the Tag for this element.\n     * \n     * @return the tag object\n     */\n    public Tag tag() {\n        return tag;\n    }\n    \n    /**\n     * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element\n     * {@code <p> == false}).\n     * \n     * @return true if block, false if not (and thus inline)\n     */\n    public boolean isBlock() {\n        return tag.isBlock();\n    }\n\n    /**\n     * Get the {@code id} attribute of this element.\n     * \n     * @return The id attribute, if present, or an empty string if not.\n     */\n    public String id() {\n        String id = attr(\"id\");\n        return id == null ? \"\" : id;\n    }\n\n    /**\n     * Set an attribute value on this element. If this element already has an attribute with the\n     * key, its value is updated; otherwise, a new attribute is added.\n     * \n     * @return this element\n     */\n    public Element attr(String attributeKey, String attributeValue) {\n        super.attr(attributeKey, attributeValue);\n        return this;\n    }\n\n    @Override\n    public Element parent() {\n        return (Element) super.parent();\n    }\n\n    /**\n     * Get this element's parent and ancestors, up to the document root.\n     * @return this element's stack of parents, closest first.\n     */\n    public Elements parents() {\n        Elements parents = new Elements();\n        accumulateParents(this, parents);\n        return parents;\n    }\n\n    private static void accumulateParents(Element el, Elements parents) {\n        Element parent = el.parent();\n        if (parent != null && !parent.tagName().equals(\"#root\")) {\n            parents.add(parent);\n            accumulateParents(parent, parents);\n        }\n    }\n\n    /**\n     * Get a child element of this element, by its 0-based index number.\n     * <p/>\n     * Note that an element can have both mixed Nodes and Elements as children. This method inspects\n     * a filtered list of children that are elements, and the index is based on that filtered list.\n     * \n     * @param index the index number of the element to retrieve\n     * @return the child element, if it exists, or {@code null} if absent.\n     * @see #childNode(int)\n     */\n    public Element child(int index) {\n        return children().get(index);\n    }\n\n    /**\n     * Get this element's child elements.\n     * <p/>\n     * This is effectively a filter on {@link #childNodes()} to get Element nodes.\n     * @return child elements. If this element has no children, returns an\n     * empty list.\n     * @see #childNodes()\n     */\n    public Elements children() {\n        // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n        List<Element> elements = new ArrayList<Element>();\n        for (Node node : childNodes) {\n            if (node instanceof Element)\n                elements.add((Element) node);\n        }\n        return new Elements(elements);\n    }\n\n    /**\n     * Find elements that match the selector query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param query a {@link Selector} query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String query) {\n        return Selector.select(query, this);\n    }\n    \n    /**\n     * Add a node to the last child of this element.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element appendChild(Node child) {\n        Validate.notNull(child);\n        \n        child.setParentNode(this);\n        childNodes.add(child);\n        return this;\n    }\n    \n    /**\n     * Add a node to the start of this element's children.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element prependChild(Node child) {\n        Validate.notNull(child);\n        \n        child.setParentNode(this);\n        childNodes.add(0, child);\n        return this;\n    }\n    \n    /**\n     * Create a new element by tag name, and add it as the last child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.appendElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element appendElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        appendChild(child);\n        return child;\n    }\n    \n    /**\n     * Create a new element by tag name, and add it as the first child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.prependElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element prependElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        prependChild(child);\n        return child;\n    }\n    \n    /**\n     * Create and append a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element appendText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        appendChild(node);\n        return this;\n    }\n    \n    /**\n     * Create and prepend a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element prependText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        prependChild(node);\n        return this;\n    }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n     * @param html HTML to add inside this element, after the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element append(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        for (Node node : fragment.childNodes()) {\n            node.parentNode = null;\n            appendChild(node);\n        }\n        return this;\n    }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node prepended to the start of the children.\n     * @param html HTML to add inside this element, before the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element prepend(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        List<Node> nodes = fragment.childNodes();\n        for (int i = nodes.size() - 1; i >= 0; i--) {\n            Node node = nodes.get(i);\n            node.parentNode = null;\n            prependChild(node);\n        }\n        return this;\n    }\n    \n    /**\n     * Remove all of the element's child nodes. Any attributes are left as-is.\n     * @return this element\n     */\n    public Element empty() {\n        childNodes.clear();\n        return this;\n    }\n\n    /**\n     Wrap the supplied HTML around this element.\n     @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitralily deep.\n     @return this element, for chaining.\n     */\n    public Element wrap(String html) {\n        Validate.notEmpty(html);\n\n        Element wrapBody = Parser.parseBodyFragmentRelaxed(html, baseUri).body();\n        Elements wrapChildren = wrapBody.children();\n        Element wrap = wrapChildren.first();\n        if (wrap == null) // nothing to wrap with; noop\n            return null;\n\n        Element deepest = getDeepChild(wrap);\n        parentNode.replaceChild(this, wrap);\n        deepest.addChild(this);\n\n        // remainder (unbalananced wrap, like <div></div><p></p> -- The <p> is remainder\n        if (wrapChildren.size() > 1) {\n            for (int i = 1; i < wrapChildren.size(); i++) { // skip first\n                Element remainder = wrapChildren.get(i);\n                remainder.parentNode.removeChild(remainder);\n                wrap.appendChild(remainder);\n            }\n        }\n        return this;\n    }\n\n    private Element getDeepChild(Element el) {\n        List<Element> children = el.children();\n        if (children.size() > 0)\n            return getDeepChild(children.get(0));\n        else\n            return el;\n    }\n    \n    /**\n     * Get sibling elements.\n     * @return sibling elements\n     */\n    public Elements siblingElements() {\n        return parent().children();\n    }\n\n    /**\n     * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s, \n     * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.\n     * <p/>\n     * This is similar to {@link #nextSibling()}, but specifically finds only Elements\n     * @return the next element, or null if there is no next element\n     * @see #previousElementSibling()\n     */\n    public Element nextElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (siblings.size() > index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }\n\n    /**\n     * Gets the previous element sibling of this element.\n     * @return the previous element, or null if there is no previous element\n     * @see #nextElementSibling()\n     */\n    public Element previousElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (index > 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }\n\n    /**\n     * Gets the first element sibling of this element.\n     * @return the first sibling that is an element (aka the parent's first element child) \n     */\n    public Element firstElementSibling() {\n        // todo: should firstSibling() exclude this?\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(0) : null;\n    }\n    \n    /**\n     * Get the list index of this element in its element sibling list. I.e. if this is the first element\n     * sibling, returns 0.\n     * @return position in element sibling list\n     */\n    public Integer elementSiblingIndex() {\n       if (parent() == null) return 0;\n       return indexInList(this, parent().children()); \n    }\n\n    /**\n     * Gets the last element sibling of this element\n     * @return the last sibling that is an element (aka the parent's last element child) \n     */\n    public Element lastElementSibling() {\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;\n    }\n\n    // DOM type methods\n\n    /**\n     * Finds elements, including and recursively under this element, with the specified tag name.\n     * @param tagName The tag name to search for (case insensitively).\n     * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.\n     */\n    public Elements getElementsByTag(String tagName) {\n        Validate.notEmpty(tagName);\n        tagName = tagName.toLowerCase().trim();\n\n        return Collector.collect(new Evaluator.Tag(tagName), this);\n    }\n\n    /**\n     * Find an element by ID, including or under this element.\n     * <p>\n     * Note that this finds the first matching ID, starting with this element. If you search down from a different\n     * starting point, it is possible to find a different element by ID. For unique element by ID within a Document,\n     * use {@link Document#getElementById(String)}\n     * @param id The ID to search for.\n     * @return The first matching element by ID, starting with this element, or null if none found.\n     */\n    public Element getElementById(String id) {\n        Validate.notEmpty(id);\n        \n        Elements elements = Collector.collect(new Evaluator.Id(id), this);\n        if (elements.size() > 0)\n            return elements.get(0);\n        else\n            return null;\n    }\n\n    /**\n     * Find elements that have this class, including or under this element. Case insensitive.\n     * <p>\n     * Elements can have multiple classes (e.g. {@code <div class=\"header round first\">}. This method\n     * checks each class, so you can find the above with {@code el.getElementsByClass(\"header\");}.\n     * \n     * @param className the name of the class to search for.\n     * @return elements with the supplied class name, empty if none\n     * @see #hasClass(String)\n     * @see #classNames()\n     */\n    public Elements getElementsByClass(String className) {\n        Validate.notEmpty(className);\n\n        return Collector.collect(new Evaluator.Class(className), this);\n    }\n\n    /**\n     * Find elements that have a named attribute set. Case insensitive.\n     *\n     * @param key name of the attribute\n     * @return elements that have this attribute, empty if none\n     */\n    public Elements getElementsByAttribute(String key) {\n        Validate.notEmpty(key);\n        key = key.trim().toLowerCase();\n\n        return Collector.collect(new Evaluator.Attribute(key), this);\n    }\n\n    /**\n     * Find elements that have an attribute with the specific value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that have this attribute with this value, empty if none\n     */\n    public Elements getElementsByAttributeValue(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);\n    }\n\n    /**\n     * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that do not have a matching attribute\n     */\n    public Elements getElementsByAttributeValueNot(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);\n    }\n\n    /**\n     * Find elements that have attributes that start with the value prefix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valuePrefix start of attribute value\n     * @return elements that have attributes that start with the value prefix\n     */\n    public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {\n        return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);\n    }\n\n    /**\n     * Find elements that have attributes that end with the value suffix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valueSuffix end of the attribute value\n     * @return elements that have attributes that end with the value suffix\n     */\n    public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {\n        return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);\n    }\n\n    /**\n     * Find elements that have attributes whose value contains the match string. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param match substring of value to search for\n     * @return elements that have attributes containing this text\n     */\n    public Elements getElementsByAttributeValueContaining(String key, String match) {\n        return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is less than the supplied index.\n     * @param index 0-based index\n     * @return elements less than index\n     */\n    public Elements getElementsByIndexLessThan(int index) {\n        return Collector.collect(new Evaluator.IndexLessThan(index), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is greater than the supplied index.\n     * @param index 0-based index\n     * @return elements greater than index\n     */\n    public Elements getElementsByIndexGreaterThan(int index) {\n        return Collector.collect(new Evaluator.IndexGreaterThan(index), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is equal to the supplied index.\n     * @param index 0-based index\n     * @return elements equal to index\n     */\n    public Elements getElementsByIndexEquals(int index) {\n        return Collector.collect(new Evaluator.IndexEquals(index), this);\n    }\n    \n    /**\n     * Find all elements under this element (including self, and children of children).\n     * \n     * @return all elements\n     */\n    public Elements getAllElements() {\n        return Collector.collect(new Evaluator.AllElements(), this);\n    }\n\n    /**\n     * Gets the combined text of this element and all its children.\n     * \n     * @return unencoded text, or empty string if none.\n     */\n    public String text() {\n        StringBuilder sb = new StringBuilder();\n        text(sb);\n        return sb.toString().trim();\n    }\n\n    private void text(StringBuilder accum) {\n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\n                String text = textNode.getWholeText();\n\n                if (!preserveWhitespace()) {\n                    text = TextNode.normaliseWhitespace(text);\n                    if (TextNode.lastCharIsWhitespace(accum))\n                        text = TextNode.stripLeadingWhitespace(text);\n                }\n                accum.append(text);\n\n            } else if (child instanceof Element) {\n                Element element = (Element) child;\n                if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum))\n                    accum.append(\" \");\n                element.text(accum);\n            }\n        }\n    }\n\n    boolean preserveWhitespace() {\n        return tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace();\n    }\n\n    /**\n     * Set the text of this element. Any existing contents (text or elements) will be cleared\n     * @param text unencoded text\n     * @return this element\n     */\n    public Element text(String text) {\n        Validate.notNull(text);\n\n        empty();\n        TextNode textNode = new TextNode(text, baseUri);\n        appendChild(textNode);\n\n        return this;\n    }\n\n    /**\n     Test if this element has any text content (that is not just whitespace).\n     @return true if element has non-blank text content.\n     */\n    public boolean hasText() {\n        for (Node child: childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\nif(textNode.isBlank()){\n                    return true;\n            } else if (child instanceof Element) {\n                Element el = (Element) child;\n\nif(el.isBlank()){\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag.\n     * @return the data, or empty string if none\n     */\n    public String data() {\n        StringBuilder sb = new StringBuilder();\n\n        for (Node childNode : childNodes) {\n            if (childNode instanceof DataNode) {\n                DataNode data = (DataNode) childNode;\n                sb.append(data.getWholeData());\n            } else if (childNode instanceof Element) {\n                Element element = (Element) childNode;\n                String elementData = element.data();\n                sb.append(elementData);\n            }\n        }\n        return sb.toString();\n    }   \n\n    /**\n     * Gets the literal value of this element's \"class\" attribute, which may include multiple class names, space\n     * separated. (E.g. on <code>&lt;div class=\"header gray\"></code> returns, \"<code>header gray</code>\")\n     * @return The literal class attribute, or <b>empty string</b> if no class attribute set.\n     */\n    public String className() {\n        return attributes.hasKey(\"class\") ? attributes.get(\"class\") : \"\";\n    }\n\n    /**\n     * Get all of the element's class names. E.g. on element {@code <div class=\"header gray\"}>},\n     * returns a set of two elements {@code \"header\", \"gray\"}. Note that modifications to this set are not pushed to\n     * the backing {@code class} attribute; use the {@link #classNames(java.util.Set)} method to persist them.\n     * @return set of classnames, empty if no class attribute\n     */\n    public Set<String> classNames() {\n        if (classNames == null) {\n            String[] names = className().split(\"\\\\s+\");\n            classNames = new LinkedHashSet<String>(Arrays.asList(names));\n        }\n        return classNames;\n    }\n\n    /**\n     Set the element's {@code class} attribute to the supplied class names.\n     @param classNames set of classes\n     @return this element, for chaining\n     */\n    public Element classNames(Set<String> classNames) {\n        Validate.notNull(classNames);\n        attributes.put(\"class\", StringUtils.join(classNames, \" \"));\n        return this;\n    }\n\n    /**\n     * Tests if this element has a class.\n     * @param className name of class to check for\n     * @return true if it does, false if not\n     */\n    public boolean hasClass(String className) {\n        return classNames().contains(className);\n    }\n\n    /**\n     Add a class name to this element's {@code class} attribute.\n     @param className class name to add\n     @return this element\n     */\n    public Element addClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.add(className);\n        classNames(classes);\n\n        return this;\n    }\n\n    /**\n     Remove a class name from this element's {@code class} attribute.\n     @param className class name to remove\n     @return this element\n     */\n    public Element removeClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.remove(className);\n        classNames(classes);\n\n        return this;\n    }\n\n    /**\n     Toggle a class name on this element's {@code class} attribute: if present, remove it; otherwise add it.\n     @param className class name to toggle\n     @return this element\n     */\n    public Element toggleClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        if (classes.contains(className))\n            classes.remove(className);\n        else\n            classes.add(className);\n        classNames(classes);\n\n        return this;\n    }\n    \n    /**\n     * Get the value of a form element (input, textarea, etc).\n     * @return the value of the form element, or empty string if not set.\n     */\n    public String val() {\n        if (tagName().equals(\"textarea\"))\n            return text();\n        else\n            return attr(\"value\");\n    }\n    \n    /**\n     * Set the value of a form element (input, textarea, etc).\n     * @param value value to set\n     * @return this element (for chaining)\n     */\n    public Element val(String value) {\n        if (tagName().equals(\"textarea\"))\n            text(value);\n        else\n            attr(\"value\", value);\n        return this;\n    }\n\n    void outerHtml(StringBuilder accum) {\n        if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0))\n            indent(accum);\n        accum\n                .append(\"<\")\n                .append(tagName())\n                .append(attributes.html());\n\n        if (childNodes.isEmpty() && tag.isEmpty()) {\n            accum.append(\" />\");\n        } else {\n            accum.append(\">\");\n            html(accum);\n            if (tag.canContainBlock()) indent(accum);\n            accum.append(\"</\").append(tagName()).append(\">\");\n        }\n    }\n\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html() {\n        StringBuilder accum = new StringBuilder();\n        html(accum); \n        return accum.toString().trim();\n    }\n\n    private void html(StringBuilder accum) {\n        for (Node node : childNodes)\n            node.outerHtml(accum);\n    }\n    \n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html) {\n        empty();\n        append(html);\n        return this;\n    }\n\n    public String toString() {\n        return outerHtml();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Element)) return false;\n        if (!super.equals(o)) return false;\n\n        Element element = (Element) o;\n\n        if (tag != null ? !tag.equals(element.tag) : element.tag != null) return false;\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (tag != null ? tag.hashCode() : 0);\n        return result;\n    }\n}"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                if (!textNode.isBlank())",
        "line": 627,
        "aftercode": "if((textNode instanceof TextNode)){"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                DataNode data = (DataNode) childNode;",
        "line": 647,
        "aftercode": "DataNode data = new DataNode();"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        Element child = new Element(Tag.valueOf(tagName), baseUri());",
        "line": 219,
        "aftercode": "Element child = new Element(Tag.valueOf(Tag.valueOf(tagName)), baseUri());"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            if (child instanceof TextNode) {",
        "line": 625,
        "aftercode": "if(el.hasText()){"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            if (childNode instanceof DataNode) {",
        "line": 646,
        "aftercode": "if(data.getWholeData()){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                if (el.hasText())",
        "line": 631,
        "aftercode": "if(el.hasText()){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            if (child instanceof TextNode) {",
        "line": 625,
        "aftercode": "(Node child = ;"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            } else if (child instanceof Element) {",
        "line": 629,
        "aftercode": "if(textNode.isBlank()){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            if (child instanceof TextNode) {",
        "line": 625,
        "aftercode": "if(!child.isBlank()){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                TextNode textNode = (TextNode) child;",
        "line": 626,
        "aftercode": "TextNode textNode = (TextNode)textNode.isBlank();"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        for (Node child: childNodes) {",
        "line": 624,
        "aftercode": "(Node child = ;"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            if (child instanceof TextNode) {",
        "line": 625,
        "aftercode": "if(!textNode.isBlank()){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                if (!textNode.isBlank())",
        "line": 627,
        "aftercode": "if(el.hasText()){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "            } else if (child instanceof Element) {",
        "line": 629,
        "aftercode": "if((child instanceof TextNode)){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                if (!textNode.isBlank())",
        "line": 627,
        "aftercode": "if(textNode.isBlank()){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                if (!textNode.isBlank())",
        "line": 627,
        "aftercode": "if((textNode != null)){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                if (!textNode.isBlank())",
        "line": 627,
        "aftercode": "if((textNode == null)){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                    return true;",
        "line": 628,
        "aftercode": "Element el = (Element)child;"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "        for (Node child: childNodes) {",
        "line": 624,
        "aftercode": "TextNode textNode = (TextNode)child;"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                if (!textNode.isBlank())",
        "line": 630,
        "aftercode": "package org.jsoup.nodes;\n\nimport org.apache.commons.lang.Validate;\nimport org.apache.commons.lang.StringUtils;\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.Tag;\nimport org.jsoup.select.Collector;\nimport org.jsoup.select.Elements;\nimport org.jsoup.select.Selector;\n\nimport java.util.*;\n\n/**\n * A HTML element consists of a tag name, attributes, and child nodes (including text nodes and\n * other elements).\n * \n * From an Element, you can extract data, traverse the node graph, and manipulate the HTML.\n * \n * @author Jonathan Hedley, jonathan@hedley.net\n */\npublic class Element extends Node {\n    private final Tag tag;\n    private Set<String> classNames;\n    \n    /**\n     * Create a new, standalone Element. (Standalone in that is has no parent.)\n     * \n     * @param tag tag of this element\n     * @param baseUri the base URI\n     * @param attributes initial attributes\n     * @see #appendChild(Node)\n     * @see #appendElement(String)\n     */\n    public Element(Tag tag, String baseUri, Attributes attributes) {\n        super(baseUri, attributes);\n        \n        Validate.notNull(tag);    \n        this.tag = tag;\n    }\n    \n    /**\n     * Create a new Element from a tag and a base URI.\n     * \n     * @param tag element tag\n     * @param baseUri the base URI of this element. It is acceptable for the base URI to be an empty\n     *            string, but not null.\n     * @see Tag#valueOf(String)\n     */\n    public Element(Tag tag, String baseUri) {\n        this(tag, baseUri, new Attributes());\n    }\n\n    @Override\n    public String nodeName() {\n        return tag.getName();\n    }\n\n    /**\n     * Get the name of the tag for this element. E.g. {@code div}\n     * \n     * @return the tag name\n     */\n    public String tagName() {\n        return tag.getName();\n    }\n\n    /**\n     * Get the Tag for this element.\n     * \n     * @return the tag object\n     */\n    public Tag tag() {\n        return tag;\n    }\n    \n    /**\n     * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element\n     * {@code <p> == false}).\n     * \n     * @return true if block, false if not (and thus inline)\n     */\n    public boolean isBlock() {\n        return tag.isBlock();\n    }\n\n    /**\n     * Get the {@code id} attribute of this element.\n     * \n     * @return The id attribute, if present, or an empty string if not.\n     */\n    public String id() {\n        String id = attr(\"id\");\n        return id == null ? \"\" : id;\n    }\n\n    /**\n     * Set an attribute value on this element. If this element already has an attribute with the\n     * key, its value is updated; otherwise, a new attribute is added.\n     * \n     * @return this element\n     */\n    public Element attr(String attributeKey, String attributeValue) {\n        super.attr(attributeKey, attributeValue);\n        return this;\n    }\n\n    @Override\n    public Element parent() {\n        return (Element) super.parent();\n    }\n\n    /**\n     * Get this element's parent and ancestors, up to the document root.\n     * @return this element's stack of parents, closest first.\n     */\n    public Elements parents() {\n        Elements parents = new Elements();\n        accumulateParents(this, parents);\n        return parents;\n    }\n\n    private static void accumulateParents(Element el, Elements parents) {\n        Element parent = el.parent();\n        if (parent != null && !parent.tagName().equals(\"#root\")) {\n            parents.add(parent);\n            accumulateParents(parent, parents);\n        }\n    }\n\n    /**\n     * Get a child element of this element, by its 0-based index number.\n     * <p/>\n     * Note that an element can have both mixed Nodes and Elements as children. This method inspects\n     * a filtered list of children that are elements, and the index is based on that filtered list.\n     * \n     * @param index the index number of the element to retrieve\n     * @return the child element, if it exists, or {@code null} if absent.\n     * @see #childNode(int)\n     */\n    public Element child(int index) {\n        return children().get(index);\n    }\n\n    /**\n     * Get this element's child elements.\n     * <p/>\n     * This is effectively a filter on {@link #childNodes()} to get Element nodes.\n     * @return child elements. If this element has no children, returns an\n     * empty list.\n     * @see #childNodes()\n     */\n    public Elements children() {\n        // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n        List<Element> elements = new ArrayList<Element>();\n        for (Node node : childNodes) {\n            if (node instanceof Element)\n                elements.add((Element) node);\n        }\n        return new Elements(elements);\n    }\n\n    /**\n     * Find elements that match the selector query, with this element as the starting context. Matched elements\n     * may include this element, or any of its children.\n     * <p/>\n     * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because\n     * multiple filters can be combined, e.g.:\n     * <ul>\n     * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n     * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n     * </ul>\n     * <p/>\n     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n     *\n     * @param query a {@link Selector} query\n     * @return elements that match the query (empty if none match)\n     * @see org.jsoup.select.Selector\n     */\n    public Elements select(String query) {\n        return Selector.select(query, this);\n    }\n    \n    /**\n     * Add a node to the last child of this element.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element appendChild(Node child) {\n        Validate.notNull(child);\n        \n        child.setParentNode(this);\n        childNodes.add(child);\n        return this;\n    }\n    \n    /**\n     * Add a node to the start of this element's children.\n     * \n     * @param child node to add. Must not already have a parent.\n     * @return this element, so that you can add more child nodes or elements.\n     */\n    public Element prependChild(Node child) {\n        Validate.notNull(child);\n        \n        child.setParentNode(this);\n        childNodes.add(0, child);\n        return this;\n    }\n    \n    /**\n     * Create a new element by tag name, and add it as the last child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.appendElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element appendElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        appendChild(child);\n        return child;\n    }\n    \n    /**\n     * Create a new element by tag name, and add it as the first child.\n     * \n     * @param tagName the name of the tag (e.g. {@code div}).\n     * @return the new element, to allow you to add content to it, e.g.:\n     *  {@code parent.prependElement(\"h1\").attr(\"id\", \"header\").text(\"Welcome\");}\n     */\n    public Element prependElement(String tagName) {\n        Element child = new Element(Tag.valueOf(tagName), baseUri());\n        prependChild(child);\n        return child;\n    }\n    \n    /**\n     * Create and append a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element appendText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        appendChild(node);\n        return this;\n    }\n    \n    /**\n     * Create and prepend a new TextNode to this element.\n     * \n     * @param text the unencoded text to add\n     * @return this element\n     */\n    public Element prependText(String text) {\n        TextNode node = new TextNode(text, baseUri());\n        prependChild(node);\n        return this;\n    }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.\n     * @param html HTML to add inside this element, after the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element append(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        for (Node node : fragment.childNodes()) {\n            node.parentNode = null;\n            appendChild(node);\n        }\n        return this;\n    }\n    \n    /**\n     * Add inner HTML to this element. The supplied HTML will be parsed, and each node prepended to the start of the children.\n     * @param html HTML to add inside this element, before the existing HTML\n     * @return this element\n     * @see #html(String)\n     */\n    public Element prepend(String html) {\n        Validate.notNull(html);\n        \n        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n        List<Node> nodes = fragment.childNodes();\n        for (int i = nodes.size() - 1; i >= 0; i--) {\n            Node node = nodes.get(i);\n            node.parentNode = null;\n            prependChild(node);\n        }\n        return this;\n    }\n    \n    /**\n     * Remove all of the element's child nodes. Any attributes are left as-is.\n     * @return this element\n     */\n    public Element empty() {\n        childNodes.clear();\n        return this;\n    }\n\n    /**\n     Wrap the supplied HTML around this element.\n     @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitralily deep.\n     @return this element, for chaining.\n     */\n    public Element wrap(String html) {\n        Validate.notEmpty(html);\n\n        Element wrapBody = Parser.parseBodyFragmentRelaxed(html, baseUri).body();\n        Elements wrapChildren = wrapBody.children();\n        Element wrap = wrapChildren.first();\n        if (wrap == null) // nothing to wrap with; noop\n            return null;\n\n        Element deepest = getDeepChild(wrap);\n        parentNode.replaceChild(this, wrap);\n        deepest.addChild(this);\n\n        // remainder (unbalananced wrap, like <div></div><p></p> -- The <p> is remainder\n        if (wrapChildren.size() > 1) {\n            for (int i = 1; i < wrapChildren.size(); i++) { // skip first\n                Element remainder = wrapChildren.get(i);\n                remainder.parentNode.removeChild(remainder);\n                wrap.appendChild(remainder);\n            }\n        }\n        return this;\n    }\n\n    private Element getDeepChild(Element el) {\n        List<Element> children = el.children();\n        if (children.size() > 0)\n            return getDeepChild(children.get(0));\n        else\n            return el;\n    }\n    \n    /**\n     * Get sibling elements.\n     * @return sibling elements\n     */\n    public Elements siblingElements() {\n        return parent().children();\n    }\n\n    /**\n     * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s, \n     * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.\n     * <p/>\n     * This is similar to {@link #nextSibling()}, but specifically finds only Elements\n     * @return the next element, or null if there is no next element\n     * @see #previousElementSibling()\n     */\n    public Element nextElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (siblings.size() > index+1)\n            return siblings.get(index+1);\n        else\n            return null;\n    }\n\n    /**\n     * Gets the previous element sibling of this element.\n     * @return the previous element, or null if there is no previous element\n     * @see #nextElementSibling()\n     */\n    public Element previousElementSibling() {\n        List<Element> siblings = parent().children();\n        Integer index = indexInList(this, siblings);\n        Validate.notNull(index);\n        if (index > 0)\n            return siblings.get(index-1);\n        else\n            return null;\n    }\n\n    /**\n     * Gets the first element sibling of this element.\n     * @return the first sibling that is an element (aka the parent's first element child) \n     */\n    public Element firstElementSibling() {\n        // todo: should firstSibling() exclude this?\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(0) : null;\n    }\n    \n    /**\n     * Get the list index of this element in its element sibling list. I.e. if this is the first element\n     * sibling, returns 0.\n     * @return position in element sibling list\n     */\n    public Integer elementSiblingIndex() {\n       if (parent() == null) return 0;\n       return indexInList(this, parent().children()); \n    }\n\n    /**\n     * Gets the last element sibling of this element\n     * @return the last sibling that is an element (aka the parent's last element child) \n     */\n    public Element lastElementSibling() {\n        List<Element> siblings = parent().children();\n        return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;\n    }\n\n    // DOM type methods\n\n    /**\n     * Finds elements, including and recursively under this element, with the specified tag name.\n     * @param tagName The tag name to search for (case insensitively).\n     * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.\n     */\n    public Elements getElementsByTag(String tagName) {\n        Validate.notEmpty(tagName);\n        tagName = tagName.toLowerCase().trim();\n\n        return Collector.collect(new Evaluator.Tag(tagName), this);\n    }\n\n    /**\n     * Find an element by ID, including or under this element.\n     * <p>\n     * Note that this finds the first matching ID, starting with this element. If you search down from a different\n     * starting point, it is possible to find a different element by ID. For unique element by ID within a Document,\n     * use {@link Document#getElementById(String)}\n     * @param id The ID to search for.\n     * @return The first matching element by ID, starting with this element, or null if none found.\n     */\n    public Element getElementById(String id) {\n        Validate.notEmpty(id);\n        \n        Elements elements = Collector.collect(new Evaluator.Id(id), this);\n        if (elements.size() > 0)\n            return elements.get(0);\n        else\n            return null;\n    }\n\n    /**\n     * Find elements that have this class, including or under this element. Case insensitive.\n     * <p>\n     * Elements can have multiple classes (e.g. {@code <div class=\"header round first\">}. This method\n     * checks each class, so you can find the above with {@code el.getElementsByClass(\"header\");}.\n     * \n     * @param className the name of the class to search for.\n     * @return elements with the supplied class name, empty if none\n     * @see #hasClass(String)\n     * @see #classNames()\n     */\n    public Elements getElementsByClass(String className) {\n        Validate.notEmpty(className);\n\n        return Collector.collect(new Evaluator.Class(className), this);\n    }\n\n    /**\n     * Find elements that have a named attribute set. Case insensitive.\n     *\n     * @param key name of the attribute\n     * @return elements that have this attribute, empty if none\n     */\n    public Elements getElementsByAttribute(String key) {\n        Validate.notEmpty(key);\n        key = key.trim().toLowerCase();\n\n        return Collector.collect(new Evaluator.Attribute(key), this);\n    }\n\n    /**\n     * Find elements that have an attribute with the specific value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that have this attribute with this value, empty if none\n     */\n    public Elements getElementsByAttributeValue(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);\n    }\n\n    /**\n     * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param value value of the attribute\n     * @return elements that do not have a matching attribute\n     */\n    public Elements getElementsByAttributeValueNot(String key, String value) {\n        return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);\n    }\n\n    /**\n     * Find elements that have attributes that start with the value prefix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valuePrefix start of attribute value\n     * @return elements that have attributes that start with the value prefix\n     */\n    public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {\n        return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);\n    }\n\n    /**\n     * Find elements that have attributes that end with the value suffix. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param valueSuffix end of the attribute value\n     * @return elements that have attributes that end with the value suffix\n     */\n    public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {\n        return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);\n    }\n\n    /**\n     * Find elements that have attributes whose value contains the match string. Case insensitive.\n     * \n     * @param key name of the attribute\n     * @param match substring of value to search for\n     * @return elements that have attributes containing this text\n     */\n    public Elements getElementsByAttributeValueContaining(String key, String match) {\n        return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is less than the supplied index.\n     * @param index 0-based index\n     * @return elements less than index\n     */\n    public Elements getElementsByIndexLessThan(int index) {\n        return Collector.collect(new Evaluator.IndexLessThan(index), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is greater than the supplied index.\n     * @param index 0-based index\n     * @return elements greater than index\n     */\n    public Elements getElementsByIndexGreaterThan(int index) {\n        return Collector.collect(new Evaluator.IndexGreaterThan(index), this);\n    }\n    \n    /**\n     * Find elements whose sibling index is equal to the supplied index.\n     * @param index 0-based index\n     * @return elements equal to index\n     */\n    public Elements getElementsByIndexEquals(int index) {\n        return Collector.collect(new Evaluator.IndexEquals(index), this);\n    }\n    \n    /**\n     * Find all elements under this element (including self, and children of children).\n     * \n     * @return all elements\n     */\n    public Elements getAllElements() {\n        return Collector.collect(new Evaluator.AllElements(), this);\n    }\n\n    /**\n     * Gets the combined text of this element and all its children.\n     * \n     * @return unencoded text, or empty string if none.\n     */\n    public String text() {\n        StringBuilder sb = new StringBuilder();\n        text(sb);\n        return sb.toString().trim();\n    }\n\n    private void text(StringBuilder accum) {\n        for (Node child : childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\n                String text = textNode.getWholeText();\n\n                if (!preserveWhitespace()) {\n                    text = TextNode.normaliseWhitespace(text);\n                    if (TextNode.lastCharIsWhitespace(accum))\n                        text = TextNode.stripLeadingWhitespace(text);\n                }\n                accum.append(text);\n\n            } else if (child instanceof Element) {\n                Element element = (Element) child;\n                if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum))\n                    accum.append(\" \");\n                element.text(accum);\n            }\n        }\n    }\n\n    boolean preserveWhitespace() {\n        return tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace();\n    }\n\n    /**\n     * Set the text of this element. Any existing contents (text or elements) will be cleared\n     * @param text unencoded text\n     * @return this element\n     */\n    public Element text(String text) {\n        Validate.notNull(text);\n\n        empty();\n        TextNode textNode = new TextNode(text, baseUri);\n        appendChild(textNode);\n\n        return this;\n    }\n\n    /**\n     Test if this element has any text content (that is not just whitespace).\n     @return true if element has non-blank text content.\n     */\n    public boolean hasText() {\n        for (Node child: childNodes) {\n            if (child instanceof TextNode) {\n                TextNode textNode = (TextNode) child;\nif(textNode.isBlank()){\n                    return true;\n            } else if (child instanceof Element) {\n                Element el = (Element) child;\n\nif(el.hasText()){\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag.\n     * @return the data, or empty string if none\n     */\n    public String data() {\n        StringBuilder sb = new StringBuilder();\n\n        for (Node childNode : childNodes) {\n            if (childNode instanceof DataNode) {\n                DataNode data = (DataNode) childNode;\n                sb.append(data.getWholeData());\n            } else if (childNode instanceof Element) {\n                Element element = (Element) childNode;\n                String elementData = element.data();\n                sb.append(elementData);\n            }\n        }\n        return sb.toString();\n    }   \n\n    /**\n     * Gets the literal value of this element's \"class\" attribute, which may include multiple class names, space\n     * separated. (E.g. on <code>&lt;div class=\"header gray\"></code> returns, \"<code>header gray</code>\")\n     * @return The literal class attribute, or <b>empty string</b> if no class attribute set.\n     */\n    public String className() {\n        return attributes.hasKey(\"class\") ? attributes.get(\"class\") : \"\";\n    }\n\n    /**\n     * Get all of the element's class names. E.g. on element {@code <div class=\"header gray\"}>},\n     * returns a set of two elements {@code \"header\", \"gray\"}. Note that modifications to this set are not pushed to\n     * the backing {@code class} attribute; use the {@link #classNames(java.util.Set)} method to persist them.\n     * @return set of classnames, empty if no class attribute\n     */\n    public Set<String> classNames() {\n        if (classNames == null) {\n            String[] names = className().split(\"\\\\s+\");\n            classNames = new LinkedHashSet<String>(Arrays.asList(names));\n        }\n        return classNames;\n    }\n\n    /**\n     Set the element's {@code class} attribute to the supplied class names.\n     @param classNames set of classes\n     @return this element, for chaining\n     */\n    public Element classNames(Set<String> classNames) {\n        Validate.notNull(classNames);\n        attributes.put(\"class\", StringUtils.join(classNames, \" \"));\n        return this;\n    }\n\n    /**\n     * Tests if this element has a class.\n     * @param className name of class to check for\n     * @return true if it does, false if not\n     */\n    public boolean hasClass(String className) {\n        return classNames().contains(className);\n    }\n\n    /**\n     Add a class name to this element's {@code class} attribute.\n     @param className class name to add\n     @return this element\n     */\n    public Element addClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.add(className);\n        classNames(classes);\n\n        return this;\n    }\n\n    /**\n     Remove a class name from this element's {@code class} attribute.\n     @param className class name to remove\n     @return this element\n     */\n    public Element removeClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        classes.remove(className);\n        classNames(classes);\n\n        return this;\n    }\n\n    /**\n     Toggle a class name on this element's {@code class} attribute: if present, remove it; otherwise add it.\n     @param className class name to toggle\n     @return this element\n     */\n    public Element toggleClass(String className) {\n        Validate.notNull(className);\n\n        Set<String> classes = classNames();\n        if (classes.contains(className))\n            classes.remove(className);\n        else\n            classes.add(className);\n        classNames(classes);\n\n        return this;\n    }\n    \n    /**\n     * Get the value of a form element (input, textarea, etc).\n     * @return the value of the form element, or empty string if not set.\n     */\n    public String val() {\n        if (tagName().equals(\"textarea\"))\n            return text();\n        else\n            return attr(\"value\");\n    }\n    \n    /**\n     * Set the value of a form element (input, textarea, etc).\n     * @param value value to set\n     * @return this element (for chaining)\n     */\n    public Element val(String value) {\n        if (tagName().equals(\"textarea\"))\n            text(value);\n        else\n            attr(\"value\", value);\n        return this;\n    }\n\n    void outerHtml(StringBuilder accum) {\n        if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0))\n            indent(accum);\n        accum\n                .append(\"<\")\n                .append(tagName())\n                .append(attributes.html());\n\n        if (childNodes.isEmpty() && tag.isEmpty()) {\n            accum.append(\" />\");\n        } else {\n            accum.append(\">\");\n            html(accum);\n            if (tag.canContainBlock()) indent(accum);\n            accum.append(\"</\").append(tagName()).append(\">\");\n        }\n    }\n\n    /**\n     * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return\n     * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)\n     * \n     * @return String of HTML.\n     * @see #outerHtml()\n     */\n    public String html() {\n        StringBuilder accum = new StringBuilder();\n        html(accum); \n        return accum.toString().trim();\n    }\n\n    private void html(StringBuilder accum) {\n        for (Node node : childNodes)\n            node.outerHtml(accum);\n    }\n    \n    /**\n     * Set this element's inner HTML. Clears the existing HTML first.\n     * @param html HTML to parse and set into this element\n     * @return this element\n     * @see #append(String)\n     */\n    public Element html(String html) {\n        empty();\n        append(html);\n        return this;\n    }\n\n    public String toString() {\n        return outerHtml();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (!(o instanceof Element)) return false;\n        if (!super.equals(o)) return false;\n\n        Element element = (Element) o;\n\n        if (tag != null ? !tag.equals(element.tag) : element.tag != null) return false;\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = super.hashCode();\n        result = 31 * result + (tag != null ? tag.hashCode() : 0);\n        return result;\n    }\n}"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_3_fixed/src/main/java/org/jsoup/nodes/Element.java",
        "precode": "                    return true;",
        "line": 628,
        "aftercode": ""
    }
]