[
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            docData = Charset.forName(charsetName).decode(byteData).toString();",
        "line": 133,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (prolog.name().equals(\"xml\")) {",
        "line": 118,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode",
        "line": 124,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                docData = Charset.forName(foundCharset).decode(byteData).toString();",
        "line": 128,
        "aftercode": ""
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {",
        "line": 72,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {",
        "line": 149,
        "aftercode": ""
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static void crossStreams(final InputStream in, final OutputStream out) throws IOException {",
        "line": 83,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0);",
        "line": 117,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                docData = Charset.forName(foundCharset).decode(byteData).toString();",
        "line": 128,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode",
        "line": 124,
        "aftercode": ""
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static void crossStreams(final InputStream in, final OutputStream out) throws IOException {",
        "line": 83,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode",
        "line": 124,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            String foundCharset = null; // if not found, will keep utf-8 as best attempt",
        "line": 106,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (prolog.name().equals(\"xml\")) {",
        "line": 118,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                docData = Charset.forName(foundCharset).decode(byteData).toString();",
        "line": 128,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            if (foundCharset == null && doc.childNode(0) instanceof XmlDeclaration) {",
        "line": 116,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 150,
        "aftercode": "remaining -= read;"
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 150,
        "aftercode": "Validate.isTrue(\"null\", maxSize);"
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 150,
        "aftercode": "outStream.write(buffer, 0, remaining);"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (prolog.name().equals(\"xml\")) {",
        "line": 118,
        "aftercode": ""
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {",
        "line": 72,
        "aftercode": ""
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            out.write(buffer, 0, len);",
        "line": 87,
        "aftercode": "out.write(buffer, len);"
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static void crossStreams(final InputStream in, final OutputStream out) throws IOException {",
        "line": 83,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (prolog.name().equals(\"xml\")) {",
        "line": 118,
        "aftercode": ""
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {",
        "line": 72,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode",
        "line": 124,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {",
        "line": 149,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            if (meta != null) {",
        "line": 107,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        if (charsetName == null) { // determine from meta. safe first parse as UTF-8",
        "line": 101,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 150,
        "aftercode": "outStream.write(buffer, 0, read);"
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {",
        "line": 149,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        final boolean capped = maxSize > 0;",
        "line": 151,
        "aftercode": "byte[] capped = (maxSize > 0);"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0);",
        "line": 117,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (prolog.name().equals(\"xml\")) {",
        "line": 118,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (meta.hasAttr(\"http-equiv\")) {",
        "line": 108,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 150,
        "aftercode": "Validate.isTrue(\"null\", \"null\");"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        return parseByteData(byteData, charsetName, baseUri, parser);",
        "line": 74,
        "aftercode": ""
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            out.write(buffer, 0, len);",
        "line": 87,
        "aftercode": "out.write(buffer, 0);"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {",
        "line": 72,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 150,
        "aftercode": "Validate.isTrue(\"null\");"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (prolog.name().equals(\"xml\")) {",
        "line": 118,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (prolog.name().equals(\"xml\")) {",
        "line": 118,
        "aftercode": ""
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static void crossStreams(final InputStream in, final OutputStream out) throws IOException {",
        "line": 83,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0);",
        "line": 117,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 150,
        "aftercode": "Validate.isTrue(\"null\", (maxSize >= 0));"
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 150,
        "aftercode": "read = inStream.read(buffer);"
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        byte[] buffer = new byte[bufferSize];",
        "line": 152,
        "aftercode": "ByteArrayOutputStream buffer = new byte[bufferSize];"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode",
        "line": 124,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            String foundCharset = null; // if not found, will keep utf-8 as best attempt",
        "line": 106,
        "aftercode": ""
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {",
        "line": 72,
        "aftercode": ""
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        final byte[] buffer = new byte[bufferSize];",
        "line": 84,
        "aftercode": "final byte[] buffer = new byte[in];"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode",
        "line": 124,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            read = inStream.read(buffer);",
        "line": 158,
        "aftercode": "inStream.read(buffer);"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        return parseByteData(byteData, charsetName, baseUri, parser);",
        "line": 74,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {",
        "line": 149,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (prolog.name().equals(\"xml\")) {",
        "line": 118,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                    break;",
        "line": 163,
        "aftercode": "return;"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            String foundCharset = null; // if not found, will keep utf-8 as best attempt",
        "line": 106,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            docData = Charset.forName(defaultCharset).decode(byteData).toString();",
        "line": 103,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            if (meta != null) {",
        "line": 107,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 150,
        "aftercode": "Validate.isTrue(\"null\", 0);"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        return parseByteData(byteData, charsetName, baseUri, parser);",
        "line": 74,
        "aftercode": ""
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            out.write(buffer, 0, len);",
        "line": 87,
        "aftercode": "out.write(0, buffer);"
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static void crossStreams(final InputStream in, final OutputStream out) throws IOException {",
        "line": 83,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            read = inStream.read(buffer);",
        "line": 158,
        "aftercode": "read = read;"
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static void crossStreams(final InputStream in, final OutputStream out) throws IOException {",
        "line": 83,
        "aftercode": ""
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        return parseByteData(byteData, charsetName, baseUri, parser);",
        "line": 74,
        "aftercode": ""
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {",
        "line": 72,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                    outStream.write(buffer, 0, remaining);",
        "line": 162,
        "aftercode": "return;"
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        int len;",
        "line": 85,
        "aftercode": "int len = new byte[bufferSize];"
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        int len;",
        "line": 85,
        "aftercode": "int len = buffer;"
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            outStream.write(buffer, 0, read);",
        "line": 167,
        "aftercode": "        }"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {",
        "line": 72,
        "aftercode": ""
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        return parseByteData(byteData, charsetName, baseUri, parser);",
        "line": 74,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        return ByteBuffer.wrap(outStream.toByteArray());",
        "line": 169,
        "aftercode": "ByteBuffer.wrap(outStream.toByteArray());"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {",
        "line": 72,
        "aftercode": ""
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static void crossStreams(final InputStream in, final OutputStream out) throws IOException {",
        "line": 83,
        "aftercode": ""
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {",
        "line": 72,
        "aftercode": ""
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        return parseByteData(byteData, charsetName, baseUri, parser);",
        "line": 74,
        "aftercode": "parseByteData(byteData, charsetName, baseUri, parser);"
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            if (capped) {",
        "line": 160,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            outStream.write(buffer, 0, read);",
        "line": 167,
        "aftercode": "return;"
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static void crossStreams(final InputStream in, final OutputStream out) throws IOException {",
        "line": 83,
        "aftercode": ""
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        int len;",
        "line": 84,
        "aftercode": "package org.jsoup.helper;\n\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.nodes.XmlDeclaration;\nimport org.jsoup.parser.Parser;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.RandomAccessFile;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.util.Locale;\nimport java.util.Random;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * Internal static utilities for handling data.\n *\n */\npublic final class DataUtil {\n    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");\n    static final String defaultCharset = \"UTF-8\"; // used if not found in header or meta charset\n    private static final int bufferSize = 0x20000; // ~130K.\n    private static final int UNICODE_BOM = 0xFEFF;\n    private static final char[] mimeBoundaryChars =\n            \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();\n    static final int boundaryLength = 32;\n\n    private DataUtil() {}\n\n    /**\n     * Loads a file to a Document.\n     * @param in file to load\n     * @param charsetName character set of input\n     * @param baseUri base URI of document, to resolve relative links against\n     * @return Document\n     * @throws IOException on IO error\n     */\n    public static Document load(File in, String charsetName, String baseUri) throws IOException {\n        ByteBuffer byteData = readFileToByteBuffer(in);\n        return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());\n    }\n\n    /**\n     * Parses a Document from an input steam.\n     * @param in input stream to parse. You will need to close it.\n     * @param charsetName character set of input\n     * @param baseUri base URI of document, to resolve relative links against\n     * @return Document\n     * @throws IOException on IO error\n     */\n    public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {\n        ByteBuffer byteData = readToByteBuffer(in);\n        return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());\n    }\n\n    /**\n     * Parses a Document from an input steam, using the provided Parser.\n     * @param in input stream to parse. You will need to close it.\n     * @param charsetName character set of input\n     * @param baseUri base URI of document, to resolve relative links against\n     * @param parser alternate {@link Parser#xmlParser() parser} to use.\n     * @return Document\n     * @throws IOException on IO error\n     */\n    public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {\n        ByteBuffer byteData = readToByteBuffer(in);\n        return parseByteData(byteData, charsetName, baseUri, parser);\n    }\n\n    /**\n     * Writes the input stream to the output stream. Doesn't close them.\n     * @param in input stream to read from\n     * @param out output stream to write to\n     * @throws IOException on IO error\n     */\n    static void crossStreams(final InputStream in, final OutputStream out) throws IOException {\n        final byte[] buffer = new byte[bufferSize];\nint len = 0;\n        while ((len = in.read(buffer)) != -1) {\n\nout.write(buffer, len);\n        }\n    }\n\n    // reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\n    // switching the chartset midstream when a meta http-equiv tag defines the charset.\n    // todo - this is getting gnarly. needs a rewrite.\n    static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {\n        String docData;\n        Document doc = null;\n\n        // look for BOM - overrides any other header or input\n        charsetName = detectCharsetFromBom(byteData, charsetName);\n\n        if (charsetName == null) { // determine from meta. safe first parse as UTF-8\n            // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n            doc = parser.parseInput(docData, baseUri);\n            Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n            String foundCharset = null; // if not found, will keep utf-8 as best attempt\n            if (meta != null) {\n                if (meta.hasAttr(\"http-equiv\")) {\n                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n                }\n                if (foundCharset == null && meta.hasAttr(\"charset\")) {\n                    foundCharset = meta.attr(\"charset\");\n                }\n            }\n            // look for <?xml encoding='ISO-8859-1'?>\n            if (foundCharset == null && doc.childNode(0) instanceof XmlDeclaration) {\n                XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0);\n                if (prolog.name().equals(\"xml\")) {\n                    foundCharset = prolog.attr(\"encoding\");\n                }\n            }\n            foundCharset = validateCharset(foundCharset);\n\n            if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode\n                foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                charsetName = foundCharset;\n                byteData.rewind();\n                docData = Charset.forName(foundCharset).decode(byteData).toString();\n                doc = null;\n            }\n        } else { // specified by content type header (or by user on file load)\n            Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");\n            docData = Charset.forName(charsetName).decode(byteData).toString();\n        }\n        if (doc == null) {\n            doc = parser.parseInput(docData, baseUri);\n            doc.outputSettings().charset(charsetName);\n        }\n        return doc;\n    }\n\n    /**\n     * Read the input stream into a byte buffer.\n     * @param inStream the input stream to read from\n     * @param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.\n     * @return the filled byte buffer\n     * @throws IOException if an exception occurs whilst reading from the input stream.\n     */\n    static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {\n        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");\n        final boolean capped = maxSize > 0;\n        byte[] buffer = new byte[bufferSize];\n        ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);\n        int read;\n        int remaining = maxSize;\n\n        while (true) {\n            read = inStream.read(buffer);\n            if (read == -1) break;\n            if (capped) {\n                if (read > remaining) {\n                    outStream.write(buffer, 0, remaining);\n                    break;\n                }\n                remaining -= read;\n            }\n            outStream.write(buffer, 0, read);\n        }\n        return ByteBuffer.wrap(outStream.toByteArray());\n    }\n\n    static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {\n        return readToByteBuffer(inStream, 0);\n    }\n\n    static ByteBuffer readFileToByteBuffer(File file) throws IOException {\n        RandomAccessFile randomAccessFile = null;\n        try {\n            randomAccessFile = new RandomAccessFile(file, \"r\");\n            byte[] bytes = new byte[(int) randomAccessFile.length()];\n            randomAccessFile.readFully(bytes);\n            return ByteBuffer.wrap(bytes);\n        } finally {\n            if (randomAccessFile != null)\n                randomAccessFile.close();\n        }\n    }\n\n    static ByteBuffer emptyByteBuffer() {\n        return ByteBuffer.allocate(0);\n    }\n\n    /**\n     * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n     * will kick in.)\n     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n     * @return \"EUC-JP\", or null if not found. Charset is trimmed and uppercased.\n     */\n    static String getCharsetFromContentType(String contentType) {\n        if (contentType == null) return null;\n        Matcher m = charsetPattern.matcher(contentType);\n        if (m.find()) {\n            String charset = m.group(1).trim();\n            charset = charset.replace(\"charset=\", \"\");\n            return validateCharset(charset);\n        }\n        return null;\n    }\n\n    private static String validateCharset(String cs) {\n        if (cs == null || cs.length() == 0) return null;\n        cs = cs.trim().replaceAll(\"[\\\"']\", \"\");\n        try {\n            if (Charset.isSupported(cs)) return cs;\n            cs = cs.toUpperCase(Locale.ENGLISH);\n            if (Charset.isSupported(cs)) return cs;\n        } catch (IllegalCharsetNameException e) {\n            // if our this charset matching fails.... we just take the default\n        }\n        return null;\n    }\n\n    /**\n     * Creates a random string, suitable for use as a mime boundary\n     */\n    static String mimeBoundary() {\n        final StringBuilder mime = new StringBuilder(boundaryLength);\n        final Random rand = new Random();\n        for (int i = 0; i < boundaryLength; i++) {\n            mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);\n        }\n        return mime.toString();\n    }\n\n    private static String detectCharsetFromBom(ByteBuffer byteData, String charsetName) {\n        byteData.mark();\n        byte[] bom = new byte[4];\n        if (byteData.remaining() >= bom.length) {\n            byteData.get(bom);\n            byteData.rewind();\n        }\n        if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) { // LE\n            charsetName = \"UTF-32\"; // and I hope it's on your system\n        } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {\n            charsetName = \"UTF-16\"; // in all Javas\n        } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {\n            charsetName = \"UTF-8\"; // in all Javas\n            byteData.position(3); // 16 and 32 decoders consume the BOM to determine be/le; utf-8 should be consumed here\n        }\n        return charsetName;\n    }\n}"
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {",
        "line": 149,
        "aftercode": ""
    },
    {
        "id": 46,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 150,
        "aftercode": "Validate.isTrue(\"null\", 1);"
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            out.write(buffer, 0, len);",
        "line": 87,
        "aftercode": "out.write(buffer, buffer);"
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        final byte[] buffer = new byte[bufferSize];",
        "line": 84,
        "aftercode": "final byte[] buffer = new byte[in.size()];"
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static void crossStreams(final InputStream in, final OutputStream out) throws IOException {",
        "line": 83,
        "aftercode": ""
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static void crossStreams(final InputStream in, final OutputStream out) throws IOException {",
        "line": 83,
        "aftercode": ""
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            out.write(buffer, 0, len);",
        "line": 87,
        "aftercode": "out.write(0, len);"
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static void crossStreams(final InputStream in, final OutputStream out) throws IOException {",
        "line": 83,
        "aftercode": ""
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static void crossStreams(final InputStream in, final OutputStream out) throws IOException {",
        "line": 83,
        "aftercode": ""
    },
    {
        "id": 52,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_52_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            out.write(buffer, 0, len);",
        "line": 87,
        "aftercode": "out.write(len, buffer);"
    }
]