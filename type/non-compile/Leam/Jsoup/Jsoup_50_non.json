[
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        if (doc == null) {",
        "line": 140,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        if (doc == null) {",
        "line": 140,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            docData = Charset.forName(charsetName).decode(byteData).toString();",
        "line": 138,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        return doc;",
        "line": 144,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode",
        "line": 128,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                        if (Charset.isSupported(meta.attr(\"charset\"))) {",
        "line": 120,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {",
        "line": 154,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            docData = Charset.forName(charsetName).decode(byteData).toString();",
        "line": 138,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            docData = Charset.forName(charsetName).decode(byteData).toString();",
        "line": 138,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 155,
        "aftercode": "remaining -= read;"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        if (charsetName == null) { // determine from meta. safe parse as UTF-8",
        "line": 108,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 155,
        "aftercode": "outStream.write(buffer, 0, remaining);"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (meta.hasAttr(\"http-equiv\")) {",
        "line": 115,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                        if (Charset.isSupported(meta.attr(\"charset\"))) {",
        "line": 120,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 155,
        "aftercode": "outStream.write(buffer, 0, read);"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                    docData = Charset.forName(foundCharset).decode(byteData).toString();",
        "line": 132,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                String foundCharset = null;",
        "line": 114,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {",
        "line": 154,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (foundCharset == null && meta.hasAttr(\"charset\")) {",
        "line": 118,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {",
        "line": 154,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 155,
        "aftercode": "Validate.isTrue(\"null\", maxSize);"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode",
        "line": 128,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode",
        "line": 128,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode",
        "line": 128,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 155,
        "aftercode": "read = inStream.read(buffer);"
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        byte[] buffer = new byte[bufferSize];",
        "line": 157,
        "aftercode": "ByteArrayOutputStream buffer = new byte[bufferSize];"
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 155,
        "aftercode": "Validate.isTrue(\"null\");"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        if (doc == null) {",
        "line": 140,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        final boolean capped = maxSize > 0;",
        "line": 156,
        "aftercode": "byte[] capped = (maxSize > 0);"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode",
        "line": 128,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                    docData = Charset.forName(foundCharset).decode(byteData).toString();",
        "line": 132,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 155,
        "aftercode": "Validate.isTrue(\"null\", (maxSize >= 0));"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        if (charsetName == null) { // determine from meta. safe parse as UTF-8",
        "line": 108,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 155,
        "aftercode": "Validate.isTrue(\"null\", \"null\");"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            docData = Charset.forName(defaultCharset).decode(byteData).toString();",
        "line": 110,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode",
        "line": 128,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            docData = Charset.forName(charsetName).decode(byteData).toString();",
        "line": 138,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            read = inStream.read(buffer);",
        "line": 163,
        "aftercode": "inStream.read(buffer);"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                String foundCharset = null;",
        "line": 114,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {",
        "line": 154,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode",
        "line": 128,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 155,
        "aftercode": "Validate.isTrue(\"null\", 0);"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (foundCharset == null && meta.hasAttr(\"charset\")) {",
        "line": 118,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "            read = inStream.read(buffer);",
        "line": 163,
        "aftercode": "read = read;"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                if (meta.hasAttr(\"http-equiv\")) {",
        "line": 115,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                    break;",
        "line": 168,
        "aftercode": "return;"
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {",
        "line": 154,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);",
        "line": 158,
        "aftercode": "ByteArrayOutputStream outStream = new ByteArrayOutputStream[inStream];"
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "    static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {",
        "line": 154,
        "aftercode": ""
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 155,
        "aftercode": "outStream.write(buffer, 0, remaining);"
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 155,
        "aftercode": "remaining -= read;"
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "                    outStream.write(buffer, 0, remaining);",
        "line": 167,
        "aftercode": "return;"
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        byte[] buffer = new byte[bufferSize];",
        "line": 157,
        "aftercode": "byte[] capped = (maxSize > 0);"
    },
    {
        "id": 40,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Jsoup/Jsoup_50_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "precode": "        Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
        "line": 155,
        "aftercode": "Validate.isTrue(\"null\", 1);"
    }
]