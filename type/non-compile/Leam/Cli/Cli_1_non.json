[
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 165,
        "aftercode": "opt = Util.stripLeadingHyphens();"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 165,
        "aftercode": "opt = stripLeadingHyphens(opt);"
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "            return null;",
        "line": 94,
        "aftercode": ""
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "    public boolean hasOption(String opt)",
        "line": 65,
        "aftercode": ""
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "            if (opt.equals(option.getOpt()))",
        "line": 169,
        "aftercode": "if(opt.equals(option)){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "            if (opt.equals(option.getOpt()))",
        "line": 169,
        "aftercode": "if(opt.equals(option.getOpt())){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        return null;",
        "line": 166,
        "aftercode": "\n\n    }\n\n    /** \n     * Retrieves the array of values, if any, of an option.\n     *\n     * @param opt character name of the option\n     * @return Values of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String[] getOptionValues(char opt)\n    {\n        return getOptionValues(String.valueOf(opt));\n    }\n\n    /** \n     * Retrieve the argument, if any, of an option.\n     *\n     * @param opt name of the option\n     * @param defaultValue is the default value to be returned if the option \n     * is not specified\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise <code>defaultValue</code>.\n     */\n    public String getOptionValue(String opt, String defaultValue)\n    {\n        String answer = getOptionValue(opt);\n\n        return (answer != null) ? answer : defaultValue;\n    }\n\n    /** \n     * Retrieve the argument, if any, of an option.\n     *\n     * @param opt character name of the option\n     * @param defaultValue is the default value to be returned if the option \n     * is not specified\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise <code>defaultValue</code>.\n     */\n    public String getOptionValue(char opt, String defaultValue)\n    {\n        return getOptionValue(String.valueOf(opt), defaultValue);\n    }\n\n    /** \n     * Retrieve any left-over non-recognized options and arguments\n     *\n     * @return remaining items passed in but not parsed as an array\n     */\n    public String[] getArgs()\n    {\n        String[] answer = new String[args.size()];\n\n        args.toArray(answer);\n\n        return answer;\n    }\n\n    /** \n     * Retrieve any left-over non-recognized options and arguments\n     *\n     * @return remaining items passed in but not parsed as a <code>List</code>.\n     */\n    public List getArgList()\n    {\n        return args;\n    }\n\n    /** \n     * jkeyes\n     * - commented out until it is implemented properly\n     * <p>Dump state, suitable for debugging.</p>\n     *\n     * @return Stringified form of this object\n     */\n\n    /*\n    public String toString() {\n        StringBuffer buf = new StringBuffer();\n            \n        buf.append(\"[ CommandLine: [ options: \");\n        buf.append(options.toString());\n        buf.append(\" ] [ args: \");\n        buf.append(args.toString());\n        buf.append(\" ] ]\");\n            \n        return buf.toString();\n    }\n    */\n\n    /**\n     * Add left-over unrecognized option/argument.\n     *\n     * @param arg the unrecognised option/argument.\n     */\n    void addArg(String arg)\n    {\n        args.add(arg);\n    }\n\n    /**\n     * Add an option to the command line.  The values of \n     * the option are stored.\n     *\n     * @param opt the processed option\n     */\n    void addOption(Option opt)\n    {\n        options.add(opt);\n    }\n\n    /**\n     * Returns an iterator over the Option members of CommandLine.\n     *\n     * @return an <code>Iterator</code> over the processed {@link Option} \n     * members of this {@link CommandLine}\n     */\n    public Iterator iterator()\n    {\n        return options.iterator();\n    }\n\n    /**\n     * Returns an array of the processed {@link Option}s.\n     *\n     * @return an array of the processed {@link Option}s.\n     */\n    public Option[] getOptions()\n    {\n        Collection processed = options;\n\n        // reinitialise array\n        Option[] optionsArray = new Option[processed.size()];\n\n        // return the array\n        return (Option[]) processed.toArray(optionsArray);\n    }\n}/**\n * Copyright 1999-2001,2004 The Apache Software Foundation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.cli;\n\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.HashSet;\n\n/** \n * <p>Represents list of arguments parsed against\n * a {@link Options} descriptor.<p>\n *\n * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n * in addition to retrieving the {@link #getOptionValue(String opt)}\n * for options requiring arguments.</p>\n *\n * <p>Additionally, any left-over or unrecognized arguments,\n * are available for further processing.</p>\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @author John Keyes (john at integralsource.com)\n */\npublic class CommandLine {\n\n    /** the unrecognised options/arguments */\n    private List args = new LinkedList();\n\n    /** the processed options */\n    private Set options = new HashSet();\n\n    /** Map of unique options for ease to get complete list of options */\n//    private Set allOptions = new HashSet();\n\n    /**\n     * Creates a command line.\n     */\n    CommandLine()\n    {\n        // nothing to do\n    }\n\n    /** \n     * Query to see if an option has been set.\n     *\n     * @param opt Short name of the option\n     * @return true if set, false if not\n     */\n    public boolean hasOption(String opt)\n    {\n        return options.contains( resolveOption(opt));\n    }\n\n    /** \n     * Query to see if an option has been set.\n     *\n     * @param opt character name of the option\n     * @return true if set, false if not\n     */\n    public boolean hasOption(char opt)\n    {\n        return hasOption(String.valueOf(opt));\n    }\n\n    /**\n     * Return the <code>Object</code> type of this <code>Option</code>.\n     *\n     * @param opt the name of the option\n     * @return the type of this <code>Option</code>\n     */\n    public Object getOptionObject(String opt)\n    {\n        String res = getOptionValue(opt);\n\n        Option option = resolveOption(opt);\n        if (option == null)\n        {\n            return null;\n        }\n\n        Object type = option.getType();\n\n        return (res == null)        ? null : TypeHandler.createValue(res, type);\n    }\n\n    /**\n     * Return the <code>Object</code> type of this <code>Option</code>.\n     *\n     * @param opt the name of the option\n     * @return the type of opt\n     */\n    public Object getOptionObject(char opt)\n    {\n        return getOptionObject(String.valueOf(opt));\n    }\n\n    /** \n     * Retrieve the argument, if any, of this option.\n     *\n     * @param opt the name of the option\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String getOptionValue(String opt)\n    {\n        String[] values = getOptionValues(opt);\n\n        return (values == null) ? null : values[0];\n    }\n\n    /** \n     * Retrieve the argument, if any, of this option.\n     *\n     * @param opt the character name of the option\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String getOptionValue(char opt)\n    {\n        return getOptionValue(String.valueOf(opt));\n    }\n\n    /** \n     * Retrieves the array of values, if any, of an option.\n     *\n     * @param opt string name of the option\n     * @return Values of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String[] getOptionValues(String opt)\n    {\n        Option key = resolveOption( opt );\n\n        if (options.contains(key))\n        {\n            return key.getValues();\n        }\n\n        return null;\n        }\n\n    /**\n     * <p>Retrieves the option object given the long or short option as a String</p>\n     * @param opt short or long name of the option\n     * @return Canonicalized option\n     */\n    private Option resolveOption( String opt )\n    {\n        opt = Util.stripLeadingHyphens(opt);\n        for ( Iterator it = options.iterator(); it.hasNext(); )\n        {\n            Option option = (Option) it.next();\n            if (opt.equals(option.getOpt()))\n            {\n                return option;\n            }\n            if (opt.equals( option.getLongOpt()))\n            {\n        }\n\n        }"
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "            return null;",
        "line": 94,
        "aftercode": ""
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        for ( Iterator it = options.iterator(); it.hasNext(); )",
        "line": 166,
        "aftercode": ""
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        if (option == null)",
        "line": 92,
        "aftercode": "Object type = option.getType();"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 165,
        "aftercode": "opt = opt.stripLeadingHyphens();"
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "    public Object getOptionObject(String opt)",
        "line": 87,
        "aftercode": ""
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "            if (opt.equals( option.getLongOpt()))",
        "line": 173,
        "aftercode": "if(opt.equals(option)){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "            Option option = (Option) it.next();",
        "line": 168,
        "aftercode": "Option option = it.next();"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 165,
        "aftercode": "opt = Util.stripLeadingHyphens((Iterator)opt);"
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        if (option == null)",
        "line": 92,
        "aftercode": "if(TypeHandler.createValue(res, type)){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "    private Option resolveOption( String opt )",
        "line": 163,
        "aftercode": ""
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        for ( Iterator it = options.iterator(); it.hasNext(); )",
        "line": 166,
        "aftercode": ""
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "            if (opt.equals(option.getOpt()))",
        "line": 169,
        "aftercode": "if(option.equals(option.getOpt())){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 165,
        "aftercode": "opt = stripLeadingHyphens();"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "            if (opt.equals(option.getOpt()))",
        "line": 169,
        "aftercode": "Option option = (Option)it.next();"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 166,
        "aftercode": "/**\n * Copyright 1999-2001,2004 The Apache Software Foundation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.cli;\n\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.HashSet;\n\n/** \n * <p>Represents list of arguments parsed against\n * a {@link Options} descriptor.<p>\n *\n * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n * in addition to retrieving the {@link #getOptionValue(String opt)}\n * for options requiring arguments.</p>\n *\n * <p>Additionally, any left-over or unrecognized arguments,\n * are available for further processing.</p>\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @author John Keyes (john at integralsource.com)\n */\npublic class CommandLine {\n\n    /** the unrecognised options/arguments */\n    private List args = new LinkedList();\n\n    /** the processed options */\n    private Set options = new HashSet();\n\n    /** Map of unique options for ease to get complete list of options */\n//    private Set allOptions = new HashSet();\n\n    /**\n     * Creates a command line.\n     */\n    CommandLine()\n    {\n        // nothing to do\n    }\n\n    /** \n     * Query to see if an option has been set.\n     *\n     * @param opt Short name of the option\n     * @return true if set, false if not\n     */\n    public boolean hasOption(String opt)\n    {\n        return options.contains( resolveOption(opt));\n    }\n\n    /** \n     * Query to see if an option has been set.\n     *\n     * @param opt character name of the option\n     * @return true if set, false if not\n     */\n    public boolean hasOption(char opt)\n    {\n        return hasOption(String.valueOf(opt));\n    }\n\n    /**\n     * Return the <code>Object</code> type of this <code>Option</code>.\n     *\n     * @param opt the name of the option\n     * @return the type of this <code>Option</code>\n     */\n    public Object getOptionObject(String opt)\n    {\n        String res = getOptionValue(opt);\n\n        Option option = resolveOption(opt);\n        if (option == null)\n        {\n            return null;\n        }\n\n        Object type = option.getType();\n\n        return (res == null)        ? null : TypeHandler.createValue(res, type);\n    }\n\n    /**\n     * Return the <code>Object</code> type of this <code>Option</code>.\n     *\n     * @param opt the name of the option\n     * @return the type of opt\n     */\n    public Object getOptionObject(char opt)\n    {\n        return getOptionObject(String.valueOf(opt));\n    }\n\n    /** \n     * Retrieve the argument, if any, of this option.\n     *\n     * @param opt the name of the option\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String getOptionValue(String opt)\n    {\n        String[] values = getOptionValues(opt);\n\n        return (values == null) ? null : values[0];\n    }\n\n    /** \n     * Retrieve the argument, if any, of this option.\n     *\n     * @param opt the character name of the option\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String getOptionValue(char opt)\n    {\n        return getOptionValue(String.valueOf(opt));\n    }\n\n    /** \n     * Retrieves the array of values, if any, of an option.\n     *\n     * @param opt string name of the option\n     * @return Values of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String[] getOptionValues(String opt)\n    {\n        Option key = resolveOption( opt );\n\n        if (options.contains(key))\n        {\n            return key.getValues();\n        }\n\n        return null;\n        }\n\n    /**\n     * <p>Retrieves the option object given the long or short option as a String</p>\n     * @param opt short or long name of the option\n     * @return Canonicalized option\n     */\n    private Option resolveOption( String opt )\n    {\nUtil.stripLeadingHyphens(opt);\n        for ( Iterator it = options.iterator(); it.hasNext(); )\n        {\n            Option option = (Option) it.next();\n\nif(it.hasNext()){\n            {\n                return option;\n            }\n            if (opt.equals( option.getLongOpt()))\n            {\n                return option;\n        }\n\n        }\n        return null;\n    }\n\n    /** \n     * Retrieves the array of values, if any, of an option.\n     *\n     * @param opt character name of the option\n     * @return Values of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String[] getOptionValues(char opt)\n    {\n        return getOptionValues(String.valueOf(opt));\n    }\n\n    /** \n     * Retrieve the argument, if any, of an option.\n     *\n     * @param opt name of the option\n     * @param defaultValue is the default value to be returned if the option \n     * is not specified\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise <code>defaultValue</code>.\n     */\n    public String getOptionValue(String opt, String defaultValue)\n    {\n        String answer = getOptionValue(opt);\n\n        return (answer != null) ? answer : defaultValue;\n    }\n\n    /** \n     * Retrieve the argument, if any, of an option.\n     *\n     * @param opt character name of the option\n     * @param defaultValue is the default value to be returned if the option \n     * is not specified\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise <code>defaultValue</code>.\n     */\n    public String getOptionValue(char opt, String defaultValue)\n    {\n        return getOptionValue(String.valueOf(opt), defaultValue);\n    }\n\n    /** \n     * Retrieve any left-over non-recognized options and arguments\n     *\n     * @return remaining items passed in but not parsed as an array\n     */\n    public String[] getArgs()\n    {\n        String[] answer = new String[args.size()];\n\n        args.toArray(answer);\n\n        return answer;\n    }\n\n    /** \n     * Retrieve any left-over non-recognized options and arguments\n     *\n     * @return remaining items passed in but not parsed as a <code>List</code>.\n     */\n    public List getArgList()\n    {\n        return args;\n    }\n\n    /** \n     * jkeyes\n     * - commented out until it is implemented properly\n     * <p>Dump state, suitable for debugging.</p>\n     *\n     * @return Stringified form of this object\n     */\n\n    /*\n    public String toString() {\n        StringBuffer buf = new StringBuffer();\n            \n        buf.append(\"[ CommandLine: [ options: \");\n        buf.append(options.toString());\n        buf.append(\" ] [ args: \");\n        buf.append(args.toString());\n        buf.append(\" ] ]\");\n            \n        return buf.toString();\n    }\n    */\n\n    /**\n     * Add left-over unrecognized option/argument.\n     *\n     * @param arg the unrecognised option/argument.\n     */\n    void addArg(String arg)\n    {\n        args.add(arg);\n    }\n\n    /**\n     * Add an option to the command line.  The values of \n     * the option are stored.\n     *\n     * @param opt the processed option\n     */\n    void addOption(Option opt)\n    {\n        options.add(opt);\n    }\n\n    /**\n     * Returns an iterator over the Option members of CommandLine.\n     *\n     * @return an <code>Iterator</code> over the processed {@link Option} \n     * members of this {@link CommandLine}\n     */\n    public Iterator iterator()\n    {\n        return options.iterator();\n    }\n\n    /**\n     * Returns an array of the processed {@link Option}s.\n     *\n     * @return an array of the processed {@link Option}s.\n     */\n    public Option[] getOptions()\n    {\n        Collection processed = options;\n\n        // reinitialise array\n        Option[] optionsArray = new Option[processed.size()];\n\n        // return the array\n        return (Option[]) processed.toArray(optionsArray);\n    }\n}"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "            if (opt.equals(option.getOpt()))",
        "line": 169,
        "aftercode": "if(opt.equals(it.next())){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "            if (opt.equals( option.getLongOpt()))",
        "line": 173,
        "aftercode": "if(opt.equals(option.getLongOpt())){"
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        if (option == null)",
        "line": 92,
        "aftercode": "if((option == null)){"
    },
    {
        "id": 7,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "    public boolean hasOption(String opt)",
        "line": 65,
        "aftercode": ""
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        if (option == null)",
        "line": 92,
        "aftercode": "if(((option == null) && (option == null))){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 165,
        "aftercode": "opt = Util.stripLeadingHyphens((Iterator)Util.stripLeadingHyphens(opt));"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "            if (opt.equals( option.getLongOpt()))",
        "line": 173,
        "aftercode": "if(opt.equals(opt)){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 166,
        "aftercode": "/**\n * Copyright 1999-2001,2004 The Apache Software Foundation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.cli;\n\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.HashSet;\n\n/** \n * <p>Represents list of arguments parsed against\n * a {@link Options} descriptor.<p>\n *\n * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n * in addition to retrieving the {@link #getOptionValue(String opt)}\n * for options requiring arguments.</p>\n *\n * <p>Additionally, any left-over or unrecognized arguments,\n * are available for further processing.</p>\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @author John Keyes (john at integralsource.com)\n */\npublic class CommandLine {\n\n    /** the unrecognised options/arguments */\n    private List args = new LinkedList();\n\n    /** the processed options */\n    private Set options = new HashSet();\n\n    /** Map of unique options for ease to get complete list of options */\n//    private Set allOptions = new HashSet();\n\n    /**\n     * Creates a command line.\n     */\n    CommandLine()\n    {\n        // nothing to do\n    }\n\n    /** \n     * Query to see if an option has been set.\n     *\n     * @param opt Short name of the option\n     * @return true if set, false if not\n     */\n    public boolean hasOption(String opt)\n    {\n        return options.contains( resolveOption(opt));\n    }\n\n    /** \n     * Query to see if an option has been set.\n     *\n     * @param opt character name of the option\n     * @return true if set, false if not\n     */\n    public boolean hasOption(char opt)\n    {\n        return hasOption(String.valueOf(opt));\n    }\n\n    /**\n     * Return the <code>Object</code> type of this <code>Option</code>.\n     *\n     * @param opt the name of the option\n     * @return the type of this <code>Option</code>\n     */\n    public Object getOptionObject(String opt)\n    {\n        String res = getOptionValue(opt);\n\n        Option option = resolveOption(opt);\n        if (option == null)\n        {\n            return null;\n        }\n\n        Object type = option.getType();\n\n        return (res == null)        ? null : TypeHandler.createValue(res, type);\n    }\n\n    /**\n     * Return the <code>Object</code> type of this <code>Option</code>.\n     *\n     * @param opt the name of the option\n     * @return the type of opt\n     */\n    public Object getOptionObject(char opt)\n    {\n        return getOptionObject(String.valueOf(opt));\n    }\n\n    /** \n     * Retrieve the argument, if any, of this option.\n     *\n     * @param opt the name of the option\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String getOptionValue(String opt)\n    {\n        String[] values = getOptionValues(opt);\n\n        return (values == null) ? null : values[0];\n    }\n\n    /** \n     * Retrieve the argument, if any, of this option.\n     *\n     * @param opt the character name of the option\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String getOptionValue(char opt)\n    {\n        return getOptionValue(String.valueOf(opt));\n    }\n\n    /** \n     * Retrieves the array of values, if any, of an option.\n     *\n     * @param opt string name of the option\n     * @return Values of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String[] getOptionValues(String opt)\n    {\n        Option key = resolveOption( opt );\n\n        if (options.contains(key))\n        {\n            return key.getValues();\n        }\n\n        return null;\n        }\n\n    /**\n     * <p>Retrieves the option object given the long or short option as a String</p>\n     * @param opt short or long name of the option\n     * @return Canonicalized option\n     */\n    private Option resolveOption( String opt )\n    {\nUtil.stripLeadingHyphens(opt);\n        for ( Iterator it = options.iterator(); it.hasNext(); )\n        {\n            Option option = (Option) it.next();\n\nif(opt.equals(option.getLongOpt())){\n            {\n                return option;\n            }\n            if (opt.equals( option.getLongOpt()))\n            {\n                return option;\n        }\n\n        }\n        return null;\n    }\n\n    /** \n     * Retrieves the array of values, if any, of an option.\n     *\n     * @param opt character name of the option\n     * @return Values of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String[] getOptionValues(char opt)\n    {\n        return getOptionValues(String.valueOf(opt));\n    }\n\n    /** \n     * Retrieve the argument, if any, of an option.\n     *\n     * @param opt name of the option\n     * @param defaultValue is the default value to be returned if the option \n     * is not specified\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise <code>defaultValue</code>.\n     */\n    public String getOptionValue(String opt, String defaultValue)\n    {\n        String answer = getOptionValue(opt);\n\n        return (answer != null) ? answer : defaultValue;\n    }\n\n    /** \n     * Retrieve the argument, if any, of an option.\n     *\n     * @param opt character name of the option\n     * @param defaultValue is the default value to be returned if the option \n     * is not specified\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise <code>defaultValue</code>.\n     */\n    public String getOptionValue(char opt, String defaultValue)\n    {\n        return getOptionValue(String.valueOf(opt), defaultValue);\n    }\n\n    /** \n     * Retrieve any left-over non-recognized options and arguments\n     *\n     * @return remaining items passed in but not parsed as an array\n     */\n    public String[] getArgs()\n    {\n        String[] answer = new String[args.size()];\n\n        args.toArray(answer);\n\n        return answer;\n    }\n\n    /** \n     * Retrieve any left-over non-recognized options and arguments\n     *\n     * @return remaining items passed in but not parsed as a <code>List</code>.\n     */\n    public List getArgList()\n    {\n        return args;\n    }\n\n    /** \n     * jkeyes\n     * - commented out until it is implemented properly\n     * <p>Dump state, suitable for debugging.</p>\n     *\n     * @return Stringified form of this object\n     */\n\n    /*\n    public String toString() {\n        StringBuffer buf = new StringBuffer();\n            \n        buf.append(\"[ CommandLine: [ options: \");\n        buf.append(options.toString());\n        buf.append(\" ] [ args: \");\n        buf.append(args.toString());\n        buf.append(\" ] ]\");\n            \n        return buf.toString();\n    }\n    */\n\n    /**\n     * Add left-over unrecognized option/argument.\n     *\n     * @param arg the unrecognised option/argument.\n     */\n    void addArg(String arg)\n    {\n        args.add(arg);\n    }\n\n    /**\n     * Add an option to the command line.  The values of \n     * the option are stored.\n     *\n     * @param opt the processed option\n     */\n    void addOption(Option opt)\n    {\n        options.add(opt);\n    }\n\n    /**\n     * Returns an iterator over the Option members of CommandLine.\n     *\n     * @return an <code>Iterator</code> over the processed {@link Option} \n     * members of this {@link CommandLine}\n     */\n    public Iterator iterator()\n    {\n        return options.iterator();\n    }\n\n    /**\n     * Returns an array of the processed {@link Option}s.\n     *\n     * @return an array of the processed {@link Option}s.\n     */\n    public Option[] getOptions()\n    {\n        Collection processed = options;\n\n        // reinitialise array\n        Option[] optionsArray = new Option[processed.size()];\n\n        // return the array\n        return (Option[]) processed.toArray(optionsArray);\n    }\n}"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 166,
        "aftercode": "/**\n * Copyright 1999-2001,2004 The Apache Software Foundation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.cli;\n\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.HashSet;\n\n/** \n * <p>Represents list of arguments parsed against\n * a {@link Options} descriptor.<p>\n *\n * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n * in addition to retrieving the {@link #getOptionValue(String opt)}\n * for options requiring arguments.</p>\n *\n * <p>Additionally, any left-over or unrecognized arguments,\n * are available for further processing.</p>\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @author John Keyes (john at integralsource.com)\n */\npublic class CommandLine {\n\n    /** the unrecognised options/arguments */\n    private List args = new LinkedList();\n\n    /** the processed options */\n    private Set options = new HashSet();\n\n    /** Map of unique options for ease to get complete list of options */\n//    private Set allOptions = new HashSet();\n\n    /**\n     * Creates a command line.\n     */\n    CommandLine()\n    {\n        // nothing to do\n    }\n\n    /** \n     * Query to see if an option has been set.\n     *\n     * @param opt Short name of the option\n     * @return true if set, false if not\n     */\n    public boolean hasOption(String opt)\n    {\n        return options.contains( resolveOption(opt));\n    }\n\n    /** \n     * Query to see if an option has been set.\n     *\n     * @param opt character name of the option\n     * @return true if set, false if not\n     */\n    public boolean hasOption(char opt)\n    {\n        return hasOption(String.valueOf(opt));\n    }\n\n    /**\n     * Return the <code>Object</code> type of this <code>Option</code>.\n     *\n     * @param opt the name of the option\n     * @return the type of this <code>Option</code>\n     */\n    public Object getOptionObject(String opt)\n    {\n        String res = getOptionValue(opt);\n\n        Option option = resolveOption(opt);\n        if (option == null)\n        {\n            return null;\n        }\n\n        Object type = option.getType();\n\n        return (res == null)        ? null : TypeHandler.createValue(res, type);\n    }\n\n    /**\n     * Return the <code>Object</code> type of this <code>Option</code>.\n     *\n     * @param opt the name of the option\n     * @return the type of opt\n     */\n    public Object getOptionObject(char opt)\n    {\n        return getOptionObject(String.valueOf(opt));\n    }\n\n    /** \n     * Retrieve the argument, if any, of this option.\n     *\n     * @param opt the name of the option\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String getOptionValue(String opt)\n    {\n        String[] values = getOptionValues(opt);\n\n        return (values == null) ? null : values[0];\n    }\n\n    /** \n     * Retrieve the argument, if any, of this option.\n     *\n     * @param opt the character name of the option\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String getOptionValue(char opt)\n    {\n        return getOptionValue(String.valueOf(opt));\n    }\n\n    /** \n     * Retrieves the array of values, if any, of an option.\n     *\n     * @param opt string name of the option\n     * @return Values of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String[] getOptionValues(String opt)\n    {\n        Option key = resolveOption( opt );\n\n        if (options.contains(key))\n        {\n            return key.getValues();\n        }\n\n        return null;\n        }\n\n    /**\n     * <p>Retrieves the option object given the long or short option as a String</p>\n     * @param opt short or long name of the option\n     * @return Canonicalized option\n     */\n    private Option resolveOption( String opt )\n    {\nopt = Util.stripLeadingHyphens(opt);\n        for ( Iterator it = options.iterator(); it.hasNext(); )\n        {\n            Option option = (Option) it.next();\n\nif(opt.equals(option.getOpt())){\n            {\n                return option;\n            }\n            if (opt.equals( option.getLongOpt()))\n            {\n                return option;\n        }\n\n        }\n        return null;\n    }\n\n    /** \n     * Retrieves the array of values, if any, of an option.\n     *\n     * @param opt character name of the option\n     * @return Values of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String[] getOptionValues(char opt)\n    {\n        return getOptionValues(String.valueOf(opt));\n    }\n\n    /** \n     * Retrieve the argument, if any, of an option.\n     *\n     * @param opt name of the option\n     * @param defaultValue is the default value to be returned if the option \n     * is not specified\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise <code>defaultValue</code>.\n     */\n    public String getOptionValue(String opt, String defaultValue)\n    {\n        String answer = getOptionValue(opt);\n\n        return (answer != null) ? answer : defaultValue;\n    }\n\n    /** \n     * Retrieve the argument, if any, of an option.\n     *\n     * @param opt character name of the option\n     * @param defaultValue is the default value to be returned if the option \n     * is not specified\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise <code>defaultValue</code>.\n     */\n    public String getOptionValue(char opt, String defaultValue)\n    {\n        return getOptionValue(String.valueOf(opt), defaultValue);\n    }\n\n    /** \n     * Retrieve any left-over non-recognized options and arguments\n     *\n     * @return remaining items passed in but not parsed as an array\n     */\n    public String[] getArgs()\n    {\n        String[] answer = new String[args.size()];\n\n        args.toArray(answer);\n\n        return answer;\n    }\n\n    /** \n     * Retrieve any left-over non-recognized options and arguments\n     *\n     * @return remaining items passed in but not parsed as a <code>List</code>.\n     */\n    public List getArgList()\n    {\n        return args;\n    }\n\n    /** \n     * jkeyes\n     * - commented out until it is implemented properly\n     * <p>Dump state, suitable for debugging.</p>\n     *\n     * @return Stringified form of this object\n     */\n\n    /*\n    public String toString() {\n        StringBuffer buf = new StringBuffer();\n            \n        buf.append(\"[ CommandLine: [ options: \");\n        buf.append(options.toString());\n        buf.append(\" ] [ args: \");\n        buf.append(args.toString());\n        buf.append(\" ] ]\");\n            \n        return buf.toString();\n    }\n    */\n\n    /**\n     * Add left-over unrecognized option/argument.\n     *\n     * @param arg the unrecognised option/argument.\n     */\n    void addArg(String arg)\n    {\n        args.add(arg);\n    }\n\n    /**\n     * Add an option to the command line.  The values of \n     * the option are stored.\n     *\n     * @param opt the processed option\n     */\n    void addOption(Option opt)\n    {\n        options.add(opt);\n    }\n\n    /**\n     * Returns an iterator over the Option members of CommandLine.\n     *\n     * @return an <code>Iterator</code> over the processed {@link Option} \n     * members of this {@link CommandLine}\n     */\n    public Iterator iterator()\n    {\n        return options.iterator();\n    }\n\n    /**\n     * Returns an array of the processed {@link Option}s.\n     *\n     * @return an array of the processed {@link Option}s.\n     */\n    public Option[] getOptions()\n    {\n        Collection processed = options;\n\n        // reinitialise array\n        Option[] optionsArray = new Option[processed.size()];\n\n        // return the array\n        return (Option[]) processed.toArray(optionsArray);\n    }\n}"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "            if (opt.equals(option.getOpt()))",
        "line": 169,
        "aftercode": "if(option.equals()){"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 166,
        "aftercode": "/**\n * Copyright 1999-2001,2004 The Apache Software Foundation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.cli;\n\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.HashSet;\n\n/** \n * <p>Represents list of arguments parsed against\n * a {@link Options} descriptor.<p>\n *\n * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n * in addition to retrieving the {@link #getOptionValue(String opt)}\n * for options requiring arguments.</p>\n *\n * <p>Additionally, any left-over or unrecognized arguments,\n * are available for further processing.</p>\n *\n * @author bob mcwhirter (bob @ werken.com)\n * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n * @author John Keyes (john at integralsource.com)\n */\npublic class CommandLine {\n\n    /** the unrecognised options/arguments */\n    private List args = new LinkedList();\n\n    /** the processed options */\n    private Set options = new HashSet();\n\n    /** Map of unique options for ease to get complete list of options */\n//    private Set allOptions = new HashSet();\n\n    /**\n     * Creates a command line.\n     */\n    CommandLine()\n    {\n        // nothing to do\n    }\n\n    /** \n     * Query to see if an option has been set.\n     *\n     * @param opt Short name of the option\n     * @return true if set, false if not\n     */\n    public boolean hasOption(String opt)\n    {\n        return options.contains( resolveOption(opt));\n    }\n\n    /** \n     * Query to see if an option has been set.\n     *\n     * @param opt character name of the option\n     * @return true if set, false if not\n     */\n    public boolean hasOption(char opt)\n    {\n        return hasOption(String.valueOf(opt));\n    }\n\n    /**\n     * Return the <code>Object</code> type of this <code>Option</code>.\n     *\n     * @param opt the name of the option\n     * @return the type of this <code>Option</code>\n     */\n    public Object getOptionObject(String opt)\n    {\n        String res = getOptionValue(opt);\n\n        Option option = resolveOption(opt);\n        if (option == null)\n        {\n            return null;\n        }\n\n        Object type = option.getType();\n\n        return (res == null)        ? null : TypeHandler.createValue(res, type);\n    }\n\n    /**\n     * Return the <code>Object</code> type of this <code>Option</code>.\n     *\n     * @param opt the name of the option\n     * @return the type of opt\n     */\n    public Object getOptionObject(char opt)\n    {\n        return getOptionObject(String.valueOf(opt));\n    }\n\n    /** \n     * Retrieve the argument, if any, of this option.\n     *\n     * @param opt the name of the option\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String getOptionValue(String opt)\n    {\n        String[] values = getOptionValues(opt);\n\n        return (values == null) ? null : values[0];\n    }\n\n    /** \n     * Retrieve the argument, if any, of this option.\n     *\n     * @param opt the character name of the option\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String getOptionValue(char opt)\n    {\n        return getOptionValue(String.valueOf(opt));\n    }\n\n    /** \n     * Retrieves the array of values, if any, of an option.\n     *\n     * @param opt string name of the option\n     * @return Values of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String[] getOptionValues(String opt)\n    {\n        Option key = resolveOption( opt );\n\n        if (options.contains(key))\n        {\n            return key.getValues();\n        }\n\n        return null;\n        }\n\n    /**\n     * <p>Retrieves the option object given the long or short option as a String</p>\n     * @param opt short or long name of the option\n     * @return Canonicalized option\n     */\n    private Option resolveOption( String opt )\n    {\nUtil.stripLeadingHyphens(opt);\n        for ( Iterator it = options.iterator(); it.hasNext(); )\n        {\n            Option option = (Option) it.next();\n\nit.next();\n            {\n                return option;\n            }\n            if (opt.equals( option.getLongOpt()))\n            {\n                return option;\n        }\n\n        }\n        return null;\n    }\n\n    /** \n     * Retrieves the array of values, if any, of an option.\n     *\n     * @param opt character name of the option\n     * @return Values of the argument if option is set, and has an argument,\n     * otherwise null.\n     */\n    public String[] getOptionValues(char opt)\n    {\n        return getOptionValues(String.valueOf(opt));\n    }\n\n    /** \n     * Retrieve the argument, if any, of an option.\n     *\n     * @param opt name of the option\n     * @param defaultValue is the default value to be returned if the option \n     * is not specified\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise <code>defaultValue</code>.\n     */\n    public String getOptionValue(String opt, String defaultValue)\n    {\n        String answer = getOptionValue(opt);\n\n        return (answer != null) ? answer : defaultValue;\n    }\n\n    /** \n     * Retrieve the argument, if any, of an option.\n     *\n     * @param opt character name of the option\n     * @param defaultValue is the default value to be returned if the option \n     * is not specified\n     * @return Value of the argument if option is set, and has an argument,\n     * otherwise <code>defaultValue</code>.\n     */\n    public String getOptionValue(char opt, String defaultValue)\n    {\n        return getOptionValue(String.valueOf(opt), defaultValue);\n    }\n\n    /** \n     * Retrieve any left-over non-recognized options and arguments\n     *\n     * @return remaining items passed in but not parsed as an array\n     */\n    public String[] getArgs()\n    {\n        String[] answer = new String[args.size()];\n\n        args.toArray(answer);\n\n        return answer;\n    }\n\n    /** \n     * Retrieve any left-over non-recognized options and arguments\n     *\n     * @return remaining items passed in but not parsed as a <code>List</code>.\n     */\n    public List getArgList()\n    {\n        return args;\n    }\n\n    /** \n     * jkeyes\n     * - commented out until it is implemented properly\n     * <p>Dump state, suitable for debugging.</p>\n     *\n     * @return Stringified form of this object\n     */\n\n    /*\n    public String toString() {\n        StringBuffer buf = new StringBuffer();\n            \n        buf.append(\"[ CommandLine: [ options: \");\n        buf.append(options.toString());\n        buf.append(\" ] [ args: \");\n        buf.append(args.toString());\n        buf.append(\" ] ]\");\n            \n        return buf.toString();\n    }\n    */\n\n    /**\n     * Add left-over unrecognized option/argument.\n     *\n     * @param arg the unrecognised option/argument.\n     */\n    void addArg(String arg)\n    {\n        args.add(arg);\n    }\n\n    /**\n     * Add an option to the command line.  The values of \n     * the option are stored.\n     *\n     * @param opt the processed option\n     */\n    void addOption(Option opt)\n    {\n        options.add(opt);\n    }\n\n    /**\n     * Returns an iterator over the Option members of CommandLine.\n     *\n     * @return an <code>Iterator</code> over the processed {@link Option} \n     * members of this {@link CommandLine}\n     */\n    public Iterator iterator()\n    {\n        return options.iterator();\n    }\n\n    /**\n     * Returns an array of the processed {@link Option}s.\n     *\n     * @return an array of the processed {@link Option}s.\n     */\n    public Option[] getOptions()\n    {\n        Collection processed = options;\n\n        // reinitialise array\n        Option[] optionsArray = new Option[processed.size()];\n\n        // return the array\n        return (Option[]) processed.toArray(optionsArray);\n    }\n}"
    },
    {
        "id": 9,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 165,
        "aftercode": "opt = Util.stripLeadingHyphens(option.getLongOpt());"
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        if (option == null)",
        "line": 92,
        "aftercode": "if((option != null)){"
    },
    {
        "id": 8,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_1_fixed/src/java/org/apache/commons/cli/CommandLine.java",
        "precode": "        Option option = resolveOption(opt);",
        "line": 91,
        "aftercode": "public Option option = resolveOption(opt);"
    }
]