[
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            return new URL(str);",
        "line": 231,
        "aftercode": "new URL(str);"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            return new URL(str);",
        "line": 231,
        "aftercode": "this.str = str;"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "    public static URL createURL(String str)",
        "line": 227,
        "aftercode": ""
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            return new URL(str);",
        "line": 231,
        "aftercode": "return new URL();        }"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            return new URL(str);",
        "line": 231,
        "aftercode": "return null;        }"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            return new URL(str);",
        "line": 231,
        "aftercode": "/*\n * Copyright 1999-2005 The Apache Software Foundation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.cli;\n\nimport java.io.File;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\nimport java.util.Date;\n\n/**\n  * This is a temporary implementation. TypeHandler will handle the \n  * pluggableness of OptionTypes and it will direct all of these types \n  * of conversion functionalities to ConvertUtils component in Commons \n  * alreayd. BeanUtils I think.\n  *\n  * @author Henri Yandell (bayard @ generationjava.com)\n  * @version $Revision$\n  */\npublic class TypeHandler {\n\n    /**\n     * <p>Returns the <code>Object</code> of type <code>obj</code>\n     * with the value of <code>str</code>.</p>\n     *\n     * @param str the command line value\n     * @param obj the type of argument\n     * @return The instance of <code>obj</code> initialised with\n     * the value of <code>str</code>.\n     */\n    public static Object createValue(String str, Object obj)\n    {\n        return createValue(str, (Class) obj);\n    }\n\n    /**\n     * <p>Returns the <code>Object</code> of type <code>clazz</code>\n     * with the value of <code>str</code>.</p>\n     *\n     * @param str the command line value\n     * @param clazz the type of argument\n     * @return The instance of <code>clazz</code> initialised with\n     * the value of <code>str</code>.\n     */\n    public static Object createValue(String str, Class clazz)\n    {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return createFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return createURL(str);\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n    /**\n      * <p>Create an Object from the classname and empty constructor.</p>\n      *\n      * @param str the argument value\n      * @return the initialised object, or null if it couldn't create \n      * the Object.\n      */\n    public static Object createObject(String str)\n    {\n        Class cl = null;\n\n        try\n        {\n            cl = Class.forName(str);\n        }\n        catch (ClassNotFoundException cnfe)\n        {\n            System.err.println(\"Unable to find: \" + str);\n\n            return null;\n        }\n\n        Object instance = null;\n\n        try\n        {\n            instance = cl.newInstance();\n        }\n        catch (InstantiationException cnfe)\n        {\n            System.err.println(\"InstantiationException; Unable to create: \"\n                               + str);\n\n            return null;\n        }\n        catch (IllegalAccessException cnfe)\n        {\n            System.err.println(\"IllegalAccessException; Unable to create: \"\n                               + str);\n\n            return null;\n        }\n\n        return instance;\n    }\n\n    /**\n     * <p>Create a number from a String. If a . is present, it creates a \n     *    Double, otherwise a Long. </p>\n     *\n     * @param str the value\n     * @return the number represented by <code>str</code>, if <code>str</code>\n     * is not a number, null is returned.\n     */\n    public static Number createNumber(String str)\n    {\n        try\n        {\n            if( str != null )\n            {\n                if( str.indexOf('.') != -1 )\n                {\n                    return Double.valueOf(str);\n                }\n                else\n                {\n                    return Long.valueOf(str);\n                }\n            }\n        }\n        catch (NumberFormatException nfe)\n        {\n            System.err.println(nfe.getMessage());\n        }\n\n        return null;\n    }\n\n    /**\n     * <p>Returns the class whose name is <code>str</code>.</p>\n     *\n     * @param str the class name\n     * @return The class if it is found, otherwise return null\n     */\n    public static Class createClass(String str)\n    {\n        try\n        {\n            return Class.forName(str);\n        }\n        catch (ClassNotFoundException cnfe)\n        {\n            System.err.println(\"Unable to find: \" + str);\n\n            return null;\n        }\n    }\n\n    /**\n     * <p>Returns the date represented by <code>str</code>.</p>\n     *\n     * @param str the date string\n     * @return The date if <code>str</code> is a valid date string,\n     * otherwise return null.\n     */\n    public static Date createDate(String str)\n    {\n        Date date = null;\n\n        if (date == null)\n        {\n            System.err.println(\"Unable to parse: \" + str);\n        }\n\n        return date;\n    }\n\n    /**\n     * <p>Returns the URL represented by <code>str</code>.</p>\n     *\n     * @param str the URL string\n     * @return The URL is <code>str</code> is well-formed, otherwise\n     * return null.\n     */\n    public static URL createURL(String str)\n    {\n        try\n        {\nnew URL(str);\n        }\n        catch (MalformedURLException mue)\n        {\n\nSystem.err.println(str);\n\n            return null;\n        }\n    }\n\n    /**\n     * <p>Returns the File represented by <code>str</code>.</p>\n     *\n     * @param str the File location\n     * @return The file represented by <code>str</code>.\n     */\n    public static File createFile(String str)\n    {\n        return new File(str);\n    }\n\n    /**\n     * <p>Returns the File[] represented by <code>str</code>.</p>\n     *\n     * @param str the paths to the files\n     * @return The File[] represented by <code>str</code>.\n     */\n    public static File[] createFiles(String str)\n    {\n        // to implement/port:\n        //        return FileW.findFiles(str);\n        return null;\n    }\n}"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            return new URL(str);",
        "line": 231,
        "aftercode": "/*\n * Copyright 1999-2005 The Apache Software Foundation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.cli;\n\nimport java.io.File;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\nimport java.util.Date;\n\n/**\n  * This is a temporary implementation. TypeHandler will handle the \n  * pluggableness of OptionTypes and it will direct all of these types \n  * of conversion functionalities to ConvertUtils component in Commons \n  * alreayd. BeanUtils I think.\n  *\n  * @author Henri Yandell (bayard @ generationjava.com)\n  * @version $Revision$\n  */\npublic class TypeHandler {\n\n    /**\n     * <p>Returns the <code>Object</code> of type <code>obj</code>\n     * with the value of <code>str</code>.</p>\n     *\n     * @param str the command line value\n     * @param obj the type of argument\n     * @return The instance of <code>obj</code> initialised with\n     * the value of <code>str</code>.\n     */\n    public static Object createValue(String str, Object obj)\n    {\n        return createValue(str, (Class) obj);\n    }\n\n    /**\n     * <p>Returns the <code>Object</code> of type <code>clazz</code>\n     * with the value of <code>str</code>.</p>\n     *\n     * @param str the command line value\n     * @param clazz the type of argument\n     * @return The instance of <code>clazz</code> initialised with\n     * the value of <code>str</code>.\n     */\n    public static Object createValue(String str, Class clazz)\n    {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return createFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return createURL(str);\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n    /**\n      * <p>Create an Object from the classname and empty constructor.</p>\n      *\n      * @param str the argument value\n      * @return the initialised object, or null if it couldn't create \n      * the Object.\n      */\n    public static Object createObject(String str)\n    {\n        Class cl = null;\n\n        try\n        {\n            cl = Class.forName(str);\n        }\n        catch (ClassNotFoundException cnfe)\n        {\n            System.err.println(\"Unable to find: \" + str);\n\n            return null;\n        }\n\n        Object instance = null;\n\n        try\n        {\n            instance = cl.newInstance();\n        }\n        catch (InstantiationException cnfe)\n        {\n            System.err.println(\"InstantiationException; Unable to create: \"\n                               + str);\n\n            return null;\n        }\n        catch (IllegalAccessException cnfe)\n        {\n            System.err.println(\"IllegalAccessException; Unable to create: \"\n                               + str);\n\n            return null;\n        }\n\n        return instance;\n    }\n\n    /**\n     * <p>Create a number from a String. If a . is present, it creates a \n     *    Double, otherwise a Long. </p>\n     *\n     * @param str the value\n     * @return the number represented by <code>str</code>, if <code>str</code>\n     * is not a number, null is returned.\n     */\n    public static Number createNumber(String str)\n    {\n        try\n        {\n            if( str != null )\n            {\n                if( str.indexOf('.') != -1 )\n                {\n                    return Double.valueOf(str);\n                }\n                else\n                {\n                    return Long.valueOf(str);\n                }\n            }\n        }\n        catch (NumberFormatException nfe)\n        {\n            System.err.println(nfe.getMessage());\n        }\n\n        return null;\n    }\n\n    /**\n     * <p>Returns the class whose name is <code>str</code>.</p>\n     *\n     * @param str the class name\n     * @return The class if it is found, otherwise return null\n     */\n    public static Class createClass(String str)\n    {\n        try\n        {\n            return Class.forName(str);\n        }\n        catch (ClassNotFoundException cnfe)\n        {\n            System.err.println(\"Unable to find: \" + str);\n\n            return null;\n        }\n    }\n\n    /**\n     * <p>Returns the date represented by <code>str</code>.</p>\n     *\n     * @param str the date string\n     * @return The date if <code>str</code> is a valid date string,\n     * otherwise return null.\n     */\n    public static Date createDate(String str)\n    {\n        Date date = null;\n\n        if (date == null)\n        {\n            System.err.println(\"Unable to parse: \" + str);\n        }\n\n        return date;\n    }\n\n    /**\n     * <p>Returns the URL represented by <code>str</code>.</p>\n     *\n     * @param str the URL string\n     * @return The URL is <code>str</code> is well-formed, otherwise\n     * return null.\n     */\n    public static URL createURL(String str)\n    {\n        try\n        {\nnew URL(str);\n        }\n        catch (MalformedURLException mue)\n        {\n\nSystem.err.println(\"null\");\n\n            return null;\n        }\n    }\n\n    /**\n     * <p>Returns the File represented by <code>str</code>.</p>\n     *\n     * @param str the File location\n     * @return The file represented by <code>str</code>.\n     */\n    public static File createFile(String str)\n    {\n        return new File(str);\n    }\n\n    /**\n     * <p>Returns the File[] represented by <code>str</code>.</p>\n     *\n     * @param str the paths to the files\n     * @return The File[] represented by <code>str</code>.\n     */\n    public static File[] createFiles(String str)\n    {\n        // to implement/port:\n        //        return FileW.findFiles(str);\n        return null;\n    }\n}"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            return createFiles(str);",
        "line": 91,
        "aftercode": "createFiles(str);"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "        else if (PatternOptionBuilder.URL_VALUE == clazz)",
        "line": 93,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "    public static Object createValue(String str, Class clazz)",
        "line": 59,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "    public static Object createValue(String str, Class clazz)",
        "line": 59,
        "aftercode": ""
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            System.err.println(\"Unable to parse: \" + str);",
        "line": 235,
        "aftercode": "System.err.println(\"null\", str);"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            return new URL(str);",
        "line": 231,
        "aftercode": "return null;        }"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            return createObject(str);",
        "line": 67,
        "aftercode": "createObject(str);"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            return new URL(str);",
        "line": 231,
        "aftercode": "return null;        }"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            System.err.println(\"Unable to parse: \" + str);",
        "line": 235,
        "aftercode": "return;"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "        if (PatternOptionBuilder.STRING_VALUE == clazz)",
        "line": 61,
        "aftercode": "if((PatternOptionBuilder.NUMBER_VALUE == clazz)){"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            System.err.println(\"Unable to parse: \" + str);",
        "line": 235,
        "aftercode": "System.err.println(\"null\", \"null\");"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            return new URL(str);",
        "line": 231,
        "aftercode": "return null;        }"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            return new URL(str);",
        "line": 231,
        "aftercode": "/*\n * Copyright 1999-2005 The Apache Software Foundation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.cli;\n\nimport java.io.File;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\nimport java.util.Date;\n\n/**\n  * This is a temporary implementation. TypeHandler will handle the \n  * pluggableness of OptionTypes and it will direct all of these types \n  * of conversion functionalities to ConvertUtils component in Commons \n  * alreayd. BeanUtils I think.\n  *\n  * @author Henri Yandell (bayard @ generationjava.com)\n  * @version $Revision$\n  */\npublic class TypeHandler {\n\n    /**\n     * <p>Returns the <code>Object</code> of type <code>obj</code>\n     * with the value of <code>str</code>.</p>\n     *\n     * @param str the command line value\n     * @param obj the type of argument\n     * @return The instance of <code>obj</code> initialised with\n     * the value of <code>str</code>.\n     */\n    public static Object createValue(String str, Object obj)\n    {\n        return createValue(str, (Class) obj);\n    }\n\n    /**\n     * <p>Returns the <code>Object</code> of type <code>clazz</code>\n     * with the value of <code>str</code>.</p>\n     *\n     * @param str the command line value\n     * @param clazz the type of argument\n     * @return The instance of <code>clazz</code> initialised with\n     * the value of <code>str</code>.\n     */\n    public static Object createValue(String str, Class clazz)\n    {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return createFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return createURL(str);\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n    /**\n      * <p>Create an Object from the classname and empty constructor.</p>\n      *\n      * @param str the argument value\n      * @return the initialised object, or null if it couldn't create \n      * the Object.\n      */\n    public static Object createObject(String str)\n    {\n        Class cl = null;\n\n        try\n        {\n            cl = Class.forName(str);\n        }\n        catch (ClassNotFoundException cnfe)\n        {\n            System.err.println(\"Unable to find: \" + str);\n\n            return null;\n        }\n\n        Object instance = null;\n\n        try\n        {\n            instance = cl.newInstance();\n        }\n        catch (InstantiationException cnfe)\n        {\n            System.err.println(\"InstantiationException; Unable to create: \"\n                               + str);\n\n            return null;\n        }\n        catch (IllegalAccessException cnfe)\n        {\n            System.err.println(\"IllegalAccessException; Unable to create: \"\n                               + str);\n\n            return null;\n        }\n\n        return instance;\n    }\n\n    /**\n     * <p>Create a number from a String. If a . is present, it creates a \n     *    Double, otherwise a Long. </p>\n     *\n     * @param str the value\n     * @return the number represented by <code>str</code>, if <code>str</code>\n     * is not a number, null is returned.\n     */\n    public static Number createNumber(String str)\n    {\n        try\n        {\n            if( str != null )\n            {\n                if( str.indexOf('.') != -1 )\n                {\n                    return Double.valueOf(str);\n                }\n                else\n                {\n                    return Long.valueOf(str);\n                }\n            }\n        }\n        catch (NumberFormatException nfe)\n        {\n            System.err.println(nfe.getMessage());\n        }\n\n        return null;\n    }\n\n    /**\n     * <p>Returns the class whose name is <code>str</code>.</p>\n     *\n     * @param str the class name\n     * @return The class if it is found, otherwise return null\n     */\n    public static Class createClass(String str)\n    {\n        try\n        {\n            return Class.forName(str);\n        }\n        catch (ClassNotFoundException cnfe)\n        {\n            System.err.println(\"Unable to find: \" + str);\n\n            return null;\n        }\n    }\n\n    /**\n     * <p>Returns the date represented by <code>str</code>.</p>\n     *\n     * @param str the date string\n     * @return The date if <code>str</code> is a valid date string,\n     * otherwise return null.\n     */\n    public static Date createDate(String str)\n    {\n        Date date = null;\n\n        if (date == null)\n        {\n            System.err.println(\"Unable to parse: \" + str);\n        }\n\n        return date;\n    }\n\n    /**\n     * <p>Returns the URL represented by <code>str</code>.</p>\n     *\n     * @param str the URL string\n     * @return The URL is <code>str</code> is well-formed, otherwise\n     * return null.\n     */\n    public static URL createURL(String str)\n    {\n        try\n        {\nnew URL(str);\n        }\n        catch (MalformedURLException mue)\n        {\n\nstr.println();\n\n            return null;\n        }\n    }\n\n    /**\n     * <p>Returns the File represented by <code>str</code>.</p>\n     *\n     * @param str the File location\n     * @return The file represented by <code>str</code>.\n     */\n    public static File createFile(String str)\n    {\n        return new File(str);\n    }\n\n    /**\n     * <p>Returns the File[] represented by <code>str</code>.</p>\n     *\n     * @param str the paths to the files\n     * @return The File[] represented by <code>str</code>.\n     */\n    public static File[] createFiles(String str)\n    {\n        // to implement/port:\n        //        return FileW.findFiles(str);\n        return null;\n    }\n}"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            return new URL(str);",
        "line": 231,
        "aftercode": "return new URL();        }"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            System.err.println(\"Unable to parse: \" + str);",
        "line": 235,
        "aftercode": "this.str = str;"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            System.err.println(\"Unable to parse: \" + str);",
        "line": 235,
        "aftercode": "System.err.println(null);"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            return new URL(str);",
        "line": 231,
        "aftercode": "return str;        }"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            System.err.println(\"Unable to parse: \" + str);",
        "line": 231,
        "aftercode": "/*\n * Copyright 1999-2005 The Apache Software Foundation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.cli;\n\nimport java.io.File;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\nimport java.util.Date;\n\n/**\n  * This is a temporary implementation. TypeHandler will handle the \n  * pluggableness of OptionTypes and it will direct all of these types \n  * of conversion functionalities to ConvertUtils component in Commons \n  * alreayd. BeanUtils I think.\n  *\n  * @author Henri Yandell (bayard @ generationjava.com)\n  * @version $Revision$\n  */\npublic class TypeHandler {\n\n    /**\n     * <p>Returns the <code>Object</code> of type <code>obj</code>\n     * with the value of <code>str</code>.</p>\n     *\n     * @param str the command line value\n     * @param obj the type of argument\n     * @return The instance of <code>obj</code> initialised with\n     * the value of <code>str</code>.\n     */\n    public static Object createValue(String str, Object obj)\n    {\n        return createValue(str, (Class) obj);\n    }\n\n    /**\n     * <p>Returns the <code>Object</code> of type <code>clazz</code>\n     * with the value of <code>str</code>.</p>\n     *\n     * @param str the command line value\n     * @param clazz the type of argument\n     * @return The instance of <code>clazz</code> initialised with\n     * the value of <code>str</code>.\n     */\n    public static Object createValue(String str, Class clazz)\n    {\n        if (PatternOptionBuilder.STRING_VALUE == clazz)\n        {\n            return str;\n        }\n        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)\n        {\n            return createObject(str);\n        }\n        else if (PatternOptionBuilder.NUMBER_VALUE == clazz)\n        {\n            return createNumber(str);\n        }\n        else if (PatternOptionBuilder.DATE_VALUE == clazz)\n        {\n            return createDate(str);\n        }\n        else if (PatternOptionBuilder.CLASS_VALUE == clazz)\n        {\n            return createClass(str);\n        }\n        else if (PatternOptionBuilder.FILE_VALUE == clazz)\n        {\n            return createFile(str);\n        }\n        else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)\n        {\n            return createFile(str);\n        }\n        else if (PatternOptionBuilder.FILES_VALUE == clazz)\n        {\n            return createFiles(str);\n        }\n        else if (PatternOptionBuilder.URL_VALUE == clazz)\n        {\n            return createURL(str);\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n    /**\n      * <p>Create an Object from the classname and empty constructor.</p>\n      *\n      * @param str the argument value\n      * @return the initialised object, or null if it couldn't create \n      * the Object.\n      */\n    public static Object createObject(String str)\n    {\n        Class cl = null;\n\n        try\n        {\n            cl = Class.forName(str);\n        }\n        catch (ClassNotFoundException cnfe)\n        {\n            System.err.println(\"Unable to find: \" + str);\n\n            return null;\n        }\n\n        Object instance = null;\n\n        try\n        {\n            instance = cl.newInstance();\n        }\n        catch (InstantiationException cnfe)\n        {\n            System.err.println(\"InstantiationException; Unable to create: \"\n                               + str);\n\n            return null;\n        }\n        catch (IllegalAccessException cnfe)\n        {\n            System.err.println(\"IllegalAccessException; Unable to create: \"\n                               + str);\n\n            return null;\n        }\n\n        return instance;\n    }\n\n    /**\n     * <p>Create a number from a String. If a . is present, it creates a \n     *    Double, otherwise a Long. </p>\n     *\n     * @param str the value\n     * @return the number represented by <code>str</code>, if <code>str</code>\n     * is not a number, null is returned.\n     */\n    public static Number createNumber(String str)\n    {\n        try\n        {\n            if( str != null )\n            {\n                if( str.indexOf('.') != -1 )\n                {\n                    return Double.valueOf(str);\n                }\n                else\n                {\n                    return Long.valueOf(str);\n                }\n            }\n        }\n        catch (NumberFormatException nfe)\n        {\n            System.err.println(nfe.getMessage());\n        }\n\n        return null;\n    }\n\n    /**\n     * <p>Returns the class whose name is <code>str</code>.</p>\n     *\n     * @param str the class name\n     * @return The class if it is found, otherwise return null\n     */\n    public static Class createClass(String str)\n    {\n        try\n        {\n            return Class.forName(str);\n        }\n        catch (ClassNotFoundException cnfe)\n        {\n            System.err.println(\"Unable to find: \" + str);\n\n            return null;\n        }\n    }\n\n    /**\n     * <p>Returns the date represented by <code>str</code>.</p>\n     *\n     * @param str the date string\n     * @return The date if <code>str</code> is a valid date string,\n     * otherwise return null.\n     */\n    public static Date createDate(String str)\n    {\n        Date date = null;\n\n        if (date == null)\n        {\n            System.err.println(\"Unable to parse: \" + str);\n        }\n\n        return date;\n    }\n\n    /**\n     * <p>Returns the URL represented by <code>str</code>.</p>\n     *\n     * @param str the URL string\n     * @return The URL is <code>str</code> is well-formed, otherwise\n     * return null.\n     */\n    public static URL createURL(String str)\n    {\n        try\n        {\n            return new URL(str);\n        }\n        catch (MalformedURLException mue)\n        {\nif((str == null)){\n            System.err.println(\"Unable to parse: \" + str);\n            return null;\n}\n        }\n    }\n\n    /**\n     * <p>Returns the File represented by <code>str</code>.</p>\n     *\n     * @param str the File location\n     * @return The file represented by <code>str</code>.\n     */\n    public static File createFile(String str)\n    {\n        return new File(str);\n    }\n\n    /**\n     * <p>Returns the File[] represented by <code>str</code>.</p>\n     *\n     * @param str the paths to the files\n     * @return The File[] represented by <code>str</code>.\n     */\n    public static File[] createFiles(String str)\n    {\n        // to implement/port:\n        //        return FileW.findFiles(str);\n        return null;\n    }\n}"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "        else if (PatternOptionBuilder.OBJECT_VALUE == clazz)",
        "line": 65,
        "aftercode": "if((PatternOptionBuilder.NUMBER_VALUE == clazz)){"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            return new URL(str);",
        "line": 231,
        "aftercode": "str = new URL(str);"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "            return createFiles(str);",
        "line": 91,
        "aftercode": "createFiles(str);"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_3_fixed/src/java/org/apache/commons/cli/TypeHandler.java",
        "precode": "        if (PatternOptionBuilder.STRING_VALUE == clazz)",
        "line": 61,
        "aftercode": "if((PatternOptionBuilder.OBJECT_VALUE == clazz)){"
    }
]