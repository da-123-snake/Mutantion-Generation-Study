[
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 235,
        "aftercode": "opt = Util.stripLeadingHyphens();"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 235,
        "aftercode": "opt = stripLeadingHyphens(opt);"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        return matchingOpts;",
        "line": 252,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 235,
        "aftercode": "opt = Util.stripLeadingHyphens(longOpt);"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 235,
        "aftercode": "opt = Util.stripLeadingHyphens((ArrayList<String>)opt);"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 235,
        "aftercode": "opt = opt.stripLeadingHyphens();"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        for (String longOpt : longOpts.keySet())",
        "line": 244,
        "aftercode": "(String longOpt = ;"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 235,
        "aftercode": "opt = longOpts.keySet();"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 235,
        "aftercode": "this.opt = Util.stripLeadingHyphens(opt);"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "                matchingOpts.add(longOpt);",
        "line": 248,
        "aftercode": "matchingOpts.add();"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 235,
        "aftercode": "opt = stripLeadingHyphens();"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "            if (longOpt.startsWith(opt))",
        "line": 246,
        "aftercode": "if(longOpt.startsWith(opt)){"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 237,
        "aftercode": "/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.cli;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Main entry-point into the library.\n * <p>\n * Options represents a collection of {@link Option} objects, which\n * describe the possible options for a command-line.\n * <p>\n * It may flexibly parse long and short options, with or without\n * values.  Additionally, it may parse only a portion of a commandline,\n * allowing for flexible multi-stage parsing.\n *\n * @see org.apache.commons.cli.CommandLine\n *\n * @version $Id$\n */\npublic class Options implements Serializable\n{\n    /** The serial version UID. */\n    private static final long serialVersionUID = 1L;\n\n    /** a map of the options with the character key */\n    private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>();\n\n    /** a map of the options with the long key */\n    private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();\n\n    /** a map of the required options */\n    // N.B. This can contain either a String (addOption) or an OptionGroup (addOptionGroup)\n    // TODO this seems wrong\n    private final List<Object> requiredOpts = new ArrayList<Object>();\n\n    /** a map of the option groups */\n    private final Map<String, OptionGroup> optionGroups = new HashMap<String, OptionGroup>();\n\n    /**\n     * Add the specified option group.\n     *\n     * @param group the OptionGroup that is to be added\n     * @return the resulting Options instance\n     */\n    public Options addOptionGroup(OptionGroup group)\n    {\n        if (group.isRequired())\n        {\n            requiredOpts.add(group);\n        }\n\n        for (Option option : group.getOptions())\n        {\n            // an Option cannot be required if it is in an\n            // OptionGroup, either the group is required or\n            // nothing is required\n            option.setRequired(false);\n            addOption(option);\n\n            optionGroups.put(option.getKey(), group);\n        }\n\n        return this;\n    }\n\n    /**\n     * Lists the OptionGroups that are members of this Options instance.\n     *\n     * @return a Collection of OptionGroup instances.\n     */\n    Collection<OptionGroup> getOptionGroups()\n    {\n        return new HashSet<OptionGroup>(optionGroups.values());\n    }\n\n    /**\n     * Add an option that only contains a short name.\n     * The option does not take an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     * @since 1.3\n     */\n    public Options addOption(String opt, String description)\n    {\n        addOption(opt, null, false, description);\n        return this;\n    }\n\n    /**\n     * Add an option that only contains a short-name.\n     * It may be specified as requiring an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param hasArg flag signally if an argument is required after this option\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     */\n    public Options addOption(String opt, boolean hasArg, String description)\n    {\n        addOption(opt, null, hasArg, description);\n        return this;\n    }\n\n    /**\n     * Add an option that contains a short-name and a long-name.\n     * It may be specified as requiring an argument.\n     *\n     * @param opt Short single-character name of the option.\n     * @param longOpt Long multi-character name of the option.\n     * @param hasArg flag signally if an argument is required after this option\n     * @param description Self-documenting description\n     * @return the resulting Options instance\n     */\n    public Options addOption(String opt, String longOpt, boolean hasArg, String description)\n    {\n        addOption(new Option(opt, longOpt, hasArg, description));\n        return this;\n    }\n\n    /**\n     * Adds an option instance\n     *\n     * @param opt the option that is to be added\n     * @return the resulting Options instance\n     */\n    public Options addOption(Option opt)\n    {\n        String key = opt.getKey();\n\n        // add it to the long option list\n        if (opt.hasLongOpt())\n        {\n            longOpts.put(opt.getLongOpt(), opt);\n        }\n\n        // if the option is required add it to the required list\n        if (opt.isRequired())\n        {\n            if (requiredOpts.contains(key))\n            {\n                requiredOpts.remove(requiredOpts.indexOf(key));\n            }\n            requiredOpts.add(key);\n        }\n\n        shortOpts.put(key, opt);\n\n        return this;\n    }\n\n    /**\n     * Retrieve a read-only list of options in this set\n     *\n     * @return read-only Collection of {@link Option} objects in this descriptor\n     */\n    public Collection<Option> getOptions()\n    {\n        return Collections.unmodifiableCollection(helpOptions());\n    }\n\n    /**\n     * Returns the Options for use by the HelpFormatter.\n     *\n     * @return the List of Options\n     */\n    List<Option> helpOptions()\n    {\n        return new ArrayList<Option>(shortOpts.values());\n    }\n\n    /**\n     * Returns the required options.\n     *\n     * @return read-only List of required options\n     */\n    public List getRequiredOptions()\n    {\n        return Collections.unmodifiableList(requiredOpts);\n    }\n\n    /**\n     * Retrieve the {@link Option} matching the long or short name specified.\n     * The leading hyphens in the name are ignored (up to 2).\n     *\n     * @param opt short or long name of the {@link Option}\n     * @return the option represented by opt\n     */\n    public Option getOption(String opt)\n    {\n        opt = Util.stripLeadingHyphens(opt);\n\n        if (shortOpts.containsKey(opt))\n        {\n            return shortOpts.get(opt);\n        }\n\n        return longOpts.get(opt);\n    }\n\n    /**\n     * Returns the options with a long name starting with the name specified.\n     * \n     * @param opt the partial name of the option\n     * @return the options matching the partial name specified, or an empty list if none matches\n     * @since 1.3\n     */\n    public List<String> getMatchingOptions(String opt)\n    {\nUtil.stripLeadingHyphens(opt);\n        \n\nList<String> matchingOpts = new List<String>();\n\n        // for a perfect match return the single option only\n        if(longOpts.keySet().contains(opt)) {\n            return Collections.singletonList(opt);\n        }\n\n        for (String longOpt : longOpts.keySet())\n        {\n            if (longOpt.startsWith(opt))\n            {\n                matchingOpts.add(longOpt);\n            }\n        }\n        \n        return matchingOpts;\n    }\n\n    /**\n     * Returns whether the named {@link Option} is a member of this {@link Options}.\n     *\n     * @param opt short or long name of the {@link Option}\n     * @return true if the named {@link Option} is a member of this {@link Options}\n     */\n    public boolean hasOption(String opt)\n    {\n        opt = Util.stripLeadingHyphens(opt);\n\n        return shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n    }\n\n    /**\n     * Returns whether the named {@link Option} is a member of this {@link Options}.\n     *\n     * @param opt long name of the {@link Option}\n     * @return true if the named {@link Option} is a member of this {@link Options}\n     * @since 1.3\n     */\n    public boolean hasLongOption(String opt)\n    {\n        opt = Util.stripLeadingHyphens(opt);\n\n        return longOpts.containsKey(opt);\n    }\n\n    /**\n     * Returns whether the named {@link Option} is a member of this {@link Options}.\n     *\n     * @param opt short name of the {@link Option}\n     * @return true if the named {@link Option} is a member of this {@link Options}\n     * @since 1.3\n     */\n    public boolean hasShortOption(String opt)\n    {\n        opt = Util.stripLeadingHyphens(opt);\n\n        return shortOpts.containsKey(opt);\n    }\n\n    /**\n     * Returns the OptionGroup the <code>opt</code> belongs to.\n     * @param opt the option whose OptionGroup is being queried.\n     *\n     * @return the OptionGroup if <code>opt</code> is part\n     * of an OptionGroup, otherwise return null\n     */\n    public OptionGroup getOptionGroup(Option opt)\n    {\n        return optionGroups.get(opt.getKey());\n    }\n\n    /**\n     * Dump state, suitable for debugging.\n     *\n     * @return Stringified form of this object\n     */\n    @Override\n    public String toString()\n    {\n        StringBuilder buf = new StringBuilder();\n\n        buf.append(\"[ Options: [ short \");\n        buf.append(shortOpts.toString());\n        buf.append(\" ] [ long \");\n        buf.append(longOpts);\n        buf.append(\" ]\");\n\n        return buf.toString();\n    }\n}"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        for (String longOpt : longOpts.keySet())",
        "line": 244,
        "aftercode": "(String longOpt = ;"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        List<String> matchingOpts = new ArrayList<String>();",
        "line": 237,
        "aftercode": "List<String> matchingOpts = new List<String>();"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 235,
        "aftercode": "opt = Util.stripLeadingHyphens(Util.stripLeadingHyphens(opt), opt);"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 235,
        "aftercode": "matchingOpts.add(longOpt);"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "    public List<String> getMatchingOptions(String opt)",
        "line": 233,
        "aftercode": ""
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 235,
        "aftercode": "this.opt = opt;"
    },
    {
        "id": 2,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Cli/Cli_35_fixed/src/main/java/org/apache/commons/cli/Options.java",
        "precode": "        opt = Util.stripLeadingHyphens(opt);",
        "line": 235,
        "aftercode": "opt = Util.stripLeadingHyphens(opt, \"null\");"
    }
]