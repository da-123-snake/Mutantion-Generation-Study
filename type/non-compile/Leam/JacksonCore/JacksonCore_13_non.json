[
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_13_fixed/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java",
        "precode": "            _cfgUnqNames = false;",
        "line": 122,
        "aftercode": "_cfgUnqNames = null;"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_13_fixed/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java",
        "precode": "            _cfgUnqNames = false;",
        "line": 122,
        "aftercode": "_cfgUnqNames = \"null\";"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_13_fixed/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java",
        "precode": "            _cfgUnqNames = false;",
        "line": 124,
        "aftercode": "package com.fasterxml.jackson.core.json;\n\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.base.GeneratorBase;\nimport com.fasterxml.jackson.core.io.CharTypes;\nimport com.fasterxml.jackson.core.io.CharacterEscapes;\nimport com.fasterxml.jackson.core.io.IOContext;\nimport com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\nimport com.fasterxml.jackson.core.util.VersionUtil;\n\n/**\n * Intermediate base class shared by JSON-backed generators\n * like {@link UTF8JsonGenerator} and {@link WriterBasedJsonGenerator}.\n * \n * @since 2.1\n */\npublic abstract class JsonGeneratorImpl extends GeneratorBase\n{\n    /*\n    /**********************************************************\n    /* Constants\n    /**********************************************************\n     */\n\n    /**\n     * This is the default set of escape codes, over 7-bit ASCII range\n     * (first 128 character codes), used for single-byte UTF-8 characters.\n     */\n    protected final static int[] sOutputEscapes = CharTypes.get7BitOutputEscapes();\n    \n    /*\n    /**********************************************************\n    /* Configuration, basic I/O\n    /**********************************************************\n     */\n\n    final protected IOContext _ioContext;\n\n    /*\n    /**********************************************************\n    /* Configuration, output escaping\n    /**********************************************************\n     */\n\n    /**\n     * Currently active set of output escape code definitions (whether\n     * and how to escape or not) for 7-bit ASCII range (first 128\n     * character codes). Defined separately to make potentially\n     * customizable\n     */\n    protected int[] _outputEscapes = sOutputEscapes;\n\n    /**\n     * Value between 128 (0x80) and 65535 (0xFFFF) that indicates highest\n     * Unicode code point that will not need escaping; or 0 to indicate\n     * that all characters can be represented without escaping.\n     * Typically used to force escaping of some portion of character set;\n     * for example to always escape non-ASCII characters (if value was 127).\n     *<p>\n     * NOTE: not all sub-classes make use of this setting.\n     */\n    protected int _maximumNonEscapedChar;\n\n    /**\n     * Definition of custom character escapes to use for generators created\n     * by this factory, if any. If null, standard data format specific\n     * escapes are used.\n     */\n    protected CharacterEscapes _characterEscapes;\n    \n    /*\n    /**********************************************************\n    /* Configuration, other\n    /**********************************************************\n     */\n\n    /**\n     * Separator to use, if any, between root-level values.\n     * \n     * @since 2.1\n     */\n    protected SerializableString _rootValueSeparator\n        = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;\n\n    /**\n     * Flag that is set if quoting is not to be added around\n     * JSON Object property names.\n     *\n     * @since 2.7\n     */\n    protected boolean _cfgUnqNames;\n\n    /*\n    /**********************************************************\n    /* Life-cycle\n    /**********************************************************\n     */\n\n    public JsonGeneratorImpl(IOContext ctxt, int features, ObjectCodec codec)\n    {\n        super(features, codec);\n        _ioContext = ctxt;\n        if (Feature.ESCAPE_NON_ASCII.enabledIn(features)) {\n            // inlined `setHighestNonEscapedChar()`\n            _maximumNonEscapedChar = 127;\n        }\n        _cfgUnqNames = !Feature.QUOTE_FIELD_NAMES.enabledIn(features);\n    }\n\n    /*\n    /**********************************************************\n    /* Overridden configuration methods\n    /**********************************************************\n     */\n\n    @Override\n    public JsonGenerator enable(Feature f) {\n        super.enable(f);\n        if (f == Feature.QUOTE_FIELD_NAMES) {\n_cfgUnqNames = null;\n        }\n\n_cfgUnqNames = null;\n    }\n\n    @Override\n    public JsonGenerator disable(Feature f) {\n        super.disable(f);\n        if (f == Feature.QUOTE_FIELD_NAMES) {\n            _cfgUnqNames = true;\n        }\n        return this;\n    }\n\n    @Override\n    protected void _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures) {\n        super._checkStdFeatureChanges(newFeatureFlags, changedFeatures);\n        _cfgUnqNames = !Feature.QUOTE_FIELD_NAMES.enabledIn(newFeatureFlags);\n    }\n\n    @Override\n    public JsonGenerator setHighestNonEscapedChar(int charCode) {\n        _maximumNonEscapedChar = (charCode < 0) ? 0 : charCode;\n        return this;\n    }\n\n    @Override\n    public int getHighestEscapedChar() {\n        return _maximumNonEscapedChar;\n    }\n\n    @Override\n    public JsonGenerator setCharacterEscapes(CharacterEscapes esc)\n    {\n        _characterEscapes = esc;\n        if (esc == null) { // revert to standard escapes\n            _outputEscapes = sOutputEscapes;\n        } else {\n            _outputEscapes = esc.getEscapeCodesForAscii();\n        }\n        return this;\n    }\n\n    /**\n     * Method for accessing custom escapes factory uses for {@link JsonGenerator}s\n     * it creates.\n     */\n    @Override\n    public CharacterEscapes getCharacterEscapes() {\n        return _characterEscapes;\n    }\n    \n    @Override\n    public JsonGenerator setRootValueSeparator(SerializableString sep) {\n        _rootValueSeparator = sep;\n        return this;\n    }\n    \n    /*\n    /**********************************************************\n    /* Versioned\n    /**********************************************************\n     */\n\n    @Override\n    public Version version() {\n        return VersionUtil.versionFor(getClass());\n    }\n\n    /*\n    /**********************************************************\n    /* Partial API\n    /**********************************************************\n     */\n\n    // // Overrides just to make things final, to possibly help with inlining\n    \n    @Override\n    public final void writeStringField(String fieldName, String value) throws IOException\n    {\n        writeFieldName(fieldName);\n        writeString(value);\n    }\n}"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_13_fixed/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java",
        "precode": "            _cfgUnqNames = false;",
        "line": 122,
        "aftercode": "_cfgUnqNames = null;"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_13_fixed/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java",
        "precode": "        super.enable(f);",
        "line": 120,
        "aftercode": "this.f = f;"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_13_fixed/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java",
        "precode": "    public JsonGenerator enable(Feature f) {",
        "line": 119,
        "aftercode": ""
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_13_fixed/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java",
        "precode": "            _cfgUnqNames = false;",
        "line": 124,
        "aftercode": "package com.fasterxml.jackson.core.json;\n\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.base.GeneratorBase;\nimport com.fasterxml.jackson.core.io.CharTypes;\nimport com.fasterxml.jackson.core.io.CharacterEscapes;\nimport com.fasterxml.jackson.core.io.IOContext;\nimport com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\nimport com.fasterxml.jackson.core.util.VersionUtil;\n\n/**\n * Intermediate base class shared by JSON-backed generators\n * like {@link UTF8JsonGenerator} and {@link WriterBasedJsonGenerator}.\n * \n * @since 2.1\n */\npublic abstract class JsonGeneratorImpl extends GeneratorBase\n{\n    /*\n    /**********************************************************\n    /* Constants\n    /**********************************************************\n     */\n\n    /**\n     * This is the default set of escape codes, over 7-bit ASCII range\n     * (first 128 character codes), used for single-byte UTF-8 characters.\n     */\n    protected final static int[] sOutputEscapes = CharTypes.get7BitOutputEscapes();\n    \n    /*\n    /**********************************************************\n    /* Configuration, basic I/O\n    /**********************************************************\n     */\n\n    final protected IOContext _ioContext;\n\n    /*\n    /**********************************************************\n    /* Configuration, output escaping\n    /**********************************************************\n     */\n\n    /**\n     * Currently active set of output escape code definitions (whether\n     * and how to escape or not) for 7-bit ASCII range (first 128\n     * character codes). Defined separately to make potentially\n     * customizable\n     */\n    protected int[] _outputEscapes = sOutputEscapes;\n\n    /**\n     * Value between 128 (0x80) and 65535 (0xFFFF) that indicates highest\n     * Unicode code point that will not need escaping; or 0 to indicate\n     * that all characters can be represented without escaping.\n     * Typically used to force escaping of some portion of character set;\n     * for example to always escape non-ASCII characters (if value was 127).\n     *<p>\n     * NOTE: not all sub-classes make use of this setting.\n     */\n    protected int _maximumNonEscapedChar;\n\n    /**\n     * Definition of custom character escapes to use for generators created\n     * by this factory, if any. If null, standard data format specific\n     * escapes are used.\n     */\n    protected CharacterEscapes _characterEscapes;\n    \n    /*\n    /**********************************************************\n    /* Configuration, other\n    /**********************************************************\n     */\n\n    /**\n     * Separator to use, if any, between root-level values.\n     * \n     * @since 2.1\n     */\n    protected SerializableString _rootValueSeparator\n        = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;\n\n    /**\n     * Flag that is set if quoting is not to be added around\n     * JSON Object property names.\n     *\n     * @since 2.7\n     */\n    protected boolean _cfgUnqNames;\n\n    /*\n    /**********************************************************\n    /* Life-cycle\n    /**********************************************************\n     */\n\n    public JsonGeneratorImpl(IOContext ctxt, int features, ObjectCodec codec)\n    {\n        super(features, codec);\n        _ioContext = ctxt;\n        if (Feature.ESCAPE_NON_ASCII.enabledIn(features)) {\n            // inlined `setHighestNonEscapedChar()`\n            _maximumNonEscapedChar = 127;\n        }\n        _cfgUnqNames = !Feature.QUOTE_FIELD_NAMES.enabledIn(features);\n    }\n\n    /*\n    /**********************************************************\n    /* Overridden configuration methods\n    /**********************************************************\n     */\n\n    @Override\n    public JsonGenerator enable(Feature f) {\n        super.enable(f);\n        if (f == Feature.QUOTE_FIELD_NAMES) {\n_cfgUnqNames = null;\n        }\n\n_cfgUnqNames = null;\n        return this;    }\n\n    @Override\n    public JsonGenerator disable(Feature f) {\n        super.disable(f);\n        if (f == Feature.QUOTE_FIELD_NAMES) {\n            _cfgUnqNames = true;\n        }\n        return this;\n    }\n\n    @Override\n    protected void _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures) {\n        super._checkStdFeatureChanges(newFeatureFlags, changedFeatures);\n        _cfgUnqNames = !Feature.QUOTE_FIELD_NAMES.enabledIn(newFeatureFlags);\n    }\n\n    @Override\n    public JsonGenerator setHighestNonEscapedChar(int charCode) {\n        _maximumNonEscapedChar = (charCode < 0) ? 0 : charCode;\n        return this;\n    }\n\n    @Override\n    public int getHighestEscapedChar() {\n        return _maximumNonEscapedChar;\n    }\n\n    @Override\n    public JsonGenerator setCharacterEscapes(CharacterEscapes esc)\n    {\n        _characterEscapes = esc;\n        if (esc == null) { // revert to standard escapes\n            _outputEscapes = sOutputEscapes;\n        } else {\n            _outputEscapes = esc.getEscapeCodesForAscii();\n        }\n        return this;\n    }\n\n    /**\n     * Method for accessing custom escapes factory uses for {@link JsonGenerator}s\n     * it creates.\n     */\n    @Override\n    public CharacterEscapes getCharacterEscapes() {\n        return _characterEscapes;\n    }\n    \n    @Override\n    public JsonGenerator setRootValueSeparator(SerializableString sep) {\n        _rootValueSeparator = sep;\n        return this;\n    }\n    \n    /*\n    /**********************************************************\n    /* Versioned\n    /**********************************************************\n     */\n\n    @Override\n    public Version version() {\n        return VersionUtil.versionFor(getClass());\n    }\n\n    /*\n    /**********************************************************\n    /* Partial API\n    /**********************************************************\n     */\n\n    // // Overrides just to make things final, to possibly help with inlining\n    \n    @Override\n    public final void writeStringField(String fieldName, String value) throws IOException\n    {\n        writeFieldName(fieldName);\n        writeString(value);\n    }\n}"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_13_fixed/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java",
        "precode": "            _cfgUnqNames = false;",
        "line": 122,
        "aftercode": "_cfgUnqNames = 0;"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_13_fixed/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java",
        "precode": "        if (f == Feature.QUOTE_FIELD_NAMES) {",
        "line": 121,
        "aftercode": "if(Feature.QUOTE_FIELD_NAMES){"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_13_fixed/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java",
        "precode": "            _cfgUnqNames = false;",
        "line": 122,
        "aftercode": "_cfgUnqNames();"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_13_fixed/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java",
        "precode": "    public JsonGenerator enable(Feature f) {",
        "line": 119,
        "aftercode": ""
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_13_fixed/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java",
        "precode": "            _cfgUnqNames = false;",
        "line": 124,
        "aftercode": "package com.fasterxml.jackson.core.json;\n\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.base.GeneratorBase;\nimport com.fasterxml.jackson.core.io.CharTypes;\nimport com.fasterxml.jackson.core.io.CharacterEscapes;\nimport com.fasterxml.jackson.core.io.IOContext;\nimport com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\nimport com.fasterxml.jackson.core.util.VersionUtil;\n\n/**\n * Intermediate base class shared by JSON-backed generators\n * like {@link UTF8JsonGenerator} and {@link WriterBasedJsonGenerator}.\n * \n * @since 2.1\n */\npublic abstract class JsonGeneratorImpl extends GeneratorBase\n{\n    /*\n    /**********************************************************\n    /* Constants\n    /**********************************************************\n     */\n\n    /**\n     * This is the default set of escape codes, over 7-bit ASCII range\n     * (first 128 character codes), used for single-byte UTF-8 characters.\n     */\n    protected final static int[] sOutputEscapes = CharTypes.get7BitOutputEscapes();\n    \n    /*\n    /**********************************************************\n    /* Configuration, basic I/O\n    /**********************************************************\n     */\n\n    final protected IOContext _ioContext;\n\n    /*\n    /**********************************************************\n    /* Configuration, output escaping\n    /**********************************************************\n     */\n\n    /**\n     * Currently active set of output escape code definitions (whether\n     * and how to escape or not) for 7-bit ASCII range (first 128\n     * character codes). Defined separately to make potentially\n     * customizable\n     */\n    protected int[] _outputEscapes = sOutputEscapes;\n\n    /**\n     * Value between 128 (0x80) and 65535 (0xFFFF) that indicates highest\n     * Unicode code point that will not need escaping; or 0 to indicate\n     * that all characters can be represented without escaping.\n     * Typically used to force escaping of some portion of character set;\n     * for example to always escape non-ASCII characters (if value was 127).\n     *<p>\n     * NOTE: not all sub-classes make use of this setting.\n     */\n    protected int _maximumNonEscapedChar;\n\n    /**\n     * Definition of custom character escapes to use for generators created\n     * by this factory, if any. If null, standard data format specific\n     * escapes are used.\n     */\n    protected CharacterEscapes _characterEscapes;\n    \n    /*\n    /**********************************************************\n    /* Configuration, other\n    /**********************************************************\n     */\n\n    /**\n     * Separator to use, if any, between root-level values.\n     * \n     * @since 2.1\n     */\n    protected SerializableString _rootValueSeparator\n        = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;\n\n    /**\n     * Flag that is set if quoting is not to be added around\n     * JSON Object property names.\n     *\n     * @since 2.7\n     */\n    protected boolean _cfgUnqNames;\n\n    /*\n    /**********************************************************\n    /* Life-cycle\n    /**********************************************************\n     */\n\n    public JsonGeneratorImpl(IOContext ctxt, int features, ObjectCodec codec)\n    {\n        super(features, codec);\n        _ioContext = ctxt;\n        if (Feature.ESCAPE_NON_ASCII.enabledIn(features)) {\n            // inlined `setHighestNonEscapedChar()`\n            _maximumNonEscapedChar = 127;\n        }\n        _cfgUnqNames = !Feature.QUOTE_FIELD_NAMES.enabledIn(features);\n    }\n\n    /*\n    /**********************************************************\n    /* Overridden configuration methods\n    /**********************************************************\n     */\n\n    @Override\n    public JsonGenerator enable(Feature f) {\n        super.enable(f);\n        if (f == Feature.QUOTE_FIELD_NAMES) {\n_cfgUnqNames = true;\n        }\n\n_cfgUnqNames = true;\n    }\n\n    @Override\n    public JsonGenerator disable(Feature f) {\n        super.disable(f);\n        if (f == Feature.QUOTE_FIELD_NAMES) {\n            _cfgUnqNames = true;\n        }\n        return this;\n    }\n\n    @Override\n    protected void _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures) {\n        super._checkStdFeatureChanges(newFeatureFlags, changedFeatures);\n        _cfgUnqNames = !Feature.QUOTE_FIELD_NAMES.enabledIn(newFeatureFlags);\n    }\n\n    @Override\n    public JsonGenerator setHighestNonEscapedChar(int charCode) {\n        _maximumNonEscapedChar = (charCode < 0) ? 0 : charCode;\n        return this;\n    }\n\n    @Override\n    public int getHighestEscapedChar() {\n        return _maximumNonEscapedChar;\n    }\n\n    @Override\n    public JsonGenerator setCharacterEscapes(CharacterEscapes esc)\n    {\n        _characterEscapes = esc;\n        if (esc == null) { // revert to standard escapes\n            _outputEscapes = sOutputEscapes;\n        } else {\n            _outputEscapes = esc.getEscapeCodesForAscii();\n        }\n        return this;\n    }\n\n    /**\n     * Method for accessing custom escapes factory uses for {@link JsonGenerator}s\n     * it creates.\n     */\n    @Override\n    public CharacterEscapes getCharacterEscapes() {\n        return _characterEscapes;\n    }\n    \n    @Override\n    public JsonGenerator setRootValueSeparator(SerializableString sep) {\n        _rootValueSeparator = sep;\n        return this;\n    }\n    \n    /*\n    /**********************************************************\n    /* Versioned\n    /**********************************************************\n     */\n\n    @Override\n    public Version version() {\n        return VersionUtil.versionFor(getClass());\n    }\n\n    /*\n    /**********************************************************\n    /* Partial API\n    /**********************************************************\n     */\n\n    // // Overrides just to make things final, to possibly help with inlining\n    \n    @Override\n    public final void writeStringField(String fieldName, String value) throws IOException\n    {\n        writeFieldName(fieldName);\n        writeString(value);\n    }\n}"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_13_fixed/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java",
        "precode": "            _cfgUnqNames = false;",
        "line": 124,
        "aftercode": "package com.fasterxml.jackson.core.json;\n\nimport java.io.IOException;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.base.GeneratorBase;\nimport com.fasterxml.jackson.core.io.CharTypes;\nimport com.fasterxml.jackson.core.io.CharacterEscapes;\nimport com.fasterxml.jackson.core.io.IOContext;\nimport com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\nimport com.fasterxml.jackson.core.util.VersionUtil;\n\n/**\n * Intermediate base class shared by JSON-backed generators\n * like {@link UTF8JsonGenerator} and {@link WriterBasedJsonGenerator}.\n * \n * @since 2.1\n */\npublic abstract class JsonGeneratorImpl extends GeneratorBase\n{\n    /*\n    /**********************************************************\n    /* Constants\n    /**********************************************************\n     */\n\n    /**\n     * This is the default set of escape codes, over 7-bit ASCII range\n     * (first 128 character codes), used for single-byte UTF-8 characters.\n     */\n    protected final static int[] sOutputEscapes = CharTypes.get7BitOutputEscapes();\n    \n    /*\n    /**********************************************************\n    /* Configuration, basic I/O\n    /**********************************************************\n     */\n\n    final protected IOContext _ioContext;\n\n    /*\n    /**********************************************************\n    /* Configuration, output escaping\n    /**********************************************************\n     */\n\n    /**\n     * Currently active set of output escape code definitions (whether\n     * and how to escape or not) for 7-bit ASCII range (first 128\n     * character codes). Defined separately to make potentially\n     * customizable\n     */\n    protected int[] _outputEscapes = sOutputEscapes;\n\n    /**\n     * Value between 128 (0x80) and 65535 (0xFFFF) that indicates highest\n     * Unicode code point that will not need escaping; or 0 to indicate\n     * that all characters can be represented without escaping.\n     * Typically used to force escaping of some portion of character set;\n     * for example to always escape non-ASCII characters (if value was 127).\n     *<p>\n     * NOTE: not all sub-classes make use of this setting.\n     */\n    protected int _maximumNonEscapedChar;\n\n    /**\n     * Definition of custom character escapes to use for generators created\n     * by this factory, if any. If null, standard data format specific\n     * escapes are used.\n     */\n    protected CharacterEscapes _characterEscapes;\n    \n    /*\n    /**********************************************************\n    /* Configuration, other\n    /**********************************************************\n     */\n\n    /**\n     * Separator to use, if any, between root-level values.\n     * \n     * @since 2.1\n     */\n    protected SerializableString _rootValueSeparator\n        = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;\n\n    /**\n     * Flag that is set if quoting is not to be added around\n     * JSON Object property names.\n     *\n     * @since 2.7\n     */\n    protected boolean _cfgUnqNames;\n\n    /*\n    /**********************************************************\n    /* Life-cycle\n    /**********************************************************\n     */\n\n    public JsonGeneratorImpl(IOContext ctxt, int features, ObjectCodec codec)\n    {\n        super(features, codec);\n        _ioContext = ctxt;\n        if (Feature.ESCAPE_NON_ASCII.enabledIn(features)) {\n            // inlined `setHighestNonEscapedChar()`\n            _maximumNonEscapedChar = 127;\n        }\n        _cfgUnqNames = !Feature.QUOTE_FIELD_NAMES.enabledIn(features);\n    }\n\n    /*\n    /**********************************************************\n    /* Overridden configuration methods\n    /**********************************************************\n     */\n\n    @Override\n    public JsonGenerator enable(Feature f) {\n        super.enable(f);\n        if (f == Feature.QUOTE_FIELD_NAMES) {\n_cfgUnqNames = false;\n        }\n\n_cfgUnqNames = true;\n    }\n\n    @Override\n    public JsonGenerator disable(Feature f) {\n        super.disable(f);\n        if (f == Feature.QUOTE_FIELD_NAMES) {\n            _cfgUnqNames = true;\n        }\n        return this;\n    }\n\n    @Override\n    protected void _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures) {\n        super._checkStdFeatureChanges(newFeatureFlags, changedFeatures);\n        _cfgUnqNames = !Feature.QUOTE_FIELD_NAMES.enabledIn(newFeatureFlags);\n    }\n\n    @Override\n    public JsonGenerator setHighestNonEscapedChar(int charCode) {\n        _maximumNonEscapedChar = (charCode < 0) ? 0 : charCode;\n        return this;\n    }\n\n    @Override\n    public int getHighestEscapedChar() {\n        return _maximumNonEscapedChar;\n    }\n\n    @Override\n    public JsonGenerator setCharacterEscapes(CharacterEscapes esc)\n    {\n        _characterEscapes = esc;\n        if (esc == null) { // revert to standard escapes\n            _outputEscapes = sOutputEscapes;\n        } else {\n            _outputEscapes = esc.getEscapeCodesForAscii();\n        }\n        return this;\n    }\n\n    /**\n     * Method for accessing custom escapes factory uses for {@link JsonGenerator}s\n     * it creates.\n     */\n    @Override\n    public CharacterEscapes getCharacterEscapes() {\n        return _characterEscapes;\n    }\n    \n    @Override\n    public JsonGenerator setRootValueSeparator(SerializableString sep) {\n        _rootValueSeparator = sep;\n        return this;\n    }\n    \n    /*\n    /**********************************************************\n    /* Versioned\n    /**********************************************************\n     */\n\n    @Override\n    public Version version() {\n        return VersionUtil.versionFor(getClass());\n    }\n\n    /*\n    /**********************************************************\n    /* Partial API\n    /**********************************************************\n     */\n\n    // // Overrides just to make things final, to possibly help with inlining\n    \n    @Override\n    public final void writeStringField(String fieldName, String value) throws IOException\n    {\n        writeFieldName(fieldName);\n        writeString(value);\n    }\n}"
    },
    {
        "id": 20,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_13_fixed/src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java",
        "precode": "        if (f == Feature.QUOTE_FIELD_NAMES) {",
        "line": 121,
        "aftercode": "if(f){"
    }
]