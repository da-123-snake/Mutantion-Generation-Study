[
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                if (f != null) {",
        "line": 588,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                if (f == TokenFilter.INCLUDE_ALL) {",
        "line": 585,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                        if (t != null) {",
        "line": 575,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                    if (ctxt.inArray()) {",
        "line": 252,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                    if (_includePath) {",
        "line": 573,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                    f = _headContext.setFieldName(name);",
        "line": 549,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                f = _itemFilter;",
        "line": 584,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "        if (t == null) {",
        "line": 282,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "        if (t == null) {",
        "line": 282,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                        if (_includePath) {",
        "line": 567,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                    if (f == TokenFilter.INCLUDE_ALL) {",
        "line": 550,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                    f = _headContext.checkValue(f);",
        "line": 573,
        "aftercode": "\n\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return (_currToken = t);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                break;\n            }\n        }\n    }\n\n    /**\n     * Method called when a new potentially included context is found.\n     */\n    protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot)\n        throws IOException\n    {\n        main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return t;\n            }\n            TokenFilter f;\n\n            // One simplification here: we know for a fact that the item filter is\n            // neither null nor 'include all', for most cases; the only exception\n            // being FIELD_NAME handling\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }\n        }\n    }\n\n    private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException\n    {\n        _exposedContext = buffRoot;\n        TokenFilterContext ctxt = buffRoot;\n        JsonToken t = ctxt.nextTokenToRead();\n        if (t != null) {\n            return t;\n        }\n        while (true) {\n            // all done with buffered stuff?\n            if (ctxt == _headContext) {\n                throw _constructError(\"Internal error: failed to locate expected buffered tokens\");\n                /*\n                _exposedContext = null;\n                break;\n                */\n            }\n            // If not, traverse down the context chain\n            ctxt = _exposedContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) { // should never occur\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n            t = _exposedContext.nextTokenToRead();\n            if (t != null) {\n                return t;\n            }\n        }\n    }\n    \n    @Override\n    public JsonToken nextValue() throws IOException {\n        // Re-implemented same as ParserMinimalBase:\n        JsonToken t = nextToken();\n        if (t == JsonToken.FIELD_NAME) {\n            t = nextToken();\n        }\n        return t;\n    }\n\n    /**\n     * Need to override, re-implement similar to how method defined in\n     * {@link com.fasterxml.jackson.core.base.ParserMinimalBase}, to keep\n     * state correct here.\n     */\n    @Override\n    public JsonParser skipChildren() throws IOException\n    {\n        if ((_currToken != JsonToken.START_OBJECT)\n            && (_currToken != JsonToken.START_ARRAY)) {\n            return this;\n        }\n        int open = 1;\n\n        // Since proper matching of start/end markers is handled\n        // by nextToken(), we'll just count nesting levels here\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) { // not ideal but for now, just return\n                return this;\n            }\n            if (t.isStructStart()) {\n                ++open;\n            } else if (t.isStructEnd()) {\n                if (--open == 0) {\n                    return this;\n                }\n            }\n        }\n    }\n    \n    /*\n    /**********************************************************\n    /* Public API, access to token information, text\n    /**********************************************************\n     */\n\n    @Override public String getText() throws IOException { return delegate.getText();  }\n    @Override public boolean hasTextCharacters() { return delegate.hasTextCharacters(); }\n    @Override public char[] getTextCharacters() throws IOException { return delegate.getTextCharacters(); }\n    @Override public int getTextLength() throws IOException { return delegate.getTextLength(); }\n    @Override public int getTextOffset() throws IOException { return delegate.getTextOffset(); }\n\n    /*\n    /**********************************************************\n    /* Public API, access to token information, numeric\n    /**********************************************************\n     */\n    \n    @Override\n    public BigInteger getBigIntegerValue() throws IOException { return delegate.getBigIntegerValue(); }\n\n    @Override\n    public boolean getBooleanValue() throws IOException { return delegate.getBooleanValue(); }\n    \n    @Override\n    public byte getByteValue() throws IOException { return delegate.getByteValue(); }\n\n    @Override\n    public short getShortValue() throws IOException { return delegate.getShortValue(); }\n\n    @Override\n    public BigDecimal getDecimalValue() throws IOException { return delegate.getDecimalValue(); }\n\n    @Override\n    public double getDoubleValue() throws IOException { return delegate.getDoubleValue(); }\n\n    @Override\n    public float getFloatValue() throws IOException { return delegate.getFloatValue(); }\n\n    @Override\n    public int getIntValue() throws IOException { return delegate.getIntValue(); }\n\n    @Override\n    public long getLongValue() throws IOException { return delegate.getLongValue(); }\n\n    @Override\n    public NumberType getNumberType() throws IOException { return delegate.getNumberType(); }\n\n    @Override\n    public Number getNumberValue() throws IOException { return delegate.getNumberValue(); }\n\n    /*\n    /**********************************************************\n    /* Public API, access to token information, coercion/conversion\n    /**********************************************************\n     */\n    \n    @Override public int getValueAsInt() throws IOException { return delegate.getValueAsInt(); }\n    @Override public int getValueAsInt(int defaultValue) throws IOException { return delegate.getValueAsInt(defaultValue); }\n    @Override public long getValueAsLong() throws IOException { return delegate.getValueAsLong(); }\n    @Override public long getValueAsLong(long defaultValue) throws IOException { return delegate.getValueAsLong(defaultValue); }\n    @Override public double getValueAsDouble() throws IOException { return delegate.getValueAsDouble(); }\n    @Override public double getValueAsDouble(double defaultValue) throws IOException { return delegate.getValueAsDouble(defaultValue); }\n    @Override public boolean getValueAsBoolean() throws IOException { return delegate.getValueAsBoolean(); }\n    @Override public boolean getValueAsBoolean(boolean defaultValue) throws IOException { return delegate.getValueAsBoolean(defaultValue); }\n    @Override public String getValueAsString() throws IOException { return delegate.getValueAsString(); }\n    @Override public String getValueAsString(String defaultValue) throws IOException { return delegate.getValueAsString(defaultValue); }\n    \n    /*\n    /**********************************************************\n    /* Public API, access to token values, other\n    /**********************************************************\n     */\n\n    @Override public Object getEmbeddedObject() throws IOException { return delegate.getEmbeddedObject(); }\n    @Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { return delegate.getBinaryValue(b64variant); }\n    @Override public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException { return delegate.readBinaryValue(b64variant, out); }\n    @Override public JsonLocation getTokenLocation() { return delegate.getTokenLocation(); }\n\n    /*\n    /**********************************************************\n    /* Internal helper methods\n    /**********************************************************\n     */\n\n    protected JsonStreamContext _filterContext() {\n        if (_exposedContext != null) {\n            return _exposedContext;\n        }\n        return _headContext;\n    }\n  \n}package com.fasterxml.jackson.core.filter;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.util.JsonParserDelegate;\n\nimport static com.fasterxml.jackson.core.JsonTokenId.*;\n\n/**\n * Specialized {@link JsonParserDelegate} that allows use of\n * {@link TokenFilter} for outputting a subset of content that\n * is visible to caller\n * \n * @since 2.6\n */\npublic class FilteringParserDelegate extends JsonParserDelegate\n{\n    /*\n    /**********************************************************\n    /* Configuration\n    /**********************************************************\n     */\n    \n    /**\n     * Object consulted to determine whether to write parts of content generator\n     * is asked to write or not.\n     */\n    protected TokenFilter rootFilter;\n\n    /**\n     * Flag that determines whether filtering will continue after the first\n     * match is indicated or not: if `false`, output is based on just the first\n     * full match (returning {@link TokenFilter#INCLUDE_ALL}) and no more\n     * checks are made; if `true` then filtering will be applied as necessary\n     * until end of content.\n     */\n    protected boolean _allowMultipleMatches;\n\n    /**\n     * Flag that determines whether path leading up to included content should\n     * also be automatically included or not. If `false`, no path inclusion is\n     * done and only explicitly included entries are output; if `true` then\n     * path from main level down to match is also included as necessary.\n     */\n    protected boolean _includePath;\n\n    /* NOTE: this feature is included in the first version (2.6), but\n     * there is no public API to enable it, yet, since there isn't an\n     * actual use case. But it seemed possible need could arise, which\n     * is feature has not yet been removed. If no use is found within\n     * first version or two, just remove.\n     * \n     * Marked as deprecated since its status is uncertain.\n     */\n    @Deprecated\n    protected boolean _includeImmediateParent;\n    \n    /*\n    /**********************************************************\n    /* State\n    /**********************************************************\n     */\n\n    /**\n     * Last token retrieved via {@link #nextToken}, if any.\n     * Null before the first call to <code>nextToken()</code>,\n     * as well as if token has been explicitly cleared\n     */\n    protected JsonToken _currToken;\n\n    /**\n     * Last cleared token, if any: that is, value that was in\n     * effect when {@link #clearCurrentToken} was called.\n     */\n    protected JsonToken _lastClearedToken;\n    \n    /**\n     * During traversal this is the actual \"open\" parse tree, which sometimes\n     * is the same as {@link #_exposedContext}, and at other times is ahead\n     * of it. Note that this context is never null.\n     */\n    protected TokenFilterContext _headContext;\n\n    /**\n     * In cases where {@link #_headContext} is \"ahead\" of context exposed to\n     * caller, this context points to what is currently exposed to caller.\n     * When the two are in sync, this context reference will be <code>null</code>.\n     */\n    protected TokenFilterContext _exposedContext;\n\n    /**\n     * State that applies to the item within container, used where applicable.\n     * Specifically used to pass inclusion state between property name and\n     * property, and also used for array elements.\n     */\n    protected TokenFilter _itemFilter;\n    \n    /**\n     * Number of tokens for which {@link TokenFilter#INCLUDE_ALL}\n     * has been returned.\n     */\n    protected int _matchCount;\n\n    /*\n    /**********************************************************\n    /* Construction, initialization\n    /**********************************************************\n     */\n\n    public FilteringParserDelegate(JsonParser p, TokenFilter f,\n            boolean includePath, boolean allowMultipleMatches)\n    {\n        super(p);\n        rootFilter = f;\n        // and this is the currently active filter for root values\n        _itemFilter = f;\n        _headContext = TokenFilterContext.createRootContext(f);\n        _includePath = includePath;\n        _allowMultipleMatches = allowMultipleMatches;\n    }\n\n    /*\n    /**********************************************************\n    /* Extended API\n    /**********************************************************\n     */\n\n    public TokenFilter getFilter() { return rootFilter; }\n\n    /**\n     * Accessor for finding number of matches, where specific token and sub-tree\n     * starting (if structured type) are passed.\n     */\n    public int getMatchCount() {\n        return _matchCount;\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, token accessors\n    /**********************************************************\n     */\n\n    @Override public JsonToken getCurrentToken() { return _currToken; }\n\n    @Override public final int getCurrentTokenId() {\n        final JsonToken t = _currToken;\n        return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();\n    }\n\n    @Override public boolean hasCurrentToken() { return _currToken != null; }\n    @Override public boolean hasTokenId(int id) {\n        final JsonToken t = _currToken;\n        if (t == null) {\n            return (JsonTokenId.ID_NO_TOKEN == id);\n        }\n        return t.id() == id;\n    }\n\n    @Override public final boolean hasToken(JsonToken t) {\n        return (_currToken == t);\n    }\n    \n    @Override public boolean isExpectedStartArrayToken() { return _currToken == JsonToken.START_ARRAY; }\n    @Override public boolean isExpectedStartObjectToken() { return _currToken == JsonToken.START_OBJECT; }\n\n    @Override public JsonLocation getCurrentLocation() { return delegate.getCurrentLocation(); }\n\n    @Override\n    public JsonStreamContext getParsingContext() {\n        return _filterContext();\n    }\n    \n    // !!! TODO: Verify it works as expected: copied from standard JSON parser impl\n    @Override\n    public String getCurrentName() throws IOException {\n        JsonStreamContext ctxt = _filterContext();\n        if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\n            JsonStreamContext parent = ctxt.getParent();\n            return (parent == null) ? null : parent.getCurrentName();\n        }\n        return ctxt.getCurrentName();\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, token state overrides\n    /**********************************************************\n     */\n\n    @Override\n    public void clearCurrentToken() {\n        if (_currToken != null) {\n            _lastClearedToken = _currToken;\n            _currToken = null;\n        }\n    }\n\n    @Override\n    public JsonToken getLastClearedToken() { return _lastClearedToken; }\n\n    @Override\n    public void overrideCurrentName(String name) {\n        /* 14-Apr-2015, tatu: Not sure whether this can be supported, and if so,\n         *    what to do with it... Delegation won't work for sure, so let's for\n         *    now throw an exception\n         */\n        throw new UnsupportedOperationException(\"Can not currently override name during filtering read\");\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, traversal\n    /**********************************************************\n     */\n\n    @Override\n    public JsonToken nextToken() throws IOException\n    {\n    \t//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken\n    \t// check for no buffered context _exposedContext - null\n    \t//If all the conditions matches then check for scalar / non-scalar property\n    \tif(!_allowMultipleMatches && _currToken != null && _exposedContext == null){\n    \t\t//if not scalar and ended successfully, then return null\n    \t\tif((_currToken.isStructEnd()  && _headContext.isStartHandled()) ){\n    \t\t\treturn (_currToken = null);\n    \t\t}\n    \t\t//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once\n    \t\t// then return null \n    \t\telse if(_currToken.isScalarValue() && !_headContext.isStartHandled() && !_includePath \n    \t\t\t\t&& _itemFilter == TokenFilter.INCLUDE_ALL) {\n    \t\t\treturn (_currToken = null);\n    \t\t}\n    \t}\n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n// Is this guaranteed to work without further checks?\n//                        if (t != JsonToken.START_ARRAY) {\n                        _currToken = t;\n                        return t;\n                    }\n\n                    // Almost! Most likely still have the current token;\n                    // with the sole exception of \n                    /*\n                    t = delegate.getCurrentToken();\n                    if (t != JsonToken.FIELD_NAME) {\n                        _currToken = t;\n                        return t;\n                    }\n                    */\n                    break;\n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // If not, need to read more. If we got any:\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // no strict need to close, since we have no state here\n            return (_currToken = t);\n        }\n\n        // otherwise... to include or not?\n        TokenFilter f;\n        \n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    if (!_includePath) {\n                        // Minor twist here: if parent NOT included, may need to induce output of\n                        // surrounding START_OBJECT/END_OBJECT\n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                            _exposedContext = _headContext;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    if (_includePath) {\n                        return (_currToken = t);\n                    }\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }\n\n        // We get here if token was not yet found; offlined handling\n        return _nextToken2();\n    }\n\n    /**\n     * Offlined handling for cases where there was no buffered token to\n     * return, and the token read next could not be returned as-is,\n     * at least not yet, but where we have not yet established that\n     * buffering is needed.\n     */\n    protected final JsonToken _nextToken2() throws IOException\n    {\n        main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return (_currToken = t);\n            }\n            TokenFilter f;\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {"
    },
    {
        "id": 18,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                if (f != null) {",
        "line": 720,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                    if (f == TokenFilter.INCLUDE_ALL) {",
        "line": 566,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "        JsonToken t = delegate.nextToken();",
        "line": 281,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "        TokenFilterContext ctxt = _exposedContext;",
        "line": 240,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                if (ctxt == null) { // should never occur",
        "line": 274,
        "aftercode": ""
    },
    {
        "id": 19,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "            t = nextToken();",
        "line": 768,
        "aftercode": "t = \"null\";"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "            while (true) {",
        "line": 243,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                if (ctxt == _headContext) {",
        "line": 250,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                        return (_currToken = t);",
        "line": 573,
        "aftercode": "\n\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                break;\n            }\n        }\n    }\n\n    /**\n     * Method called when a new potentially included context is found.\n     */\n    protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot)\n        throws IOException\n    {\n        main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return t;\n            }\n            TokenFilter f;\n\n            // One simplification here: we know for a fact that the item filter is\n            // neither null nor 'include all', for most cases; the only exception\n            // being FIELD_NAME handling\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }\n        }\n    }\n\n    private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException\n    {\n        _exposedContext = buffRoot;\n        TokenFilterContext ctxt = buffRoot;\n        JsonToken t = ctxt.nextTokenToRead();\n        if (t != null) {\n            return t;\n        }\n        while (true) {\n            // all done with buffered stuff?\n            if (ctxt == _headContext) {\n                throw _constructError(\"Internal error: failed to locate expected buffered tokens\");\n                /*\n                _exposedContext = null;\n                break;\n                */\n            }\n            // If not, traverse down the context chain\n            ctxt = _exposedContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) { // should never occur\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n            t = _exposedContext.nextTokenToRead();\n            if (t != null) {\n                return t;\n            }\n        }\n    }\n    \n    @Override\n    public JsonToken nextValue() throws IOException {\n        // Re-implemented same as ParserMinimalBase:\n        JsonToken t = nextToken();\n        if (t == JsonToken.FIELD_NAME) {\n            t = nextToken();\n        }\n        return t;\n    }\n\n    /**\n     * Need to override, re-implement similar to how method defined in\n     * {@link com.fasterxml.jackson.core.base.ParserMinimalBase}, to keep\n     * state correct here.\n     */\n    @Override\n    public JsonParser skipChildren() throws IOException\n    {\n        if ((_currToken != JsonToken.START_OBJECT)\n            && (_currToken != JsonToken.START_ARRAY)) {\n            return this;\n        }\n        int open = 1;\n\n        // Since proper matching of start/end markers is handled\n        // by nextToken(), we'll just count nesting levels here\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) { // not ideal but for now, just return\n                return this;\n            }\n            if (t.isStructStart()) {\n                ++open;\n            } else if (t.isStructEnd()) {\n                if (--open == 0) {\n                    return this;\n                }\n            }\n        }\n    }\n    \n    /*\n    /**********************************************************\n    /* Public API, access to token information, text\n    /**********************************************************\n     */\n\n    @Override public String getText() throws IOException { return delegate.getText();  }\n    @Override public boolean hasTextCharacters() { return delegate.hasTextCharacters(); }\n    @Override public char[] getTextCharacters() throws IOException { return delegate.getTextCharacters(); }\n    @Override public int getTextLength() throws IOException { return delegate.getTextLength(); }\n    @Override public int getTextOffset() throws IOException { return delegate.getTextOffset(); }\n\n    /*\n    /**********************************************************\n    /* Public API, access to token information, numeric\n    /**********************************************************\n     */\n    \n    @Override\n    public BigInteger getBigIntegerValue() throws IOException { return delegate.getBigIntegerValue(); }\n\n    @Override\n    public boolean getBooleanValue() throws IOException { return delegate.getBooleanValue(); }\n    \n    @Override\n    public byte getByteValue() throws IOException { return delegate.getByteValue(); }\n\n    @Override\n    public short getShortValue() throws IOException { return delegate.getShortValue(); }\n\n    @Override\n    public BigDecimal getDecimalValue() throws IOException { return delegate.getDecimalValue(); }\n\n    @Override\n    public double getDoubleValue() throws IOException { return delegate.getDoubleValue(); }\n\n    @Override\n    public float getFloatValue() throws IOException { return delegate.getFloatValue(); }\n\n    @Override\n    public int getIntValue() throws IOException { return delegate.getIntValue(); }\n\n    @Override\n    public long getLongValue() throws IOException { return delegate.getLongValue(); }\n\n    @Override\n    public NumberType getNumberType() throws IOException { return delegate.getNumberType(); }\n\n    @Override\n    public Number getNumberValue() throws IOException { return delegate.getNumberValue(); }\n\n    /*\n    /**********************************************************\n    /* Public API, access to token information, coercion/conversion\n    /**********************************************************\n     */\n    \n    @Override public int getValueAsInt() throws IOException { return delegate.getValueAsInt(); }\n    @Override public int getValueAsInt(int defaultValue) throws IOException { return delegate.getValueAsInt(defaultValue); }\n    @Override public long getValueAsLong() throws IOException { return delegate.getValueAsLong(); }\n    @Override public long getValueAsLong(long defaultValue) throws IOException { return delegate.getValueAsLong(defaultValue); }\n    @Override public double getValueAsDouble() throws IOException { return delegate.getValueAsDouble(); }\n    @Override public double getValueAsDouble(double defaultValue) throws IOException { return delegate.getValueAsDouble(defaultValue); }\n    @Override public boolean getValueAsBoolean() throws IOException { return delegate.getValueAsBoolean(); }\n    @Override public boolean getValueAsBoolean(boolean defaultValue) throws IOException { return delegate.getValueAsBoolean(defaultValue); }\n    @Override public String getValueAsString() throws IOException { return delegate.getValueAsString(); }\n    @Override public String getValueAsString(String defaultValue) throws IOException { return delegate.getValueAsString(defaultValue); }\n    \n    /*\n    /**********************************************************\n    /* Public API, access to token values, other\n    /**********************************************************\n     */\n\n    @Override public Object getEmbeddedObject() throws IOException { return delegate.getEmbeddedObject(); }\n    @Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { return delegate.getBinaryValue(b64variant); }\n    @Override public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException { return delegate.readBinaryValue(b64variant, out); }\n    @Override public JsonLocation getTokenLocation() { return delegate.getTokenLocation(); }\n\n    /*\n    /**********************************************************\n    /* Internal helper methods\n    /**********************************************************\n     */\n\n    protected JsonStreamContext _filterContext() {\n        if (_exposedContext != null) {\n            return _exposedContext;\n        }\n        return _headContext;\n    }\n  \n}package com.fasterxml.jackson.core.filter;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.util.JsonParserDelegate;\n\nimport static com.fasterxml.jackson.core.JsonTokenId.*;\n\n/**\n * Specialized {@link JsonParserDelegate} that allows use of\n * {@link TokenFilter} for outputting a subset of content that\n * is visible to caller\n * \n * @since 2.6\n */\npublic class FilteringParserDelegate extends JsonParserDelegate\n{\n    /*\n    /**********************************************************\n    /* Configuration\n    /**********************************************************\n     */\n    \n    /**\n     * Object consulted to determine whether to write parts of content generator\n     * is asked to write or not.\n     */\n    protected TokenFilter rootFilter;\n\n    /**\n     * Flag that determines whether filtering will continue after the first\n     * match is indicated or not: if `false`, output is based on just the first\n     * full match (returning {@link TokenFilter#INCLUDE_ALL}) and no more\n     * checks are made; if `true` then filtering will be applied as necessary\n     * until end of content.\n     */\n    protected boolean _allowMultipleMatches;\n\n    /**\n     * Flag that determines whether path leading up to included content should\n     * also be automatically included or not. If `false`, no path inclusion is\n     * done and only explicitly included entries are output; if `true` then\n     * path from main level down to match is also included as necessary.\n     */\n    protected boolean _includePath;\n\n    /* NOTE: this feature is included in the first version (2.6), but\n     * there is no public API to enable it, yet, since there isn't an\n     * actual use case. But it seemed possible need could arise, which\n     * is feature has not yet been removed. If no use is found within\n     * first version or two, just remove.\n     * \n     * Marked as deprecated since its status is uncertain.\n     */\n    @Deprecated\n    protected boolean _includeImmediateParent;\n    \n    /*\n    /**********************************************************\n    /* State\n    /**********************************************************\n     */\n\n    /**\n     * Last token retrieved via {@link #nextToken}, if any.\n     * Null before the first call to <code>nextToken()</code>,\n     * as well as if token has been explicitly cleared\n     */\n    protected JsonToken _currToken;\n\n    /**\n     * Last cleared token, if any: that is, value that was in\n     * effect when {@link #clearCurrentToken} was called.\n     */\n    protected JsonToken _lastClearedToken;\n    \n    /**\n     * During traversal this is the actual \"open\" parse tree, which sometimes\n     * is the same as {@link #_exposedContext}, and at other times is ahead\n     * of it. Note that this context is never null.\n     */\n    protected TokenFilterContext _headContext;\n\n    /**\n     * In cases where {@link #_headContext} is \"ahead\" of context exposed to\n     * caller, this context points to what is currently exposed to caller.\n     * When the two are in sync, this context reference will be <code>null</code>.\n     */\n    protected TokenFilterContext _exposedContext;\n\n    /**\n     * State that applies to the item within container, used where applicable.\n     * Specifically used to pass inclusion state between property name and\n     * property, and also used for array elements.\n     */\n    protected TokenFilter _itemFilter;\n    \n    /**\n     * Number of tokens for which {@link TokenFilter#INCLUDE_ALL}\n     * has been returned.\n     */\n    protected int _matchCount;\n\n    /*\n    /**********************************************************\n    /* Construction, initialization\n    /**********************************************************\n     */\n\n    public FilteringParserDelegate(JsonParser p, TokenFilter f,\n            boolean includePath, boolean allowMultipleMatches)\n    {\n        super(p);\n        rootFilter = f;\n        // and this is the currently active filter for root values\n        _itemFilter = f;\n        _headContext = TokenFilterContext.createRootContext(f);\n        _includePath = includePath;\n        _allowMultipleMatches = allowMultipleMatches;\n    }\n\n    /*\n    /**********************************************************\n    /* Extended API\n    /**********************************************************\n     */\n\n    public TokenFilter getFilter() { return rootFilter; }\n\n    /**\n     * Accessor for finding number of matches, where specific token and sub-tree\n     * starting (if structured type) are passed.\n     */\n    public int getMatchCount() {\n        return _matchCount;\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, token accessors\n    /**********************************************************\n     */\n\n    @Override public JsonToken getCurrentToken() { return _currToken; }\n\n    @Override public final int getCurrentTokenId() {\n        final JsonToken t = _currToken;\n        return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();\n    }\n\n    @Override public boolean hasCurrentToken() { return _currToken != null; }\n    @Override public boolean hasTokenId(int id) {\n        final JsonToken t = _currToken;\n        if (t == null) {\n            return (JsonTokenId.ID_NO_TOKEN == id);\n        }\n        return t.id() == id;\n    }\n\n    @Override public final boolean hasToken(JsonToken t) {\n        return (_currToken == t);\n    }\n    \n    @Override public boolean isExpectedStartArrayToken() { return _currToken == JsonToken.START_ARRAY; }\n    @Override public boolean isExpectedStartObjectToken() { return _currToken == JsonToken.START_OBJECT; }\n\n    @Override public JsonLocation getCurrentLocation() { return delegate.getCurrentLocation(); }\n\n    @Override\n    public JsonStreamContext getParsingContext() {\n        return _filterContext();\n    }\n    \n    // !!! TODO: Verify it works as expected: copied from standard JSON parser impl\n    @Override\n    public String getCurrentName() throws IOException {\n        JsonStreamContext ctxt = _filterContext();\n        if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\n            JsonStreamContext parent = ctxt.getParent();\n            return (parent == null) ? null : parent.getCurrentName();\n        }\n        return ctxt.getCurrentName();\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, token state overrides\n    /**********************************************************\n     */\n\n    @Override\n    public void clearCurrentToken() {\n        if (_currToken != null) {\n            _lastClearedToken = _currToken;\n            _currToken = null;\n        }\n    }\n\n    @Override\n    public JsonToken getLastClearedToken() { return _lastClearedToken; }\n\n    @Override\n    public void overrideCurrentName(String name) {\n        /* 14-Apr-2015, tatu: Not sure whether this can be supported, and if so,\n         *    what to do with it... Delegation won't work for sure, so let's for\n         *    now throw an exception\n         */\n        throw new UnsupportedOperationException(\"Can not currently override name during filtering read\");\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, traversal\n    /**********************************************************\n     */\n\n    @Override\n    public JsonToken nextToken() throws IOException\n    {\n    \t//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken\n    \t// check for no buffered context _exposedContext - null\n    \t//If all the conditions matches then check for scalar / non-scalar property\n    \tif(!_allowMultipleMatches && _currToken != null && _exposedContext == null){\n    \t\t//if not scalar and ended successfully, then return null\n    \t\tif((_currToken.isStructEnd()  && _headContext.isStartHandled()) ){\n    \t\t\treturn (_currToken = null);\n    \t\t}\n    \t\t//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once\n    \t\t// then return null \n    \t\telse if(_currToken.isScalarValue() && !_headContext.isStartHandled() && !_includePath \n    \t\t\t\t&& _itemFilter == TokenFilter.INCLUDE_ALL) {\n    \t\t\treturn (_currToken = null);\n    \t\t}\n    \t}\n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n// Is this guaranteed to work without further checks?\n//                        if (t != JsonToken.START_ARRAY) {\n                        _currToken = t;\n                        return t;\n                    }\n\n                    // Almost! Most likely still have the current token;\n                    // with the sole exception of \n                    /*\n                    t = delegate.getCurrentToken();\n                    if (t != JsonToken.FIELD_NAME) {\n                        _currToken = t;\n                        return t;\n                    }\n                    */\n                    break;\n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // If not, need to read more. If we got any:\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // no strict need to close, since we have no state here\n            return (_currToken = t);\n        }\n\n        // otherwise... to include or not?\n        TokenFilter f;\n        \n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    if (!_includePath) {\n                        // Minor twist here: if parent NOT included, may need to induce output of\n                        // surrounding START_OBJECT/END_OBJECT\n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                            _exposedContext = _headContext;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    if (_includePath) {\n                        return (_currToken = t);\n                    }\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }\n\n        // We get here if token was not yet found; offlined handling\n        return _nextToken2();\n    }\n\n    /**\n     * Offlined handling for cases where there was no buffered token to\n     * return, and the token read next could not be returned as-is,\n     * at least not yet, but where we have not yet established that\n     * buffering is needed.\n     */\n    protected final JsonToken _nextToken2() throws IOException\n    {\n        main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return (_currToken = t);\n            }\n            TokenFilter f;\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                if (t != null) {",
        "line": 245,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                if (f != null) {",
        "line": 588,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                    return (_currToken = t);",
        "line": 573,
        "aftercode": "\n\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return (_currToken = t);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                break;\n            }\n        }\n    }\n\n    /**\n     * Method called when a new potentially included context is found.\n     */\n    protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot)\n        throws IOException\n    {\n        main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return t;\n            }\n            TokenFilter f;\n\n            // One simplification here: we know for a fact that the item filter is\n            // neither null nor 'include all', for most cases; the only exception\n            // being FIELD_NAME handling\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }\n        }\n    }\n\n    private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException\n    {\n        _exposedContext = buffRoot;\n        TokenFilterContext ctxt = buffRoot;\n        JsonToken t = ctxt.nextTokenToRead();\n        if (t != null) {\n            return t;\n        }\n        while (true) {\n            // all done with buffered stuff?\n            if (ctxt == _headContext) {\n                throw _constructError(\"Internal error: failed to locate expected buffered tokens\");\n                /*\n                _exposedContext = null;\n                break;\n                */\n            }\n            // If not, traverse down the context chain\n            ctxt = _exposedContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) { // should never occur\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n            t = _exposedContext.nextTokenToRead();\n            if (t != null) {\n                return t;\n            }\n        }\n    }\n    \n    @Override\n    public JsonToken nextValue() throws IOException {\n        // Re-implemented same as ParserMinimalBase:\n        JsonToken t = nextToken();\n        if (t == JsonToken.FIELD_NAME) {\n            t = nextToken();\n        }\n        return t;\n    }\n\n    /**\n     * Need to override, re-implement similar to how method defined in\n     * {@link com.fasterxml.jackson.core.base.ParserMinimalBase}, to keep\n     * state correct here.\n     */\n    @Override\n    public JsonParser skipChildren() throws IOException\n    {\n        if ((_currToken != JsonToken.START_OBJECT)\n            && (_currToken != JsonToken.START_ARRAY)) {\n            return this;\n        }\n        int open = 1;\n\n        // Since proper matching of start/end markers is handled\n        // by nextToken(), we'll just count nesting levels here\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) { // not ideal but for now, just return\n                return this;\n            }\n            if (t.isStructStart()) {\n                ++open;\n            } else if (t.isStructEnd()) {\n                if (--open == 0) {\n                    return this;\n                }\n            }\n        }\n    }\n    \n    /*\n    /**********************************************************\n    /* Public API, access to token information, text\n    /**********************************************************\n     */\n\n    @Override public String getText() throws IOException { return delegate.getText();  }\n    @Override public boolean hasTextCharacters() { return delegate.hasTextCharacters(); }\n    @Override public char[] getTextCharacters() throws IOException { return delegate.getTextCharacters(); }\n    @Override public int getTextLength() throws IOException { return delegate.getTextLength(); }\n    @Override public int getTextOffset() throws IOException { return delegate.getTextOffset(); }\n\n    /*\n    /**********************************************************\n    /* Public API, access to token information, numeric\n    /**********************************************************\n     */\n    \n    @Override\n    public BigInteger getBigIntegerValue() throws IOException { return delegate.getBigIntegerValue(); }\n\n    @Override\n    public boolean getBooleanValue() throws IOException { return delegate.getBooleanValue(); }\n    \n    @Override\n    public byte getByteValue() throws IOException { return delegate.getByteValue(); }\n\n    @Override\n    public short getShortValue() throws IOException { return delegate.getShortValue(); }\n\n    @Override\n    public BigDecimal getDecimalValue() throws IOException { return delegate.getDecimalValue(); }\n\n    @Override\n    public double getDoubleValue() throws IOException { return delegate.getDoubleValue(); }\n\n    @Override\n    public float getFloatValue() throws IOException { return delegate.getFloatValue(); }\n\n    @Override\n    public int getIntValue() throws IOException { return delegate.getIntValue(); }\n\n    @Override\n    public long getLongValue() throws IOException { return delegate.getLongValue(); }\n\n    @Override\n    public NumberType getNumberType() throws IOException { return delegate.getNumberType(); }\n\n    @Override\n    public Number getNumberValue() throws IOException { return delegate.getNumberValue(); }\n\n    /*\n    /**********************************************************\n    /* Public API, access to token information, coercion/conversion\n    /**********************************************************\n     */\n    \n    @Override public int getValueAsInt() throws IOException { return delegate.getValueAsInt(); }\n    @Override public int getValueAsInt(int defaultValue) throws IOException { return delegate.getValueAsInt(defaultValue); }\n    @Override public long getValueAsLong() throws IOException { return delegate.getValueAsLong(); }\n    @Override public long getValueAsLong(long defaultValue) throws IOException { return delegate.getValueAsLong(defaultValue); }\n    @Override public double getValueAsDouble() throws IOException { return delegate.getValueAsDouble(); }\n    @Override public double getValueAsDouble(double defaultValue) throws IOException { return delegate.getValueAsDouble(defaultValue); }\n    @Override public boolean getValueAsBoolean() throws IOException { return delegate.getValueAsBoolean(); }\n    @Override public boolean getValueAsBoolean(boolean defaultValue) throws IOException { return delegate.getValueAsBoolean(defaultValue); }\n    @Override public String getValueAsString() throws IOException { return delegate.getValueAsString(); }\n    @Override public String getValueAsString(String defaultValue) throws IOException { return delegate.getValueAsString(defaultValue); }\n    \n    /*\n    /**********************************************************\n    /* Public API, access to token values, other\n    /**********************************************************\n     */\n\n    @Override public Object getEmbeddedObject() throws IOException { return delegate.getEmbeddedObject(); }\n    @Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { return delegate.getBinaryValue(b64variant); }\n    @Override public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException { return delegate.readBinaryValue(b64variant, out); }\n    @Override public JsonLocation getTokenLocation() { return delegate.getTokenLocation(); }\n\n    /*\n    /**********************************************************\n    /* Internal helper methods\n    /**********************************************************\n     */\n\n    protected JsonStreamContext _filterContext() {\n        if (_exposedContext != null) {\n            return _exposedContext;\n        }\n        return _headContext;\n    }\n  \n}package com.fasterxml.jackson.core.filter;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.util.JsonParserDelegate;\n\nimport static com.fasterxml.jackson.core.JsonTokenId.*;\n\n/**\n * Specialized {@link JsonParserDelegate} that allows use of\n * {@link TokenFilter} for outputting a subset of content that\n * is visible to caller\n * \n * @since 2.6\n */\npublic class FilteringParserDelegate extends JsonParserDelegate\n{\n    /*\n    /**********************************************************\n    /* Configuration\n    /**********************************************************\n     */\n    \n    /**\n     * Object consulted to determine whether to write parts of content generator\n     * is asked to write or not.\n     */\n    protected TokenFilter rootFilter;\n\n    /**\n     * Flag that determines whether filtering will continue after the first\n     * match is indicated or not: if `false`, output is based on just the first\n     * full match (returning {@link TokenFilter#INCLUDE_ALL}) and no more\n     * checks are made; if `true` then filtering will be applied as necessary\n     * until end of content.\n     */\n    protected boolean _allowMultipleMatches;\n\n    /**\n     * Flag that determines whether path leading up to included content should\n     * also be automatically included or not. If `false`, no path inclusion is\n     * done and only explicitly included entries are output; if `true` then\n     * path from main level down to match is also included as necessary.\n     */\n    protected boolean _includePath;\n\n    /* NOTE: this feature is included in the first version (2.6), but\n     * there is no public API to enable it, yet, since there isn't an\n     * actual use case. But it seemed possible need could arise, which\n     * is feature has not yet been removed. If no use is found within\n     * first version or two, just remove.\n     * \n     * Marked as deprecated since its status is uncertain.\n     */\n    @Deprecated\n    protected boolean _includeImmediateParent;\n    \n    /*\n    /**********************************************************\n    /* State\n    /**********************************************************\n     */\n\n    /**\n     * Last token retrieved via {@link #nextToken}, if any.\n     * Null before the first call to <code>nextToken()</code>,\n     * as well as if token has been explicitly cleared\n     */\n    protected JsonToken _currToken;\n\n    /**\n     * Last cleared token, if any: that is, value that was in\n     * effect when {@link #clearCurrentToken} was called.\n     */\n    protected JsonToken _lastClearedToken;\n    \n    /**\n     * During traversal this is the actual \"open\" parse tree, which sometimes\n     * is the same as {@link #_exposedContext}, and at other times is ahead\n     * of it. Note that this context is never null.\n     */\n    protected TokenFilterContext _headContext;\n\n    /**\n     * In cases where {@link #_headContext} is \"ahead\" of context exposed to\n     * caller, this context points to what is currently exposed to caller.\n     * When the two are in sync, this context reference will be <code>null</code>.\n     */\n    protected TokenFilterContext _exposedContext;\n\n    /**\n     * State that applies to the item within container, used where applicable.\n     * Specifically used to pass inclusion state between property name and\n     * property, and also used for array elements.\n     */\n    protected TokenFilter _itemFilter;\n    \n    /**\n     * Number of tokens for which {@link TokenFilter#INCLUDE_ALL}\n     * has been returned.\n     */\n    protected int _matchCount;\n\n    /*\n    /**********************************************************\n    /* Construction, initialization\n    /**********************************************************\n     */\n\n    public FilteringParserDelegate(JsonParser p, TokenFilter f,\n            boolean includePath, boolean allowMultipleMatches)\n    {\n        super(p);\n        rootFilter = f;\n        // and this is the currently active filter for root values\n        _itemFilter = f;\n        _headContext = TokenFilterContext.createRootContext(f);\n        _includePath = includePath;\n        _allowMultipleMatches = allowMultipleMatches;\n    }\n\n    /*\n    /**********************************************************\n    /* Extended API\n    /**********************************************************\n     */\n\n    public TokenFilter getFilter() { return rootFilter; }\n\n    /**\n     * Accessor for finding number of matches, where specific token and sub-tree\n     * starting (if structured type) are passed.\n     */\n    public int getMatchCount() {\n        return _matchCount;\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, token accessors\n    /**********************************************************\n     */\n\n    @Override public JsonToken getCurrentToken() { return _currToken; }\n\n    @Override public final int getCurrentTokenId() {\n        final JsonToken t = _currToken;\n        return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();\n    }\n\n    @Override public boolean hasCurrentToken() { return _currToken != null; }\n    @Override public boolean hasTokenId(int id) {\n        final JsonToken t = _currToken;\n        if (t == null) {\n            return (JsonTokenId.ID_NO_TOKEN == id);\n        }\n        return t.id() == id;\n    }\n\n    @Override public final boolean hasToken(JsonToken t) {\n        return (_currToken == t);\n    }\n    \n    @Override public boolean isExpectedStartArrayToken() { return _currToken == JsonToken.START_ARRAY; }\n    @Override public boolean isExpectedStartObjectToken() { return _currToken == JsonToken.START_OBJECT; }\n\n    @Override public JsonLocation getCurrentLocation() { return delegate.getCurrentLocation(); }\n\n    @Override\n    public JsonStreamContext getParsingContext() {\n        return _filterContext();\n    }\n    \n    // !!! TODO: Verify it works as expected: copied from standard JSON parser impl\n    @Override\n    public String getCurrentName() throws IOException {\n        JsonStreamContext ctxt = _filterContext();\n        if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\n            JsonStreamContext parent = ctxt.getParent();\n            return (parent == null) ? null : parent.getCurrentName();\n        }\n        return ctxt.getCurrentName();\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, token state overrides\n    /**********************************************************\n     */\n\n    @Override\n    public void clearCurrentToken() {\n        if (_currToken != null) {\n            _lastClearedToken = _currToken;\n            _currToken = null;\n        }\n    }\n\n    @Override\n    public JsonToken getLastClearedToken() { return _lastClearedToken; }\n\n    @Override\n    public void overrideCurrentName(String name) {\n        /* 14-Apr-2015, tatu: Not sure whether this can be supported, and if so,\n         *    what to do with it... Delegation won't work for sure, so let's for\n         *    now throw an exception\n         */\n        throw new UnsupportedOperationException(\"Can not currently override name during filtering read\");\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, traversal\n    /**********************************************************\n     */\n\n    @Override\n    public JsonToken nextToken() throws IOException\n    {\n    \t//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken\n    \t// check for no buffered context _exposedContext - null\n    \t//If all the conditions matches then check for scalar / non-scalar property\n    \tif(!_allowMultipleMatches && _currToken != null && _exposedContext == null){\n    \t\t//if not scalar and ended successfully, then return null\n    \t\tif((_currToken.isStructEnd()  && _headContext.isStartHandled()) ){\n    \t\t\treturn (_currToken = null);\n    \t\t}\n    \t\t//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once\n    \t\t// then return null \n    \t\telse if(_currToken.isScalarValue() && !_headContext.isStartHandled() && !_includePath \n    \t\t\t\t&& _itemFilter == TokenFilter.INCLUDE_ALL) {\n    \t\t\treturn (_currToken = null);\n    \t\t}\n    \t}\n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n// Is this guaranteed to work without further checks?\n//                        if (t != JsonToken.START_ARRAY) {\n                        _currToken = t;\n                        return t;\n                    }\n\n                    // Almost! Most likely still have the current token;\n                    // with the sole exception of \n                    /*\n                    t = delegate.getCurrentToken();\n                    if (t != JsonToken.FIELD_NAME) {\n                        _currToken = t;\n                        return t;\n                    }\n                    */\n                    break;\n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // If not, need to read more. If we got any:\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // no strict need to close, since we have no state here\n            return (_currToken = t);\n        }\n\n        // otherwise... to include or not?\n        TokenFilter f;\n        \n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    if (!_includePath) {\n                        // Minor twist here: if parent NOT included, may need to induce output of\n                        // surrounding START_OBJECT/END_OBJECT\n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                            _exposedContext = _headContext;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    if (_includePath) {\n                        return (_currToken = t);\n                    }\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }\n\n        // We get here if token was not yet found; offlined handling\n        return _nextToken2();\n    }\n\n    /**\n     * Offlined handling for cases where there was no buffered token to\n     * return, and the token read next could not be returned as-is,\n     * at least not yet, but where we have not yet established that\n     * buffering is needed.\n     */\n    protected final JsonToken _nextToken2() throws IOException\n    {\n        main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return (_currToken = t);\n            }\n            TokenFilter f;\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                if (ctxt == null) { // should never occur",
        "line": 274,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                        return (_currToken = t);",
        "line": 573,
        "aftercode": "\n\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                break;\n            }\n        }\n    }\n\n    /**\n     * Method called when a new potentially included context is found.\n     */\n    protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot)\n        throws IOException\n    {\n        main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return t;\n            }\n            TokenFilter f;\n\n            // One simplification here: we know for a fact that the item filter is\n            // neither null nor 'include all', for most cases; the only exception\n            // being FIELD_NAME handling\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }\n        }\n    }\n\n    private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException\n    {\n        _exposedContext = buffRoot;\n        TokenFilterContext ctxt = buffRoot;\n        JsonToken t = ctxt.nextTokenToRead();\n        if (t != null) {\n            return t;\n        }\n        while (true) {\n            // all done with buffered stuff?\n            if (ctxt == _headContext) {\n                throw _constructError(\"Internal error: failed to locate expected buffered tokens\");\n                /*\n                _exposedContext = null;\n                break;\n                */\n            }\n            // If not, traverse down the context chain\n            ctxt = _exposedContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) { // should never occur\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n            t = _exposedContext.nextTokenToRead();\n            if (t != null) {\n                return t;\n            }\n        }\n    }\n    \n    @Override\n    public JsonToken nextValue() throws IOException {\n        // Re-implemented same as ParserMinimalBase:\n        JsonToken t = nextToken();\n        if (t == JsonToken.FIELD_NAME) {\n            t = nextToken();\n        }\n        return t;\n    }\n\n    /**\n     * Need to override, re-implement similar to how method defined in\n     * {@link com.fasterxml.jackson.core.base.ParserMinimalBase}, to keep\n     * state correct here.\n     */\n    @Override\n    public JsonParser skipChildren() throws IOException\n    {\n        if ((_currToken != JsonToken.START_OBJECT)\n            && (_currToken != JsonToken.START_ARRAY)) {\n            return this;\n        }\n        int open = 1;\n\n        // Since proper matching of start/end markers is handled\n        // by nextToken(), we'll just count nesting levels here\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) { // not ideal but for now, just return\n                return this;\n            }\n            if (t.isStructStart()) {\n                ++open;\n            } else if (t.isStructEnd()) {\n                if (--open == 0) {\n                    return this;\n                }\n            }\n        }\n    }\n    \n    /*\n    /**********************************************************\n    /* Public API, access to token information, text\n    /**********************************************************\n     */\n\n    @Override public String getText() throws IOException { return delegate.getText();  }\n    @Override public boolean hasTextCharacters() { return delegate.hasTextCharacters(); }\n    @Override public char[] getTextCharacters() throws IOException { return delegate.getTextCharacters(); }\n    @Override public int getTextLength() throws IOException { return delegate.getTextLength(); }\n    @Override public int getTextOffset() throws IOException { return delegate.getTextOffset(); }\n\n    /*\n    /**********************************************************\n    /* Public API, access to token information, numeric\n    /**********************************************************\n     */\n    \n    @Override\n    public BigInteger getBigIntegerValue() throws IOException { return delegate.getBigIntegerValue(); }\n\n    @Override\n    public boolean getBooleanValue() throws IOException { return delegate.getBooleanValue(); }\n    \n    @Override\n    public byte getByteValue() throws IOException { return delegate.getByteValue(); }\n\n    @Override\n    public short getShortValue() throws IOException { return delegate.getShortValue(); }\n\n    @Override\n    public BigDecimal getDecimalValue() throws IOException { return delegate.getDecimalValue(); }\n\n    @Override\n    public double getDoubleValue() throws IOException { return delegate.getDoubleValue(); }\n\n    @Override\n    public float getFloatValue() throws IOException { return delegate.getFloatValue(); }\n\n    @Override\n    public int getIntValue() throws IOException { return delegate.getIntValue(); }\n\n    @Override\n    public long getLongValue() throws IOException { return delegate.getLongValue(); }\n\n    @Override\n    public NumberType getNumberType() throws IOException { return delegate.getNumberType(); }\n\n    @Override\n    public Number getNumberValue() throws IOException { return delegate.getNumberValue(); }\n\n    /*\n    /**********************************************************\n    /* Public API, access to token information, coercion/conversion\n    /**********************************************************\n     */\n    \n    @Override public int getValueAsInt() throws IOException { return delegate.getValueAsInt(); }\n    @Override public int getValueAsInt(int defaultValue) throws IOException { return delegate.getValueAsInt(defaultValue); }\n    @Override public long getValueAsLong() throws IOException { return delegate.getValueAsLong(); }\n    @Override public long getValueAsLong(long defaultValue) throws IOException { return delegate.getValueAsLong(defaultValue); }\n    @Override public double getValueAsDouble() throws IOException { return delegate.getValueAsDouble(); }\n    @Override public double getValueAsDouble(double defaultValue) throws IOException { return delegate.getValueAsDouble(defaultValue); }\n    @Override public boolean getValueAsBoolean() throws IOException { return delegate.getValueAsBoolean(); }\n    @Override public boolean getValueAsBoolean(boolean defaultValue) throws IOException { return delegate.getValueAsBoolean(defaultValue); }\n    @Override public String getValueAsString() throws IOException { return delegate.getValueAsString(); }\n    @Override public String getValueAsString(String defaultValue) throws IOException { return delegate.getValueAsString(defaultValue); }\n    \n    /*\n    /**********************************************************\n    /* Public API, access to token values, other\n    /**********************************************************\n     */\n\n    @Override public Object getEmbeddedObject() throws IOException { return delegate.getEmbeddedObject(); }\n    @Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { return delegate.getBinaryValue(b64variant); }\n    @Override public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException { return delegate.readBinaryValue(b64variant, out); }\n    @Override public JsonLocation getTokenLocation() { return delegate.getTokenLocation(); }\n\n    /*\n    /**********************************************************\n    /* Internal helper methods\n    /**********************************************************\n     */\n\n    protected JsonStreamContext _filterContext() {\n        if (_exposedContext != null) {\n            return _exposedContext;\n        }\n        return _headContext;\n    }\n  \n}package com.fasterxml.jackson.core.filter;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.util.JsonParserDelegate;\n\nimport static com.fasterxml.jackson.core.JsonTokenId.*;\n\n/**\n * Specialized {@link JsonParserDelegate} that allows use of\n * {@link TokenFilter} for outputting a subset of content that\n * is visible to caller\n * \n * @since 2.6\n */\npublic class FilteringParserDelegate extends JsonParserDelegate\n{\n    /*\n    /**********************************************************\n    /* Configuration\n    /**********************************************************\n     */\n    \n    /**\n     * Object consulted to determine whether to write parts of content generator\n     * is asked to write or not.\n     */\n    protected TokenFilter rootFilter;\n\n    /**\n     * Flag that determines whether filtering will continue after the first\n     * match is indicated or not: if `false`, output is based on just the first\n     * full match (returning {@link TokenFilter#INCLUDE_ALL}) and no more\n     * checks are made; if `true` then filtering will be applied as necessary\n     * until end of content.\n     */\n    protected boolean _allowMultipleMatches;\n\n    /**\n     * Flag that determines whether path leading up to included content should\n     * also be automatically included or not. If `false`, no path inclusion is\n     * done and only explicitly included entries are output; if `true` then\n     * path from main level down to match is also included as necessary.\n     */\n    protected boolean _includePath;\n\n    /* NOTE: this feature is included in the first version (2.6), but\n     * there is no public API to enable it, yet, since there isn't an\n     * actual use case. But it seemed possible need could arise, which\n     * is feature has not yet been removed. If no use is found within\n     * first version or two, just remove.\n     * \n     * Marked as deprecated since its status is uncertain.\n     */\n    @Deprecated\n    protected boolean _includeImmediateParent;\n    \n    /*\n    /**********************************************************\n    /* State\n    /**********************************************************\n     */\n\n    /**\n     * Last token retrieved via {@link #nextToken}, if any.\n     * Null before the first call to <code>nextToken()</code>,\n     * as well as if token has been explicitly cleared\n     */\n    protected JsonToken _currToken;\n\n    /**\n     * Last cleared token, if any: that is, value that was in\n     * effect when {@link #clearCurrentToken} was called.\n     */\n    protected JsonToken _lastClearedToken;\n    \n    /**\n     * During traversal this is the actual \"open\" parse tree, which sometimes\n     * is the same as {@link #_exposedContext}, and at other times is ahead\n     * of it. Note that this context is never null.\n     */\n    protected TokenFilterContext _headContext;\n\n    /**\n     * In cases where {@link #_headContext} is \"ahead\" of context exposed to\n     * caller, this context points to what is currently exposed to caller.\n     * When the two are in sync, this context reference will be <code>null</code>.\n     */\n    protected TokenFilterContext _exposedContext;\n\n    /**\n     * State that applies to the item within container, used where applicable.\n     * Specifically used to pass inclusion state between property name and\n     * property, and also used for array elements.\n     */\n    protected TokenFilter _itemFilter;\n    \n    /**\n     * Number of tokens for which {@link TokenFilter#INCLUDE_ALL}\n     * has been returned.\n     */\n    protected int _matchCount;\n\n    /*\n    /**********************************************************\n    /* Construction, initialization\n    /**********************************************************\n     */\n\n    public FilteringParserDelegate(JsonParser p, TokenFilter f,\n            boolean includePath, boolean allowMultipleMatches)\n    {\n        super(p);\n        rootFilter = f;\n        // and this is the currently active filter for root values\n        _itemFilter = f;\n        _headContext = TokenFilterContext.createRootContext(f);\n        _includePath = includePath;\n        _allowMultipleMatches = allowMultipleMatches;\n    }\n\n    /*\n    /**********************************************************\n    /* Extended API\n    /**********************************************************\n     */\n\n    public TokenFilter getFilter() { return rootFilter; }\n\n    /**\n     * Accessor for finding number of matches, where specific token and sub-tree\n     * starting (if structured type) are passed.\n     */\n    public int getMatchCount() {\n        return _matchCount;\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, token accessors\n    /**********************************************************\n     */\n\n    @Override public JsonToken getCurrentToken() { return _currToken; }\n\n    @Override public final int getCurrentTokenId() {\n        final JsonToken t = _currToken;\n        return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();\n    }\n\n    @Override public boolean hasCurrentToken() { return _currToken != null; }\n    @Override public boolean hasTokenId(int id) {\n        final JsonToken t = _currToken;\n        if (t == null) {\n            return (JsonTokenId.ID_NO_TOKEN == id);\n        }\n        return t.id() == id;\n    }\n\n    @Override public final boolean hasToken(JsonToken t) {\n        return (_currToken == t);\n    }\n    \n    @Override public boolean isExpectedStartArrayToken() { return _currToken == JsonToken.START_ARRAY; }\n    @Override public boolean isExpectedStartObjectToken() { return _currToken == JsonToken.START_OBJECT; }\n\n    @Override public JsonLocation getCurrentLocation() { return delegate.getCurrentLocation(); }\n\n    @Override\n    public JsonStreamContext getParsingContext() {\n        return _filterContext();\n    }\n    \n    // !!! TODO: Verify it works as expected: copied from standard JSON parser impl\n    @Override\n    public String getCurrentName() throws IOException {\n        JsonStreamContext ctxt = _filterContext();\n        if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\n            JsonStreamContext parent = ctxt.getParent();\n            return (parent == null) ? null : parent.getCurrentName();\n        }\n        return ctxt.getCurrentName();\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, token state overrides\n    /**********************************************************\n     */\n\n    @Override\n    public void clearCurrentToken() {\n        if (_currToken != null) {\n            _lastClearedToken = _currToken;\n            _currToken = null;\n        }\n    }\n\n    @Override\n    public JsonToken getLastClearedToken() { return _lastClearedToken; }\n\n    @Override\n    public void overrideCurrentName(String name) {\n        /* 14-Apr-2015, tatu: Not sure whether this can be supported, and if so,\n         *    what to do with it... Delegation won't work for sure, so let's for\n         *    now throw an exception\n         */\n        throw new UnsupportedOperationException(\"Can not currently override name during filtering read\");\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, traversal\n    /**********************************************************\n     */\n\n    @Override\n    public JsonToken nextToken() throws IOException\n    {\n    \t//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken\n    \t// check for no buffered context _exposedContext - null\n    \t//If all the conditions matches then check for scalar / non-scalar property\n    \tif(!_allowMultipleMatches && _currToken != null && _exposedContext == null){\n    \t\t//if not scalar and ended successfully, then return null\n    \t\tif((_currToken.isStructEnd()  && _headContext.isStartHandled()) ){\n    \t\t\treturn (_currToken = null);\n    \t\t}\n    \t\t//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once\n    \t\t// then return null \n    \t\telse if(_currToken.isScalarValue() && !_headContext.isStartHandled() && !_includePath \n    \t\t\t\t&& _itemFilter == TokenFilter.INCLUDE_ALL) {\n    \t\t\treturn (_currToken = null);\n    \t\t}\n    \t}\n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n// Is this guaranteed to work without further checks?\n//                        if (t != JsonToken.START_ARRAY) {\n                        _currToken = t;\n                        return t;\n                    }\n\n                    // Almost! Most likely still have the current token;\n                    // with the sole exception of \n                    /*\n                    t = delegate.getCurrentToken();\n                    if (t != JsonToken.FIELD_NAME) {\n                        _currToken = t;\n                        return t;\n                    }\n                    */\n                    break;\n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // If not, need to read more. If we got any:\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // no strict need to close, since we have no state here\n            return (_currToken = t);\n        }\n\n        // otherwise... to include or not?\n        TokenFilter f;\n        \n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    if (!_includePath) {\n                        // Minor twist here: if parent NOT included, may need to induce output of\n                        // surrounding START_OBJECT/END_OBJECT\n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                            _exposedContext = _headContext;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    if (_includePath) {\n                        return (_currToken = t);\n                    }\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }\n\n        // We get here if token was not yet found; offlined handling\n        return _nextToken2();\n    }\n\n    /**\n     * Offlined handling for cases where there was no buffered token to\n     * return, and the token read next could not be returned as-is,\n     * at least not yet, but where we have not yet established that\n     * buffering is needed.\n     */\n    protected final JsonToken _nextToken2() throws IOException\n    {\n        main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return (_currToken = t);\n            }\n            TokenFilter f;\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {"
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                    if (f == null) { // filter out the value",
        "line": 560,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                break;",
        "line": 573,
        "aftercode": "\n\n            }\n        }\n    }\n\n    /**\n     * Method called when a new potentially included context is found.\n     */\n    protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot)\n        throws IOException\n    {\n        main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return t;\n            }\n            TokenFilter f;\n\n            // One simplification here: we know for a fact that the item filter is\n            // neither null nor 'include all', for most cases; the only exception\n            // being FIELD_NAME handling\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }\n        }\n    }\n\n    private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException\n    {\n        _exposedContext = buffRoot;\n        TokenFilterContext ctxt = buffRoot;\n        JsonToken t = ctxt.nextTokenToRead();\n        if (t != null) {\n            return t;\n        }\n        while (true) {\n            // all done with buffered stuff?\n            if (ctxt == _headContext) {\n                throw _constructError(\"Internal error: failed to locate expected buffered tokens\");\n                /*\n                _exposedContext = null;\n                break;\n                */\n            }\n            // If not, traverse down the context chain\n            ctxt = _exposedContext.findChildOf(ctxt);\n            _exposedContext = ctxt;\n            if (ctxt == null) { // should never occur\n                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n            }\n            t = _exposedContext.nextTokenToRead();\n            if (t != null) {\n                return t;\n            }\n        }\n    }\n    \n    @Override\n    public JsonToken nextValue() throws IOException {\n        // Re-implemented same as ParserMinimalBase:\n        JsonToken t = nextToken();\n        if (t == JsonToken.FIELD_NAME) {\n            t = nextToken();\n        }\n        return t;\n    }\n\n    /**\n     * Need to override, re-implement similar to how method defined in\n     * {@link com.fasterxml.jackson.core.base.ParserMinimalBase}, to keep\n     * state correct here.\n     */\n    @Override\n    public JsonParser skipChildren() throws IOException\n    {\n        if ((_currToken != JsonToken.START_OBJECT)\n            && (_currToken != JsonToken.START_ARRAY)) {\n            return this;\n        }\n        int open = 1;\n\n        // Since proper matching of start/end markers is handled\n        // by nextToken(), we'll just count nesting levels here\n        while (true) {\n            JsonToken t = nextToken();\n            if (t == null) { // not ideal but for now, just return\n                return this;\n            }\n            if (t.isStructStart()) {\n                ++open;\n            } else if (t.isStructEnd()) {\n                if (--open == 0) {\n                    return this;\n                }\n            }\n        }\n    }\n    \n    /*\n    /**********************************************************\n    /* Public API, access to token information, text\n    /**********************************************************\n     */\n\n    @Override public String getText() throws IOException { return delegate.getText();  }\n    @Override public boolean hasTextCharacters() { return delegate.hasTextCharacters(); }\n    @Override public char[] getTextCharacters() throws IOException { return delegate.getTextCharacters(); }\n    @Override public int getTextLength() throws IOException { return delegate.getTextLength(); }\n    @Override public int getTextOffset() throws IOException { return delegate.getTextOffset(); }\n\n    /*\n    /**********************************************************\n    /* Public API, access to token information, numeric\n    /**********************************************************\n     */\n    \n    @Override\n    public BigInteger getBigIntegerValue() throws IOException { return delegate.getBigIntegerValue(); }\n\n    @Override\n    public boolean getBooleanValue() throws IOException { return delegate.getBooleanValue(); }\n    \n    @Override\n    public byte getByteValue() throws IOException { return delegate.getByteValue(); }\n\n    @Override\n    public short getShortValue() throws IOException { return delegate.getShortValue(); }\n\n    @Override\n    public BigDecimal getDecimalValue() throws IOException { return delegate.getDecimalValue(); }\n\n    @Override\n    public double getDoubleValue() throws IOException { return delegate.getDoubleValue(); }\n\n    @Override\n    public float getFloatValue() throws IOException { return delegate.getFloatValue(); }\n\n    @Override\n    public int getIntValue() throws IOException { return delegate.getIntValue(); }\n\n    @Override\n    public long getLongValue() throws IOException { return delegate.getLongValue(); }\n\n    @Override\n    public NumberType getNumberType() throws IOException { return delegate.getNumberType(); }\n\n    @Override\n    public Number getNumberValue() throws IOException { return delegate.getNumberValue(); }\n\n    /*\n    /**********************************************************\n    /* Public API, access to token information, coercion/conversion\n    /**********************************************************\n     */\n    \n    @Override public int getValueAsInt() throws IOException { return delegate.getValueAsInt(); }\n    @Override public int getValueAsInt(int defaultValue) throws IOException { return delegate.getValueAsInt(defaultValue); }\n    @Override public long getValueAsLong() throws IOException { return delegate.getValueAsLong(); }\n    @Override public long getValueAsLong(long defaultValue) throws IOException { return delegate.getValueAsLong(defaultValue); }\n    @Override public double getValueAsDouble() throws IOException { return delegate.getValueAsDouble(); }\n    @Override public double getValueAsDouble(double defaultValue) throws IOException { return delegate.getValueAsDouble(defaultValue); }\n    @Override public boolean getValueAsBoolean() throws IOException { return delegate.getValueAsBoolean(); }\n    @Override public boolean getValueAsBoolean(boolean defaultValue) throws IOException { return delegate.getValueAsBoolean(defaultValue); }\n    @Override public String getValueAsString() throws IOException { return delegate.getValueAsString(); }\n    @Override public String getValueAsString(String defaultValue) throws IOException { return delegate.getValueAsString(defaultValue); }\n    \n    /*\n    /**********************************************************\n    /* Public API, access to token values, other\n    /**********************************************************\n     */\n\n    @Override public Object getEmbeddedObject() throws IOException { return delegate.getEmbeddedObject(); }\n    @Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { return delegate.getBinaryValue(b64variant); }\n    @Override public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException { return delegate.readBinaryValue(b64variant, out); }\n    @Override public JsonLocation getTokenLocation() { return delegate.getTokenLocation(); }\n\n    /*\n    /**********************************************************\n    /* Internal helper methods\n    /**********************************************************\n     */\n\n    protected JsonStreamContext _filterContext() {\n        if (_exposedContext != null) {\n            return _exposedContext;\n        }\n        return _headContext;\n    }\n  \n}package com.fasterxml.jackson.core.filter;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\nimport com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.core.util.JsonParserDelegate;\n\nimport static com.fasterxml.jackson.core.JsonTokenId.*;\n\n/**\n * Specialized {@link JsonParserDelegate} that allows use of\n * {@link TokenFilter} for outputting a subset of content that\n * is visible to caller\n * \n * @since 2.6\n */\npublic class FilteringParserDelegate extends JsonParserDelegate\n{\n    /*\n    /**********************************************************\n    /* Configuration\n    /**********************************************************\n     */\n    \n    /**\n     * Object consulted to determine whether to write parts of content generator\n     * is asked to write or not.\n     */\n    protected TokenFilter rootFilter;\n\n    /**\n     * Flag that determines whether filtering will continue after the first\n     * match is indicated or not: if `false`, output is based on just the first\n     * full match (returning {@link TokenFilter#INCLUDE_ALL}) and no more\n     * checks are made; if `true` then filtering will be applied as necessary\n     * until end of content.\n     */\n    protected boolean _allowMultipleMatches;\n\n    /**\n     * Flag that determines whether path leading up to included content should\n     * also be automatically included or not. If `false`, no path inclusion is\n     * done and only explicitly included entries are output; if `true` then\n     * path from main level down to match is also included as necessary.\n     */\n    protected boolean _includePath;\n\n    /* NOTE: this feature is included in the first version (2.6), but\n     * there is no public API to enable it, yet, since there isn't an\n     * actual use case. But it seemed possible need could arise, which\n     * is feature has not yet been removed. If no use is found within\n     * first version or two, just remove.\n     * \n     * Marked as deprecated since its status is uncertain.\n     */\n    @Deprecated\n    protected boolean _includeImmediateParent;\n    \n    /*\n    /**********************************************************\n    /* State\n    /**********************************************************\n     */\n\n    /**\n     * Last token retrieved via {@link #nextToken}, if any.\n     * Null before the first call to <code>nextToken()</code>,\n     * as well as if token has been explicitly cleared\n     */\n    protected JsonToken _currToken;\n\n    /**\n     * Last cleared token, if any: that is, value that was in\n     * effect when {@link #clearCurrentToken} was called.\n     */\n    protected JsonToken _lastClearedToken;\n    \n    /**\n     * During traversal this is the actual \"open\" parse tree, which sometimes\n     * is the same as {@link #_exposedContext}, and at other times is ahead\n     * of it. Note that this context is never null.\n     */\n    protected TokenFilterContext _headContext;\n\n    /**\n     * In cases where {@link #_headContext} is \"ahead\" of context exposed to\n     * caller, this context points to what is currently exposed to caller.\n     * When the two are in sync, this context reference will be <code>null</code>.\n     */\n    protected TokenFilterContext _exposedContext;\n\n    /**\n     * State that applies to the item within container, used where applicable.\n     * Specifically used to pass inclusion state between property name and\n     * property, and also used for array elements.\n     */\n    protected TokenFilter _itemFilter;\n    \n    /**\n     * Number of tokens for which {@link TokenFilter#INCLUDE_ALL}\n     * has been returned.\n     */\n    protected int _matchCount;\n\n    /*\n    /**********************************************************\n    /* Construction, initialization\n    /**********************************************************\n     */\n\n    public FilteringParserDelegate(JsonParser p, TokenFilter f,\n            boolean includePath, boolean allowMultipleMatches)\n    {\n        super(p);\n        rootFilter = f;\n        // and this is the currently active filter for root values\n        _itemFilter = f;\n        _headContext = TokenFilterContext.createRootContext(f);\n        _includePath = includePath;\n        _allowMultipleMatches = allowMultipleMatches;\n    }\n\n    /*\n    /**********************************************************\n    /* Extended API\n    /**********************************************************\n     */\n\n    public TokenFilter getFilter() { return rootFilter; }\n\n    /**\n     * Accessor for finding number of matches, where specific token and sub-tree\n     * starting (if structured type) are passed.\n     */\n    public int getMatchCount() {\n        return _matchCount;\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, token accessors\n    /**********************************************************\n     */\n\n    @Override public JsonToken getCurrentToken() { return _currToken; }\n\n    @Override public final int getCurrentTokenId() {\n        final JsonToken t = _currToken;\n        return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();\n    }\n\n    @Override public boolean hasCurrentToken() { return _currToken != null; }\n    @Override public boolean hasTokenId(int id) {\n        final JsonToken t = _currToken;\n        if (t == null) {\n            return (JsonTokenId.ID_NO_TOKEN == id);\n        }\n        return t.id() == id;\n    }\n\n    @Override public final boolean hasToken(JsonToken t) {\n        return (_currToken == t);\n    }\n    \n    @Override public boolean isExpectedStartArrayToken() { return _currToken == JsonToken.START_ARRAY; }\n    @Override public boolean isExpectedStartObjectToken() { return _currToken == JsonToken.START_OBJECT; }\n\n    @Override public JsonLocation getCurrentLocation() { return delegate.getCurrentLocation(); }\n\n    @Override\n    public JsonStreamContext getParsingContext() {\n        return _filterContext();\n    }\n    \n    // !!! TODO: Verify it works as expected: copied from standard JSON parser impl\n    @Override\n    public String getCurrentName() throws IOException {\n        JsonStreamContext ctxt = _filterContext();\n        if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\n            JsonStreamContext parent = ctxt.getParent();\n            return (parent == null) ? null : parent.getCurrentName();\n        }\n        return ctxt.getCurrentName();\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, token state overrides\n    /**********************************************************\n     */\n\n    @Override\n    public void clearCurrentToken() {\n        if (_currToken != null) {\n            _lastClearedToken = _currToken;\n            _currToken = null;\n        }\n    }\n\n    @Override\n    public JsonToken getLastClearedToken() { return _lastClearedToken; }\n\n    @Override\n    public void overrideCurrentName(String name) {\n        /* 14-Apr-2015, tatu: Not sure whether this can be supported, and if so,\n         *    what to do with it... Delegation won't work for sure, so let's for\n         *    now throw an exception\n         */\n        throw new UnsupportedOperationException(\"Can not currently override name during filtering read\");\n    }\n\n    /*\n    /**********************************************************\n    /* Public API, traversal\n    /**********************************************************\n     */\n\n    @Override\n    public JsonToken nextToken() throws IOException\n    {\n    \t//Check for _allowMultipleMatches - false and atleast there is one token - which is _currToken\n    \t// check for no buffered context _exposedContext - null\n    \t//If all the conditions matches then check for scalar / non-scalar property\n    \tif(!_allowMultipleMatches && _currToken != null && _exposedContext == null){\n    \t\t//if not scalar and ended successfully, then return null\n    \t\tif((_currToken.isStructEnd()  && _headContext.isStartHandled()) ){\n    \t\t\treturn (_currToken = null);\n    \t\t}\n    \t\t//else if scalar, and scalar not present in obj/array and !includePath and INCLUDE_ALL matched once\n    \t\t// then return null \n    \t\telse if(_currToken.isScalarValue() && !_headContext.isStartHandled() && !_includePath \n    \t\t\t\t&& _itemFilter == TokenFilter.INCLUDE_ALL) {\n    \t\t\treturn (_currToken = null);\n    \t\t}\n    \t}\n        // Anything buffered?\n        TokenFilterContext ctxt = _exposedContext;\n\n        if (ctxt != null) {\n            while (true) {\n                JsonToken t = ctxt.nextTokenToRead();\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n                // all done with buffered stuff?\n                if (ctxt == _headContext) {\n                    _exposedContext = null;\n                    if (ctxt.inArray()) {\n                        t = delegate.getCurrentToken();\n// Is this guaranteed to work without further checks?\n//                        if (t != JsonToken.START_ARRAY) {\n                        _currToken = t;\n                        return t;\n                    }\n\n                    // Almost! Most likely still have the current token;\n                    // with the sole exception of \n                    /*\n                    t = delegate.getCurrentToken();\n                    if (t != JsonToken.FIELD_NAME) {\n                        _currToken = t;\n                        return t;\n                    }\n                    */\n                    break;\n                }\n                // If not, traverse down the context chain\n                ctxt = _headContext.findChildOf(ctxt);\n                _exposedContext = ctxt;\n                if (ctxt == null) { // should never occur\n                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                }\n            }\n        }\n\n        // If not, need to read more. If we got any:\n        JsonToken t = delegate.nextToken();\n        if (t == null) {\n            // no strict need to close, since we have no state here\n            return (_currToken = t);\n        }\n\n        // otherwise... to include or not?\n        TokenFilter f;\n        \n        switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    if (!_includePath) {\n                        // Minor twist here: if parent NOT included, may need to induce output of\n                        // surrounding START_OBJECT/END_OBJECT\n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                            _exposedContext = _headContext;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    if (_includePath) {\n                        return (_currToken = t);\n                    }\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }\n\n        // We get here if token was not yet found; offlined handling\n        return _nextToken2();\n    }\n\n    /**\n     * Offlined handling for cases where there was no buffered token to\n     * return, and the token read next could not be returned as-is,\n     * at least not yet, but where we have not yet established that\n     * buffering is needed.\n     */\n    protected final JsonToken _nextToken2() throws IOException\n    {\n        main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return (_currToken = t);\n            }\n            TokenFilter f;\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)"
    },
    {
        "id": 18,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                if (f != null) {",
        "line": 720,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                    if (f == null) { // filter out the value",
        "line": 554,
        "aftercode": ""
    },
    {
        "id": 17,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                if (f == TokenFilter.INCLUDE_ALL) {",
        "line": 585,
        "aftercode": ""
    },
    {
        "id": 19,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "        if (t == JsonToken.FIELD_NAME) {",
        "line": 767,
        "aftercode": "if(t){"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                JsonToken t = ctxt.nextTokenToRead();",
        "line": 244,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "        JsonToken t = delegate.nextToken();",
        "line": 281,
        "aftercode": ""
    },
    {
        "id": 19,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "        if (t == JsonToken.FIELD_NAME) {",
        "line": 767,
        "aftercode": "if(JsonToken.FIELD_NAME){"
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                    if (ctxt.inArray()) {",
        "line": 252,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "        if (ctxt != null) {",
        "line": 242,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                    if (ctxt.inArray()) {",
        "line": 252,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "        TokenFilterContext ctxt = _exposedContext;",
        "line": 240,
        "aftercode": ""
    },
    {
        "id": 0,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "                if (ctxt == _headContext) {",
        "line": 250,
        "aftercode": ""
    },
    {
        "id": 19,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "            t = nextToken();",
        "line": 768,
        "aftercode": "t = \"null\";"
    },
    {
        "id": 19,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "            t = nextToken();",
        "line": 768,
        "aftercode": "t = true;"
    },
    {
        "id": 19,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "        if (t == JsonToken.FIELD_NAME) {",
        "line": 767,
        "aftercode": "if((t.size() == 0)){"
    },
    {
        "id": 19,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "        JsonToken t = nextToken();",
        "line": 766,
        "aftercode": "final JsonToken t = nextToken();"
    },
    {
        "id": 19,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "            t = nextToken();",
        "line": 768,
        "aftercode": "t = false;"
    },
    {
        "id": 19,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "            t = nextToken();",
        "line": 768,
        "aftercode": "t = FIELD_NAME;"
    },
    {
        "id": 19,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/JacksonCore/JacksonCore_15_fixed/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java",
        "precode": "        if (t == JsonToken.FIELD_NAME) {",
        "line": 767,
        "aftercode": "if((t.size() != 0)){"
    }
]