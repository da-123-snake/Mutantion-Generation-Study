[
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "    private int getConstraintTypeCounts(final Relationship relationship) {",
        "line": 282,
        "aftercode": ""
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "        for (final LinearConstraint constraint : constraints) {",
        "line": 284,
        "aftercode": "(LinearConstraint constraint = ;"
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "        int count = 0;",
        "line": 283,
        "aftercode": "int constraint = ;"
    },
    {
        "id": 29,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;",
        "line": 398,
        "aftercode": "double negativeVarBasicRow = getBasicRow(negativeVarColumn);"
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "        for (final LinearConstraint constraint : constraints) {",
        "line": 284,
        "aftercode": "(LinearConstraint count = 0;"
    },
    {
        "id": 26,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "          if (getBasicRow(col) == null) {",
        "line": 346,
        "aftercode": ""
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "    private int getConstraintTypeCounts(final Relationship relationship) {",
        "line": 282,
        "aftercode": "Relationship relationship        int count = 0;"
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "        for (final LinearConstraint constraint : constraints) {",
        "line": 284,
        "aftercode": "(int constraint = ;"
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "    private int getConstraintTypeCounts(final Relationship relationship) {",
        "line": 282,
        "aftercode": ""
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "    private int getConstraintTypeCounts(final Relationship relationship) {",
        "line": 282,
        "aftercode": ""
    },
    {
        "id": 29,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "      Set<Integer> basicRows = new HashSet<Integer>();",
        "line": 401,
        "aftercode": "Set<Integer> basicRows = getEntry(negativeVarBasicRow, getRhsOffset());"
    },
    {
        "id": 29,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "      Set<Integer> basicRows = new HashSet<Integer>();",
        "line": 401,
        "aftercode": "double basicRows = getEntry(negativeVarBasicRow, getRhsOffset());"
    },
    {
        "id": 29,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "      Set<Integer> basicRows = new HashSet<Integer>();",
        "line": 401,
        "aftercode": "double mostNegative = getEntry(negativeVarBasicRow, getRhsOffset());"
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "        for (final LinearConstraint constraint : constraints) {",
        "line": 284,
        "aftercode": "int constraint = ;"
    },
    {
        "id": 26,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",
        "line": 338,
        "aftercode": ""
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "            if (constraint.getRelationship() == relationship) {",
        "line": 285,
        "aftercode": "if(constraint.getRelationship()){"
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "        for (final LinearConstraint constraint : constraints) {",
        "line": 284,
        "aftercode": "LinearConstraint constraint = ;"
    },
    {
        "id": 26,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "            final double entry = tableau.getEntry(0, i);",
        "line": 337,
        "aftercode": ""
    },
    {
        "id": 29,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "          if (basicRow != null && basicRow == 0) {",
        "line": 410,
        "aftercode": "if((0 - (restrictToNonNegative)?0:mostNegative)){"
    },
    {
        "id": 29,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "      Set<Integer> basicRows = new HashSet<Integer>();",
        "line": 401,
        "aftercode": "Set<Integer> mostNegative = getEntry(negativeVarBasicRow, getRhsOffset());"
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "    private int getConstraintTypeCounts(final Relationship relationship) {",
        "line": 282,
        "aftercode": ""
    },
    {
        "id": 29,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);",
        "line": 418,
        "aftercode": "coefficients[i] = (((basicRow == null))?0:getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative)?0:mostNegative);"
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "    private int getConstraintTypeCounts(final Relationship relationship) {",
        "line": 282,
        "aftercode": ""
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "    private int getConstraintTypeCounts(final Relationship relationship) {",
        "line": 282,
        "aftercode": ""
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "        for (final LinearConstraint constraint : constraints) {",
        "line": 284,
        "aftercode": "LinearConstraint constraint = ;"
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "            if (constraint.getRelationship() == relationship) {",
        "line": 285,
        "aftercode": "if(!constraint.isEmpty()){"
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "            if (constraint.getRelationship() == relationship) {",
        "line": 285,
        "aftercode": "if(constraint.isEmpty()){"
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "    private int getConstraintTypeCounts(final Relationship relationship) {",
        "line": 282,
        "aftercode": "Relationship relationship        int count = 0;"
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "            if (constraint.getRelationship() == relationship) {",
        "line": 285,
        "aftercode": "if((constraint == 0)){"
    },
    {
        "id": 29,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;",
        "line": 398,
        "aftercode": "double negativeVarBasicRow = ((negativeVarColumn > 0))?getBasicRow(negativeVarColumn):null;"
    },
    {
        "id": 29,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);",
        "line": 397,
        "aftercode": "Integer negativeVarBasicRow = getBasicRow(negativeVarColumn);"
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "            if (constraint.getRelationship() == relationship) {",
        "line": 285,
        "aftercode": "(final LinearConstraint constraint = ;"
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "            if (constraint.getRelationship() == relationship) {",
        "line": 285,
        "aftercode": "if((constraint.getRelationship() == 0)){"
    },
    {
        "id": 29,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);",
        "line": 418,
        "aftercode": "coefficients[i] = (0 - (restrictToNonNegative)?0:mostNegative);"
    },
    {
        "id": 29,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;",
        "line": 398,
        "aftercode": "double mostNegative = getBasicRow(negativeVarColumn);"
    },
    {
        "id": 29,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;",
        "line": 398,
        "aftercode": "double negativeVarBasicRow = getEntry(negativeVarBasicRow, getRhsOffset());"
    },
    {
        "id": 29,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;",
        "line": 398,
        "aftercode": "double negativeVarBasicRow = 0;"
    },
    {
        "id": 25,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "precode": "            if (constraint.getRelationship() == relationship) {",
        "line": 285,
        "aftercode": "if((constraint.size() == 0)){"
    }
]