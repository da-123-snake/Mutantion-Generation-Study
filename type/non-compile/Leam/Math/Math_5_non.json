[
    {
        "id": 16,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_5_fixed/src/main/java/org/apache/commons/math3/complex/Complex.java",
        "precode": "        if (FastMath.abs(real) < FastMath.abs(imaginary)) {",
        "line": 312,
        "aftercode": "if(FastMath.abs(real)){"
    },
    {
        "id": 16,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_5_fixed/src/main/java/org/apache/commons/math3/complex/Complex.java",
        "precode": "        if (FastMath.abs(real) < FastMath.abs(imaginary)) {",
        "line": 312,
        "aftercode": "double scale = (1. / ((real * q) + imaginary));"
    },
    {
        "id": 16,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_5_fixed/src/main/java/org/apache/commons/math3/complex/Complex.java",
        "precode": "            return createComplex(scale, -scale * q);",
        "line": 319,
        "aftercode": "createComplex(scale, (-scale * q));"
    },
    {
        "id": 16,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_5_fixed/src/main/java/org/apache/commons/math3/complex/Complex.java",
        "precode": "        if (isInfinite) {",
        "line": 308,
        "aftercode": "double q = (real / imaginary);"
    },
    {
        "id": 16,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_5_fixed/src/main/java/org/apache/commons/math3/complex/Complex.java",
        "precode": "        if (FastMath.abs(real) < FastMath.abs(imaginary)) {",
        "line": 312,
        "aftercode": "if(FastMath.abs(imaginary)){"
    },
    {
        "id": 16,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_5_fixed/src/main/java/org/apache/commons/math3/complex/Complex.java",
        "precode": "            double scale = 1. / (imaginary * q + real);",
        "line": 318,
        "aftercode": "double scale = (1. / scale);"
    },
    {
        "id": 16,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Math/Math_5_fixed/src/main/java/org/apache/commons/math3/complex/Complex.java",
        "precode": "        if (real == 0.0 && imaginary == 0.0) {",
        "line": 304,
        "aftercode": "double q = (real / imaginary);"
    }
]