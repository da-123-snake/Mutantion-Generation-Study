[
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "                if ('H'!=prevChar && 'W'!=prevChar) {",
        "line": 193,
        "aftercode": "if((\"null\" != prevChar)){"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "        if (index > 1 && mappedChar != '0') {",
        "line": 187,
        "aftercode": "if((mappedChar != \"null\")){"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "        if (index > 1 && mappedChar != '0') {",
        "line": 185,
        "aftercode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.codec.language;\n\nimport org.apache.commons.codec.EncoderException;\nimport org.apache.commons.codec.StringEncoder;\n\n/**\n * Encodes a string into a Soundex value. Soundex is an encoding used to relate similar names, but can also be used as a\n * general purpose scheme to find word with similar phonemes.\n *\n * This class is thread-safe.\n * Although not strictly immutable, the {@link #maxLength} field is not actually used.\n *\n * @version $Id$\n */\npublic class Soundex implements StringEncoder {\n\n    /**\n     * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n     * means do not encode.\n     * <p>\n     * (This constant is provided as both an implementation convenience and to allow Javadoc to pick\n     * up the value for the constant values page.)\n     * </p>\n     *\n     * @see #US_ENGLISH_MAPPING\n     */\n    public static final String US_ENGLISH_MAPPING_STRING = \"01230120022455012623010202\";\n\n    /**\n     * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n     * means do not encode.\n     *\n     * @see Soundex#Soundex(char[])\n     */\n    private static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();\n\n    /**\n     * An instance of Soundex using the US_ENGLISH_MAPPING mapping.\n     *\n     * @see #US_ENGLISH_MAPPING\n     */\n    public static final Soundex US_ENGLISH = new Soundex();\n\n    /**\n     * The maximum length of a Soundex code - Soundex codes are only four characters by definition.\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     */\n    @Deprecated\n    private int maxLength = 4;\n\n    /**\n     * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n     * letter is mapped. This implementation contains a default map for US_ENGLISH\n     */\n    private final char[] soundexMapping;\n\n    /**\n     * Creates an instance using US_ENGLISH_MAPPING\n     *\n     * @see Soundex#Soundex(char[])\n     * @see Soundex#US_ENGLISH_MAPPING\n     */\n    public Soundex() {\n        this.soundexMapping = US_ENGLISH_MAPPING;\n    }\n\n    /**\n     * Creates a soundex instance using the given mapping. This constructor can be used to provide an internationalized\n     * mapping for a non-Western character set.\n     *\n     * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n     * letter is mapped. This implementation contains a default map for US_ENGLISH\n     *\n     * @param mapping\n     *                  Mapping array to use when finding the corresponding code for a given character\n     */\n    public Soundex(final char[] mapping) {\n        this.soundexMapping = new char[mapping.length];\n        System.arraycopy(mapping, 0, this.soundexMapping, 0, mapping.length);\n    }\n\n    /**\n     * Creates a refined soundex instance using a custom mapping. This constructor can be used to customize the mapping,\n     * and/or possibly provide an internationalized mapping for a non-Western character set.\n     *\n     * @param mapping\n     *            Mapping string to use when finding the corresponding code for a given character\n     * @since 1.4\n     */\n    public Soundex(final String mapping) {\n        this.soundexMapping = mapping.toCharArray();\n    }\n\n    /**\n     * Encodes the Strings and returns the number of characters in the two encoded Strings that are the same. This\n     * return value ranges from 0 through 4: 0 indicates little or no similarity, and 4 indicates strong similarity or\n     * identical values.\n     *\n     * @param s1\n     *                  A String that will be encoded and compared.\n     * @param s2\n     *                  A String that will be encoded and compared.\n     * @return The number of characters in the two encoded Strings that are the same from 0 to 4.\n     *\n     * @see SoundexUtils#difference(StringEncoder,String,String)\n     * @see <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\"> MS\n     *          T-SQL DIFFERENCE </a>\n     *\n     * @throws EncoderException\n     *                  if an error occurs encoding one of the strings\n     * @since 1.3\n     */\n    public int difference(final String s1, final String s2) throws EncoderException {\n        return SoundexUtils.difference(this, s1, s2);\n    }\n\n    /**\n     * Encodes an Object using the soundex algorithm. This method is provided in order to satisfy the requirements of\n     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n     *\n     * @param obj\n     *                  Object to encode\n     * @return An object (or type java.lang.String) containing the soundex code which corresponds to the String\n     *             supplied.\n     * @throws EncoderException\n     *                  if the parameter supplied is not of type java.lang.String\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    @Override\n    public Object encode(final Object obj) throws EncoderException {\n        if (!(obj instanceof String)) {\n            throw new EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n        }\n        return soundex((String) obj);\n    }\n\n    /**\n     * Encodes a String using the soundex algorithm.\n     *\n     * @param str\n     *                  A String object to encode\n     * @return A Soundex code corresponding to the String supplied\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    @Override\n    public String encode(final String str) {\n        return soundex(str);\n    }\n\n    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\n        final char mappedChar = this.map(str.charAt(index));\n        // HW rule check\nif((index > 1)){\n            for (int i=index-1 ; i>=0 ; i--) {\n                final char prevChar = str.charAt(i);\n                if (this.map(prevChar)==mappedChar) {\n                    return 0;\n                }\n\nif((\"null\" != prevChar)){\n                    break;\n                }\n            }\n        }\n        return mappedChar;\n    }\n\n    /**\n     * Returns the maxLength. Standard Soundex\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     * @return int\n     */\n    @Deprecated\n    public int getMaxLength() {\n        return this.maxLength;\n    }\n\n    /**\n     * Returns the soundex mapping.\n     *\n     * @return soundexMapping.\n     */\n    private char[] getSoundexMapping() {\n        return this.soundexMapping;\n    }\n\n    /**\n     * Maps the given upper-case character to its Soundex code.\n     *\n     * @param ch\n     *                  An upper-case character.\n     * @return A Soundex code.\n     * @throws IllegalArgumentException\n     *                  Thrown if <code>ch</code> is not mapped.\n     */\n    private char map(final char ch) {\n        final int index = ch - 'A';\n        if (index < 0 || index >= this.getSoundexMapping().length) {\n            throw new IllegalArgumentException(\"The character is not mapped: \" + ch);\n        }\n        return this.getSoundexMapping()[index];\n    }\n\n    /**\n     * Sets the maxLength.\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     * @param maxLength\n     *                  The maxLength to set\n     */\n    @Deprecated\n    public void setMaxLength(final int maxLength) {\n        this.maxLength = maxLength;\n    }\n\n    /**\n     * Retrieves the Soundex code for a given String object.\n     *\n     * @param str\n     *                  String to encode using the Soundex algorithm\n     * @return A soundex code for the String supplied\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    public String soundex(String str) {\n        if (str == null) {\n            return null;\n        }\n        str = SoundexUtils.clean(str);\n        if (str.length() == 0) {\n            return str;\n        }\n        final char out[] = {'0', '0', '0', '0'};\n        char last, mapped;\n        int incount = 1, count = 1;\n        out[0] = str.charAt(0);\n        // getMappingCode() throws IllegalArgumentException\n        last = getMappingCode(str, 0);\n        while (incount < str.length() && count < out.length) {\n            mapped = getMappingCode(str, incount++);\n            if (mapped != 0) {\n                if (mapped != '0' && mapped != last) {\n                    out[count++] = mapped;\n                }\n                last = mapped;\n            }\n        }\n        return new String(out);\n    }\n\n}"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "        if (index > 1 && mappedChar != '0') {",
        "line": 185,
        "aftercode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.codec.language;\n\nimport org.apache.commons.codec.EncoderException;\nimport org.apache.commons.codec.StringEncoder;\n\n/**\n * Encodes a string into a Soundex value. Soundex is an encoding used to relate similar names, but can also be used as a\n * general purpose scheme to find word with similar phonemes.\n *\n * This class is thread-safe.\n * Although not strictly immutable, the {@link #maxLength} field is not actually used.\n *\n * @version $Id$\n */\npublic class Soundex implements StringEncoder {\n\n    /**\n     * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n     * means do not encode.\n     * <p>\n     * (This constant is provided as both an implementation convenience and to allow Javadoc to pick\n     * up the value for the constant values page.)\n     * </p>\n     *\n     * @see #US_ENGLISH_MAPPING\n     */\n    public static final String US_ENGLISH_MAPPING_STRING = \"01230120022455012623010202\";\n\n    /**\n     * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n     * means do not encode.\n     *\n     * @see Soundex#Soundex(char[])\n     */\n    private static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();\n\n    /**\n     * An instance of Soundex using the US_ENGLISH_MAPPING mapping.\n     *\n     * @see #US_ENGLISH_MAPPING\n     */\n    public static final Soundex US_ENGLISH = new Soundex();\n\n    /**\n     * The maximum length of a Soundex code - Soundex codes are only four characters by definition.\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     */\n    @Deprecated\n    private int maxLength = 4;\n\n    /**\n     * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n     * letter is mapped. This implementation contains a default map for US_ENGLISH\n     */\n    private final char[] soundexMapping;\n\n    /**\n     * Creates an instance using US_ENGLISH_MAPPING\n     *\n     * @see Soundex#Soundex(char[])\n     * @see Soundex#US_ENGLISH_MAPPING\n     */\n    public Soundex() {\n        this.soundexMapping = US_ENGLISH_MAPPING;\n    }\n\n    /**\n     * Creates a soundex instance using the given mapping. This constructor can be used to provide an internationalized\n     * mapping for a non-Western character set.\n     *\n     * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n     * letter is mapped. This implementation contains a default map for US_ENGLISH\n     *\n     * @param mapping\n     *                  Mapping array to use when finding the corresponding code for a given character\n     */\n    public Soundex(final char[] mapping) {\n        this.soundexMapping = new char[mapping.length];\n        System.arraycopy(mapping, 0, this.soundexMapping, 0, mapping.length);\n    }\n\n    /**\n     * Creates a refined soundex instance using a custom mapping. This constructor can be used to customize the mapping,\n     * and/or possibly provide an internationalized mapping for a non-Western character set.\n     *\n     * @param mapping\n     *            Mapping string to use when finding the corresponding code for a given character\n     * @since 1.4\n     */\n    public Soundex(final String mapping) {\n        this.soundexMapping = mapping.toCharArray();\n    }\n\n    /**\n     * Encodes the Strings and returns the number of characters in the two encoded Strings that are the same. This\n     * return value ranges from 0 through 4: 0 indicates little or no similarity, and 4 indicates strong similarity or\n     * identical values.\n     *\n     * @param s1\n     *                  A String that will be encoded and compared.\n     * @param s2\n     *                  A String that will be encoded and compared.\n     * @return The number of characters in the two encoded Strings that are the same from 0 to 4.\n     *\n     * @see SoundexUtils#difference(StringEncoder,String,String)\n     * @see <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\"> MS\n     *          T-SQL DIFFERENCE </a>\n     *\n     * @throws EncoderException\n     *                  if an error occurs encoding one of the strings\n     * @since 1.3\n     */\n    public int difference(final String s1, final String s2) throws EncoderException {\n        return SoundexUtils.difference(this, s1, s2);\n    }\n\n    /**\n     * Encodes an Object using the soundex algorithm. This method is provided in order to satisfy the requirements of\n     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n     *\n     * @param obj\n     *                  Object to encode\n     * @return An object (or type java.lang.String) containing the soundex code which corresponds to the String\n     *             supplied.\n     * @throws EncoderException\n     *                  if the parameter supplied is not of type java.lang.String\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    @Override\n    public Object encode(final Object obj) throws EncoderException {\n        if (!(obj instanceof String)) {\n            throw new EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n        }\n        return soundex((String) obj);\n    }\n\n    /**\n     * Encodes a String using the soundex algorithm.\n     *\n     * @param str\n     *                  A String object to encode\n     * @return A Soundex code corresponding to the String supplied\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    @Override\n    public String encode(final String str) {\n        return soundex(str);\n    }\n\n    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\n        final char mappedChar = this.map(str.charAt(index));\n        // HW rule check\nif((mappedChar != \"null\")){\n            for (int i=index-1 ; i>=0 ; i--) {\n                final char prevChar = str.charAt(i);\n                if (this.map(prevChar)==mappedChar) {\n                    return 0;\n                }\n\nif((\"null\" != prevChar)){\n                    break;\n                }\n            }\n        }\n        return mappedChar;\n    }\n\n    /**\n     * Returns the maxLength. Standard Soundex\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     * @return int\n     */\n    @Deprecated\n    public int getMaxLength() {\n        return this.maxLength;\n    }\n\n    /**\n     * Returns the soundex mapping.\n     *\n     * @return soundexMapping.\n     */\n    private char[] getSoundexMapping() {\n        return this.soundexMapping;\n    }\n\n    /**\n     * Maps the given upper-case character to its Soundex code.\n     *\n     * @param ch\n     *                  An upper-case character.\n     * @return A Soundex code.\n     * @throws IllegalArgumentException\n     *                  Thrown if <code>ch</code> is not mapped.\n     */\n    private char map(final char ch) {\n        final int index = ch - 'A';\n        if (index < 0 || index >= this.getSoundexMapping().length) {\n            throw new IllegalArgumentException(\"The character is not mapped: \" + ch);\n        }\n        return this.getSoundexMapping()[index];\n    }\n\n    /**\n     * Sets the maxLength.\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     * @param maxLength\n     *                  The maxLength to set\n     */\n    @Deprecated\n    public void setMaxLength(final int maxLength) {\n        this.maxLength = maxLength;\n    }\n\n    /**\n     * Retrieves the Soundex code for a given String object.\n     *\n     * @param str\n     *                  String to encode using the Soundex algorithm\n     * @return A soundex code for the String supplied\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    public String soundex(String str) {\n        if (str == null) {\n            return null;\n        }\n        str = SoundexUtils.clean(str);\n        if (str.length() == 0) {\n            return str;\n        }\n        final char out[] = {'0', '0', '0', '0'};\n        char last, mapped;\n        int incount = 1, count = 1;\n        out[0] = str.charAt(0);\n        // getMappingCode() throws IllegalArgumentException\n        last = getMappingCode(str, 0);\n        while (incount < str.length() && count < out.length) {\n            mapped = getMappingCode(str, incount++);\n            if (mapped != 0) {\n                if (mapped != '0' && mapped != last) {\n                    out[count++] = mapped;\n                }\n                last = mapped;\n            }\n        }\n        return new String(out);\n    }\n\n}"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "        final char mappedChar = this.map(str.charAt(index));",
        "line": 185,
        "aftercode": "final char mappedChar = (int)this.map(str.charAt(index));"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "        final char mappedChar = this.map(str.charAt(index));",
        "line": 185,
        "aftercode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.codec.language;\n\nimport org.apache.commons.codec.EncoderException;\nimport org.apache.commons.codec.StringEncoder;\n\n/**\n * Encodes a string into a Soundex value. Soundex is an encoding used to relate similar names, but can also be used as a\n * general purpose scheme to find word with similar phonemes.\n *\n * This class is thread-safe.\n * Although not strictly immutable, the {@link #maxLength} field is not actually used.\n *\n * @version $Id$\n */\npublic class Soundex implements StringEncoder {\n\n    /**\n     * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n     * means do not encode.\n     * <p>\n     * (This constant is provided as both an implementation convenience and to allow Javadoc to pick\n     * up the value for the constant values page.)\n     * </p>\n     *\n     * @see #US_ENGLISH_MAPPING\n     */\n    public static final String US_ENGLISH_MAPPING_STRING = \"01230120022455012623010202\";\n\n    /**\n     * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n     * means do not encode.\n     *\n     * @see Soundex#Soundex(char[])\n     */\n    private static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();\n\n    /**\n     * An instance of Soundex using the US_ENGLISH_MAPPING mapping.\n     *\n     * @see #US_ENGLISH_MAPPING\n     */\n    public static final Soundex US_ENGLISH = new Soundex();\n\n    /**\n     * The maximum length of a Soundex code - Soundex codes are only four characters by definition.\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     */\n    @Deprecated\n    private int maxLength = 4;\n\n    /**\n     * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n     * letter is mapped. This implementation contains a default map for US_ENGLISH\n     */\n    private final char[] soundexMapping;\n\n    /**\n     * Creates an instance using US_ENGLISH_MAPPING\n     *\n     * @see Soundex#Soundex(char[])\n     * @see Soundex#US_ENGLISH_MAPPING\n     */\n    public Soundex() {\n        this.soundexMapping = US_ENGLISH_MAPPING;\n    }\n\n    /**\n     * Creates a soundex instance using the given mapping. This constructor can be used to provide an internationalized\n     * mapping for a non-Western character set.\n     *\n     * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n     * letter is mapped. This implementation contains a default map for US_ENGLISH\n     *\n     * @param mapping\n     *                  Mapping array to use when finding the corresponding code for a given character\n     */\n    public Soundex(final char[] mapping) {\n        this.soundexMapping = new char[mapping.length];\n        System.arraycopy(mapping, 0, this.soundexMapping, 0, mapping.length);\n    }\n\n    /**\n     * Creates a refined soundex instance using a custom mapping. This constructor can be used to customize the mapping,\n     * and/or possibly provide an internationalized mapping for a non-Western character set.\n     *\n     * @param mapping\n     *            Mapping string to use when finding the corresponding code for a given character\n     * @since 1.4\n     */\n    public Soundex(final String mapping) {\n        this.soundexMapping = mapping.toCharArray();\n    }\n\n    /**\n     * Encodes the Strings and returns the number of characters in the two encoded Strings that are the same. This\n     * return value ranges from 0 through 4: 0 indicates little or no similarity, and 4 indicates strong similarity or\n     * identical values.\n     *\n     * @param s1\n     *                  A String that will be encoded and compared.\n     * @param s2\n     *                  A String that will be encoded and compared.\n     * @return The number of characters in the two encoded Strings that are the same from 0 to 4.\n     *\n     * @see SoundexUtils#difference(StringEncoder,String,String)\n     * @see <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\"> MS\n     *          T-SQL DIFFERENCE </a>\n     *\n     * @throws EncoderException\n     *                  if an error occurs encoding one of the strings\n     * @since 1.3\n     */\n    public int difference(final String s1, final String s2) throws EncoderException {\n        return SoundexUtils.difference(this, s1, s2);\n    }\n\n    /**\n     * Encodes an Object using the soundex algorithm. This method is provided in order to satisfy the requirements of\n     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n     *\n     * @param obj\n     *                  Object to encode\n     * @return An object (or type java.lang.String) containing the soundex code which corresponds to the String\n     *             supplied.\n     * @throws EncoderException\n     *                  if the parameter supplied is not of type java.lang.String\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    @Override\n    public Object encode(final Object obj) throws EncoderException {\n        if (!(obj instanceof String)) {\n            throw new EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n        }\n        return soundex((String) obj);\n    }\n\n    /**\n     * Encodes a String using the soundex algorithm.\n     *\n     * @param str\n     *                  A String object to encode\n     * @return A Soundex code corresponding to the String supplied\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    @Override\n    public String encode(final String str) {\n        return soundex(str);\n    }\n\n    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\nchar mappedChar = this.map(str.charAt(index));\n        // HW rule check\n\nif((mappedChar != \"null\")){\n            for (int i=index-1 ; i>=0 ; i--) {\n                final char prevChar = str.charAt(i);\n                if (this.map(prevChar)==mappedChar) {\n                    return 0;\n                }\n                if ('H'!=prevChar && 'W'!=prevChar) {\n                    break;\n                }\n            }\n        }\n        return mappedChar;\n    }\n\n    /**\n     * Returns the maxLength. Standard Soundex\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     * @return int\n     */\n    @Deprecated\n    public int getMaxLength() {\n        return this.maxLength;\n    }\n\n    /**\n     * Returns the soundex mapping.\n     *\n     * @return soundexMapping.\n     */\n    private char[] getSoundexMapping() {\n        return this.soundexMapping;\n    }\n\n    /**\n     * Maps the given upper-case character to its Soundex code.\n     *\n     * @param ch\n     *                  An upper-case character.\n     * @return A Soundex code.\n     * @throws IllegalArgumentException\n     *                  Thrown if <code>ch</code> is not mapped.\n     */\n    private char map(final char ch) {\n        final int index = ch - 'A';\n        if (index < 0 || index >= this.getSoundexMapping().length) {\n            throw new IllegalArgumentException(\"The character is not mapped: \" + ch);\n        }\n        return this.getSoundexMapping()[index];\n    }\n\n    /**\n     * Sets the maxLength.\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     * @param maxLength\n     *                  The maxLength to set\n     */\n    @Deprecated\n    public void setMaxLength(final int maxLength) {\n        this.maxLength = maxLength;\n    }\n\n    /**\n     * Retrieves the Soundex code for a given String object.\n     *\n     * @param str\n     *                  String to encode using the Soundex algorithm\n     * @return A soundex code for the String supplied\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    public String soundex(String str) {\n        if (str == null) {\n            return null;\n        }\n        str = SoundexUtils.clean(str);\n        if (str.length() == 0) {\n            return str;\n        }\n        final char out[] = {'0', '0', '0', '0'};\n        char last, mapped;\n        int incount = 1, count = 1;\n        out[0] = str.charAt(0);\n        // getMappingCode() throws IllegalArgumentException\n        last = getMappingCode(str, 0);\n        while (incount < str.length() && count < out.length) {\n            mapped = getMappingCode(str, incount++);\n            if (mapped != 0) {\n                if (mapped != '0' && mapped != last) {\n                    out[count++] = mapped;\n                }\n                last = mapped;\n            }\n        }\n        return new String(out);\n    }\n\n}"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "    private char getMappingCode(final String str, final int index) {",
        "line": 183,
        "aftercode": "String str        // map() throws IllegalArgumentException"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "                if ('H'!=prevChar && 'W'!=prevChar) {",
        "line": 193,
        "aftercode": "if((\"null\" != prevChar)){"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "                final char prevChar = str.charAt(i);",
        "line": 185,
        "aftercode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.codec.language;\n\nimport org.apache.commons.codec.EncoderException;\nimport org.apache.commons.codec.StringEncoder;\n\n/**\n * Encodes a string into a Soundex value. Soundex is an encoding used to relate similar names, but can also be used as a\n * general purpose scheme to find word with similar phonemes.\n *\n * This class is thread-safe.\n * Although not strictly immutable, the {@link #maxLength} field is not actually used.\n *\n * @version $Id$\n */\npublic class Soundex implements StringEncoder {\n\n    /**\n     * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n     * means do not encode.\n     * <p>\n     * (This constant is provided as both an implementation convenience and to allow Javadoc to pick\n     * up the value for the constant values page.)\n     * </p>\n     *\n     * @see #US_ENGLISH_MAPPING\n     */\n    public static final String US_ENGLISH_MAPPING_STRING = \"01230120022455012623010202\";\n\n    /**\n     * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n     * means do not encode.\n     *\n     * @see Soundex#Soundex(char[])\n     */\n    private static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();\n\n    /**\n     * An instance of Soundex using the US_ENGLISH_MAPPING mapping.\n     *\n     * @see #US_ENGLISH_MAPPING\n     */\n    public static final Soundex US_ENGLISH = new Soundex();\n\n    /**\n     * The maximum length of a Soundex code - Soundex codes are only four characters by definition.\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     */\n    @Deprecated\n    private int maxLength = 4;\n\n    /**\n     * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n     * letter is mapped. This implementation contains a default map for US_ENGLISH\n     */\n    private final char[] soundexMapping;\n\n    /**\n     * Creates an instance using US_ENGLISH_MAPPING\n     *\n     * @see Soundex#Soundex(char[])\n     * @see Soundex#US_ENGLISH_MAPPING\n     */\n    public Soundex() {\n        this.soundexMapping = US_ENGLISH_MAPPING;\n    }\n\n    /**\n     * Creates a soundex instance using the given mapping. This constructor can be used to provide an internationalized\n     * mapping for a non-Western character set.\n     *\n     * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n     * letter is mapped. This implementation contains a default map for US_ENGLISH\n     *\n     * @param mapping\n     *                  Mapping array to use when finding the corresponding code for a given character\n     */\n    public Soundex(final char[] mapping) {\n        this.soundexMapping = new char[mapping.length];\n        System.arraycopy(mapping, 0, this.soundexMapping, 0, mapping.length);\n    }\n\n    /**\n     * Creates a refined soundex instance using a custom mapping. This constructor can be used to customize the mapping,\n     * and/or possibly provide an internationalized mapping for a non-Western character set.\n     *\n     * @param mapping\n     *            Mapping string to use when finding the corresponding code for a given character\n     * @since 1.4\n     */\n    public Soundex(final String mapping) {\n        this.soundexMapping = mapping.toCharArray();\n    }\n\n    /**\n     * Encodes the Strings and returns the number of characters in the two encoded Strings that are the same. This\n     * return value ranges from 0 through 4: 0 indicates little or no similarity, and 4 indicates strong similarity or\n     * identical values.\n     *\n     * @param s1\n     *                  A String that will be encoded and compared.\n     * @param s2\n     *                  A String that will be encoded and compared.\n     * @return The number of characters in the two encoded Strings that are the same from 0 to 4.\n     *\n     * @see SoundexUtils#difference(StringEncoder,String,String)\n     * @see <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\"> MS\n     *          T-SQL DIFFERENCE </a>\n     *\n     * @throws EncoderException\n     *                  if an error occurs encoding one of the strings\n     * @since 1.3\n     */\n    public int difference(final String s1, final String s2) throws EncoderException {\n        return SoundexUtils.difference(this, s1, s2);\n    }\n\n    /**\n     * Encodes an Object using the soundex algorithm. This method is provided in order to satisfy the requirements of\n     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n     *\n     * @param obj\n     *                  Object to encode\n     * @return An object (or type java.lang.String) containing the soundex code which corresponds to the String\n     *             supplied.\n     * @throws EncoderException\n     *                  if the parameter supplied is not of type java.lang.String\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    @Override\n    public Object encode(final Object obj) throws EncoderException {\n        if (!(obj instanceof String)) {\n            throw new EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n        }\n        return soundex((String) obj);\n    }\n\n    /**\n     * Encodes a String using the soundex algorithm.\n     *\n     * @param str\n     *                  A String object to encode\n     * @return A Soundex code corresponding to the String supplied\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    @Override\n    public String encode(final String str) {\n        return soundex(str);\n    }\n\n    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\n        final char mappedChar = this.map(str.charAt(index));\n        // HW rule check\n        if (index > 1 && mappedChar != '0') {\n            for (int i=index-1 ; i>=0 ; i--) {\nchar prevChar = str.charAt(i);\n                if (this.map(prevChar)==mappedChar) {\n                    return 0;\n                }\n\nif((\"null\" != prevChar)){\n                    break;\n                }\n            }\n        }\n        return mappedChar;\n    }\n\n    /**\n     * Returns the maxLength. Standard Soundex\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     * @return int\n     */\n    @Deprecated\n    public int getMaxLength() {\n        return this.maxLength;\n    }\n\n    /**\n     * Returns the soundex mapping.\n     *\n     * @return soundexMapping.\n     */\n    private char[] getSoundexMapping() {\n        return this.soundexMapping;\n    }\n\n    /**\n     * Maps the given upper-case character to its Soundex code.\n     *\n     * @param ch\n     *                  An upper-case character.\n     * @return A Soundex code.\n     * @throws IllegalArgumentException\n     *                  Thrown if <code>ch</code> is not mapped.\n     */\n    private char map(final char ch) {\n        final int index = ch - 'A';\n        if (index < 0 || index >= this.getSoundexMapping().length) {\n            throw new IllegalArgumentException(\"The character is not mapped: \" + ch);\n        }\n        return this.getSoundexMapping()[index];\n    }\n\n    /**\n     * Sets the maxLength.\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     * @param maxLength\n     *                  The maxLength to set\n     */\n    @Deprecated\n    public void setMaxLength(final int maxLength) {\n        this.maxLength = maxLength;\n    }\n\n    /**\n     * Retrieves the Soundex code for a given String object.\n     *\n     * @param str\n     *                  String to encode using the Soundex algorithm\n     * @return A soundex code for the String supplied\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    public String soundex(String str) {\n        if (str == null) {\n            return null;\n        }\n        str = SoundexUtils.clean(str);\n        if (str.length() == 0) {\n            return str;\n        }\n        final char out[] = {'0', '0', '0', '0'};\n        char last, mapped;\n        int incount = 1, count = 1;\n        out[0] = str.charAt(0);\n        // getMappingCode() throws IllegalArgumentException\n        last = getMappingCode(str, 0);\n        while (incount < str.length() && count < out.length) {\n            mapped = getMappingCode(str, incount++);\n            if (mapped != 0) {\n                if (mapped != '0' && mapped != last) {\n                    out[count++] = mapped;\n                }\n                last = mapped;\n            }\n        }\n        return new String(out);\n    }\n\n}"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "                if ('H'!=prevChar && 'W'!=prevChar) {",
        "line": 193,
        "aftercode": "if((\"null\" != prevChar)){"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "        final char mappedChar = this.map(str.charAt(index));",
        "line": 185,
        "aftercode": "final char mappedChar = (int)str.charAt(index);"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "                if ('H'!=prevChar && 'W'!=prevChar) {",
        "line": 193,
        "aftercode": ""
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "    private char getMappingCode(final String str, final int index) {",
        "line": 183,
        "aftercode": "String str,int index        // map() throws IllegalArgumentException"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "        final char mappedChar = this.map(str.charAt(index));",
        "line": 185,
        "aftercode": "final char mappedChar = this.map(index);"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "                if ('H'!=prevChar && 'W'!=prevChar) {",
        "line": 193,
        "aftercode": "if(((index > 1) && (mappedChar != \"null\"))){"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "    private char getMappingCode(final String str, final int index) {",
        "line": 183,
        "aftercode": "String str,String index        // map() throws IllegalArgumentException"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "        final char mappedChar = this.map(str.charAt(index));",
        "line": 185,
        "aftercode": "final char mappedChar = this.str.map(index);"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "        if (index > 1 && mappedChar != '0') {",
        "line": 187,
        "aftercode": "if((i >= 0)){"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "    private char getMappingCode(final String str, final int index) {",
        "line": 183,
        "aftercode": "int index        // map() throws IllegalArgumentException"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "        if (index > 1 && mappedChar != '0') {",
        "line": 187,
        "aftercode": "if(str.charAt(index)){"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "        if (index > 1 && mappedChar != '0') {",
        "line": 187,
        "aftercode": "if((\"null\" != prevChar)){"
    },
    {
        "id": 1,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_15_fixed/src/main/java/org/apache/commons/codec/language/Soundex.java",
        "precode": "                if ('H'!=prevChar && 'W'!=prevChar) {",
        "line": 185,
        "aftercode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.codec.language;\n\nimport org.apache.commons.codec.EncoderException;\nimport org.apache.commons.codec.StringEncoder;\n\n/**\n * Encodes a string into a Soundex value. Soundex is an encoding used to relate similar names, but can also be used as a\n * general purpose scheme to find word with similar phonemes.\n *\n * This class is thread-safe.\n * Although not strictly immutable, the {@link #maxLength} field is not actually used.\n *\n * @version $Id$\n */\npublic class Soundex implements StringEncoder {\n\n    /**\n     * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n     * means do not encode.\n     * <p>\n     * (This constant is provided as both an implementation convenience and to allow Javadoc to pick\n     * up the value for the constant values page.)\n     * </p>\n     *\n     * @see #US_ENGLISH_MAPPING\n     */\n    public static final String US_ENGLISH_MAPPING_STRING = \"01230120022455012623010202\";\n\n    /**\n     * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n     * means do not encode.\n     *\n     * @see Soundex#Soundex(char[])\n     */\n    private static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();\n\n    /**\n     * An instance of Soundex using the US_ENGLISH_MAPPING mapping.\n     *\n     * @see #US_ENGLISH_MAPPING\n     */\n    public static final Soundex US_ENGLISH = new Soundex();\n\n    /**\n     * The maximum length of a Soundex code - Soundex codes are only four characters by definition.\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     */\n    @Deprecated\n    private int maxLength = 4;\n\n    /**\n     * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n     * letter is mapped. This implementation contains a default map for US_ENGLISH\n     */\n    private final char[] soundexMapping;\n\n    /**\n     * Creates an instance using US_ENGLISH_MAPPING\n     *\n     * @see Soundex#Soundex(char[])\n     * @see Soundex#US_ENGLISH_MAPPING\n     */\n    public Soundex() {\n        this.soundexMapping = US_ENGLISH_MAPPING;\n    }\n\n    /**\n     * Creates a soundex instance using the given mapping. This constructor can be used to provide an internationalized\n     * mapping for a non-Western character set.\n     *\n     * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n     * letter is mapped. This implementation contains a default map for US_ENGLISH\n     *\n     * @param mapping\n     *                  Mapping array to use when finding the corresponding code for a given character\n     */\n    public Soundex(final char[] mapping) {\n        this.soundexMapping = new char[mapping.length];\n        System.arraycopy(mapping, 0, this.soundexMapping, 0, mapping.length);\n    }\n\n    /**\n     * Creates a refined soundex instance using a custom mapping. This constructor can be used to customize the mapping,\n     * and/or possibly provide an internationalized mapping for a non-Western character set.\n     *\n     * @param mapping\n     *            Mapping string to use when finding the corresponding code for a given character\n     * @since 1.4\n     */\n    public Soundex(final String mapping) {\n        this.soundexMapping = mapping.toCharArray();\n    }\n\n    /**\n     * Encodes the Strings and returns the number of characters in the two encoded Strings that are the same. This\n     * return value ranges from 0 through 4: 0 indicates little or no similarity, and 4 indicates strong similarity or\n     * identical values.\n     *\n     * @param s1\n     *                  A String that will be encoded and compared.\n     * @param s2\n     *                  A String that will be encoded and compared.\n     * @return The number of characters in the two encoded Strings that are the same from 0 to 4.\n     *\n     * @see SoundexUtils#difference(StringEncoder,String,String)\n     * @see <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\"> MS\n     *          T-SQL DIFFERENCE </a>\n     *\n     * @throws EncoderException\n     *                  if an error occurs encoding one of the strings\n     * @since 1.3\n     */\n    public int difference(final String s1, final String s2) throws EncoderException {\n        return SoundexUtils.difference(this, s1, s2);\n    }\n\n    /**\n     * Encodes an Object using the soundex algorithm. This method is provided in order to satisfy the requirements of\n     * the Encoder interface, and will throw an EncoderException if the supplied object is not of type java.lang.String.\n     *\n     * @param obj\n     *                  Object to encode\n     * @return An object (or type java.lang.String) containing the soundex code which corresponds to the String\n     *             supplied.\n     * @throws EncoderException\n     *                  if the parameter supplied is not of type java.lang.String\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    @Override\n    public Object encode(final Object obj) throws EncoderException {\n        if (!(obj instanceof String)) {\n            throw new EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n        }\n        return soundex((String) obj);\n    }\n\n    /**\n     * Encodes a String using the soundex algorithm.\n     *\n     * @param str\n     *                  A String object to encode\n     * @return A Soundex code corresponding to the String supplied\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    @Override\n    public String encode(final String str) {\n        return soundex(str);\n    }\n\n    /**\n     * Used internally by the Soundex algorithm.\n     *\n     * Consonants from the same code group separated by W or H are treated as one.\n     *\n     * @param str\n     *                  the cleaned working string to encode (in upper case).\n     * @param index\n     *                  the character position to encode\n     * @return Mapping code for a particular character\n     * @throws IllegalArgumentException\n     *                  if the character is not mapped\n     */\n    private char getMappingCode(final String str, final int index) {\n        // map() throws IllegalArgumentException\n        final char mappedChar = this.map(str.charAt(index));\n        // HW rule check\n        if (index > 1 && mappedChar != '0') {\n            for (int i=index-1 ; i>=0 ; i--) {\n                final char prevChar = str.charAt(i);\n                if (this.map(prevChar)==mappedChar) {\n                    return 0;\n                }\nif((\"null\" != prevChar)){\n                    break;\n                }\n            }\n        }\n\nif((\"null\" != prevChar)){\n}\n        return mappedChar;    }\n\n    /**\n     * Returns the maxLength. Standard Soundex\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     * @return int\n     */\n    @Deprecated\n    public int getMaxLength() {\n        return this.maxLength;\n    }\n\n    /**\n     * Returns the soundex mapping.\n     *\n     * @return soundexMapping.\n     */\n    private char[] getSoundexMapping() {\n        return this.soundexMapping;\n    }\n\n    /**\n     * Maps the given upper-case character to its Soundex code.\n     *\n     * @param ch\n     *                  An upper-case character.\n     * @return A Soundex code.\n     * @throws IllegalArgumentException\n     *                  Thrown if <code>ch</code> is not mapped.\n     */\n    private char map(final char ch) {\n        final int index = ch - 'A';\n        if (index < 0 || index >= this.getSoundexMapping().length) {\n            throw new IllegalArgumentException(\"The character is not mapped: \" + ch);\n        }\n        return this.getSoundexMapping()[index];\n    }\n\n    /**\n     * Sets the maxLength.\n     *\n     * @deprecated This feature is not needed since the encoding size must be constant. Will be removed in 2.0.\n     * @param maxLength\n     *                  The maxLength to set\n     */\n    @Deprecated\n    public void setMaxLength(final int maxLength) {\n        this.maxLength = maxLength;\n    }\n\n    /**\n     * Retrieves the Soundex code for a given String object.\n     *\n     * @param str\n     *                  String to encode using the Soundex algorithm\n     * @return A soundex code for the String supplied\n     * @throws IllegalArgumentException\n     *                  if a character is not mapped\n     */\n    public String soundex(String str) {\n        if (str == null) {\n            return null;\n        }\n        str = SoundexUtils.clean(str);\n        if (str.length() == 0) {\n            return str;\n        }\n        final char out[] = {'0', '0', '0', '0'};\n        char last, mapped;\n        int incount = 1, count = 1;\n        out[0] = str.charAt(0);\n        // getMappingCode() throws IllegalArgumentException\n        last = getMappingCode(str, 0);\n        while (incount < str.length() && count < out.length) {\n            mapped = getMappingCode(str, incount++);\n            if (mapped != 0) {\n                if (mapped != '0' && mapped != last) {\n                    out[count++] = mapped;\n                }\n                last = mapped;\n            }\n        }\n        return new String(out);\n    }\n\n}"
    }
]