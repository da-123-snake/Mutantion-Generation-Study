[
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "        } else if (offset < 0 || len < 0) {",
        "line": 141,
        "aftercode": "if((offset < 0)){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "    public int read(byte b[], int offset, int len) throws IOException {",
        "line": 138,
        "aftercode": ""
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "                    if (doEncode) {",
        "line": 174,
        "aftercode": ""
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "        } else if (offset > b.length || offset + len > b.length) {",
        "line": 143,
        "aftercode": "if(((offset + len) > b.length)){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "        } else if (offset < 0 || len < 0) {",
        "line": 141,
        "aftercode": "if((offset > b.length)){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "        } else if (offset < 0 || len < 0) {",
        "line": 141,
        "aftercode": "if((len < 0)){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "            return readLen;",
        "line": 182,
        "aftercode": ""
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "                if (!base64.hasData()) {",
        "line": 166,
        "aftercode": ""
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "        } else if (len == 0) {",
        "line": 145,
        "aftercode": "if(doEncode){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "            return 0;",
        "line": 146,
        "aftercode": ""
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "        } else if (offset > b.length || offset + len > b.length) {",
        "line": 143,
        "aftercode": "if((offset < 0)){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "                    if (doEncode) {",
        "line": 174,
        "aftercode": ""
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "                readLen = base64.readResults(b, offset, len);",
        "line": 180,
        "aftercode": "base64.encode(buf, 0, c);"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "                if (!base64.hasData()) {",
        "line": 166,
        "aftercode": "if(readLen){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "                if (!base64.hasData()) {",
        "line": 166,
        "aftercode": "if(len){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "        } else if (offset < 0 || len < 0) {",
        "line": 145,
        "aftercode": "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.commons.codec.binary;\n\nimport java.io.FilterInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * Provides Base64 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength\n * is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate\n * constructor.\n * <p>\n * The default behaviour of the Base64InputStream is to DECODE, whereas the default behaviour of the Base64OutputStream\n * is to ENCODE, but this behaviour can be overridden by using a different constructor.\n * </p>\n * <p>\n * This class implements section <cite>6.8. Base64 Content-Transfer-Encoding</cite> from RFC 2045 <cite>Multipurpose\n * Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</cite> by Freed and Borenstein.\n * </p>\n * <p>\n * Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode\n * character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).\n * </p>\n * \n * @author Apache Software Foundation \n * @version $Id$\n * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * @since 1.4\n */\npublic class Base64InputStream extends FilterInputStream {\n\n    private final boolean doEncode;\n\n    private final Base64 base64;\n\n    private final byte[] singleByte = new byte[1];\n\n    /**\n     * Creates a Base64InputStream such that all data read is Base64-decoded from the original provided InputStream.\n     * \n     * @param in\n     *            InputStream to wrap.\n     */\n    public Base64InputStream(InputStream in) {\n        this(in, false);\n    }\n\n    /**\n     * Creates a Base64InputStream such that all data read is either Base64-encoded or Base64-decoded from the original\n     * provided InputStream.\n     * \n     * @param in\n     *            InputStream to wrap.\n     * @param doEncode\n     *            true if we should encode all data read from us, false if we should decode.\n     */\n    public Base64InputStream(InputStream in, boolean doEncode) {\n        super(in);\n        this.doEncode = doEncode;\n        this.base64 = new Base64(false);\n    }\n\n    /**\n     * Creates a Base64InputStream such that all data read is either Base64-encoded or Base64-decoded from the original\n     * provided InputStream.\n     * \n     * @param in\n     *            InputStream to wrap.\n     * @param doEncode\n     *            true if we should encode all data read from us, false if we should decode.\n     * @param lineLength\n     *            If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to\n     *            nearest multiple of 4). If lineLength <=0, the encoded data is not divided into lines. If doEncode is\n     *            false, lineLength is ignored.\n     * @param lineSeparator\n     *            If doEncode is true, each line of encoded data will be terminated with this byte sequence (e.g. \\r\\n).\n     *            If lineLength <= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored.\n     */\n    public Base64InputStream(InputStream in, boolean doEncode, int lineLength, byte[] lineSeparator) {\n        super(in);\n        this.doEncode = doEncode;\n        this.base64 = new Base64(lineLength, lineSeparator);\n    }\n\n    /**\n     * Reads one <code>byte</code> from this input stream.\n     * \n     * @return the byte as an integer in the range 0 to 255. Returns -1 if EOF has been reached.\n     * @throws IOException\n     *             if an I/O error occurs.\n     */\n    public int read() throws IOException {\n        int r = read(singleByte, 0, 1);\n        while (r == 0) {\n            r = read(singleByte, 0, 1);\n        }\n        if (r > 0) {\n            return singleByte[0] < 0 ? 256 + singleByte[0] : singleByte[0];\n        }\n        return -1;\n    }\n\n    /**\n     * Attempts to read <code>len</code> bytes into the specified <code>b</code> array starting at <code>offset</code>\n     * from this InputStream.\n     * \n     * @param b\n     *            destination byte array\n     * @param offset\n     *            where to start writing the bytes\n     * @param len\n     *            maximum number of bytes to read\n     * \n     * @return number of bytes read\n     * @throws IOException\n     *             if an I/O error occurs.\n     * @throws NullPointerException\n     *             if the byte array parameter is null\n     * @throws IndexOutOfBoundsException\n     *             if offset, len or buffer size are invalid\n     */\n    public int read(byte b[], int offset, int len) throws IOException {\n        if (b == null) {\n            throw new NullPointerException();\nif((offset < 0)){\n            throw new IndexOutOfBoundsException();\n\nif((offset > b.length)){\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        } else {\n            int readLen = 0;\n            /*\n             Rationale for while-loop on (readLen == 0):\n             -----\n             Base64.readResults() usually returns > 0 or EOF (-1).  In the\n             rare case where it returns 0, we just keep trying.\n\n             This is essentially an undocumented contract for InputStream\n             implementors that want their code to work properly with\n             java.io.InputStreamReader, since the latter hates it when\n             InputStream.read(byte[]) returns a zero.  Unfortunately our\n             readResults() call must return 0 if a large amount of the data\n             being decoded was non-base64, so this while-loop enables proper\n             interop with InputStreamReader for that scenario.\n             -----\n             This is a fix for CODEC-101\n            */\n            while (readLen == 0) {\n                if (!base64.hasData()) {\n                    byte[] buf = new byte[doEncode ? 4096 : 8192];\n                    int c = in.read(buf);\n                    // A little optimization to avoid System.arraycopy()\n                    // when possible.\n                    if (c > 0 && b.length == len) {\n                        base64.setInitialBuffer(b, offset, len);\n                    }\n                    if (doEncode) {\n                        base64.encode(buf, 0, c);\n                    } else {\n                        base64.decode(buf, 0, c);\n                    }\n                }\n                readLen = base64.readResults(b, offset, len);\n            }\n            return readLen;\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     * \n     * @return false\n     */\n    public boolean markSupported() {\n        return false; // not an easy job to support marks\n    }\n}"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "    public int read(byte b[], int offset, int len) throws IOException {",
        "line": 138,
        "aftercode": ""
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "        } else if (offset < 0 || len < 0) {",
        "line": 141,
        "aftercode": "if((len == 0)){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "                if (!base64.hasData()) {",
        "line": 166,
        "aftercode": "if(hasData()){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "        } else if (offset > b.length || offset + len > b.length) {",
        "line": 143,
        "aftercode": "if((len == 0)){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "                if (!base64.hasData()) {",
        "line": 166,
        "aftercode": "int c = in.read(buf);"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "                if (!base64.hasData()) {",
        "line": 166,
        "aftercode": "if(offset){"
    },
    {
        "id": 6,
        "filepath": "/mnt/disk1/cmd/defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "precode": "                    int c = in.read(buf);",
        "line": 168,
        "aftercode": ""
    }
]