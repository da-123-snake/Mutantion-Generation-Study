[
    {
        "id": 64,
        "line": 15,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return false;"
    },
    {
        "id": 65,
        "line": 20,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 66,
        "line": 25,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 68,
        "line": 418,
        "precode": "p = doPeek();",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "p = doPeek(1);"
    },
    {
        "id": 72,
        "line": 418,
        "precode": "p = doPeek();",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "p = doPeek(2);"
    },
    {
        "id": 93,
        "line": 1174,
        "precode": "if (peekedLong != result) {",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (peekedLong == result) { throw new NumberFormatException(\"Expected an int but was \" + peekedLong + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());"
    }
]