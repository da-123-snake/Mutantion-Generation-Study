[
    {
        "id": 1,
        "line": 144,
        "precode": "List<Node> toMove = new ArrayList<Node>();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "List<Node> toMove = new LinkedList<Node>();"
    },
    {
        "id": 2,
        "line": 123,
        "precode": "for (Node node: element.childNodes) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "for (Node node: element.childNodes.clone()) {"
    },
    {
        "id": 3,
        "line": 124,
        "precode": "if (node instanceof TextNode) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (node instanceof TextNode && node.isBlank()) {"
    },
    {
        "id": 4,
        "line": 125,
        "precode": "TextNode tn = (TextNode) node;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "TextNode tn = (TextNode) node.clone();"
    },
    {
        "id": 5,
        "line": 127,
        "precode": "toMove.add(tn);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "toMove.add(tn.clone());"
    },
    {
        "id": 7,
        "line": 132,
        "precode": "Node node = toMove.get(i);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "Node node = toMove.get(i).clone();"
    },
    {
        "id": 8,
        "line": 133,
        "precode": "element.removeChild(node);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "element.removeChild(node.clone());"
    },
    {
        "id": 122,
        "line": 1,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "n = (n ^ (n - 1));"
    },
    {
        "id": 123,
        "line": 2,
        "precode": "while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "while (true) { "
    },
    {
        "id": 124,
        "line": 3,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "return true;"
    },
    {
        "id": 125,
        "line": 4,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 126,
        "line": 5,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 127,
        "line": 6,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 383,
        "line": 1,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "n = (n ^ (n - 1));"
    },
    {
        "id": 384,
        "line": 2,
        "precode": "while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "while (true) { "
    },
    {
        "id": 385,
        "line": 3,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "return true;"
    },
    {
        "id": 386,
        "line": 4,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 387,
        "line": 5,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 388,
        "line": 6,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 389,
        "line": 7,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "return true;"
    },
    {
        "id": 390,
        "line": 1,
        "precode": "if (htmlEl == null) {",
        "aftercode": "if (htmlEl != null) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java"
    },
    {
        "id": 392,
        "line": 3,
        "precode": "if (head() == null) {",
        "aftercode": "if (head() != null) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java"
    },
    {
        "id": 394,
        "line": 5,
        "precode": "if (body() == null) {",
        "aftercode": "if (body() != null) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java"
    },
    {
        "id": 401,
        "line": 117,
        "precode": "return this;",
        "aftercode": "return htmlEl;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java"
    },
    {
        "id": 402,
        "line": 121,
        "precode": "private void normaliseTextNodes(Element element) {",
        "aftercode": "private void normaliseTextNodes(Node node) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java"
    },
    {
        "id": 403,
        "line": 144,
        "precode": "List<Node> toMove = new ArrayList<Node>();",
        "aftercode": "List<Element> toMove = new ArrayList<Element>();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java"
    },
    {
        "id": 404,
        "line": 123,
        "precode": "for (Node node: element.childNodes) {",
        "aftercode": "for (Element element: element.childElements) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java"
    },
    {
        "id": 405,
        "line": 124,
        "precode": "if (node instanceof TextNode) {",
        "aftercode": "if (element instanceof TextNode) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java"
    },
    {
        "id": 406,
        "line": 125,
        "precode": "TextNode tn = (TextNode) node;",
        "aftercode": "TextNode tn = (TextNode) element;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java"
    },
    {
        "id": 410,
        "line": 132,
        "precode": "Node node = toMove.get(i);",
        "aftercode": "Element element = toMove.get(i);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java"
    },
    {
        "id": 413,
        "line": 135,
        "precode": "body().prependChild(node);",
        "aftercode": "body().prependChild(element);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java"
    },
    {
        "id": 414,
        "line": 140,
        "precode": "normaliseStructure(String tag, Element htmlEl) {",
        "aftercode": "normaliseStructure(String tag, Node node) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java"
    },
    {
        "id": 415,
        "line": 141,
        "precode": "Elements elements = this.getElementsByTag(tag);",
        "aftercode": "Elements elements = node.getElementsByTag(tag);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_7_fixed/src/main/java/org/jsoup/nodes/Document.java"
    }
]