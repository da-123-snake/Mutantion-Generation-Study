[
    {
        "id": 149,
        "line": 1,
        "precode": "n = (n & (n - 1));",
        "aftercode": "n = (n ^ (n - 1));",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 150,
        "line": 2,
        "precode": "while (!queue.isEmpty()) {",
        "aftercode": "while (true) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 151,
        "line": 3,
        "precode": "return depth==0;",
        "aftercode": "return true;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 152,
        "line": 4,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "aftercode": "to_add.addAll(subset);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 153,
        "line": 5,
        "precode": "c = bin_op.apply(b,a);",
        "aftercode": "c = bin_op.apply(a,b);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 154,
        "line": 6,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) {",
        "aftercode": "while (Math.abs(x-approx) > epsilon) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 243,
        "line": 88,
        "precode": "static void crossStreams(final InputStream in, final OutputStream out) throws IOException {",
        "aftercode": "static void crossStreams(final InputStream in, final OutputStream out) throws IOException, FileNotFoundException {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 250,
        "line": 101,
        "precode": "Document doc = null;",
        "aftercode": "Document doc = new Document();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 464,
        "line": 1,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "n = (n ^ (n - 1));"
    },
    {
        "id": 465,
        "line": 2,
        "precode": "while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "while (true) {"
    },
    {
        "id": 466,
        "line": 3,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "return true;"
    },
    {
        "id": 467,
        "line": 4,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 468,
        "line": 5,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 469,
        "line": 6,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 470,
        "line": 17,
        "precode": "import java.io.InputStream;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "import java.io.InputStreamReader;"
    },
    {
        "id": 471,
        "line": 18,
        "precode": "import java.io.InputStreamReader;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "import java.io.OutputStream;"
    },
    {
        "id": 472,
        "line": 19,
        "precode": "import java.io.OutputStream;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "import java.io.RandomAccessFile;"
    },
    {
        "id": 473,
        "line": 21,
        "precode": "import java.nio.Buffer;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "import java.nio.ByteBuffer;"
    },
    {
        "id": 474,
        "line": 22,
        "precode": "import java.nio.ByteBuffer;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "import java.nio.charset.Charset;"
    },
    {
        "id": 475,
        "line": 23,
        "precode": "import java.nio.charset.Charset;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "import java.util.Locale;"
    },
    {
        "id": 476,
        "line": 25,
        "precode": "import java.util.Locale;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "import java.util.Random;"
    },
    {
        "id": 477,
        "line": 1,
        "precode": "int n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "int n = (n ^ (n - 1));"
    },
    {
        "id": 478,
        "line": 2,
        "precode": "while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "while (true) { "
    },
    {
        "id": 479,
        "line": 3,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "return true;"
    },
    {
        "id": 480,
        "line": 4,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 481,
        "line": 5,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 482,
        "line": 6,
        "precode": "     while (Math.abs(x-approx*approx) > epsilon) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "    while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 483,
        "line": 7,
        "precode": "int n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "int n = (n ^ (n - 1));"
    },
    {
        "id": 484,
        "line": 8,
        "precode": "while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "while (true) { "
    },
    {
        "id": 485,
        "line": 9,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "return true;"
    },
    {
        "id": 486,
        "line": 10,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 487,
        "line": 11,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 488,
        "line": 12,
        "precode": "     while (Math.abs(x-approx*approx) > epsilon) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "    while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 489,
        "line": 13,
        "precode": "int n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "int n = (n ^ (n - 1));"
    },
    {
        "id": 490,
        "line": 14,
        "precode": "while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "while (true) { "
    },
    {
        "id": 491,
        "line": 15,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "return true;"
    },
    {
        "id": 492,
        "line": 16,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 493,
        "line": 17,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 494,
        "line": 18,
        "precode": "     while (Math.abs(x-approx*approx) > epsilon) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "    while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 495,
        "line": 19,
        "precode": "int n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "int n = (n ^ (n - 1));"
    },
    {
        "id": 496,
        "line": 20,
        "precode": "while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "while (true) { "
    },
    {
        "id": 497,
        "line": 21,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "return true;"
    },
    {
        "id": 498,
        "line": 1,
        "precode": "n = (n & (n - 1));",
        "aftercode": "n = (n ^ (n - 1));",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 499,
        "line": 2,
        "precode": "while (!queue.isEmpty()) {",
        "aftercode": "while (true) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 500,
        "line": 3,
        "precode": "return depth==0;",
        "aftercode": "return true;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 501,
        "line": 4,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "aftercode": "to_add.addAll(subset);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 502,
        "line": 5,
        "precode": "c = bin_op.apply(b,a);",
        "aftercode": "c = bin_op.apply(a,b);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 503,
        "line": 6,
        "precode": "     while (Math.abs(x-approx*approx) > epsilon) {",
        "aftercode": "    while (Math.abs(x-approx) > epsilon) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 504,
        "line": 7,
        "precode": "if (n == 0) return 0;",
        "aftercode": "if (n == 0) return 1;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 505,
        "line": 8,
        "precode": "if (n == 1) return 1;",
        "aftercode": "if (n == 1) return 0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 506,
        "line": 9,
        "precode": "if (n == 2) return 1;",
        "aftercode": "if (n == 2) return 0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 507,
        "line": 10,
        "precode": "if (n == 3) return 2;",
        "aftercode": "if (n == 3) return 1;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 508,
        "line": 11,
        "precode": "if (n == 4) return 3;",
        "aftercode": "if (n == 4) return 2;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 509,
        "line": 12,
        "precode": "if (n == 5) return 5;",
        "aftercode": "if (n == 5) return 3;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 510,
        "line": 13,
        "precode": "if (n == 6) return 8;",
        "aftercode": "if (n == 6) return 5;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 511,
        "line": 14,
        "precode": "if (n == 7) return 13;",
        "aftercode": "if (n == 7) return 8;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 512,
        "line": 15,
        "precode": "if (n == 8) return 21;",
        "aftercode": "if (n == 8) return 13;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 513,
        "line": 16,
        "precode": "if (n == 9) return 34;",
        "aftercode": "if (n == 9) return 21;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java"
    },
    {
        "id": 613,
        "line": 91,
        "precode": "while ((len = in.read(buffer)) != -1) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "while (len != -1) {"
    },
    {
        "id": 616,
        "line": 88,
        "precode": "static void crossStreams(final InputStream in, final OutputStream out) throws IOException {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "static void crossStreams(final InputStream in, final OutputStream out) throws IOException, FileNotFoundException {"
    },
    {
        "id": 619,
        "line": 91,
        "precode": "while ((len = in.read(buffer)) != -1) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "while (len != -1) {"
    },
    {
        "id": 622,
        "line": 1,
        "precode": "static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException, FileNotFoundException {"
    },
    {
        "id": 633,
        "line": 2,
        "precode": "if (bomCharset != null) charsetName = bomCharset.charset;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (bomCharset != null) charsetName = bomCharset.charset;"
    },
    {
        "id": 640,
        "line": 9,
        "precode": "if (meta.hasAttr(\"http-equiv\")) foundCharset = getCharsetFromContentType(meta.attr(\"content\"));",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (meta.hasAttr(\"http-equiv\")) foundCharset = getCharsetFromContentType(meta.attr(\"content\"));"
    },
    {
        "id": 641,
        "line": 10,
        "precode": "if (foundCharset == null && meta.hasAttr(\"charset\")) foundCharset = meta.attr(\"charset\");",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (foundCharset == null && meta.hasAttr(\"charset\")) foundCharset = meta.attr(\"charset\");"
    },
    {
        "id": 642,
        "line": 11,
        "precode": "if (foundCharset != null) break;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (foundCharset != null) break;"
    },
    {
        "id": 644,
        "line": 13,
        "precode": "if (foundCharset == null) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (foundCharset == null) {"
    },
    {
        "id": 647,
        "line": 16,
        "precode": "foundCharset = foundCharset.trim().replaceAll(\"[\"\"]\", \"\");",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "foundCharset = foundCharset.trim().replaceAll(\"[\"\"]\", \"\");"
    },
    {
        "id": 652,
        "line": 21,
        "precode": "if (charsetName == null) charsetName = defaultCharset;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (charsetName == null) charsetName = defaultCharset;"
    },
    {
        "id": 654,
        "line": 23,
        "precode": "if (bomCharset != null && bomCharset.offset) reader.skip(1);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (bomCharset != null && bomCharset.offset) reader.skip(1);"
    },
    {
        "id": 662,
        "line": 2,
        "precode": "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\bcharset=\\s*(?:[\"'])?([^\\s,;\"']*)\");",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\bcharset=\\s*(?:[\"'])?([^\\s,;\"']*)\");"
    },
    {
        "id": 670,
        "line": 10,
        "precode": "public static Document load(File in, String charsetName, String baseUri) throws IOException {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "public static Document load(File in, String charsetName, String baseUri) throws IOException {"
    },
    {
        "id": 671,
        "line": 11,
        "precode": "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.htmlParser());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.htmlParser());"
    },
    {
        "id": 672,
        "line": 43,
        "precode": "}",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "}"
    },
    {
        "id": 673,
        "line": 13,
        "precode": "public static Document parseInputStream(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "public static Document parseInputStream(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {"
    },
    {
        "id": 674,
        "line": 14,
        "precode": "StringBuilder sb = new StringBuilder();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "StringBuilder sb = new StringBuilder();"
    },
    {
        "id": 675,
        "line": 15,
        "precode": "char[] buffer = new char[bufferSize];",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "char[] buffer = new char[bufferSize];"
    },
    {
        "id": 676,
        "line": 16,
        "precode": "int read;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "int read;"
    },
    {
        "id": 677,
        "line": 17,
        "precode": "while ((read = in.read(buffer)) != -1) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "while ((read = in.read(buffer)) != -1) {"
    },
    {
        "id": 678,
        "line": 18,
        "precode": "sb.append(buffer, 0, read);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "sb.append(buffer, 0, read);"
    },
    {
        "id": 679,
        "line": 43,
        "precode": "}",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "}"
    },
    {
        "id": 680,
        "line": 20,
        "precode": "String data = sb.toString();",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "String data = sb.toString();"
    },
    {
        "id": 681,
        "line": 21,
        "precode": "return parser.parseInput(data, baseUri);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "return parser.parseInput(data, baseUri);"
    },
    {
        "id": 682,
        "line": 43,
        "precode": "}",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "}"
    },
    {
        "id": 683,
        "line": 1,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "n = (n ^ (n - 1));"
    },
    {
        "id": 684,
        "line": 2,
        "precode": "while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "while (true) { "
    },
    {
        "id": 685,
        "line": 3,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "return true;"
    },
    {
        "id": 686,
        "line": 4,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 687,
        "line": 5,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 688,
        "line": 6,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 1014,
        "line": 10,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "n = (n ^ (n - 1));"
    },
    {
        "id": 1015,
        "line": 13,
        "precode": "while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "while (true) { "
    },
    {
        "id": 1016,
        "line": 16,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "return true;"
    },
    {
        "id": 1017,
        "line": 20,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 1018,
        "line": 24,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 1019,
        "line": 28,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 1063,
        "line": 134,
        "precode": "XmlDeclaration decl = null;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "XmlDeclaration decl = new XmlDeclaration();"
    },
    {
        "id": 1064,
        "line": 2,
        "precode": "if (first instanceof XmlDeclaration) decl = (XmlDeclaration) first;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (first instanceof XmlDeclaration) decl = new XmlDeclaration();"
    },
    {
        "id": 1065,
        "line": 3,
        "precode": "else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); }",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = new XmlDeclaration(); }"
    },
    {
        "id": 1066,
        "line": 4,
        "precode": "if (decl != null) { if (decl.name().equalsIgnoreCase(\"xml\")) foundCharset = decl.attr(\"encoding\"); }",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (decl != null) { if (decl.name().equalsIgnoreCase(\"xml\")) foundCharset = decl.attr(\"encoding\"); }"
    },
    {
        "id": 1067,
        "line": 5,
        "precode": "if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = (XmlDeclaration) first; else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase(\"xml\")) foundCharset = decl.attr(\"encoding\"); } }",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = new XmlDeclaration(); else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase(\"xml\")) foundCharset = decl.attr(\"encoding\"); } }"
    },
    {
        "id": 1068,
        "line": 6,
        "precode": "if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = (XmlDeclaration) first; else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase(\"xml\")) foundCharset = decl.attr(\"encoding\"); } }",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = new XmlDeclaration(); else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase(\"xml\")) foundCharset = decl.attr(\"encoding\"); } }"
    },
    {
        "id": 1069,
        "line": 7,
        "precode": "if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = (XmlDeclaration) first; else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase(\"xml\")) foundCharset = decl.attr(\"encoding\"); } }",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = new XmlDeclaration(); else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase(\"xml\")) foundCharset = decl.attr(\"encoding\"); } }"
    },
    {
        "id": 1070,
        "line": 8,
        "precode": "if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = (XmlDeclaration) first; else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase(\"xml\")) foundCharset = decl.attr(\"encoding\"); } }",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = new XmlDeclaration(); else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase(\"xml\")) foundCharset = decl.attr(\"encoding\"); } }"
    },
    {
        "id": 1071,
        "line": 9,
        "precode": "if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = (XmlDeclaration) first; else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase(\"xml\")) foundCharset = decl.attr(\"encoding\"); } }",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = new XmlDeclaration(); else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase(\"xml\")) foundCharset = decl.attr(\"encoding\"); } }"
    },
    {
        "id": 1072,
        "line": 10,
        "precode": "if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = (XmlDeclaration) first; else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase(\"xml\")) foundCharset = decl.attr(\"encoding\"); } }",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = new XmlDeclaration(); else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase(\"xml\")) foundCharset = decl.attr(\"encoding\"); } }"
    },
    {
        "id": 1073,
        "line": 11,
        "precode": "if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = (XmlDeclaration) first; else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase(\"xml\")) foundCharset = decl.attr(\"encoding\"); } }",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = new XmlDeclaration(); else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase(\"xml\")) foundCharset = decl.attr(\"encoding\"); } }"
    },
    {
        "id": 1075,
        "line": 170,
        "precode": "doc.outputSettings().charset(charsetName);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "doc.outputSettings().charset(null);"
    },
    {
        "id": 1081,
        "line": 152,
        "precode": "if (!fullyRead) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_81_fixed/src/main/java/org/jsoup/helper/DataUtil.java",
        "aftercode": "if (fullyRead) {"
    }
]