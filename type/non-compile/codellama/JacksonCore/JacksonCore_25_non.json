[
    {
        "id": 47,
        "line": 1,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "n = (n ^ (n - 1));"
    },
    {
        "id": 48,
        "line": 2,
        "precode": "while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "while (true) { "
    },
    {
        "id": 49,
        "line": 3,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "return true;"
    },
    {
        "id": 50,
        "line": 4,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 51,
        "line": 5,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 52,
        "line": 6,
        "precode": "     while (Math.abs(x-approx*approx) > epsilon) {",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "    while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 53,
        "line": 7,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "n = (n ^ (n - 1));"
    },
    {
        "id": 54,
        "line": 8,
        "precode": "while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "while (true) { "
    },
    {
        "id": 55,
        "line": 9,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "return true;"
    },
    {
        "id": 56,
        "line": 10,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 57,
        "line": 11,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 58,
        "line": 12,
        "precode": "     while (Math.abs(x-approx*approx) > epsilon) {",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "    while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 59,
        "line": 13,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "n = (n ^ (n - 1));"
    },
    {
        "id": 60,
        "line": 14,
        "precode": "while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "while (true) { "
    },
    {
        "id": 61,
        "line": 1,
        "precode": "name = (name & (name - 1));",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "name = (name ^ (name - 1));"
    },
    {
        "id": 62,
        "line": 2,
        "precode": "while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "while (true) {"
    },
    {
        "id": 63,
        "line": 3,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "return true;"
    },
    {
        "id": 64,
        "line": 4,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 65,
        "line": 5,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 66,
        "line": 6,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) {",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 67,
        "line": 7,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
        "aftercode": "return true;"
    },
    {
        "id": 259,
        "line": 1173,
        "precode": "return getIntValue();",
        "aftercode": "return getLongValue();",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java"
    },
    {
        "id": 264,
        "line": 1183,
        "precode": "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
        "aftercode": "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java"
    },
    {
        "id": 265,
        "line": 1188,
        "precode": "public final long nextLongValue(long defaultValue) throws IOException",
        "aftercode": "public final int nextIntValue(int defaultValue) throws IOException",
        "filepath": "defects4j_fixed/JacksonCore/JacksonCore_25_fixed/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java"
    }
]