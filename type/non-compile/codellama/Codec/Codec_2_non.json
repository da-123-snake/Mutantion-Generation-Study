[
    {
        "id": 1,
        "line": 223,
        "precode": "public Base64(boolean urlSafe) {",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "public Base64(boolean urlSafe, boolean urlSafe2) {"
    },
    {
        "id": 2,
        "line": 224,
        "precode": "this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe, urlSafe2);"
    },
    {
        "id": 3,
        "line": 223,
        "precode": "public Base64(boolean urlSafe) {",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "public Base64(boolean urlSafe, boolean urlSafe2) {"
    },
    {
        "id": 4,
        "line": 224,
        "precode": "this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe, urlSafe2);"
    },
    {
        "id": 5,
        "line": 223,
        "precode": "public Base64(boolean urlSafe) {",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "public Base64(boolean urlSafe, boolean urlSafe2) {"
    },
    {
        "id": 6,
        "line": 224,
        "precode": "this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe, urlSafe2);"
    },
    {
        "id": 7,
        "line": 223,
        "precode": "public Base64(boolean urlSafe) {",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "public Base64(boolean urlSafe, boolean urlSafe2) {"
    },
    {
        "id": 33,
        "line": 665,
        "precode": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked) {",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean isChunked) {"
    },
    {
        "id": 40,
        "line": 416,
        "precode": "return;",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return 0;"
    },
    {
        "id": 41,
        "line": 420,
        "precode": "if (inAvail < 0) {",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (inAvail < 0) { eof = true; }"
    },
    {
        "id": 42,
        "line": 427,
        "precode": "buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS];",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS] + 1;"
    },
    {
        "id": 43,
        "line": 428,
        "precode": "buf[pos++] = encodeTable[(x << 4) & MASK_6BITS];",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "buf[pos++] = encodeTable[(x << 4) & MASK_6BITS] + 1;"
    },
    {
        "id": 44,
        "line": 437,
        "precode": "buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS] + 1;"
    },
    {
        "id": 45,
        "line": 438,
        "precode": "buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS];",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "buf[pos++] = encodeTable[(x >> 4) & MASK_6BITS] + 1;"
    },
    {
        "id": 46,
        "line": 439,
        "precode": "buf[pos++] = encodeTable[(x << 2) & MASK_6BITS];",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "buf[pos++] = encodeTable[(x << 2) & MASK_6BITS] + 1;"
    },
    {
        "id": 47,
        "line": 463,
        "precode": "buf[pos++] = encodeTable[x & MASK_6BITS];",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "buf[pos++] = encodeTable[x & MASK_6BITS] + 1;"
    },
    {
        "id": 48,
        "line": 460,
        "precode": "buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS] + 1;"
    },
    {
        "id": 49,
        "line": 461,
        "precode": "buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS];",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS] + 1;"
    },
    {
        "id": 50,
        "line": 462,
        "precode": "buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS];",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS] + 1;"
    },
    {
        "id": 51,
        "line": 463,
        "precode": "buf[pos++] = encodeTable[x & MASK_6BITS];",
        "filepath": "defects4j_fixed/Codec/Codec_2_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "buf[pos++] = encodeTable[x & MASK_6BITS] + 1;"
    }
]