[
    {
        "id": 90,
        "line": 1,
        "precode": "n = (n & (n - 1));",
        "aftercode": "n = (n ^ (n - 1));",
        "filepath": "defects4j_fixed/Codec/Codec_12_fixed/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
    },
    {
        "id": 105,
        "line": 16,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "aftercode": "to_add.addAll(subset);",
        "filepath": "defects4j_fixed/Codec/Codec_12_fixed/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
    },
    {
        "id": 106,
        "line": 17,
        "precode": "c = bin_op.apply(b,a);",
        "aftercode": "c = bin_op.apply(a,b);",
        "filepath": "defects4j_fixed/Codec/Codec_12_fixed/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
    },
    {
        "id": 107,
        "line": 18,
        "precode": "     while (Math.abs(x-approx*approx) > epsilon) {",
        "aftercode": "    while (Math.abs(x-approx) > epsilon) {",
        "filepath": "defects4j_fixed/Codec/Codec_12_fixed/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
    },
    {
        "id": 108,
        "line": 19,
        "precode": "n = (n & (n - 1));",
        "aftercode": "n = (n ^ (n - 1));",
        "filepath": "defects4j_fixed/Codec/Codec_12_fixed/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
    },
    {
        "id": 109,
        "line": 20,
        "precode": "while (!queue.isEmpty()) {",
        "aftercode": "while (true) { ",
        "filepath": "defects4j_fixed/Codec/Codec_12_fixed/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
    },
    {
        "id": 110,
        "line": 21,
        "precode": "return depth==0;",
        "aftercode": "return true;",
        "filepath": "defects4j_fixed/Codec/Codec_12_fixed/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
    },
    {
        "id": 111,
        "line": 22,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "aftercode": "to_add.addAll(subset);",
        "filepath": "defects4j_fixed/Codec/Codec_12_fixed/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
    },
    {
        "id": 112,
        "line": 23,
        "precode": "c = bin_op.apply(b,a);",
        "aftercode": "c = bin_op.apply(a,b);",
        "filepath": "defects4j_fixed/Codec/Codec_12_fixed/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
    },
    {
        "id": 113,
        "line": 24,
        "precode": "     while (Math.abs(x-approx*approx) > epsilon) {",
        "aftercode": "    while (Math.abs(x-approx) > epsilon) {",
        "filepath": "defects4j_fixed/Codec/Codec_12_fixed/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
    },
    {
        "id": 114,
        "line": 25,
        "precode": "n = (n & (n - 1));",
        "aftercode": "n = (n ^ (n - 1));",
        "filepath": "defects4j_fixed/Codec/Codec_12_fixed/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
    },
    {
        "id": 115,
        "line": 26,
        "precode": "while (!queue.isEmpty()) {",
        "aftercode": "while (true) { ",
        "filepath": "defects4j_fixed/Codec/Codec_12_fixed/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
    },
    {
        "id": 119,
        "line": 30,
        "precode": "     while (Math.abs(x-approx*approx) > epsilon) {",
        "aftercode": "    while (Math.abs(x-approx) > epsilon) {",
        "filepath": "defects4j_fixed/Codec/Codec_12_fixed/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
    },
    {
        "id": 120,
        "line": 31,
        "precode": "n = (n & (n - 1));",
        "aftercode": "n = (n ^ (n - 1));",
        "filepath": "defects4j_fixed/Codec/Codec_12_fixed/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java"
    },
    {
        "id": 121,
        "line": 1,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Codec/Codec_12_fixed/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java",
        "aftercode": "n = (n ^ (n - 1));"
    }
]