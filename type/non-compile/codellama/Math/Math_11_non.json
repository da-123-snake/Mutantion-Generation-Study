[
    {
        "id": 27,
        "line": 183,
        "precode": "return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *",
        "filepath": "/root/autodl-tmp/cmd/defects4j_fixed/Math/Math_11_fixed/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
        "aftercode": "return FastMath.pow(2 * FastMath.PI, -0.5 * dim) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals);"
    },
    {
        "id": 28,
        "line": 185,
        "precode": "getExponentTerm(vals);",
        "filepath": "/root/autodl-tmp/cmd/defects4j_fixed/Math/Math_11_fixed/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
        "aftercode": "getExponentTerm(vals); return FastMath.pow(2 * FastMath.PI, -0.5 * dim) * FastMath.pow(covarianceMatrixDeterminant, -0.5);"
    },
    {
        "id": 29,
        "line": 183,
        "precode": "return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *",
        "filepath": "/root/autodl-tmp/cmd/defects4j_fixed/Math/Math_11_fixed/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
        "aftercode": "return FastMath.pow(2 * FastMath.PI, -0.5 * dim) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals);"
    },
    {
        "id": 30,
        "line": 185,
        "precode": "getExponentTerm(vals);",
        "filepath": "/root/autodl-tmp/cmd/defects4j_fixed/Math/Math_11_fixed/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
        "aftercode": "getExponentTerm(vals); return FastMath.pow(2 * FastMath.PI, -0.5 * dim) * FastMath.pow(covarianceMatrixDeterminant, -0.5);"
    },
    {
        "id": 31,
        "line": 183,
        "precode": "return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *",
        "filepath": "/root/autodl-tmp/cmd/defects4j_fixed/Math/Math_11_fixed/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
        "aftercode": "return FastMath.pow(2 * FastMath.PI, -0.5 * dim) * FastMath.pow(covarianceMatrixDeterminant, -0.5) * getExponentTerm(vals);"
    },
    {
        "id": 32,
        "line": 185,
        "precode": "getExponentTerm(vals);",
        "filepath": "/root/autodl-tmp/cmd/defects4j_fixed/Math/Math_11_fixed/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
        "aftercode": "getExponentTerm(vals); return FastMath.pow(2 * FastMath.PI, -0.5 * dim) * FastMath.pow(covarianceMatrixDeterminant, -0.5);"
    }
]