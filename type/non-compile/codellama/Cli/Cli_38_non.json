[
    {
        "id": 1,
        "line": 1,
        "precode": "if (properties == null) {",
        "filepath": "defects4j_fixed/Cli/Cli_38_fixed/src/main/java/org/apache/commons/cli/DefaultParser.java",
        "aftercode": "if (properties != null) {"
    },
    {
        "id": 6,
        "line": 158,
        "precode": "OptionGroup group = options.getOptionGroup(opt);",
        "filepath": "defects4j_fixed/Cli/Cli_38_fixed/src/main/java/org/apache/commons/cli/DefaultParser.java",
        "aftercode": "OptionGroup group = options.getOptionGroup(opt + \"1\");"
    },
    {
        "id": 13,
        "line": 181,
        "precode": "handleOption(opt);",
        "filepath": "defects4j_fixed/Cli/Cli_38_fixed/src/main/java/org/apache/commons/cli/DefaultParser.java",
        "aftercode": "handleOption(opt + \"1\");"
    },
    {
        "id": 14,
        "line": 182,
        "precode": "currentOption = null;",
        "filepath": "defects4j_fixed/Cli/Cli_38_fixed/src/main/java/org/apache/commons/cli/DefaultParser.java",
        "aftercode": "currentOption = \"1\";"
    },
    {
        "id": 30,
        "line": 16,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) {",
        "filepath": "defects4j_fixed/Cli/Cli_38_fixed/src/main/java/org/apache/commons/cli/DefaultParser.java",
        "aftercode": "while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 31,
        "line": 17,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_38_fixed/src/main/java/org/apache/commons/cli/DefaultParser.java",
        "aftercode": "return true;"
    },
    {
        "id": 32,
        "line": 18,
        "precode": "while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Cli/Cli_38_fixed/src/main/java/org/apache/commons/cli/DefaultParser.java",
        "aftercode": "while (true) {"
    },
    {
        "id": 129,
        "line": 1,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Cli/Cli_38_fixed/src/main/java/org/apache/commons/cli/DefaultParser.java",
        "aftercode": "n = (n ^ (n - 1));"
    }
]