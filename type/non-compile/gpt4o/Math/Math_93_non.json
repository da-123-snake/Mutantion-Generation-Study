[
    {
        "id": 160,
        "line": 185,
        "precode": "long result = Math.round(binomialCoefficientDouble(n, k));",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "long result = binomialCoefficientDouble(n, k);"
    },
    {
        "id": 161,
        "line": 185,
        "precode": "long result = Math.round(binomialCoefficientDouble(n, k));",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "double result = Math.round(binomialCoefficientDouble(n, k));"
    },
    {
        "id": 162,
        "line": 185,
        "precode": "long result = Math.round(binomialCoefficientDouble(n, k));",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "long result = binomialCoefficientDouble(n, k);"
    },
    {
        "id": 163,
        "line": 185,
        "precode": "long result = Math.round(binomialCoefficientDouble(n, k));",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "int result = Math.round(binomialCoefficientDouble(n, k));"
    },
    {
        "id": 164,
        "line": 185,
        "precode": "long result = Math.round(binomialCoefficientDouble(n, k));",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "float result = Math.round(binomialCoefficientDouble(n, k));"
    },
    {
        "id": 174,
        "line": 187,
        "precode": "throw new ArithmeticException(",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "throw new Exception("
    },
    {
        "id": 179,
        "line": 190,
        "precode": "return result;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return (double) result;"
    },
    {
        "id": 237,
        "line": 313,
        "precode": "}",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "} else if ((x != null) && (y != null)) {"
    },
    {
        "id": 247,
        "line": 54,
        "precode": "throw new ArithmeticException(\"factorial value is too large to fit in a long\");",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "throw new ArithmeticException(\"result exceeds long capacity\");"
    },
    {
        "id": 251,
        "line": 54,
        "precode": "throw new ArithmeticException(\"factorial value is too large to fit in a long\");",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "throw new ArithmeticException(\"result too large\");"
    },
    {
        "id": 277,
        "line": 410,
        "precode": "}",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "logSum -= Math.log(n);"
    },
    {
        "id": 327,
        "line": 42,
        "precode": "return Double.longBitsToDouble(sign | (exponent + 0x0010000000000000L));",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Double.longBitsToDouble(sign | (exponent - 0x0010000000000000L));"
    },
    {
        "id": 328,
        "line": 45,
        "precode": "return Double.longBitsToDouble(sign | exponent | (mantissa + 1));",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Double.longBitsToDouble(sign | exponent | (mantissa - 1));"
    },
    {
        "id": 330,
        "line": 49,
        "precode": "return Double.longBitsToDouble(sign | (exponent - 0x0010000000000000L) | 0x000fffffffffffffL);",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Double.longBitsToDouble(sign | (exponent + 0x0010000000000000L) | 0x000fffffffffffffL);"
    },
    {
        "id": 331,
        "line": 52,
        "precode": "return Double.longBitsToDouble(sign | exponent | (mantissa - 1));",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Double.longBitsToDouble(sign | exponent | (mantissa + 1));"
    }
]