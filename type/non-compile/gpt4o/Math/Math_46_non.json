[
    {
        "id": 39,
        "line": 1037,
        "precode": "}",
        "filepath": "defects4j_fixed/Math/Math_46_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "return NaN;"
    },
    {
        "id": 54,
        "line": 20,
        "precode": "throw new NotPositiveException(LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, n);",
        "filepath": "defects4j_fixed/Math/Math_46_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "throw new IllegalArgumentException(\"n must be positive: \" + n);"
    },
    {
        "id": 55,
        "line": 1091,
        "precode": "final List<Complex> result = new ArrayList<Complex>();",
        "filepath": "defects4j_fixed/Math/Math_46_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "final List<Complex> result = new LinkedList<Complex>();"
    },
    {
        "id": 175,
        "line": 299,
        "precode": "if (Double.isInfinite(divisor)) {",
        "filepath": "defects4j_fixed/Math/Math_46_fixed/src/main/java/org/apache/commons/math/complex/Complex.java",
        "aftercode": "if ((isInfinite = Double.isInfinite(divisor)) == true) {"
    }
]