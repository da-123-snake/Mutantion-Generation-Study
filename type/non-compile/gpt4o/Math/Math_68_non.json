[
    {
        "id": 228,
        "line": 255,
        "precode": "updateJacobian();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (iterations % 2 == 0) updateJacobian();"
    },
    {
        "id": 254,
        "line": 427,
        "precode": "delta <= parRelativeTolerance * xNorm",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "delta < parRelativeTolerance * xNorm"
    },
    {
        "id": 255,
        "line": 427,
        "precode": "delta <= parRelativeTolerance * xNorm",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "delta >= parRelativeTolerance * xNorm"
    },
    {
        "id": 256,
        "line": 427,
        "precode": "delta <= parRelativeTolerance * xNorm",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "delta == parRelativeTolerance * xNorm"
    },
    {
        "id": 257,
        "line": 434,
        "precode": "Math.abs(actRed) <= 2.2204e-16",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "Math.abs(actRed) < 2.2204e-16"
    },
    {
        "id": 258,
        "line": 434,
        "precode": "Math.abs(actRed) <= 2.2204e-16",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "Math.abs(actRed) > 2.2204e-16"
    },
    {
        "id": 259,
        "line": 434,
        "precode": "preRed <= 2.2204e-16",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "preRed < 2.2204e-16"
    },
    {
        "id": 260,
        "line": 434,
        "precode": "preRed <= 2.2204e-16",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "preRed > 2.2204e-16"
    },
    {
        "id": 261,
        "line": 434,
        "precode": "preRed <= 2.2204e-16",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "preRed >= 2.2204e-16"
    },
    {
        "id": 262,
        "line": 434,
        "precode": "ratio <= 2.0",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "ratio < 2.0"
    },
    {
        "id": 263,
        "line": 434,
        "precode": "ratio <= 2.0",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "ratio >= 2.0"
    },
    {
        "id": 264,
        "line": 17,
        "precode": "if ((Math.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance) && (ratio <= 2.0))",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if ((Math.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance))"
    },
    {
        "id": 265,
        "line": 17,
        "precode": "if ((Math.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance) && (ratio <= 2.0))",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if ((Math.abs(actRed) <= costRelativeTolerance) || (preRed <= costRelativeTolerance) || (ratio <= 2.0))"
    },
    {
        "id": 266,
        "line": 17,
        "precode": "if ((Math.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance) && (ratio <= 2.0))",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if ((Math.abs(actRed) <= 0) && (preRed <= costRelativeTolerance) && (ratio <= 2.0))"
    },
    {
        "id": 267,
        "line": 17,
        "precode": "if ((Math.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance) && (ratio <= 2.0))",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if ((Math.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance) && !(ratio <= 2.0))"
    },
    {
        "id": 268,
        "line": 23,
        "precode": "if (maxCosine <= 2.2204e-16) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (maxCosine < 2.2204e-16) {"
    },
    {
        "id": 276,
        "line": 251,
        "precode": " incrementIterationsCounter();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": " decrementIterationsCounter();"
    },
    {
        "id": 352,
        "line": 166,
        "precode": "setConvergenceChecker(null);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "setConvergenceChecker(this);"
    },
    {
        "id": 360,
        "line": 247,
        "precode": "boolean firstIteration = true;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "boolean firstIteration;"
    },
    {
        "id": 362,
        "line": 249,
        "precode": "while (true) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "while (false) {"
    },
    {
        "id": 364,
        "line": 255,
        "precode": "updateJacobian();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateJacobianNot();"
    },
    {
        "id": 367,
        "line": 249,
        "precode": "while (true) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "while (!true) {"
    },
    {
        "id": 369,
        "line": 251,
        "precode": "incrementIterationsCounter();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "incrementIterationsCounter() && false;"
    },
    {
        "id": 378,
        "line": 347,
        "precode": "updateResidualsAndCost();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateResiduals();"
    },
    {
        "id": 380,
        "line": 347,
        "precode": "updateResidualsAndCost();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateCost();"
    },
    {
        "id": 393,
        "line": 424,
        "precode": "(Math.abs(actRed) <= costRelativeTolerance) &&",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "(Math.abs(actRed) < costRelativeTolerance) &&"
    }
]