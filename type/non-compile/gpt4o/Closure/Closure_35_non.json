[
    {
        "id": 192,
        "line": 1194,
        "precode": "FlowScope rightScope = reverseInterpreter.",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "FlowScope rightScope = scope;"
    },
    {
        "id": 198,
        "line": 1194,
        "precode": "FlowScope rightScope = reverseInterpreter.",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "FlowScope rightScope = leftLiterals.getOutcomeFlowScope(left.getType(), condition);"
    },
    {
        "id": 199,
        "line": 1190,
        "precode": "JSType leftType = left.getJSType();",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "JSType leftType;"
    },
    {
        "id": 201,
        "line": 1190,
        "precode": "JSType leftType = left.getJSType();",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "JSType type = left.getJSType();"
    },
    {
        "id": 203,
        "line": 1189,
        "precode": "scope.createChildFlowScope());",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "scope.createChildFlowScope(null);"
    },
    {
        "id": 204,
        "line": 1194,
        "precode": "FlowScope rightScope = reverseInterpreter.",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "FlowScope rightScope = leftLiterals.getJoinedFlowScope();"
    },
    {
        "id": 603,
        "line": 1036,
        "precode": "scope = traverse(constructor, scope);",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "scope = traverse(scope, constructor);"
    },
    {
        "id": 606,
        "line": 1041,
        "precode": "constructorType = constructorType.restrictByNotNullOrUndefined();",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "constructorType = constructorType.restrictByNullOrUndefined();"
    },
    {
        "id": 608,
        "line": 1043,
        "precode": "type = getNativeType(UNKNOWN_TYPE);",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "type = getNativeType(OBJECT_TYPE);"
    },
    {
        "id": 610,
        "line": 1083,
        "precode": "n.setJSType(type);",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "constructor.setJSType(type);"
    },
    {
        "id": 613,
        "line": 1097,
        "precode": "}",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "} else { type = getNativeType(UNKNOWN_TYPE); }"
    },
    {
        "id": 614,
        "line": 1083,
        "precode": "n.setJSType(type);",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "n.setJSType(constructorType);"
    },
    {
        "id": 615,
        "line": 1059,
        "precode": "for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "for (Node arg = constructor.getNext(); arg != null; arg = arg.getPrevious()) {"
    },
    {
        "id": 616,
        "line": 1060,
        "precode": "scope = traverse(arg, scope);",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "scope = scope.join(traverse(arg, createInitialScope()));"
    },
    {
        "id": 617,
        "line": 1060,
        "precode": "scope = traverse(arg, scope);",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "scope = traverse(constructor, createInitialScope());"
    },
    {
        "id": 619,
        "line": 1097,
        "precode": "}",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "} else {type = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);}"
    },
    {
        "id": 620,
        "line": 1097,
        "precode": "}",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "} else {return scope;}"
    },
    {
        "id": 846,
        "line": 1122,
        "precode": "type.matchConstraint(constraintObj);",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "type.matchProperty(constraintObj);"
    },
    {
        "id": 848,
        "line": 1122,
        "precode": "type.matchConstraint(constraintObj);",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "type.matchType(constraintObj);"
    }
]