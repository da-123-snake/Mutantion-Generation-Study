[
    {
        "id": 160,
        "line": 231,
        "precode": "currentOption = options.getOption(token);",
        "filepath": "defects4j_fixed/Cli/Cli_18_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "currentOption = options.getOption(currentOption);"
    },
    {
        "id": 167,
        "line": 236,
        "precode": "eatTheRest = true;",
        "filepath": "defects4j_fixed/Cli/Cli_18_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "continue; // eatTheRest = true;"
    },
    {
        "id": 170,
        "line": 114,
        "precode": "if (token.indexOf('=') != -1)",
        "filepath": "defects4j_fixed/Cli/Cli_18_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.endsWith('='))"
    },
    {
        "id": 194,
        "line": 8,
        "precode": "/** the command line Options */",
        "filepath": "defects4j_fixed/Cli/Cli_18_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "/** the command line arguments */"
    },
    {
        "id": 195,
        "line": 1,
        "precode": "/** specifies if bursting should continue */",
        "filepath": "defects4j_fixed/Cli/Cli_18_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "/** specifies if bursting continues */"
    },
    {
        "id": 203,
        "line": 159,
        "precode": "}",
        "filepath": "defects4j_fixed/Cli/Cli_18_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "} else if (token.indexOf('=') > -1) {"
    },
    {
        "id": 215,
        "line": 148,
        "precode": "process(token);",
        "filepath": "defects4j_fixed/Cli/Cli_18_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "return;"
    },
    {
        "id": 246,
        "line": 271,
        "precode": "String ch = String.valueOf(token.charAt(i));",
        "filepath": "defects4j_fixed/Cli/Cli_18_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "char ch = token.charAt(i);"
    }
]