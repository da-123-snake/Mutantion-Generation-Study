[
    {
        "id": 987,
        "line": 232,
        "precode": "public static String clean(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "public static String clean(String bodyHtml, String baseUri, Whitelist whitelist) {"
    },
    {
        "id": 988,
        "line": 134,
        "precode": "public static Document parse(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "public static Document parse(InputStream in, String encoding, String baseUri, Parser parser) throws IOException {"
    },
    {
        "id": 990,
        "line": 7,
        "precode": "@param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, if present, or fall back to {@code UTF-8} (which is often safe to do).",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "@param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, if present, or fall back to {@code ISO-8859-1} (which is often safe to do)."
    },
    {
        "id": 991,
        "line": 134,
        "precode": "{",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "{ if (in == null) throw new IllegalArgumentException(\"InputStream cannot be null\");"
    },
    {
        "id": 994,
        "line": 134,
        "precode": "public static Document parse(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "public static Document parse(InputStream in, String charsetName, String baseUri, Parser xmlParser) throws IOException {"
    },
    {
        "id": 995,
        "line": 134,
        "precode": "public static Document parse(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "public static Document parse(InputStream in, String charsetName, String context, Parser parser) throws IOException {"
    },
    {
        "id": 996,
        "line": 8,
        "precode": "@param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, if present, or fall back to {@code UTF-8} (which is often safe to do).",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "@param charsetName (optional) character set of file contents. Set to {@code null} to determine from {@code http-equiv} meta tag, if present, or fall back to null (which is often safe to do)."
    },
    {
        "id": 998,
        "line": 10,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "return true;"
    },
    {
        "id": 999,
        "line": 4,
        "precode": "import org.jsoup.parser.Parser;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "import org.jsoup.helper.Parser;"
    },
    {
        "id": 1000,
        "line": 12,
        "precode": "private Jsoup() {}",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "Jsoup() {}"
    },
    {
        "id": 1001,
        "line": 13,
        "precode": "import java.net.URL;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "import java.util.Date;"
    },
    {
        "id": 1002,
        "line": 5,
        "precode": "import org.jsoup.safety.Cleaner;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "import org.jsoup.safety.Cleanup;"
    },
    {
        "id": 1003,
        "line": 12,
        "precode": "import java.io.InputStream;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "import java.io.Reader;"
    },
    {
        "id": 1004,
        "line": 6,
        "precode": "import org.jsoup.safety.Whitelist;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "import org.jsoup.safety.SafeList;"
    },
    {
        "id": 1011,
        "line": 73,
        "precode": "return HttpConnection.connect(url);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "return HttpConnection.connect(url).method(Method.POST);"
    },
    {
        "id": 1013,
        "line": 73,
        "precode": "return HttpConnection.connect(url);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "return HttpConnection.connect(baseUri);"
    },
    {
        "id": 1014,
        "line": 73,
        "precode": "return HttpConnection.connect(url);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "return HttpConnection.connect(null);"
    },
    {
        "id": 1015,
        "line": 6,
        "precode": "return DataUtil.load(in, charsetName, baseUri);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "return DataUtil.load(in, charsetName, null);"
    },
    {
        "id": 1016,
        "line": 6,
        "precode": "return DataUtil.load(in, charsetName, baseUri);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "return DataUtil.parse(in, charsetName, baseUri);"
    },
    {
        "id": 1017,
        "line": 6,
        "precode": "return DataUtil.load(in, charsetName, baseUri);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "return DataUtil.load(in, null, baseUri);"
    },
    {
        "id": 1018,
        "line": 6,
        "precode": "return DataUtil.load(in, charsetName, baseUri);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "return DataUtil.load(in, \"UTF-8\", baseUri);"
    },
    {
        "id": 1019,
        "line": 6,
        "precode": "return DataUtil.load(in, charsetName, baseUri);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "return DataUtil.load(in, charsetName, \"http://example.com\");"
    },
    {
        "id": 1020,
        "line": 6,
        "precode": "return DataUtil.load(in, charsetName, baseUri);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "return null;"
    },
    {
        "id": 1021,
        "line": 6,
        "precode": "return DataUtil.load(in, charsetName, baseUri);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "return DataUtil.load(in, charsetName);"
    },
    {
        "id": 1022,
        "line": 6,
        "precode": "return DataUtil.load(in, charsetName, baseUri);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "throw new IOException(\"Forced exception\");"
    },
    {
        "id": 1023,
        "line": 6,
        "precode": "return DataUtil.load(in, charsetName, baseUri);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_58_fixed/src/main/java/org/jsoup/Jsoup.java",
        "aftercode": "return DataUtil.load(in, charsetName, baseUri).title();"
    }
]