[
    {
        "id": 320,
        "line": 822,
        "precode": "  if (n & 1) {",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "  if (!(n & 1)) {"
    },
    {
        "id": 321,
        "line": 822,
        "precode": "  if (!(n & 1) {",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "  if (n & 1) {"
    },
    {
        "id": 322,
        "line": 822,
        "precode": "  if (n & 1) {",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "  if (!(n ^ 1)) {"
    },
    {
        "id": 323,
        "line": 822,
        "precode": "  if (!(n & 1) {",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "  if (n ^ 1) {"
    },
    {
        "id": 324,
        "line": 822,
        "precode": "  if (n & 1) {",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "  if (!(n ^ 1)) {"
    },
    {
        "id": 325,
        "line": 822,
        "precode": "  if (!(n & 1) {",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "  if (n ^ 1) {"
    },
    {
        "id": 326,
        "line": 822,
        "precode": "  if (n & 1) {",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "  if (!(n - 1)) {"
    },
    {
        "id": 327,
        "line": 822,
        "precode": "  if (!(n & 1) {",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "  if (n - 1) {"
    },
    {
        "id": 328,
        "line": 822,
        "precode": "  if (n & 1) {",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "  if (!(n | 1)) {"
    },
    {
        "id": 391,
        "line": 216,
        "precode": "if (!NodeUtil.isFunction(breakTarget) && ",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (NodeUtil.isFunction(breakTarget) || "
    },
    {
        "id": 392,
        "line": 216,
        "precode": "if (!NodeUtil.isFunction(breakTarget) && ",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (NodeUtil.isFunction(breakTarget) || "
    },
    {
        "id": 393,
        "line": 216,
        "precode": "if (!NodeUtil.isFunction(breakTarget) && ",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (NodeUtil.isFunction(breakTarget) || "
    },
    {
        "id": 394,
        "line": 216,
        "precode": "if (!NodeUtil.isFunction(breakTarget) && ",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (NodeUtil.isFunction(breakTarget) || "
    },
    {
        "id": 395,
        "line": 216,
        "precode": "if (!NodeUtil.isFunction(breakTarget) && ",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (NodeUtil.isFunction(breakTarget) || "
    },
    {
        "id": 396,
        "line": 216,
        "precode": "if (!NodeUtil.isFunction(breakTarget) && ",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (NodeUtil.isFunction(breakTarget) || "
    },
    {
        "id": 397,
        "line": 216,
        "precode": "if (!NodeUtil.isFunction(breakTarget) && ",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (NodeUtil.isFunction(breakTarget) || "
    },
    {
        "id": 398,
        "line": 216,
        "precode": "if (!NodeUtil.isFunction(breakTarget) && ",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (NodeUtil.isFunction(breakTarget) || "
    },
    {
        "id": 1100,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (true) {\n\tnull;\n}\n}"
    },
    {
        "id": 1101,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (false) {\n\tnull;\n}\n}"
    },
    {
        "id": 1102,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.BLOCK) {\n\tnull;\n}\n}"
    },
    {
        "id": 1103,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.STRING) {\n\tnull;\n}\n}"
    },
    {
        "id": 1104,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.NUMBER) {\n\tnull;\n}\n}"
    },
    {
        "id": 1105,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.NAME) {\n\tnull;\n}\n}"
    },
    {
        "id": 1106,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.REGEXP) {\n\tnull;\n}\n}"
    },
    {
        "id": 1107,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.ASSIGN) {\n\tnull;\n}\n}"
    },
    {
        "id": 1108,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.COMMA) {\n\tnull;\n}\n}"
    },
    {
        "id": 1109,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.SEMICOLON) {\n\tnull;\n}\n}"
    },
    {
        "id": 1110,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.COND) {\n\tnull;\n}\n}"
    },
    {
        "id": 1111,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.VAR) {\n\tnull;\n}\n}"
    },
    {
        "id": 1112,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.FUNCTION) {\n\tnull;\n}\n}"
    },
    {
        "id": 1113,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.THIS) {\n\tnull;\n}\n}"
    },
    {
        "id": 1114,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.SUPER) {\n\tnull;\n}\n}"
    },
    {
        "id": 1115,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.TRUE) {\n\tnull;\n}\n}"
    },
    {
        "id": 1116,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.FALSE) {\n\tnull;\n}\n}"
    },
    {
        "id": 1117,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.NULL) {\n\tnull;\n}\n}"
    },
    {
        "id": 1118,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.NEW) {\n\tnull;\n}\n}"
    },
    {
        "id": 1119,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.DELETE) {\n\tnull;\n}\n}"
    },
    {
        "id": 1120,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.TYPEOF) {\n\tnull;\n}\n}"
    },
    {
        "id": 1121,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.ADD) {\n\tnull;\n}\n}"
    },
    {
        "id": 1122,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.SUB) {\n\tnull;\n}\n}"
    },
    {
        "id": 1123,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.MUL) {\n\tnull;\n}\n}"
    },
    {
        "id": 1124,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.DIV) {\n\tnull;\n}\n}"
    },
    {
        "id": 1125,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.MOD) {\n\tnull;\n}\n}"
    },
    {
        "id": 1126,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.EXP) {\n\tnull;\n}\n}"
    },
    {
        "id": 1127,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.BITWISE_NOT) {\n\tnull;\n}\n}"
    },
    {
        "id": 1128,
        "line": 551,
        "precode": "if (n.getType() == Token.BLOCK) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_87_fixed/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "aftercode": "if (n.getType() == Token.BLOCK) {\nif (n.getType() == Token.BITWISE_AND) {\n\tnull;\n}\n}"
    }
]