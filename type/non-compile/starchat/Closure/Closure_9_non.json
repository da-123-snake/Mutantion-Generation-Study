[
    {
        "id": 99,
        "line": 127,
        "precode": "return filename;",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "return normalizeSourceName(filename);"
    },
    {
        "id": 100,
        "line": 127,
        "precode": "return filename;",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "return normalizeSourceName(filename.replace(\"\\\\\", \"/\"))"
    },
    {
        "id": 101,
        "line": 127,
        "precode": "return filename;",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "return normalizeSourceName(filename.substring(1))"
    },
    {
        "id": 102,
        "line": 127,
        "precode": "return filename;",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "return normalizeSourceName(filename.substring(2))"
    },
    {
        "id": 103,
        "line": 127,
        "precode": "return filename;",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "return normalizeSourceName(filename.substring(3))"
    },
    {
        "id": 104,
        "line": 127,
        "precode": "return filename;",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "return normalizeSourceName(filename.substring(4))"
    },
    {
        "id": 105,
        "line": 127,
        "precode": "return filename;",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "return normalizeSourceName(filename.substring(5))"
    },
    {
        "id": 106,
        "line": 206,
        "precode": "visitScript(",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "visitScript("
    },
    {
        "id": 107,
        "line": 206,
        "precode": "NodeTraversal t, Node script) {",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "NodeTraversal t, Node script) {"
    },
    {
        "id": 108,
        "line": 206,
        "precode": "Preconditions.checkArgument(",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "Preconditions.checkArgument("
    },
    {
        "id": 109,
        "line": 206,
        "precode": "scriptNodeCount == 1, ",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "scriptNodeCount == 1, "
    },
    {
        "id": 110,
        "line": 206,
        "precode": "\"ProcessCommonJSModules supports only one invocation per ",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "\"ProcessCommonJSModules supports only one invocation per "
    },
    {
        "id": 111,
        "line": 206,
        "precode": "CompilerInput / script node\", ",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "CompilerInput / script node\", "
    },
    {
        "id": 112,
        "line": 206,
        "precode": "String moduleName = guessCJSModuleName(",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "String moduleName = guessCJSModuleName("
    },
    {
        "id": 113,
        "line": 206,
        "precode": "script.getSourceFileName());",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "script.getSourceFileName());"
    },
    {
        "id": 114,
        "line": 206,
        "precode": "ci.addProvide(",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "ci.addProvide("
    },
    {
        "id": 115,
        "line": 240,
        "precode": "String moduleName = guessCJSModuleName(prop.getSourceFileName());",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "String moduleName = guessCJSModuleName(prop.getSourceFileName()).replace(\".\", \"$\");"
    },
    {
        "id": 116,
        "line": 240,
        "precode": "Node module = prop.getChildAtIndex(0);",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "Node module = prop.getChildAtIndex(0).putProp(\"originalName\", \"module\");"
    },
    {
        "id": 117,
        "line": 240,
        "precode": "Node exports = prop.getChildAtIndex(1);",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "Node exports = prop.getChildAtIndex(1).putProp(\"originalName\", \"exports\");"
    },
    {
        "id": 118,
        "line": 240,
        "precode": "String moduleName = guessCJSModuleName(prop.getSourceFileName());",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "String moduleName = guessCJSModuleName(prop.getSourceFileName()).substring(0, guessCJSModuleName(prop.getSourceFileName()).length() - 1);"
    },
    {
        "id": 119,
        "line": 240,
        "precode": "Node module = prop.getChildAtIndex(0);",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "Node module = prop.getChildAtIndex(0).putProp(\"originalName\", \"module\"); module.setString(moduleName);"
    },
    {
        "id": 120,
        "line": 240,
        "precode": "Node exports = prop.getChildAtIndex(1);",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "Node exports = prop.getChildAtIndex(1).putProp(\"originalName\", \"exports\"); exports.setString(moduleName + \"$exports\");"
    },
    {
        "id": 121,
        "line": 240,
        "precode": "String moduleName = guessCJSModuleName(prop.getSourceFileName());",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "String moduleName = guessCJSModuleName(prop.getSourceFileName()).replace(\".\", \"$\"); Node module = prop.getChildAtIndex(0); Node exports = prop.getChildAtIndex(1);"
    },
    {
        "id": 537,
        "line": 127,
        "precode": "requiredFilename = requiredFilename.replaceAll(\"\\\\.js$\", \"\");",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "requiredFilename = requiredFilename.replace(\"\\\\.js$\", \"\");"
    },
    {
        "id": 538,
        "line": 127,
        "precode": "currentFilename = currentFilename.replaceAll(\"\\\\.js$\", \"\");",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "currentFilename = currentFilename.replace(\"\\\\.js$\", \"\");"
    },
    {
        "id": 539,
        "line": 127,
        "precode": "if (requiredFilename.startsWith(\".\" + MODULE_SLASH) ||",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "if (requiredFilename.startsWith(\".\" + MODULE_SLASH) ||"
    },
    {
        "id": 540,
        "line": 127,
        "precode": "requiredFilename.startsWith(\"..\" + MODULE_SLASH)) {",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "requiredFilename.startsWith(\"..\" + MODULE_SLASH)) {"
    },
    {
        "id": 541,
        "line": 127,
        "precode": "try {",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "try {"
    },
    {
        "id": 542,
        "line": 127,
        "precode": "requiredFilename = (new URI(currentFilename)).resolve(",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "requiredFilename = (new URI(currentFilename)).resolve("
    },
    {
        "id": 543,
        "line": 127,
        "precode": "new URI(requiredFilename))",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "new URI(requiredFilename))"
    },
    {
        "id": 544,
        "line": 206,
        "precode": "private void visitScript(NodeTraversal t, Node script) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "private void visitScript(NodeTraversal t, Node script) {\n    String moduleName = guessCJSModuleName(script.getSourceFileName());\n    script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit()).copyInformationFromForTree(script));\n    if (reportDependencies) {\n        CompilerInput ci = t.getInput();\n        ci.addProvide(moduleName);\n        JSModule m = new JSModule(moduleName);\n        m.addAndOverrideModule(ci);\n        module = m;\n    }\n    script.addChildToFront(IR.exprResult(IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")), IR.string(moduleName))).copyInformationFromForTree(script));\n\n    emitOptionalModuleExportsOverride(script, moduleName);\n\n    // Rename vars to not conflict in global scope.\n    NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(moduleName));\n\n    compiler.reportCodeChange();\n}"
    },
    {
        "id": 545,
        "line": 206,
        "precode": "String moduleName = guessCJSModuleName(script.getSourceFileName());\n",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "String moduleName = guessCJSModuleName(script.getSourceFileName());\n    script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit()).copyInformationFromForTree(script));\n    if (reportDependencies) {\n        CompilerInput ci = t.getInput();\n        ci.addProvide(moduleName);\n        JSModule m = new JSModule(moduleName);\n        m.addAndOverrideModule(ci);\n        module = m;\n    }\n    script.addChildToFront(IR.exprResult(IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")), IR.string(moduleName))).copyInformationFromForTree(script));\n\n    emitOptionalModuleExportsOverride(script, moduleName);\n\n    // Rename vars to not conflict in global scope.\n    NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(moduleName));\n\n    compiler.reportCodeChange();"
    },
    {
        "id": 546,
        "line": 206,
        "precode": "if (reportDependencies) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "if (true) {\n    String moduleName = guessCJSModuleName(script.getSourceFileName());\n    script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit()).copyInformationFromForTree(script));\n    if (reportDependencies) {\n        CompilerInput ci = t.getInput();\n        ci.addProvide(moduleName);\n        JSModule m = new JSModule(moduleName);\n        m.addAndOverrideModule(ci);\n        module = m;\n    }\n    script.addChildToFront(IR.exprResult(IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")), IR.string(moduleName))).copyInformationFromForTree(script));\n\n    emitOptionalModuleExportsOverride(script, moduleName);\n\n    // Rename vars to not conflict in global scope.\n    NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(moduleName));\n\n    compiler.reportCodeChange();\n}"
    },
    {
        "id": 547,
        "line": 206,
        "precode": "CompilerInput ci = t.getInput();\n",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "CompilerInput ci = t.getInput();\n    String moduleName = guessCJSModuleName(script.getSourceFileName());\n    script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit()).copyInformationFromForTree(script));\n    if (reportDependencies) {\n        CompilerInput ci = t.getInput();\n        ci.addProvide(moduleName);\n        JSModule m = new JSModule(moduleName);\n        m.addAndOverrideModule(ci);\n        module = m;\n    }\n    script.addChildToFront(IR.exprResult(IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")), IR.string(moduleName))).copyInformationFromForTree(script));\n\n    emitOptionalModuleExportsOverride(script, moduleName);\n\n    // Rename vars to not conflict in global scope.\n    NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(moduleName));\n\n    compiler.reportCodeChange();"
    },
    {
        "id": 548,
        "line": 206,
        "precode": "ci.addProvide(moduleName);\n",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "ci.addProvide(moduleName);\n    String moduleName = guessCJSModuleName(script.getSourceFileName());\n    script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit()).copyInformationFromForTree(script));\n    if (reportDependencies) {\n        CompilerInput ci = t.getInput();\n        ci.addProvide(moduleName);\n        JSModule m = new JSModule(moduleName);\n        m.addAndOverrideModule(ci);\n        module = m;\n    }\n    script.addChildToFront(IR.exprResult(IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")), IR.string(moduleName))).copyInformationFromForTree(script));\n\n    emitOptionalModuleExportsOverride(script, moduleName);\n\n    // Rename vars to not conflict in global scope.\n    NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(moduleName));\n\n    compiler.reportCodeChange();"
    },
    {
        "id": 549,
        "line": 206,
        "precode": "JSModule m = new JSModule(moduleName);\n",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "JSModule m = new JSModule(moduleName);\n    ci.addProvide(moduleName);\n    String moduleName = guessCJSModuleName(script.getSourceFileName());\n    script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit()).copyInformationFromForTree(script));\n    if (reportDependencies) {\n        CompilerInput ci = t.getInput();\n        ci.addProvide(moduleName);\n        JSModule m = new JSModule(moduleName);\n        m.addAndOverrideModule(ci);\n        module = m;\n    }\n    script.addChildToFront(IR.exprResult(IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")), IR.string(moduleName))).copyInformationFromForTree(script));\n\n    emitOptionalModuleExportsOverride(script, moduleName);\n\n    // Rename vars to not conflict in global scope.\n    NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(moduleName));\n\n    compiler.reportCodeChange();"
    },
    {
        "id": 550,
        "line": 206,
        "precode": "m.addAndOverrideModule(ci);\n",
        "filepath": "defects4j_fixed/Closure/Closure_9_fixed/src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
        "aftercode": "m.addAndOverrideModule(ci);\n    ci.addProvide(moduleName);\n    String moduleName = guessCJSModuleName(script.getSourceFileName());\n    script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit()).copyInformationFromForTree(script));\n    if (reportDependencies) {\n        CompilerInput ci = t.getInput();\n        ci.addProvide(moduleName);\n        JSModule m = new JSModule(moduleName);\n        m.addAndOverrideModule(ci);\n        module = m;\n    }\n    script.addChildToFront(IR.exprResult(IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")), IR.string(moduleName))).copyInformationFromForTree(script));\n\n    emitOptionalModuleExportsOverride(script, moduleName);\n\n    // Rename vars to not conflict in global scope.\n    NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(moduleName));\n\n    compiler.reportCodeChange();"
    }
]