[
    {
        "id": 130,
        "line": 168,
        "precode": "ControlFlowGraph cfg = new ControlFlowGraph(compiler, false, true);",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "ControlFlowGraph cfg = new ControlFlowGraph(compiler, false, false);"
    },
    {
        "id": 131,
        "line": 168,
        "precode": "List<Candidate> candidates = Lists.newLinkedList();",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "List<Candidate> candidates = new ArrayList<>();"
    },
    {
        "id": 132,
        "line": 168,
        "precode": "MustBeReachingVariableDef reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler);",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "MustBeReachingVariableDef reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler, false);"
    },
    {
        "id": 133,
        "line": 168,
        "precode": "MaybeReachingVariableUse reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "MaybeReachingVariableUse reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler, false);"
    },
    {
        "id": 134,
        "line": 168,
        "precode": "if (c.canInline()) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (true) {"
    },
    {
        "id": 135,
        "line": 168,
        "precode": "if (c.canInline()) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (false) {"
    },
    {
        "id": 136,
        "line": 168,
        "precode": "if (c.canInline()) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (Math.random() > 0.5) {"
    },
    {
        "id": 137,
        "line": 371,
        "precode": "int n = 3;",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "int n = n ^ (n - 1);"
    },
    {
        "id": 138,
        "line": 371,
        "precode": "while (true) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "while (true) {"
    },
    {
        "id": 139,
        "line": 371,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "return true;"
    },
    {
        "id": 140,
        "line": 371,
        "precode": "ArrayList<Integer> r = new ArrayList<>();",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "ArrayList<Integer> r = new ArrayList<>();\nto_add(r);"
    },
    {
        "id": 142,
        "line": 371,
        "precode": "int c = a + b;",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "int c = b + a;"
    },
    {
        "id": 143,
        "line": 371,
        "precode": "while (Math.abs(x - approx * approx) > epsilon) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "while (Math.abs(x - approx) > epsilon) {"
    },
    {
        "id": 144,
        "line": 371,
        "precode": "int n = 3;",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "int n = n & (n - 1);"
    },
    {
        "id": 145,
        "line": 371,
        "precode": "while (n > 0) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "while (n == 0) {"
    },
    {
        "id": 146,
        "line": 371,
        "precode": "return n == 1;",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "return true;"
    },
    {
        "id": 147,
        "line": 371,
        "precode": "ArrayList<Integer> r = new ArrayList<>();",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "ArrayList<Integer> r = new ArrayList<>();\n\nfor (Integer i : subset) {\n  r.add(i);\n}"
    },
    {
        "id": 148,
        "line": 371,
        "precode": "c = a * b;",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "c = b * a;"
    },
    {
        "id": 214,
        "line": 168,
        "precode": "if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (false) { // TODO: Remove this line"
    },
    {
        "id": 215,
        "line": 168,
        "precode": "if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (false) { // TODO: Remove this line"
    },
    {
        "id": 216,
        "line": 168,
        "precode": "for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "for (int i = 0; i < 10; i++) { // TODO: Replace this loop with your own"
    },
    {
        "id": 217,
        "line": 168,
        "precode": "if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (false) { // TODO: Remove this line"
    },
    {
        "id": 218,
        "line": 168,
        "precode": "if (n == null) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (false) { // TODO: Remove this line"
    },
    {
        "id": 219,
        "line": 168,
        "precode": "if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (true) { // TODO: Change this line to false"
    },
    {
        "id": 220,
        "line": 168,
        "precode": "if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (true) { // TODO: Change this line to false"
    },
    {
        "id": 221,
        "line": 168,
        "precode": "for (Node c = n.getFirstChild(); c!= null; c = c.getNext()) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "for (int i = 0; i < 10; i++) { // TODO: Replace this loop with your own"
    },
    {
        "id": 222,
        "line": 168,
        "precode": "if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (true) { // TODO: Change this line to false"
    },
    {
        "id": 1321,
        "line": 168,
        "precode": "  AbstractCompiler compiler;",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "  private final AbstractCompiler compiler;"
    },
    {
        "id": 1323,
        "line": 168,
        "precode": "  private ControlFlowGraph<Node> cfg;",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "  private ControlFlowGraph<Node> cfg;"
    },
    {
        "id": 1324,
        "line": 168,
        "precode": "  private List<Candidate> candidates;",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "  private List<Candidate> candidates;"
    },
    {
        "id": 1325,
        "line": 168,
        "precode": "  private MustBeReachingVariableDef reachingDef;",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "  private MustBeReachingVariableDef reachingDef;"
    },
    {
        "id": 1326,
        "line": 168,
        "precode": "  private MaybeReachingVariableUse reachingUses;",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "  private MaybeReachingVariableUse reachingUses;"
    },
    {
        "id": 1327,
        "line": 168,
        "precode": "  private static final Predicate<Node> SIDE_EFFECT_PREDICATE =",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "  private static final Predicate<Node> SIDE_EFFECT_PREDICATE ="
    },
    {
        "id": 1328,
        "line": 451,
        "precode": "if (n.isName() && n.getString().equals(varName)) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (n.isName() && n.getString().equals(varName) &&!n.isAssign()) {\n"
    },
    {
        "id": 1329,
        "line": 451,
        "precode": "    // do not count in if it is left child of an assignment operator\n",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "    // do not count in if it is left child of an assignment operator\n    if (!n.isAssign()) {\n"
    },
    {
        "id": 1330,
        "line": 451,
        "precode": "if (n.isName() && n.getString().equals(varName)) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (n.isName() && n.getString().equals(varName) && n.getParent().isAssign()) {\n"
    },
    {
        "id": 1331,
        "line": 451,
        "precode": "    // do not count in if it is left child of an assignment operator\n",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "    // do not count in if it is left child of an assignment operator\n    if (n.getParent().isAssign()) {\n"
    },
    {
        "id": 1332,
        "line": 451,
        "precode": "if (n.isName() && n.getString().equals(varName)) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (n.isName() && n.getString().equals(varName) &&!n.isAssign() &&!n.getParent().isAssign()) {\n"
    },
    {
        "id": 1333,
        "line": 451,
        "precode": "    // do not count in if it is left child of an assignment operator\n",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "    // do not count in if it is left child of an assignment operator\n    if (!n.isAssign() &&!n.getParent().isAssign()) {\n"
    },
    {
        "id": 1334,
        "line": 451,
        "precode": "if (n.isName() && n.getString().equals(varName)) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (n.isName() && n.getString().equals(varName) && n.getParent().isAssign() &&!n.isAssign()) {\n"
    },
    {
        "id": 1335,
        "line": 451,
        "precode": "    // do not count in if it is left child of an assignment operator\n",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "    // do not count in if it is left child of an assignment operator\n    if (n.getParent().isAssign() &&!n.isAssign()) {\n"
    },
    {
        "id": 1336,
        "line": 451,
        "precode": "if (n.isName() && n.getString().equals(varName)) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "if (n.isName() && n.getString().equals(varName) &&!n.isAssign() && n.getParent().isAssign()) {\n"
    },
    {
        "id": 1337,
        "line": 451,
        "precode": "    // do not count in if it is left child of an assignment operator\n",
        "filepath": "defects4j_fixed/Closure/Closure_30_fixed/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "aftercode": "    // do not count in if it is left child of an assignment operator\n    if (!n.isAssign() && n.getParent().isAssign()) {\n"
    }
]