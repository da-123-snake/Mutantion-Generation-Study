[
    {
        "id": 266,
        "line": 222,
        "precode": "if (n.getType() == Token.RETURN) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "if (false) {\n"
    },
    {
        "id": 267,
        "line": 222,
        "precode": "  if (n.hasChildren()) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  if (false) {\n"
    },
    {
        "id": 268,
        "line": 222,
        "precode": "    break;\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "    break;\n"
    },
    {
        "id": 269,
        "line": 229,
        "precode": "  } else {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  } else {\n"
    },
    {
        "id": 270,
        "line": 222,
        "precode": "    switch (n.getType()) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "    switch (false) {\n"
    },
    {
        "id": 271,
        "line": 222,
        "precode": "      case Token.RETURN:\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "      case false: // Token.RETURN\n"
    },
    {
        "id": 272,
        "line": 222,
        "precode": "        if (n.hasChildren()) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "        if (false) {\n"
    },
    {
        "id": 273,
        "line": 222,
        "precode": "          break;\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "          break;\n"
    },
    {
        "id": 274,
        "line": 229,
        "precode": "        } else {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "        } else {\n"
    },
    {
        "id": 275,
        "line": 222,
        "precode": "          gNode = curCfg.getDirectedGraphNode(n);\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "          gNode = curCfg.getDirectedGraphNode(false);\n"
    },
    {
        "id": 276,
        "line": 222,
        "precode": "          if (gNode == null) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "          if (false) {\n"
    },
    {
        "id": 277,
        "line": 222,
        "precode": "            return n;\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "            return false;\n"
    },
    {
        "id": 279,
        "line": 222,
        "precode": "          switch (n.getType()) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "          switch (false) {\n"
    },
    {
        "id": 280,
        "line": 222,
        "precode": "            case Token.RETURN:\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "            case false: // Token.RETURN\n"
    },
    {
        "id": 281,
        "line": 222,
        "precode": "              if (n.hasChildren()) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "              if (false) {\n"
    },
    {
        "id": 282,
        "line": 222,
        "precode": "                break;\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "                break;\n"
    },
    {
        "id": 283,
        "line": 229,
        "precode": "              } else {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "              } else {\n"
    },
    {
        "id": 284,
        "line": 222,
        "precode": "                outEdges = gNode.getOutEdges();\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "                outEdges = gNode.getOutEdges();\n"
    },
    {
        "id": 285,
        "line": 222,
        "precode": "                if (outEdges.size() == 1 &&\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "                if (false) {\n"
    },
    {
        "id": 287,
        "line": 222,
        "precode": "                  (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "                  (false || false) {\n"
    },
    {
        "id": 288,
        "line": 222,
        "precode": "                    Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "                    Preconditions.checkState(false == Branch.UNCOND);\n"
    },
    {
        "id": 289,
        "line": 222,
        "precode": "                    Node fallThrough = computeFollowing(n);\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "                    Node fallThrough = computeFollowing(false);\n"
    },
    {
        "id": 290,
        "line": 222,
        "precode": "                    Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "                    Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n"
    },
    {
        "id": 291,
        "line": 222,
        "precode": "                    if (nextCfgNode == fallThrough) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "                    if (nextCfgNode == fallThrough) {\n"
    },
    {
        "id": 292,
        "line": 222,
        "precode": "                      removeDeadExprStatementSafely(n);\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "                      removeDeadExprStatementSafely(false);\n"
    },
    {
        "id": 293,
        "line": 222,
        "precode": "                      return fallThrough;\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "                      return fallThrough;\n"
    },
    {
        "id": 1059,
        "line": 222,
        "precode": "if (n.getType() == Token.RETURN) {",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "if (n.getType() == Token.BREAK) {"
    },
    {
        "id": 1060,
        "line": 222,
        "precode": "if (n.getType() == Token.RETURN) {",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "if (n.getType() == Token.CONTINUE) {"
    },
    {
        "id": 1061,
        "line": 222,
        "precode": "if (n.getType() == Token.RETURN) {",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "if (n.getType() == Token.FUNCTION) {"
    },
    {
        "id": 1062,
        "line": 222,
        "precode": "if (n.getType() == Token.RETURN) {",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "if (n.getType() == Token.VAR) {"
    },
    {
        "id": 1063,
        "line": 222,
        "precode": "if (n.getType() == Token.RETURN) {",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "if (n.getType() == Token.CONST) {"
    },
    {
        "id": 1064,
        "line": 222,
        "precode": "if (n.getType() == Token.RETURN) {",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "if (n.getType() == Token.NAME) {"
    },
    {
        "id": 1065,
        "line": 222,
        "precode": "if (n.getType() == Token.RETURN) {",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "if (n.getType() == Token.GETPROP) {"
    },
    {
        "id": 1066,
        "line": 222,
        "precode": "if (n.getType() == Token.RETURN) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "if (false) {\n"
    },
    {
        "id": 1067,
        "line": 222,
        "precode": "  if (n.hasChildren()) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  if (false) {\n"
    },
    {
        "id": 1068,
        "line": 222,
        "precode": "    break;\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "    break;\n"
    },
    {
        "id": 1069,
        "line": 229,
        "precode": "  } else {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "  } else {\n"
    },
    {
        "id": 1070,
        "line": 222,
        "precode": "    switch (n.getType()) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "    switch (false) {\n"
    },
    {
        "id": 1071,
        "line": 222,
        "precode": "      case Token.RETURN:\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "      case false: // Token.RETURN\n"
    },
    {
        "id": 1072,
        "line": 222,
        "precode": "        if (n.hasChildren()) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "        if (false) {\n"
    },
    {
        "id": 1073,
        "line": 222,
        "precode": "if (n.getType() == Token.RETURN) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "if (false) {\n"
    },
    {
        "id": 1074,
        "line": 222,
        "precode": "if (n.getType() == Token.RETURN) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "if (n.getType() == Token.BREAK) {\n"
    },
    {
        "id": 1075,
        "line": 222,
        "precode": "if (n.getType() == Token.RETURN) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "if (n.getType() == Token.CONTINUE) {\n"
    },
    {
        "id": 1076,
        "line": 222,
        "precode": "if (n.hasChildren()) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "if (false) {\n"
    },
    {
        "id": 1077,
        "line": 222,
        "precode": "List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges();\n\nif (outEdges.size() == 1 &&\n    // If there is a next node, there is no chance this jump is useless.\n    (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {\n"
    },
    {
        "id": 1078,
        "line": 222,
        "precode": "Node fallThrough = computeFollowing(n);\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "Node fallThrough = computeFollowing(n);\n\nif (fallThrough == n.getNext()) {\n"
    },
    {
        "id": 1079,
        "line": 222,
        "precode": "Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n\nif (nextCfgNode == fallThrough) {\n"
    },
    {
        "id": 1080,
        "line": 222,
        "precode": "if (outEdges.size() == 1 &&\n    // If there is a next node, there is no chance this jump is useless.\n    (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "if (false) {\n"
    },
    {
        "id": 1081,
        "line": 222,
        "precode": "removeDeadExprStatementSafely(n);\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "removeDeadExprStatementSafely(n);\n\nreturn fallThrough;\n"
    },
    {
        "id": 1082,
        "line": 222,
        "precode": "return n;\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "return false;\n"
    },
    {
        "id": 1083,
        "line": 222,
        "precode": "switch (n.getType()) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "switch (n.getType()) {\n\ncase Token.RETURN:\nif (false) {\n"
    },
    {
        "id": 1084,
        "line": 222,
        "precode": "case Token.BREAK:\ncase Token.CONTINUE:\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "case Token.BREAK:\ncase Token.CONTINUE:\n\n// We are looking for a control flow changing statement that always\n// branches to the same node. If removing it the control flow still\n// branches to that same node. It is safe to remove it.\nList<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();\nif (outEdges.size() == 1 &&\n    // If there is a next node, there is no chance this jump is useless.\n    (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {\n"
    },
    {
        "id": 1085,
        "line": 222,
        "precode": "if (outEdges.get(0).getValue() == Branch.UNCOND) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_85_fixed/src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "aftercode": "if (false) {\n"
    }
]