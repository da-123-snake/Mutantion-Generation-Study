[
    {
        "id": 268,
        "line": 200,
        "precode": "  private final ",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "  private final "
    },
    {
        "id": 269,
        "line": 200,
        "precode": "JSType returnType = null;",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "JSType returnType = null;"
    },
    {
        "id": 270,
        "line": 200,
        "precode": "boolean returnTypeInferred = false;",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "boolean returnTypeInferred = false;"
    },
    {
        "id": 271,
        "line": 200,
        "precode": "List<ObjectType> implementedInterfaces = null;",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "List<ObjectType> implementedInterfaces = null;"
    },
    {
        "id": 272,
        "line": 200,
        "precode": "List<ObjectType> extendedInterfaces = null;",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "List<ObjectType> extendedInterfaces = null;"
    },
    {
        "id": 273,
        "line": 200,
        "precode": "ObjectType baseType = null;",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "ObjectType baseType = null;"
    },
    {
        "id": 274,
        "line": 200,
        "precode": "ObjectType thisType = null;",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "ObjectType thisType = null;"
    },
    {
        "id": 1319,
        "line": 300,
        "precode": "  FunctionTypeBuilder inferFromOverriddenFunction(",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "  FunctionTypeBuilder inferFromOverriddenFunction(\n    @Nullable FunctionType oldType, \n    @Nullable Node paramsParent\n  ) {\n"
    },
    {
        "id": 1320,
        "line": 300,
        "precode": "    returnType = oldType.getReturnType();",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "    returnType = oldType.getReturnType();\n    "
    },
    {
        "id": 1321,
        "line": 300,
        "precode": "    returnTypeInferred = oldType.isReturnTypeInferred();",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "    returnTypeInferred = oldType.isReturnTypeInferred();\n    "
    },
    {
        "id": 1322,
        "line": 300,
        "precode": "    if (paramsParent == null) {",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "    if (paramsParent == null) {\n      "
    },
    {
        "id": 1324,
        "line": 300,
        "precode": "      parametersNode = oldType.getParametersNode();",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "      parametersNode = oldType.getParametersNode();\n      "
    },
    {
        "id": 1325,
        "line": 300,
        "precode": "      if (parametersNode == null) {",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "      if (parametersNode == null) {\n        "
    },
    {
        "id": 1326,
        "line": 300,
        "precode": "        parametersNode = new FunctionParamBuilder(typeRegistry).build();",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "        parametersNode = new FunctionParamBuilder(typeRegistry)\n         .build();\n        "
    },
    {
        "id": 1327,
        "line": 300,
        "precode": "    } else {",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "    } else {\n      "
    },
    {
        "id": 1329,
        "line": 504,
        "precode": "  FunctionTypeBuilder inferParameterTypes(",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "  FunctionTypeBuilder inferParameterTypes(\n    @Nullable Node argsParent,\n    @Nullable JSDocInfo info)"
    },
    {
        "id": 1330,
        "line": 504,
        "precode": "    @Nullable Node argsParent,",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "    @Nullable Node argsParent,\n    @Nullable JSDocInfo info)"
    },
    {
        "id": 1331,
        "line": 504,
        "precode": "    @Nullable JSDocInfo info)",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "    @Nullable JSDocInfo info)"
    },
    {
        "id": 1332,
        "line": 504,
        "precode": "  if (argsParent == null)",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "  if (argsParent == null) {\n    if (info == null) {\n      return this;\n    }\n    return inferParameterTypes(info);\n  }"
    },
    {
        "id": 1333,
        "line": 504,
        "precode": "    if (info == null)",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "    if (info == null) {\n      return this;\n    }\n    return inferParameterTypes(info);\n  }"
    },
    {
        "id": 1334,
        "line": 504,
        "precode": "  FunctionParamBuilder builder = new FunctionParamBuilder(typeRegistry);",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "  FunctionParamBuilder builder = new FunctionParamBuilder(\n    typeRegistry);"
    },
    {
        "id": 1336,
        "line": 504,
        "precode": "  Set<String> allJsDocParams = (info == null)?",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "  Set<String> allJsDocParams = (info == null)?\n    Sets.<String>newHashSet() :\n    Sets.newHashSet(info.getParameterNames());"
    },
    {
        "id": 1337,
        "line": 504,
        "precode": "      Sets.<String>newHashSet() :",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "      Sets.newHashSet(info.getParameterNames());"
    },
    {
        "id": 1338,
        "line": 504,
        "precode": "    Set<String> allJsDocParams = (info == null)?",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "    Set<String> allJsDocParams = (info == null)?\n      Sets.<String>newHashSet() :\n      Sets.newHashSet(info.getParameterNames());\n    boolean foundTemplateType = false;"
    },
    {
        "id": 1340,
        "line": 504,
        "precode": "  for (Node arg : argsParent.children()) {",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "  for (Node arg : argsParent.children()) {\n    String argumentName = arg.getString();\n    allJsDocParams.remove(argumentName);\n\n    // type from JSDocInfo\n    JSType parameterType = null;\n    boolean isOptionalParam = isOptionalParameter(arg, info);\n    isVarArgs = isVarArgsParameter(arg, info);\n\n    if (info!= null && info.hasParameterType(argumentName)) {\n      parameterType =\n        info.getParameterType(argumentName).evaluate(scope, typeRegistry);\n    } else if (oldParameterType!= null &&\n        oldParameterType.getJSType()!= null) {\n      parameterType = oldParameterType.getJSType();\n      isOptionalParam = oldParameterType.isOptionalArg();\n      isVarArgs = oldParameterType.isVarArgs();\n    } else {\n      parameterType = typeRegistry.getNativeType(UNKNOWN_TYPE);\n    }\n\n    if (templateTypeName!= null &&\n        parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n      if (foundTemplateType) {\n        reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n      }\n      foundTemplateType = true;\n    }\n    warnedAboutArgList |= addParameter(\n        builder, parameterType, warnedAboutArgList,\n        isOptionalParam,\n        isVarArgs);\n\n    if (oldParameterType!= null) {\n      oldParameterType = oldParameterType.getNext();\n    }\n  }\n\n  // Copy over any old parameters that aren't in the param list.\n  if (!isVarArgs) {\n    while (oldParameterType!= null &&!isVarArgs) {\n      builder.newParameterFromNode(oldParameterType);\n      oldParameterType = oldParameterType.getNext();\n    }\n  }\n\n  if (templateTypeName!= null &&!foundTemplateType) {\n    reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n  }\n\n  for (String inexistentName : allJsDocParams) {\n    reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n  }\n\n  parametersNode = builder.build();\n  return this;"
    },
    {
        "id": 1341,
        "line": 504,
        "precode": "    String argumentName = arg.getString();",
        "filepath": "defects4j_fixed/Closure/Closure_41_fixed/src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "aftercode": "    String argumentName = arg.getString();\n    allJsDocParams.remove(argumentName);\n\n    // type from JSDocInfo\n    JSType parameterType = null;\n    boolean isOptionalParam = isOptionalParameter(arg, info);\n    isVarArgs = isVarArgsParameter(arg, info);\n\n    if (info!= null && info.hasParameterType(argumentName)) {\n      parameterType =\n        info.getParameterType(argumentName).evaluate(scope, typeRegistry);\n    } else if (oldParameterType!= null &&\n        oldParameterType.getJSType()!= null) {\n      parameterType = oldParameterType.getJSType();\n      isOptionalParam = oldParameterType.isOptionalArg();\n      isVarArgs = oldParameterType.isVarArgs();\n    } else {\n      parameterType = typeRegistry.getNativeType(UNKNOWN_TYPE);\n    }\n\n    if (templateTypeName!= null &&\n        parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n      if (foundTemplateType) {\n        reportError(TEMPLATE_TYPE_DUPLICATED, fnName);\n      }\n      foundTemplateType = true;\n    }\n    warnedAboutArgList |= addParameter(\n        builder, parameterType, warnedAboutArgList,\n        isOptionalParam,\n        isVarArgs);\n\n    if (oldParameterType!= null) {\n      oldParameterType = oldParameterType.getNext();\n    }\n  }\n\n  // Copy over any old parameters that aren't in the param list.\n  if (!isVarArgs) {\n    while (oldParameterType!= null &&!isVarArgs) {\n      builder.newParameterFromNode(oldParameterType);\n      oldParameterType = oldParameterType.getNext();\n    }\n  }\n\n  if (templateTypeName!= null &&!foundTemplateType) {\n    reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n  }\n\n  for (String inexistentName : allJsDocParams) {\n    reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n  }\n\n  parametersNode = builder.build();\n  return this;"
    }
]