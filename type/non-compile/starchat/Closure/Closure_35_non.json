[
    {
        "id": 184,
        "line": 1259,
        "precode": "scope.createChildFlowScope());",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "scope.createChildFlowScope());\nJSType leftType = left.getJSType();\n\n// reverse abstract interpret the left node to produce the correct\n// scope in which to verify the right node\nFlowScope rightScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n    left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),\n    condition);\n\n// type the right node\nBooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    right, rightScope.createChildFlowScope());\nJSType rightType = right.getJSType();"
    },
    {
        "id": 185,
        "line": 1259,
        "precode": "JSType leftType = left.getJSType();",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "JSType leftType = left.getJSType();\n\n// reverse abstract interpret the left node to produce the correct\n// scope in which to verify the right node\nFlowScope rightScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n    left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),\n    condition);\n\n// type the right node\nBooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    right, rightScope.createChildFlowScope());\nJSType rightType = right.getJSType();"
    },
    {
        "id": 186,
        "line": 1259,
        "precode": "// reverse abstract interpret the left node to produce the correct\n// scope in which to verify the right node",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "// reverse abstract interpret the left node to produce the correct\n// scope in which to verify the right node\nFlowScope rightScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n    left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),\n    condition);\n\n// type the right node\nBooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    right, rightScope.createChildFlowScope());\nJSType rightType = right.getJSType();"
    },
    {
        "id": 187,
        "line": 1259,
        "precode": "// type the right node",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "// type the right node\nBooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    right, rightScope.createChildFlowScope());\nJSType rightType = right.getJSType();"
    },
    {
        "id": 188,
        "line": 1259,
        "precode": "BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    right, rightScope.createChildFlowScope());",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    right, rightScope.createChildFlowScope());\nJSType rightType = right.getJSType();"
    },
    {
        "id": 189,
        "line": 1259,
        "precode": "JSType rightType = right.getJSType();",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "JSType rightType = right.getJSType();\n\nBooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    right, rightScope.createChildFlowScope());"
    },
    {
        "id": 190,
        "line": 1259,
        "precode": "scope.createChildFlowScope());",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "scope.createChildFlowScope());\nJSType leftType = left.getJSType();\n\n// reverse abstract interpret the left node to produce the correct\n// scope in which to verify the right node\nFlowScope rightScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n    left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),\n   !condition);\n\n// type the right node\nBooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    right, rightScope.createChildFlowScope());\nJSType rightType = right.getJSType();"
    },
    {
        "id": 191,
        "line": 1259,
        "precode": "JSType leftType = left.getJSType();",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "JSType leftType = left.getJSType();\n\n// reverse abstract interpret the left node to produce the correct\n// scope in which to verify the right node\nFlowScope rightScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n    left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),\n   !condition);\n\n// type the right node\nBooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    right, rightScope.createChildFlowScope());\nJSType rightType = right.getJSType();"
    },
    {
        "id": 192,
        "line": 1259,
        "precode": "// reverse abstract interpret the left node to produce the correct\n// scope in which to verify the right node",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "// reverse abstract interpret the left node to produce the correct\n// scope in which to verify the right node\nFlowScope rightScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n    left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),\n   !condition);\n\n// type the right node\nBooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    right, rightScope.createChildFlowScope());\nJSType rightType = right.getJSType();"
    },
    {
        "id": 193,
        "line": 1259,
        "precode": "// type the right node",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "// type the right node\nBooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    right, rightScope.createChildFlowScope());\nJSType rightType = right.getJSType();"
    },
    {
        "id": 194,
        "line": 1259,
        "precode": "BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    right, rightScope.createChildFlowScope());",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    right, rightScope.createChildFlowScope());\nJSType rightType = right.getJSType();"
    },
    {
        "id": 195,
        "line": 1259,
        "precode": "JSType rightType = right.getJSType();",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "JSType rightType = right.getJSType();\n\nBooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    right, rightScope.createChildFlowScope());"
    },
    {
        "id": 196,
        "line": 1259,
        "precode": "scope.createChildFlowScope());",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "scope.createChildFlowScope());\nJSType leftType = left.getJSType();\n\n// reverse abstract interpret the left node to produce the correct\n// scope in which to verify the right node\nFlowScope rightScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n    right, rightLiterals.getOutcomeFlowScope(right.getType(),!condition),\n    condition);\n\n// type the right node\nBooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    left, leftScope.createChildFlowScope());\nJSType rightType = left.getJSType();"
    },
    {
        "id": 197,
        "line": 1259,
        "precode": "JSType leftType = left.getJSType();",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "JSType leftType = left.getJSType();\n\n// reverse abstract interpret the left node to produce the correct\n// scope in which to verify the right node\nFlowScope rightScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n    right, rightLiterals.getOutcomeFlowScope(right.getType(),!condition),\n    condition);\n\n// type the right node\nBooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    left, leftScope.createChildFlowScope());\nJSType rightType = left.getJSType();"
    },
    {
        "id": 198,
        "line": 1259,
        "precode": "// reverse abstract interpret the left node to produce the correct\n// scope in which to verify the right node",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "// reverse abstract interpret the left node to produce the correct\n// scope in which to verify the right node\nFlowScope rightScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n    right, rightLiterals.getOutcomeFlowScope(right.getType(),!condition),\n    condition);\n\n// type the right node\nBooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    left, leftScope.createChildFlowScope());\nJSType rightType = left.getJSType();"
    },
    {
        "id": 199,
        "line": 1259,
        "precode": "// type the right node",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "// type the right node\nBooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp(\n    left, leftScope.createChildFlowScope());\nJSType rightType = left.getJSType();"
    },
    {
        "id": 324,
        "line": 1098,
        "precode": "JSType constructorType = constructor.getJSType();",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "JSType constructorType = constructor.getJSType().toMaybeFunctionType();"
    },
    {
        "id": 325,
        "line": 1098,
        "precode": "if (constructorType!= null) {",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "if (constructorType.isUnknownType()) {"
    },
    {
        "id": 327,
        "line": 1098,
        "precode": "} else if (constructorType.isFunctionType()) {",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "} else if (constructorType.toMaybeFunctionType().isConstructor()) {"
    },
    {
        "id": 328,
        "line": 1098,
        "precode": "type = constructorType.getInstanceType();",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "type = constructorType.toMaybeFunctionType().getInstanceType();"
    },
    {
        "id": 329,
        "line": 1098,
        "precode": "} else {",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "} else {"
    },
    {
        "id": 330,
        "line": 1098,
        "precode": "type = constructorType;",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "type = getNativeType(UNKNOWN_TYPE);"
    },
    {
        "id": 331,
        "line": 1098,
        "precode": "}",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "}"
    },
    {
        "id": 332,
        "line": 1098,
        "precode": "n.setJSType(type);",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "n.setJSType(type.restrictByNotNullOrUndefined());"
    },
    {
        "id": 333,
        "line": 1098,
        "precode": "if (ct!= null && ct.isConstructor()) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "if (ct!= null && ct.isConstructor()) {\n  type = ct.getInstanceType();\n}"
    },
    {
        "id": 334,
        "line": 1098,
        "precode": "}\n",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "}\nif (ct!= null && ct.isConstructor()) {\n  type = ct.getInstanceType();\n}"
    },
    {
        "id": 335,
        "line": 1098,
        "precode": "if (ct!= null && ct.isConstructor()) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "if (ct!= null && ct.isConstructor()) {\n  type = ct.getInstanceType();\n}\nelse {\n  type = null;\n}"
    },
    {
        "id": 336,
        "line": 1098,
        "precode": "}\n",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "}\nif (ct!= null && ct.isConstructor()) {\n  type = ct.getInstanceType();\n}\nelse {\n  type = null;\n}"
    },
    {
        "id": 337,
        "line": 1098,
        "precode": "if (ct!= null && ct.isConstructor()) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "if (ct!= null && ct.isConstructor()) {\n  type = ct.getInstanceType();\n}\nelse {\n  type = undefined;\n}"
    },
    {
        "id": 338,
        "line": 1098,
        "precode": "}\n",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "}\nif (ct!= null && ct.isConstructor()) {\n  type = ct.getInstanceType();\n}\nelse {\n  type = undefined;\n}"
    },
    {
        "id": 339,
        "line": 1098,
        "precode": "if (ct!= null && ct.isConstructor()) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "if (ct!= null && ct.isConstructor()) {\n  type = ct.getInstanceType();\n}\nelse {\n  type = new Object();\n}"
    },
    {
        "id": 340,
        "line": 1098,
        "precode": "}\n",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "}\nif (ct!= null && ct.isConstructor()) {\n  type = ct.getInstanceType();\n}\nelse {\n  type = new Object();\n}"
    },
    {
        "id": 341,
        "line": 1098,
        "precode": "if (ct!= null && ct.isConstructor()) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "if (ct!= null && ct.isConstructor()) {\n  type = ct.getInstanceType();\n}\nelse {\n  type = new String();\n}"
    },
    {
        "id": 342,
        "line": 1098,
        "precode": "}\n",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "}\nif (ct!= null && ct.isConstructor()) {\n  type = ct.getInstanceType();\n}\nelse {\n  type = new String();\n}"
    },
    {
        "id": 343,
        "line": 1098,
        "precode": "if (ct!= null && ct.isConstructor()) {\n",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "if (ct!= null && ct.isConstructor()) {\n  type = ct.getInstanceType();\n}\nelse {\n  type = new Number();\n}"
    },
    {
        "id": 344,
        "line": 1098,
        "precode": "}\n",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "}\nif (ct!= null && ct.isConstructor()) {\n  type = ct.getInstanceType();\n}\nelse {\n  type = new Number();\n}"
    },
    {
        "id": 586,
        "line": 1125,
        "precode": "inferPropertyTypesToMatchConstraint(",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "inferPropertyTypesToMatchConstraint("
    },
    {
        "id": 587,
        "line": 1125,
        "precode": "JSType type,",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "JSType type,"
    },
    {
        "id": 588,
        "line": 1125,
        "precode": "JSType constraint) {",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "JSType constraint) {"
    },
    {
        "id": 589,
        "line": 1125,
        "precode": "if (type == null || constraint == null) {",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "if (type == null || constraint == null) {"
    },
    {
        "id": 590,
        "line": 1125,
        "precode": "return;",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "return;"
    },
    {
        "id": 591,
        "line": 1125,
        "precode": "ObjectType constraintObj =",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "ObjectType constraintObj ="
    },
    {
        "id": 592,
        "line": 1125,
        "precode": "constraint.restrictByNotNullOrUndefined();",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "constraint.restrictByNotNullOrUndefined();"
    },
    {
        "id": 593,
        "line": 1125,
        "precode": "if (constraintObj!= null) {",
        "filepath": "defects4j_fixed/Closure/Closure_35_fixed/src/com/google/javascript/jscomp/TypeInference.java",
        "aftercode": "if (constraintObj!= null) {"
    }
]