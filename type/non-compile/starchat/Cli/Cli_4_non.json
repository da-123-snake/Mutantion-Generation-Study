[
    {
        "id": 94,
        "line": 25,
        "precode": "import java.util.ListIterator;",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "import java.util.LinkedListIterator;"
    },
    {
        "id": 98,
        "line": 43,
        "precode": "requiredOptions = new ArrayList();",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "requiredOptions = null;"
    },
    {
        "id": 99,
        "line": 43,
        "precode": "requiredOptions = new ArrayList<>();",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "requiredOptions = null;"
    },
    {
        "id": 100,
        "line": 43,
        "precode": "requiredOptions = new ArrayList<String>();",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "requiredOptions = null;"
    },
    {
        "id": 101,
        "line": 43,
        "precode": "requiredOptions = new ArrayList<>();",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "requiredOptions = new ArrayList<>();"
    },
    {
        "id": 102,
        "line": 43,
        "precode": "requiredOptions = new ArrayList<String>();",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "requiredOptions = new ArrayList<>();"
    },
    {
        "id": 103,
        "line": 43,
        "precode": "requiredOptions = new ArrayList<>();",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "requiredOptions = new ArrayList<>();"
    },
    {
        "id": 104,
        "line": 43,
        "precode": "requiredOptions = new ArrayList<>();",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "requiredOptions = new ArrayList<>();"
    },
    {
        "id": 292,
        "line": 312,
        "precode": "if (n == 0) return 0;",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "if (n == 1) return 0;"
    },
    {
        "id": 293,
        "line": 312,
        "precode": "if (n == 0) return 0;",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "if (n == 2) return 0;"
    },
    {
        "id": 294,
        "line": 312,
        "precode": "if (n == 0) return 0;",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "if (n == 3) return 0;"
    },
    {
        "id": 295,
        "line": 312,
        "precode": "if (n == 0) return 0;",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "if (n == 4) return 0;"
    },
    {
        "id": 296,
        "line": 312,
        "precode": "if (n == 0) return 0;",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "if (n == 5) return 0;"
    },
    {
        "id": 297,
        "line": 312,
        "precode": "if (n == 0) return 0;",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "if (n == 6) return 0;"
    },
    {
        "id": 298,
        "line": 312,
        "precode": "if (n == 0) return 0;",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "if (n == 7) return 0;"
    },
    {
        "id": 326,
        "line": 312,
        "precode": "if (requiredOptions.size() > 0) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "if (true) {\n"
    },
    {
        "id": 327,
        "line": 312,
        "precode": "if (requiredOptions.size() > 0) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "if (requiredOptions.isEmpty()) {\n"
    },
    {
        "id": 328,
        "line": 312,
        "precode": "if (requiredOptions.size() > 0) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "if (requiredOptions.get(0) == null) {\n"
    },
    {
        "id": 329,
        "line": 312,
        "precode": "if (requiredOptions.size() > 0) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "if (requiredOptions.get(1) == null) {\n"
    },
    {
        "id": 330,
        "line": 312,
        "precode": "if (requiredOptions.size() > 0) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "if (requiredOptions.get(2) == null) {\n"
    },
    {
        "id": 331,
        "line": 312,
        "precode": "if (requiredOptions.size() > 0) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "if (requiredOptions.get(3) == null) {\n"
    },
    {
        "id": 332,
        "line": 312,
        "precode": "if (requiredOptions.size() > 0) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "if (requiredOptions.get(4) == null) {\n"
    },
    {
        "id": 333,
        "line": 312,
        "precode": "if (requiredOptions.size() > 0) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "if (requiredOptions.get(5) == null) {\n"
    },
    {
        "id": 334,
        "line": 312,
        "precode": "if (requiredOptions.size() > 0) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_4_fixed/src/java/org/apache/commons/cli/Parser.java",
        "aftercode": "if (requiredOptions.get(6) == null) {\n"
    }
]