[
    {
        "id": 93,
        "line": 646,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "n = (n ^ (n - 1));"
    },
    {
        "id": 94,
        "line": 646,
        "precode": "  while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": " while (true) { "
    },
    {
        "id": 95,
        "line": 646,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "return true;"
    },
    {
        "id": 96,
        "line": 646,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 97,
        "line": 646,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 98,
        "line": 646,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) { ",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": " while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 99,
        "line": 646,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) { ",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": " while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 219,
        "line": 824,
        "precode": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, ",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "int nextLineTabStop, String text) {\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1) {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(text);\n\n            return sb;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}"
    },
    {
        "id": 220,
        "line": 824,
        "precode": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, ",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "int nextLineTabStop, String text) {\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1) {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(text);\n\n            return sb;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}"
    },
    {
        "id": 221,
        "line": 824,
        "precode": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, ",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "int nextLineTabStop, String text) {\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1) {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(text);\n\n            return sb;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}"
    },
    {
        "id": 222,
        "line": 824,
        "precode": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, ",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "int nextLineTabStop, String text) {\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1) {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(text);\n\n            return sb;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}"
    },
    {
        "id": 223,
        "line": 824,
        "precode": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, ",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "int nextLineTabStop, String text) {\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1) {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(text);\n\n            return sb;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}"
    },
    {
        "id": 224,
        "line": 824,
        "precode": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, ",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "int nextLineTabStop, String text) {\n    int pos = findWrapPos(text, width, 0);\n\n    if (pos == -1) {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(text);\n\n            return sb;\n        }\n\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}"
    },
    {
        "id": 225,
        "line": 883,
        "precode": "while (true) {",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {"
    },
    {
        "id": 226,
        "line": 883,
        "precode": "    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "    sb.append(rtrim(text.substring(0, pos))).append(System.lineSeparator())"
    },
    {
        "id": 229,
        "line": 883,
        "precode": "    final String padding = createPadding(nextLineTabStop);",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "    final String padding = createPadding(nextLineTabStop) + "
    },
    {
        "id": 230,
        "line": 883,
        "precode": "    while (true) {",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "    while (true) {"
    },
    {
        "id": 231,
        "line": 883,
        "precode": "        text = padding + text.substring(pos).trim();",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "        text = padding + text.substring(pos).trim()"
    },
    {
        "id": 232,
        "line": 883,
        "precode": "        pos = findWrapPos(text, width, 0);",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "        pos = findWrapPos(text, width, 0)"
    },
    {
        "id": 233,
        "line": 883,
        "precode": "    if (pos == -1) {",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "    if (pos == -1) {"
    },
    {
        "id": 234,
        "line": 883,
        "precode": "        sb.append(text);",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "        sb.append(text)"
    },
    {
        "id": 235,
        "line": 883,
        "precode": "        return sb;",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "        return sb;"
    },
    {
        "id": 236,
        "line": 883,
        "precode": "    }",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "    }"
    },
    {
        "id": 237,
        "line": 824,
        "precode": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, ",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "int nextLineTabStop, String text) {"
    },
    {
        "id": 238,
        "line": 824,
        "precode": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, ",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "String text) {"
    },
    {
        "id": 239,
        "line": 824,
        "precode": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "int pos = findWrapPos(text, width, 0); {"
    },
    {
        "id": 240,
        "line": 824,
        "precode": "if (pos == -1) {",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "sb.append(rtrim(text)); {"
    },
    {
        "id": 241,
        "line": 824,
        "precode": "sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "final String padding = createPadding(nextLineTabStop); {"
    },
    {
        "id": 242,
        "line": 824,
        "precode": "while (true) {",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "text = padding + text.substring(pos).trim(); {"
    },
    {
        "id": 243,
        "line": 824,
        "precode": "return sb;",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "}"
    },
    {
        "id": 244,
        "line": 824,
        "precode": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, ",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {"
    },
    {
        "id": 245,
        "line": 824,
        "precode": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {"
    },
    {
        "id": 246,
        "line": 824,
        "precode": "int pos = findWrapPos(text, width, 0);",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "int pos = findWrapPos(text, width, nextLineTabStop); "
    },
    {
        "id": 247,
        "line": 824,
        "precode": "if (pos == -1) {",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "if (pos == -1) {"
    },
    {
        "id": 248,
        "line": 824,
        "precode": "sb.append(rtrim(text.substring(0, pos)));",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);"
    },
    {
        "id": 249,
        "line": 824,
        "precode": "}",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "}"
    },
    {
        "id": 250,
        "line": 824,
        "precode": "while (true) {",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {"
    },
    {
        "id": 333,
        "line": 466,
        "precode": "if (n < 0) {",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "if (!(n >= 0)) {"
    },
    {
        "id": 334,
        "line": 466,
        "precode": "throw new IllegalArgumentException(",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "throw new IllegalArgumentException("
    },
    {
        "id": 335,
        "line": 466,
        "precode": "String.format(",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "String.format("
    },
    {
        "id": 336,
        "line": 466,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "n = (n ^ (n - 1));"
    },
    {
        "id": 337,
        "line": 466,
        "precode": "  while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": " while (true) {"
    },
    {
        "id": 338,
        "line": 466,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "return true;"
    },
    {
        "id": 340,
        "line": 466,
        "precode": "r.add(first).addll(subset);",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "r.addAll(subset);"
    },
    {
        "id": 341,
        "line": 466,
        "precode": "to_add(r)",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 342,
        "line": 466,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 343,
        "line": 466,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) {",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 344,
        "line": 824,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (false) {\n"
    },
    {
        "id": 345,
        "line": 824,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    if (false) break;\n"
    },
    {
        "id": 346,
        "line": 824,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    if (true) continue;\n"
    },
    {
        "id": 347,
        "line": 824,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    if (false) return;\n"
    },
    {
        "id": 348,
        "line": 824,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    if (true) return;\n"
    },
    {
        "id": 349,
        "line": 824,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    if (false) throw new Exception();\n"
    },
    {
        "id": 350,
        "line": 824,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_8_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    if (true) throw new Exception();\n"
    }
]