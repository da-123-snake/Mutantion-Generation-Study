[
    {
        "id": 117,
        "line": 113,
        "precode": "String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_12_fixed/src/java/org/apache/commons/cli/GnuParser.java",
        "aftercode": "String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {\n    List tokens = new ArrayList();\n\n    boolean eatTheRest = false;\n\n    for (int i = 0; i < arguments.length; i++) {\n        String arg = arguments[i];\n\n        if (\"--\".equals(arg)) {\n            eatTheRest = true;\n            tokens.add(\"--\");\n        } else if (\"-\".equals(arg)) {\n            tokens.add(\"-\");\n        } else if (arg.startsWith(\"-\")) {\n            String opt = Util.stripLeadingHyphens(arg);\n\n            if (options.hasOption(opt)) {\n                tokens.add(arg);\n            } else {\n                if (opt.indexOf('=')!= -1 && options.hasOption(opt.substring(0, opt.indexOf('=')))) {\n                    // the format is --foo=value or -foo=value\n                    tokens.add(arg.substring(0, arg.indexOf('='))); // --foo\n                    tokens.add(arg.substring(arg.indexOf('=') + 1)); // value\n                } else if (options.hasOption(arg.substring(0, 2))) {\n                    // the format is a special properties option (-Dproperty=value)\n                    tokens.add(arg.substring(0, 2)); // -D\n                    tokens.add(arg.substring(2)); // property=value\n                } else {\n                    eatTheRest = stopAtNonOption;\n                    tokens.add(arg);\n                }\n            }\n        } else {\n            tokens.add(arg);\n        }\n\n        if (eatTheRest) {\n            for (i++; i < arguments.length; i++) {\n                tokens.add(arguments[i]);\n            }\n        }\n    }\n\n    return (String[]) tokens.toArray(new String[tokens.size()]);\n}"
    },
    {
        "id": 118,
        "line": 113,
        "precode": "boolean eatTheRest = false;",
        "filepath": "defects4j_fixed/Cli/Cli_12_fixed/src/java/org/apache/commons/cli/GnuParser.java",
        "aftercode": "boolean eatTheRest = false;\n\n    boolean eatTheRest = false;"
    },
    {
        "id": 119,
        "line": 113,
        "precode": "String arg = arguments[i];",
        "filepath": "defects4j_fixed/Cli/Cli_12_fixed/src/java/org/apache/commons/cli/GnuParser.java",
        "aftercode": "String arg = arguments[i];\n\n        String arg = arguments[i];"
    },
    {
        "id": 120,
        "line": 113,
        "precode": "if (arg.startsWith(\"-\"))",
        "filepath": "defects4j_fixed/Cli/Cli_12_fixed/src/java/org/apache/commons/cli/GnuParser.java",
        "aftercode": "if (arg.startsWith(\"-\") || arg.startsWith(\"--\"))"
    },
    {
        "id": 121,
        "line": 113,
        "precode": "String opt = Util.stripLeadingHyphens(arg);",
        "filepath": "defects4j_fixed/Cli/Cli_12_fixed/src/java/org/apache/commons/cli/GnuParser.java",
        "aftercode": "String opt = Util.stripLeadingHyphens(arg);\n\n        String opt = Util.stripLeadingHyphens(arg);"
    },
    {
        "id": 122,
        "line": 113,
        "precode": "if (options.hasOption(opt))",
        "filepath": "defects4j_fixed/Cli/Cli_12_fixed/src/java/org/apache/commons/cli/GnuParser.java",
        "aftercode": "if (options.hasOption(opt) || options.hasOption(opt.substring(0, opt.indexOf('='))))"
    },
    {
        "id": 123,
        "line": 113,
        "precode": "String opt = Util.stripLeadingHyphens(arg);",
        "filepath": "defects4j_fixed/Cli/Cli_12_fixed/src/java/org/apache/commons/cli/GnuParser.java",
        "aftercode": "String opt = arg.substring(0, arg.indexOf('='));"
    },
    {
        "id": 124,
        "line": 113,
        "precode": "if (opt.indexOf('=')!= -1 && options.hasOption(opt.substring(0, opt.indexOf('='))))",
        "filepath": "defects4j_fixed/Cli/Cli_12_fixed/src/java/org/apache/commons/cli/GnuParser.java",
        "aftercode": "if (opt.indexOf('=')!= -1 && options.hasOption(arg.substring(0, arg.indexOf('='))))"
    },
    {
        "id": 125,
        "line": 113,
        "precode": "tokens.add(arg.substring(0, arg.indexOf('=')));",
        "filepath": "defects4j_fixed/Cli/Cli_12_fixed/src/java/org/apache/commons/cli/GnuParser.java",
        "aftercode": "tokens.add(arg.substring(0, arg.indexOf('=')));\n\n        tokens.add(arg.substring(arg.indexOf('=') + 1));"
    },
    {
        "id": 126,
        "line": 113,
        "precode": "if (options.hasOption(arg.substring(0, 2)))",
        "filepath": "defects4j_fixed/Cli/Cli_12_fixed/src/java/org/apache/commons/cli/GnuParser.java",
        "aftercode": "if (options.hasOption(arg.substring(0, 1)))"
    },
    {
        "id": 127,
        "line": 113,
        "precode": "tokens.add(arg.substring(2));",
        "filepath": "defects4j_fixed/Cli/Cli_12_fixed/src/java/org/apache/commons/cli/GnuParser.java",
        "aftercode": "tokens.add(arg.substring(arg.indexOf('=') + 1));"
    },
    {
        "id": 128,
        "line": 113,
        "precode": "if (opt.indexOf('=')!= -1 && options.hasOption(opt.substring(0, opt.indexOf('='))))",
        "filepath": "defects4j_fixed/Cli/Cli_12_fixed/src/java/org/apache/commons/cli/GnuParser.java",
        "aftercode": "if (opt.indexOf('=')!= -1 && options.hasOption(opt))"
    },
    {
        "id": 129,
        "line": 113,
        "precode": "tokens.add(arg.substring(0, arg.indexOf('=')));",
        "filepath": "defects4j_fixed/Cli/Cli_12_fixed/src/java/org/apache/commons/cli/GnuParser.java",
        "aftercode": "tokens.add(opt);"
    },
    {
        "id": 130,
        "line": 113,
        "precode": "if (options.hasOption(arg.substring(0, 2)))",
        "filepath": "defects4j_fixed/Cli/Cli_12_fixed/src/java/org/apache/commons/cli/GnuParser.java",
        "aftercode": "if (options.hasOption(arg.substring(0, 1)))"
    },
    {
        "id": 131,
        "line": 113,
        "precode": "tokens.add(arg.substring(2));",
        "filepath": "defects4j_fixed/Cli/Cli_12_fixed/src/java/org/apache/commons/cli/GnuParser.java",
        "aftercode": "tokens.add(arg.substring(2));\n\n        tokens.add(arg.substring(arg.indexOf('=') + 1));"
    }
]