[
    {
        "id": 160,
        "line": 218,
        "precode": "",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption!= null) {"
    },
    {
        "id": 161,
        "line": 218,
        "precode": "if (",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (!currentOption.hasArg()) {"
    },
    {
        "id": 162,
        "line": 218,
        "precode": "if (currentOption!= null && ",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption.hasArg()) {"
    },
    {
        "id": 163,
        "line": 218,
        "precode": "if (currentOption!= null && currentOption.hasArg() && ",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption.hasArg()) {"
    },
    {
        "id": 164,
        "line": 218,
        "precode": "if (currentOption!= null && currentOption.hasArg()) {",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption.hasArg()) {"
    },
    {
        "id": 165,
        "line": 218,
        "precode": "if (currentOption!= null && currentOption.hasArg()) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption.hasArg()) {"
    },
    {
        "id": 166,
        "line": 255,
        "precode": "private void processSingleHyphen(String hyphen) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processSingleHyphen(String hyphen) {\ntokens.add(hyphen);\n}"
    },
    {
        "id": 168,
        "line": 255,
        "precode": " * Set the current option and add the token to the processed \n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": " * Set the current option and add the token to the processed \ntokens.add(token);\n}"
    },
    {
        "id": 169,
        "line": 255,
        "precode": " * If an {@link Option} does not exist and <code>stopAtNonOption\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": " * If an {@link Option} does not exist and <code>stopAtNonOption\neatTheRest = true;\n}"
    },
    {
        "id": 170,
        "line": 255,
        "precode": " * is set then ignore the current token and add the remaining tokens\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": " * is set then ignore the current token and add the remaining tokens\ntokens.addAll(Arrays.asList(remainingTokens));\n}"
    },
    {
        "id": 171,
        "line": 255,
        "precode": " * to the processed tokens list directly.\n *\n * @param token The current option token\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": " * to the processed tokens list directly.\n *\n * @param token The current option token\ntokens.add(token);\n}"
    },
    {
        "id": 172,
        "line": 255,
        "precode": " * stopAtNonOption Specifies whether flattening should halt\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": " * stopAtNonOption Specifies whether flattening should halt\ntokens.addAll(remainingTokens);\n}"
    },
    {
        "id": 173,
        "line": 229,
        "precode": "private void processSingleHyphen(String hyphen) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processSingleHyphen(String hyphen) {\ntokens.remove(hyphen);\n"
    },
    {
        "id": 174,
        "line": 229,
        "precode": "private void processSingleHyphen(String hyphen) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processSingleHyphen(String hyphen) {\ntokens.remove(hyphen);\n"
    },
    {
        "id": 175,
        "line": 229,
        "precode": "private void processSingleHyphen(String hyphen) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processSingleHyphen(String hyphen) {\ntokens.remove(hyphen);\n"
    },
    {
        "id": 176,
        "line": 229,
        "precode": "private void processSingleHyphen(String hyphen) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processSingleHyphen(String hyphen) {\ntokens.remove(hyphen);\n"
    },
    {
        "id": 177,
        "line": 229,
        "precode": "private void processSingleHyphen(String hyphen) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processSingleHyphen(String hyphen) {\ntokens.remove(hyphen);\n"
    },
    {
        "id": 178,
        "line": 229,
        "precode": "private void processSingleHyphen(String hyphen) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processSingleHyphen(String hyphen) {\ntokens.remove(hyphen);\n"
    },
    {
        "id": 179,
        "line": 229,
        "precode": "private void processSingleHyphen(String hyphen) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processSingleHyphen(String hyphen) {\ntokens.remove(hyphen);\n"
    },
    {
        "id": 180,
        "line": 229,
        "precode": "private void processSingleHyphen(String hyphen) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processSingleHyphen(String hyphen) {\ntokens.remove(hyphen);\n"
    },
    {
        "id": 181,
        "line": 229,
        "precode": "private void processSingleHyphen(String hyphen) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processSingleHyphen(String hyphen) {\ntokens.remove(hyphen);\n"
    },
    {
        "id": 182,
        "line": 229,
        "precode": "private void processSingleHyphen(String hyphen) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processSingleHyphen(String hyphen) {\ntokens.remove(hyphen);\n"
    },
    {
        "id": 183,
        "line": 229,
        "precode": "private void processSingleHyphen(String hyphen) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processSingleHyphen(String hyphen) {\ntokens.remove(hyphen);\n"
    },
    {
        "id": 184,
        "line": 229,
        "precode": "private void processSingleHyphen(String hyphen) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processSingleHyphen(String hyphen) {\ntokens.remove(hyphen);\n"
    },
    {
        "id": 185,
        "line": 229,
        "precode": "private void processSingleHyphen(String hyphen) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processSingleHyphen(String hyphen) {\ntokens.remove(hyphen);\n"
    },
    {
        "id": 186,
        "line": 165,
        "precode": "String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {"
    },
    {
        "id": 187,
        "line": 165,
        "precode": "init();",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "init();"
    },
    {
        "id": 188,
        "line": 165,
        "precode": "this.options = options;",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "this.options = options;"
    },
    {
        "id": 190,
        "line": 165,
        "precode": "Iterator iter = Arrays.asList(arguments).iterator();",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "Iterator iter = Arrays.asList(arguments).iterator();"
    },
    {
        "id": 192,
        "line": 165,
        "precode": "String token = (String) iter.next();",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "String token = (String) iter.next();"
    },
    {
        "id": 194,
        "line": 165,
        "precode": "if (token.startsWith(\"--\")) {",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.startsWith(\"--\")) {"
    },
    {
        "id": 195,
        "line": 165,
        "precode": "if (token.indexOf('=')!= -1) {",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {"
    },
    {
        "id": 196,
        "line": 165,
        "precode": "tokens.add(token.substring(0, token.indexOf('=')));",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "tokens.add(token.substring(0, token.indexOf('=')));"
    },
    {
        "id": 197,
        "line": 165,
        "precode": "tokens.add(token.substring(token.indexOf('=') + 1, token.length()));",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "tokens.add(token.substring(token.indexOf('=') + 1, token.length()));"
    },
    {
        "id": 198,
        "line": 165,
        "precode": "} else {",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "} else {"
    },
    {
        "id": 199,
        "line": 165,
        "precode": "tokens.add(token);",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "tokens.add(token);"
    },
    {
        "id": 201,
        "line": 165,
        "precode": "else if (\"-\".equals(token)) {",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "else if (\"-\".equals(token)) {"
    },
    {
        "id": 202,
        "line": 165,
        "precode": "processSingleHyphen(token);",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "processSingleHyphen(token);"
    },
    {
        "id": 204,
        "line": 165,
        "precode": "burstToken(token, stopAtNonOption);",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "burstToken(token, stopAtNonOption);"
    },
    {
        "id": 205,
        "line": 4,
        "precode": "/** specifies if bursting should continue */",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "/** specifies if bursting should continue */\nprivate boolean eatTheRest = false;\n\n/** holder for the current option */\nprivate Option currentOption;\n\n/** the command line Options */"
    },
    {
        "id": 206,
        "line": 4,
        "precode": "/** specifies if bursting should continue */",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "/** specifies if bursting should continue */\nprivate boolean eatTheRest = true;\n\n/** holder for the current option */\nprivate Option currentOption;\n\n/** the command line Options */"
    },
    {
        "id": 207,
        "line": 5,
        "precode": "/** holder for the current option */",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "/** holder for the current option */\nprivate Option currentOption = null;\n\n/** the command line Options */\nprivate boolean eatTheRest;"
    },
    {
        "id": 208,
        "line": 6,
        "precode": "/** the command line Options */",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "/** the command line Options */\nprivate Option currentOption;\n\n/** specifies if bursting should continue */\nprivate boolean eatTheRest;"
    },
    {
        "id": 209,
        "line": 4,
        "precode": "/** specifies if bursting should continue */",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "/** specifies if bursting should continue */\nprivate boolean eatTheRest;\n\n/** the command line Options */\nprivate Option currentOption;"
    },
    {
        "id": 210,
        "line": 5,
        "precode": "/** holder for the current option */",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "/** holder for the current option */\nprivate Option currentOption = null;\n\n/** specifies if bursting should continue */\nprivate boolean eatTheRest;"
    },
    {
        "id": 211,
        "line": 6,
        "precode": "/** the command line Options */",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "/** the command line Options */\nprivate Option currentOption;\n\n/** specifies if bursting should continue */\nprivate boolean eatTheRest = false;"
    },
    {
        "id": 212,
        "line": 165,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token);\n}\nelse {\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n}"
    },
    {
        "id": 213,
        "line": 165,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=') == -1) {\n    tokens.add(token);\n}\nelse {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n}"
    },
    {
        "id": 214,
        "line": 165,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token);\n}\nelse {\n    tokens.add(token);\n    tokens.add(token);\n}"
    },
    {
        "id": 215,
        "line": 165,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token);\n}\nelse {\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n}"
    },
    {
        "id": 216,
        "line": 165,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token);\n}\nelse {\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n}"
    },
    {
        "id": 217,
        "line": 165,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token);\n}\nelse {\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n}"
    },
    {
        "id": 218,
        "line": 165,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token);\n}\nelse {\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n}"
    },
    {
        "id": 219,
        "line": 165,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token);\n}\nelse {\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n}"
    },
    {
        "id": 220,
        "line": 165,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token);\n}\nelse {\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n}"
    },
    {
        "id": 221,
        "line": 165,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token);\n}\nelse {\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n}"
    },
    {
        "id": 222,
        "line": 165,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token);\n}\nelse {\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n    tokens.add(token);\n}"
    },
    {
        "id": 223,
        "line": 181,
        "precode": "private void gobble(",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void gobble(Iterator iter) {"
    },
    {
        "id": 224,
        "line": 181,
        "precode": "private void gobble(",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void gobble(Iterator iter, boolean eatTheRest) {"
    },
    {
        "id": 225,
        "line": 181,
        "precode": "private void gobble(",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void gobble(Iterator iter, boolean eatTheRest, boolean eatTheRestToo) {"
    },
    {
        "id": 226,
        "line": 181,
        "precode": "private void gobble(",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void gobble(Iterator iter, boolean eatTheRest, boolean eatTheRestToo, boolean eatTheRestYetAnotherTime) {"
    },
    {
        "id": 227,
        "line": 181,
        "precode": "private void gobble(",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void gobble(Iterator iter, boolean eatTheRest, boolean eatTheRestToo, boolean eatTheRestYetAnotherTime, boolean eatTheRestOnceMore) {"
    },
    {
        "id": 228,
        "line": 181,
        "precode": "private void gobble(",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void gobble(Iterator iter, boolean eatTheRest, boolean eatTheRestToo, boolean eatTheRestYetAnotherTime, boolean eatTheRestOnceMore, boolean eatTheRestAndAgain) {"
    },
    {
        "id": 229,
        "line": 181,
        "precode": "private void gobble(",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void gobble(Iterator iter, boolean eatTheRest, boolean eatTheRestToo, boolean eatTheRestYetAnotherTime, boolean eatTheRestOnceMore, boolean eatTheRestAndAgain, boolean eatTheRestAndAgainToo) {"
    },
    {
        "id": 230,
        "line": 181,
        "precode": "private void gobble(",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void gobble(Iterator iter, boolean eatTheRest, boolean eatTheRestToo, boolean eatTheRestYetAnotherTime, boolean eatTheRestOnceMore, boolean eatTheRestAndAgain, boolean eatTheRestAndAgainToo, boolean eatTheRestAndAgainYetAnotherTime) {"
    },
    {
        "id": 231,
        "line": 181,
        "precode": "private void gobble(",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void gobble(Iterator iter, boolean eatTheRest, boolean eatTheRestToo, boolean eatTheRestYetAnotherTime, boolean eatTheRestOnceMore, boolean eatTheRestAndAgain, boolean eatTheRestAndAgainToo, boolean eatTheRestAndAgainYetAnotherTime, boolean eatTheRestAndAgainYetAnotherTimeToo) {"
    },
    {
        "id": 232,
        "line": 181,
        "precode": "private void gobble(",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void gobble(Iterator iter, boolean eatTheRest, boolean eatTheRestToo, boolean eatTheRestYetAnotherTime, boolean eatTheRestOnceMore, boolean eatTheRestAndAgain, boolean eatTheRestAndAgainToo, boolean eatTheRestAndAgainYetAnotherTime, boolean eatTheRestAndAgainYetAnotherTimeToo, boolean eatTheRestAndAgainYetAnotherTimeYetAnotherTime) {"
    },
    {
        "id": 233,
        "line": 181,
        "precode": "private void gobble(",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void gobble(Iterator iter, boolean eatTheRest, boolean eatTheRestToo, boolean eatTheRestYetAnotherTime, boolean eatTheRestOnceMore, boolean eatTheRestAndAgain, boolean eatTheRestAndAgainToo, boolean eatTheRestAndAgainYetAnotherTime, boolean eatTheRestAndAgainYetAnotherTimeToo, boolean eatTheRestAndAgainYetAnotherTimeYetAnotherTime, boolean eatTheRestAndAgainYetAnotherTimeYetAnotherTimeToo) {"
    },
    {
        "id": 234,
        "line": 181,
        "precode": "private void gobble(",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void gobble(Iterator iter, boolean eatTheRest, boolean eatTheRestToo, boolean eatTheRestYetAnotherTime, boolean eatTheRestOnceMore, boolean eatTheRestAndAgain, boolean eatTheRestAndAgainToo, boolean eatTheRestAndAgainYetAnotherTime, boolean eatTheRestAndAgainYetAnotherTimeToo, boolean eatTheRestAndAgainYetAnotherTimeYetAnotherTime, boolean eatTheRestAndAgainYetAnotherTimeYetAnotherTimeToo, boolean eatTheRestAndAgainYetAnotherTimeYetAnotherTimeYetAnotherTime) {"
    },
    {
        "id": 235,
        "line": 181,
        "precode": "private void gobble(",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void gobble(Iterator iter, boolean eatTheRest, boolean eatTheRestToo, boolean eatTheRestYetAnotherTime, boolean eatTheRestOnceMore, boolean eatTheRestAndAgain, boolean eatTheRestAndAgainToo, boolean eatTheRestAndAgainYetAnotherTime, boolean eatTheRestAndAgainYetAnotherTimeToo, boolean eatTheRestAndAgainYetAnotherTimeYetAnotherTime, boolean eatTheRestAndAgainYetAnotherTimeYetAnotherTimeToo, boolean eatTheRestAndAgainYetAnotherTimeYetAnotherTimeYetAnotherTime, boolean eatTheRestAndAgainYetAnotherTimeYetAnotherTimeYetAnotherTimeToo) {"
    },
    {
        "id": 236,
        "line": 218,
        "precode": "if (currentOption!= null && currentOption.hasArg())",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption == null ||!currentOption.hasArg())"
    },
    {
        "id": 237,
        "line": 218,
        "precode": "if (currentOption!= null && currentOption.hasArg())",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption == null || currentOption.hasArg())"
    },
    {
        "id": 238,
        "line": 218,
        "precode": "if (currentOption!= null && currentOption.hasArg())",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption == null && currentOption.hasArg())"
    },
    {
        "id": 239,
        "line": 218,
        "precode": "if (currentOption!= null && currentOption.hasArg())",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption!= null || currentOption.hasArg())"
    },
    {
        "id": 240,
        "line": 218,
        "precode": "if (currentOption!= null && currentOption.hasArg())",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption.hasArg()!= null)"
    },
    {
        "id": 241,
        "line": 218,
        "precode": "if (currentOption!= null && currentOption.hasArg())",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption.hasArg() == null)"
    },
    {
        "id": 242,
        "line": 218,
        "precode": "if (currentOption!= null && currentOption.hasArg())",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption.hasArg() == true)"
    },
    {
        "id": 243,
        "line": 218,
        "precode": "if (currentOption!= null && currentOption.hasArg())",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption.hasArg() == false)"
    },
    {
        "id": 244,
        "line": 218,
        "precode": "if (currentOption!= null && currentOption.hasArg())",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption.hasArg() ==!true)"
    },
    {
        "id": 245,
        "line": 218,
        "precode": "if (currentOption!= null && currentOption.hasArg())",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption.hasArg() ==!false)"
    },
    {
        "id": 246,
        "line": 255,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (this.options.hasOption(token)) {\n        currentOption = this.options.getOption(token);\n        tokens.add(token);\n    } else if (stopAtNonOption) {\n        eatTheRest = true;\n    }\n}"
    },
    {
        "id": 247,
        "line": 255,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (this.options.hasOption(token)) {\n        currentOption = this.options.getOption(token);\n        tokens.add(token);\n    } else {\n        eatTheRest = true;\n    }\n}"
    },
    {
        "id": 248,
        "line": 255,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (this.options.hasOption(token)) {\n        currentOption = this.options.getOption(token);\n        tokens.add(token);\n    } else {\n        eatTheRest = false;\n    }\n}"
    },
    {
        "id": 249,
        "line": 255,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (this.options.hasOption(token)) {\n        currentOption = this.options.getOption(token);\n        tokens.add(token);\n    } else {\n        eatTheRest = true;\n    }\n    return;\n}"
    },
    {
        "id": 250,
        "line": 255,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (this.options.hasOption(token)) {\n        currentOption = this.options.getOption(token);\n        tokens.add(token);\n    } else {\n        eatTheRest = true;\n    }\n    return false;\n}"
    },
    {
        "id": 251,
        "line": 255,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (this.options.hasOption(token)) {\n        currentOption = this.options.getOption(token);\n        tokens.add(token);\n    } else {\n        eatTheRest = true;\n    }\n    return null;\n}"
    },
    {
        "id": 252,
        "line": 296,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_17_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (this.options.hasOption(token)) {\n        currentOption = this.options.getOption(token);\n        tokens.add(token);\n    } else if (stopAtNonOption) {\n        eatTheRest = true;\n    }\n}\n"
    }
]