[
    {
        "id": 75,
        "line": 629,
        "precode": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n    if (!required) {\n        buff.append(\"[\\\");\n    }\n\n    if (option.getOpt()!= null) {\n        buff.append(\"-\").append(option.getOpt());\n    } else {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n\n    // if the Option has a value\n    if (option.hasArg() && option.hasArgName()) {\n        buff.append(\" <\").append(option.getArgName()).append(\">\");\n    }\n\n    // if the Option is not a required option\n    if (!required) {\n        buff.append(\"]\");\n    }\n}"
    },
    {
        "id": 76,
        "line": 629,
        "precode": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n    if (!required) {\n        buff.append(\"[\\\");\n    }\n\n    if (option.getOpt()!= null) {\n        buff.append(\"-\").append(option.getOpt());\n    } else {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n\n    // if the Option has a value\n    if (option.hasArg() && option.hasArgName()) {\n        buff.append(\" <\").append(option.getArgName()).append(\">\");\n    }\n\n    // if the Option is not a required option\n    if (!required) {\n        buff.append(\"]\");\n    }\n}"
    },
    {
        "id": 77,
        "line": 629,
        "precode": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n    if (!required) {\n        buff.append(\"[\\\");\n    }\n\n    if (option.getOpt()!= null) {\n        buff.append(\"-\").append(option.getOpt());\n    } else {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n\n    // if the Option has a value\n    if (option.hasArg() && option.hasArgName()) {\n        buff.append(\" <\").append(option.getArgName()).append(\">\");\n    }\n\n    // if the Option is not a required option\n    if (!required) {\n        buff.append(\"]\");\n    }\n}"
    },
    {
        "id": 78,
        "line": 629,
        "precode": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n    if (!required) {\n        buff.append(\"[\\\");\n    }\n\n    if (option.getOpt()!= null) {\n        buff.append(\"-\").append(option.getOpt());\n    } else {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n\n    // if the Option has a value\n    if (option.hasArg() && option.hasArgName()) {\n        buff.append(\" <\").append(option.getArgName()).append(\">\");\n    }\n\n    // if the Option is not a required option\n    if (!required) {\n        buff.append(\"]\");\n    }\n}"
    },
    {
        "id": 79,
        "line": 629,
        "precode": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n    if (!required) {\n        buff.append(\"[\\\");\n    }\n\n    if (option.getOpt()!= null) {\n        buff.append(\"-\").append(option.getOpt());\n    } else {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n\n    // if the Option has a value\n    if (option.hasArg() && option.hasArgName()) {\n        buff.append(\" <\").append(option.getArgName()).append(\">\");\n    }\n\n    // if the Option is not a required option\n    if (!required) {\n        buff.append(\"]\");\n    }\n}"
    },
    {
        "id": 80,
        "line": 629,
        "precode": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n    if (!required) {\n        buff.append(\"[\\\");\n    }\n\n    if (option.getOpt()!= null) {\n        buff.append(\"-\").append(option.getOpt());\n    } else {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n\n    // if the Option has a value\n    if (option.hasArg() && option.hasArgName()) {\n        buff.append(\" <\").append(option.getArgName()).append(\">\");\n    }\n\n    // if the Option is not a required option\n    if (!required) {\n        buff.append(\"]\");\n    }\n}"
    },
    {
        "id": 81,
        "line": 629,
        "precode": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {\n    if (!required) {\n        buff.append(\"[\\\");\n    }\n\n    if (option.getOpt()!= null) {\n        buff.append(\"-\").append(option.getOpt());\n    } else {\n        buff.append(\"--\").append(option.getLongOpt());\n    }\n\n    // if the Option has a value\n    if (option.hasArg() && option.hasArgName()) {\n        buff.append(\" <\").append(option.getArgName()).append(\">\");\n    }\n\n    // if the Option is not a required option\n    if (!required) {\n        buff.append(\"]\");\n    }\n}"
    },
    {
        "id": 202,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    text = padding + text.substring(pos).trim();\n    pos = findWrapPos(text, width, 0);\n\n    if (pos == -1) {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(text);\n\n            return sb;\n        }\n\n        if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) {\n            sb.append(text);\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}"
    },
    {
        "id": 203,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    text = padding + text.substring(pos).trim();\n    pos = findWrapPos(text, width, 0);\n\n    if (pos == -1) {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(text);\n\n            return sb;\n        }\n\n        if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) {\n            sb.append(text);\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}"
    },
    {
        "id": 204,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    text = padding + text.substring(pos).trim();\n    pos = findWrapPos(text, width, 0);\n\n    if (pos == -1) {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(text);\n\n            return sb;\n        }\n\n        if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) {\n            sb.append(text);\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}"
    },
    {
        "id": 205,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    text = padding + text.substring(pos).trim();\n    pos = findWrapPos(text, width, 0);\n\n    if (pos == -1) {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(text);\n\n            return sb;\n        }\n\n        if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) {\n            sb.append(text);\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}"
    },
    {
        "id": 206,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    text = padding + text.substring(pos).trim();\n    pos = findWrapPos(text, width, 0);\n\n    if (pos == -1) {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(text);\n\n            return sb;\n        }\n\n        if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) {\n            sb.append(text);\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}"
    },
    {
        "id": 207,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    text = padding + text.substring(pos).trim();\n    pos = findWrapPos(text, width, 0);\n\n    if (pos == -1) {\n        sb.append(rtrim(text));\n\n        return sb;\n    }\n    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n\n    // all following lines must be padded with nextLineTabStop space \n    // characters\n    final String padding = createPadding(nextLineTabStop);\n\n    while (true) {\n        text = padding + text.substring(pos).trim();\n        pos = findWrapPos(text, width, 0);\n\n        if (pos == -1) {\n            sb.append(text);\n\n            return sb;\n        }\n\n        if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) {\n            sb.append(text);\n\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n    }\n}"
    },
    {
        "id": 208,
        "line": 843,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "return false;"
    },
    {
        "id": 209,
        "line": 843,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "return true;"
    },
    {
        "id": 210,
        "line": 843,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "return false;"
    },
    {
        "id": 211,
        "line": 843,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "return false;"
    },
    {
        "id": 212,
        "line": 843,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "return false;"
    },
    {
        "id": 213,
        "line": 843,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "return false;"
    },
    {
        "id": 214,
        "line": 843,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "return false;"
    },
    {
        "id": 215,
        "line": 843,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "return false;"
    },
    {
        "id": 216,
        "line": 843,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "return false;"
    },
    {
        "id": 217,
        "line": 843,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "return false;"
    },
    {
        "id": 218,
        "line": 843,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "return false;"
    },
    {
        "id": 219,
        "line": 843,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "return false;"
    },
    {
        "id": 220,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (n > 0) {\n"
    },
    {
        "id": 221,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    if (n == 0) break;\n"
    },
    {
        "id": 222,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    if (n == 0) continue;\n"
    },
    {
        "id": 223,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    if (n == 0) return;\n"
    },
    {
        "id": 224,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    if (n == 0) throw new Exception();\n"
    },
    {
        "id": 225,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    if (n == 0) System.out.println();\n"
    },
    {
        "id": 226,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n    if (n == 0) System.exit(0);\n"
    },
    {
        "id": 227,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n\twhile (true) {\n\t\t\n\t}\n}"
    },
    {
        "id": 228,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n\twhile (true) {\n\t\t\n\t}\n\nwhile (true) {\n\twhile (true) {\n\t\t\n\t}\n}"
    },
    {
        "id": 229,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n\twhile (true) {\n\t\t\n\t}\n\n\twhile (true) {\n\t\t\n\t}\n}"
    },
    {
        "id": 230,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n\twhile (true) {\n\t\t\n\t}\n\n\twhile (true) {\n\t\t\n\t}\n\nwhile (true) {\n\twhile (true) {\n\t\t\n\t}\n}"
    },
    {
        "id": 231,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n\twhile (true) {\n\t\t\n\t}\n\n\twhile (true) {\n\t\t\n\t}\n\n\twhile (true) {\n\t\t\n\t}\n}"
    },
    {
        "id": 232,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n\twhile (true) {\n\t\t\n\t}\n\n\twhile (true) {\n\t\t\n\t}\n\n\twhile (true) {\n\t\t\n\t}\n\nwhile (true) {\n\twhile (true) {\n\t\t\n\t}\n}"
    },
    {
        "id": 233,
        "line": 843,
        "precode": "while (true) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "while (true) {\n\twhile (true) {\n\t\t\n\t}\n\n\twhile (true) {\n\t\t\n\t}\n\n\twhile (true) {\n\t\t\n\t}\n\n\twhile (true) {\n\t\t\n\t}\n}"
    },
    {
        "id": 315,
        "line": 558,
        "precode": "StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \").reverse();"
    },
    {
        "id": 316,
        "line": 558,
        "precode": " // create a list for processed option groups",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "// create a list for processed option groups\nList processedGroups = new ArrayList(processedGroups).reverse();"
    },
    {
        "id": 317,
        "line": 558,
        "precode": " // temp variable",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "// temp variable\nString temp = temp.reverse();"
    },
    {
        "id": 318,
        "line": 558,
        "precode": "List optList = new ArrayList(options.getOptions());",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "List optList = new ArrayList(options.getOptions()).reverse();"
    },
    {
        "id": 319,
        "line": 558,
        "precode": "Collections.sort(optList, getOptionComparator());",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "Collections.sort(optList, getOptionComparator()).reverse();"
    },
    {
        "id": 320,
        "line": 558,
        "precode": "Option option;",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "Option option;\nString temp = temp.reverse();"
    },
    {
        "id": 321,
        "line": 558,
        "precode": "List optList = new ArrayList(options.getOptions());",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "List optList = new ArrayList(options.getOptions()).reverse();"
    },
    {
        "id": 322,
        "line": 558,
        "precode": "Collections.sort(optList, getOptionComparator());",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "Collections.sort(optList, getOptionComparator()).reverse();"
    },
    {
        "id": 323,
        "line": 558,
        "precode": "Option option;",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "Option option;\nString temp = temp.reverse();"
    },
    {
        "id": 324,
        "line": 558,
        "precode": "List optList = new ArrayList(options.getOptions());",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "List optList = new ArrayList(options.getOptions()).reverse();"
    },
    {
        "id": 325,
        "line": 558,
        "precode": "Collections.sort(optList, getOptionComparator());",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "Collections.sort(optList, getOptionComparator()).reverse();"
    },
    {
        "id": 326,
        "line": 843,
        "precode": "int pos = findWrapPos(text, width, 0);",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "int pos = findWrapPos(text, width, -1);"
    },
    {
        "id": 327,
        "line": 843,
        "precode": "int pos = findWrapPos(text, width, 0);",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "int pos = findWrapPos(text, width, 1);"
    },
    {
        "id": 328,
        "line": 843,
        "precode": "int pos = findWrapPos(text, width, 0);",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "int pos = findWrapPos(text, width, nextLineTabStop + 1);"
    },
    {
        "id": 329,
        "line": 843,
        "precode": "int pos = findWrapPos(text, width, 0);",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "int pos = findWrapPos(text, width, nextLineTabStop - 1);"
    },
    {
        "id": 330,
        "line": 843,
        "precode": "if (pos == -1) {",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "if (pos == 0) {"
    },
    {
        "id": 331,
        "line": 843,
        "precode": "return sb;",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "return null;"
    },
    {
        "id": 332,
        "line": 843,
        "precode": "return sb;",
        "filepath": "defects4j_fixed/Cli/Cli_23_fixed/src/java/org/apache/commons/cli/HelpFormatter.java",
        "aftercode": "return sb.toString();"
    }
]