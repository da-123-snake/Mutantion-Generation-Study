[
    {
        "id": 137,
        "line": 160,
        "precode": "String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {"
    },
    {
        "id": 138,
        "line": 160,
        "precode": "init();",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "init();"
    },
    {
        "id": 139,
        "line": 160,
        "precode": "this.options = options;",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "this.options = options;"
    },
    {
        "id": 141,
        "line": 160,
        "precode": "Iterator iter = Arrays.asList(arguments).iterator();",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "Iterator iter = Arrays.asList(arguments).iterator();"
    },
    {
        "id": 143,
        "line": 160,
        "precode": "while (iter.hasNext()) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "while (true) {"
    },
    {
        "id": 144,
        "line": 213,
        "precode": "",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption!= null && currentOption.hasArg()) {\n    tokens.add(value);\n    currentOption = null;\n}"
    },
    {
        "id": 145,
        "line": 213,
        "precode": "",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (currentOption!= null && currentOption.hasArgs()) {\n    tokens.add(value);\n}"
    },
    {
        "id": 146,
        "line": 213,
        "precode": "",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "eatTheRest = true;\ntokens.add(\"--\");\ntokens.add(value);"
    },
    {
        "id": 147,
        "line": 213,
        "precode": "",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "tokens.add(value);\ncurrentOption = null;"
    },
    {
        "id": 148,
        "line": 213,
        "precode": "",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "tokens.add(value);\ncurrentOption = null;"
    },
    {
        "id": 149,
        "line": 213,
        "precode": "",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "tokens.add(value);\ncurrentOption = null;"
    },
    {
        "id": 150,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else if (stopAtNonOption) {\n        eatTheRest = true;\n    }\n    tokens.add(token);\n}"
    },
    {
        "id": 151,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else if (stopAtNonOption) {\n        eatTheRest = false;\n    }\n    tokens.add(token);\n}"
    },
    {
        "id": 152,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else {\n        eatTheRest = true;\n    }\n    tokens.add(token);\n}"
    },
    {
        "id": 153,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else {\n        eatTheRest = false;\n    }\n    tokens.add(token);\n}"
    },
    {
        "id": 154,
        "line": 240,
        "precode": "if (options.hasOption(token)) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (options.hasOption(token)) {\n    currentOption = options.getOption(token);\n} else if (stopAtNonOption) {\n    eatTheRest = true;\n}\ntokens.add(token);\n}"
    },
    {
        "id": 155,
        "line": 240,
        "precode": "if (options.hasOption(token)) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (options.hasOption(token)) {\n    currentOption = options.getOption(token);\n} else if (stopAtNonOption) {\n    eatTheRest = false;\n}\ntokens.add(token);\n}"
    },
    {
        "id": 156,
        "line": 240,
        "precode": "if (options.hasOption(token)) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (options.hasOption(token)) {\n    currentOption = options.getOption(token);\n} else {\n    eatTheRest = true;\n}\ntokens.add(token);\n}"
    },
    {
        "id": 157,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else if (stopAtNonOption) {\n        eatTheRest = true;\n    }\n    tokens.add(token);\n}\n"
    },
    {
        "id": 158,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else {\n        eatTheRest = true;\n    }\n    tokens.add(token);\n}\n"
    },
    {
        "id": 159,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else {\n        eatTheRest = false;\n    }\n    tokens.add(token);\n}\n"
    },
    {
        "id": 160,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else {\n        eatTheRest = true;\n    }\n    tokens.add(token);\n}\n"
    },
    {
        "id": 161,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else {\n        eatTheRest = false;\n    }\n    tokens.add(token);\n}\n"
    },
    {
        "id": 162,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else {\n        eatTheRest = false;\n    }\n    tokens.add(token);\n}\n"
    },
    {
        "id": 163,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else {\n        eatTheRest = false;\n    }\n    tokens.add(token);\n}\n"
    },
    {
        "id": 164,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else {\n        eatTheRest = false;\n    }\n    tokens.add(token);\n}\n"
    },
    {
        "id": 165,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else {\n        eatTheRest = false;\n    }\n    tokens.add(token);\n}\n"
    },
    {
        "id": 166,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else {\n        eatTheRest = false;\n    }\n    tokens.add(token);\n}\n"
    },
    {
        "id": 167,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else {\n        eatTheRest = false;\n    }\n    tokens.add(token);\n}\n"
    },
    {
        "id": 168,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else {\n        eatTheRest = false;\n    }\n    tokens.add(token);\n}\n"
    },
    {
        "id": 169,
        "line": 240,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else {\n        eatTheRest = false;\n    }\n    tokens.add(token);\n}\n"
    },
    {
        "id": 170,
        "line": 160,
        "precode": "String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) {"
    },
    {
        "id": 171,
        "line": 160,
        "precode": "init();",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "init();"
    },
    {
        "id": 172,
        "line": 160,
        "precode": "this.options = options;",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "this.options = options;"
    },
    {
        "id": 174,
        "line": 160,
        "precode": "Iterator iter = Arrays.asList(arguments).iterator();",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "Iterator iter = Arrays.asList(arguments).iterator();"
    },
    {
        "id": 176,
        "line": 160,
        "precode": "while (iter.hasNext()) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "while (true) {"
    },
    {
        "id": 178,
        "line": 160,
        "precode": "String token = (String) iter.next();",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "String token = (String) iter.next();"
    },
    {
        "id": 180,
        "line": 160,
        "precode": "if (token.startsWith(\"--\")) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.startsWith(\"--\")) {"
    },
    {
        "id": 181,
        "line": 160,
        "precode": "if (token.indexOf('=')!= -1) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {"
    },
    {
        "id": 182,
        "line": 160,
        "precode": "tokens.add(token.substring(0, token.indexOf('=')));",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "tokens.add(token.substring(0, token.indexOf('=')));"
    },
    {
        "id": 183,
        "line": 160,
        "precode": "tokens.add(token.substring(token.indexOf('=') + 1, token.length()));",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "tokens.add(token.substring(token.indexOf('=') + 1, token.length()));"
    },
    {
        "id": 184,
        "line": 160,
        "precode": "} else {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "} else {"
    },
    {
        "id": 185,
        "line": 160,
        "precode": "tokens.add(token);",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "tokens.add(token);"
    },
    {
        "id": 187,
        "line": 160,
        "precode": "else if (\"-\".equals(token)) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "else if (\"-\".equals(token)) {"
    },
    {
        "id": 188,
        "line": 160,
        "precode": "tokens.add(token);",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "tokens.add(token);"
    },
    {
        "id": 190,
        "line": 160,
        "precode": "burstToken(token, stopAtNonOption);",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "burstToken(token, stopAtNonOption);"
    },
    {
        "id": 198,
        "line": 160,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n}"
    },
    {
        "id": 199,
        "line": 160,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n    tokens.add(token.substring(0, token.indexOf('=')));\n} else {\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n    tokens.add(token.substring(0, token.indexOf('=')));\n}"
    },
    {
        "id": 200,
        "line": 160,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token);\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n    tokens.add(token.substring(0, token.indexOf('=')));\n}"
    },
    {
        "id": 201,
        "line": 160,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token);\n    tokens.add(token);\n} else {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n}"
    },
    {
        "id": 202,
        "line": 160,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token);\n} else {\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n    tokens.add(token);\n}"
    },
    {
        "id": 203,
        "line": 160,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token);\n    tokens.add(token.substring(0, token.indexOf('=')));\n} else {\n    tokens.add(token);\n    tokens.add(token);\n}"
    },
    {
        "id": 204,
        "line": 160,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token);\n    tokens.add(token);\n} else {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token);\n}"
    },
    {
        "id": 205,
        "line": 160,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n    tokens.add(token);\n}"
    },
    {
        "id": 206,
        "line": 160,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token);\n    tokens.add(token);\n} else {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n}"
    },
    {
        "id": 207,
        "line": 160,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n    tokens.add(token);\n}"
    },
    {
        "id": 208,
        "line": 160,
        "precode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n} else {\n    tokens.add(token);\n}",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (token.indexOf('=')!= -1) {\n    tokens.add(token);\n    tokens.add(token);\n} else {\n    tokens.add(token.substring(0, token.indexOf('=')));\n    tokens.add(token.substring(token.indexOf('=') + 1, token.length()));\n}"
    },
    {
        "id": 209,
        "line": 160,
        "precode": "if (tokens[i].equals(\"--\")) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (tokens[i].equals(\"---\")) {"
    },
    {
        "id": 210,
        "line": 160,
        "precode": "if (tokens[i].equals(\"-\") && tokens.length > i + 1 &&!tokens[i + 1].startsWith(\"-\") &&!tokens[i + 1].startsWith(\"--\")) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (tokens[i].equals(\"--\") && tokens.length > i + 1 &&!tokens[i + 1].startsWith(\"-\") &&!tokens[i + 1].startsWith(\"---\")) {"
    },
    {
        "id": 211,
        "line": 160,
        "precode": "if (tokens[i].equals(\"-\") && tokens.length > i + 1 && tokens[i + 1].startsWith(\"-\") &&!tokens[i + 1].startsWith(\"--\")) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (tokens[i].equals(\"---\") && tokens.length > i + 1 && tokens[i + 1].startsWith(\"-\") &&!tokens[i + 1].startsWith(\"---\")) {"
    },
    {
        "id": 212,
        "line": 160,
        "precode": "if (tokens[i].equals(\"-\") && tokens.length > i + 1 && tokens[i + 1].startsWith(\"--\")) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (tokens[i].equals(\"---\") && tokens.length > i + 1 && tokens[i + 1].startsWith(\"---\")) {"
    },
    {
        "id": 213,
        "line": 160,
        "precode": "if (tokens[i].equals(\"-\") && tokens.length > i + 1 &&!tokens[i + 1].startsWith(\"-\") && tokens[i + 1].startsWith(\"--\")) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (tokens[i].equals(\"--\") && tokens.length > i + 1 &&!tokens[i + 1].startsWith(\"-\") && tokens[i + 1].startsWith(\"---\")) {"
    },
    {
        "id": 214,
        "line": 160,
        "precode": "if (tokens[i].equals(\"-\") && tokens.length > i + 1 && tokens[i + 1].startsWith(\"-\") && tokens[i + 1].length() > 2) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (tokens[i].equals(\"---\") && tokens.length > i + 1 && tokens[i + 1].startsWith(\"-\") && tokens[i + 1].length() > 3) {"
    },
    {
        "id": 215,
        "line": 160,
        "precode": "if (tokens[i].equals(\"-\") && tokens.length > i + 1 && tokens[i + 1].startsWith(\"--\")) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (tokens[i].equals(\"---\") && tokens.length > i + 1 && tokens[i + 1].startsWith(\"---\")) {"
    },
    {
        "id": 216,
        "line": 160,
        "precode": "if (tokens[i].equals(\"-\") && tokens.length > i + 1 &&!tokens[i + 1].startsWith(\"-\") && tokens[i + 1].startsWith(\"--\")) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (tokens[i].equals(\"--\") && tokens.length > i + 1 &&!tokens[i + 1].startsWith(\"-\") && tokens[i + 1].startsWith(\"---\")) {"
    },
    {
        "id": 217,
        "line": 160,
        "precode": "if (tokens[i].equals(\"-\") && tokens.length > i + 1 && tokens[i + 1].startsWith(\"-\") && tokens[i + 1].length() > 2) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "if (tokens[i].equals(\"---\") && tokens.length > i + 1 && tokens[i + 1].startsWith(\"-\") && tokens[i + 1].length() > 3) {"
    },
    {
        "id": 218,
        "line": 213,
        "precode": "currentOption = null;",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "currentOption = option;"
    },
    {
        "id": 219,
        "line": 213,
        "precode": "currentOption = null;",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "currentOption = option;"
    },
    {
        "id": 220,
        "line": 213,
        "precode": "currentOption = null;",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "currentOption = option;"
    },
    {
        "id": 221,
        "line": 213,
        "precode": "currentOption = null;",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "currentOption = option;"
    },
    {
        "id": 222,
        "line": 213,
        "precode": "currentOption = null;",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "currentOption = option;"
    },
    {
        "id": 223,
        "line": 213,
        "precode": "currentOption = null;",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "currentOption = option;"
    },
    {
        "id": 224,
        "line": 213,
        "precode": "currentOption = null;",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "currentOption = option;"
    },
    {
        "id": 225,
        "line": 213,
        "precode": "currentOption = null;",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "currentOption = option;"
    },
    {
        "id": 226,
        "line": 213,
        "precode": "currentOption = null;",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "currentOption = option;"
    },
    {
        "id": 227,
        "line": 213,
        "precode": "currentOption = null;",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "currentOption = option;"
    },
    {
        "id": 228,
        "line": 296,
        "precode": "",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "n = (n ^ (n - 1));"
    },
    {
        "id": 229,
        "line": 281,
        "precode": "  while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": " while (true) { "
    },
    {
        "id": 230,
        "line": 281,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "return true;"
    },
    {
        "id": 231,
        "line": 281,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 232,
        "line": 281,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 233,
        "line": 281,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) { ",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": " while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 234,
        "line": 281,
        "precode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "private void processOptionToken(String token, boolean stopAtNonOption) {\n    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else if (stopAtNonOption) {\n        eatTheRest = true;\n    }\n\n    tokens.add(token);\n}"
    },
    {
        "id": 235,
        "line": 281,
        "precode": "    if (options.hasOption(token)) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "    if (options.hasOption(token)) {\n        currentOption = options.getOption(token);\n    } else if (stopAtNonOption) {\n        eatTheRest = true;\n    }\n\n    tokens.add(token);\n}"
    },
    {
        "id": 236,
        "line": 281,
        "precode": "        currentOption = options.getOption(token);\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "        currentOption = options.getOption(token);\n    } else if (stopAtNonOption) {\n        eatTheRest = true;\n    }\n\n    tokens.add(token);\n}"
    },
    {
        "id": 237,
        "line": 296,
        "precode": "    } else if (stopAtNonOption) {\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "    } else if (stopAtNonOption) {\n        eatTheRest = true;\n    }\n\n    tokens.add(token);\n}"
    },
    {
        "id": 238,
        "line": 281,
        "precode": "        eatTheRest = true;\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "        eatTheRest = true;\n    }\n\n    tokens.add(token);\n}"
    },
    {
        "id": 239,
        "line": 292,
        "precode": "    tokens.add(token);\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "    tokens.add(token);\n}"
    },
    {
        "id": 240,
        "line": 292,
        "precode": "tokens.add(token);\n",
        "filepath": "defects4j_fixed/Cli/Cli_19_fixed/src/java/org/apache/commons/cli/PosixParser.java",
        "aftercode": "tokens.add(token);\n}"
    }
]