[
    {
        "id": 1,
        "line": 431,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Cli/Cli_14_fixed/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "aftercode": "n = (n ^ (n - 1));"
    },
    {
        "id": 2,
        "line": 431,
        "precode": "  while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Cli/Cli_14_fixed/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "aftercode": " while (true) { "
    },
    {
        "id": 3,
        "line": 431,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Cli/Cli_14_fixed/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "aftercode": "return true;"
    },
    {
        "id": 4,
        "line": 431,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Cli/Cli_14_fixed/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 5,
        "line": 431,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Cli/Cli_14_fixed/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 6,
        "line": 431,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) { ",
        "filepath": "defects4j_fixed/Cli/Cli_14_fixed/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "aftercode": " while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 7,
        "line": 431,
        "precode": "if (arg.equals(args[i])) {",
        "filepath": "defects4j_fixed/Cli/Cli_14_fixed/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "aftercode": "if (arg.equalsIgnoreCase(args[i])) {"
    },
    {
        "id": 8,
        "line": 431,
        "precode": "if (arg.equals(args[i])) {",
        "filepath": "defects4j_fixed/Cli/Cli_14_fixed/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "aftercode": "if (arg.equalsIgnoreCase(args[i])) {"
    },
    {
        "id": 9,
        "line": 431,
        "precode": "if (arg.equals(args[i])) {",
        "filepath": "defects4j_fixed/Cli/Cli_14_fixed/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "aftercode": "if (arg.toLowerCase().equals(args[i])) {"
    },
    {
        "id": 10,
        "line": 431,
        "precode": "if (arg.equals(args[i])) {",
        "filepath": "defects4j_fixed/Cli/Cli_14_fixed/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "aftercode": "if (arg.replace(' ', '_').equals(args[i])) {"
    },
    {
        "id": 11,
        "line": 431,
        "precode": "if (arg.equals(args[i])) {",
        "filepath": "defects4j_fixed/Cli/Cli_14_fixed/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "aftercode": "if (arg.replace(' ', '_').equalsIgnoreCase(args[i])) {"
    },
    {
        "id": 12,
        "line": 431,
        "precode": "if (arg.equals(args[i])) {",
        "filepath": "defects4j_fixed/Cli/Cli_14_fixed/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "aftercode": "if (arg.replace(' ', '_').toLowerCase().equals(args[i])) {"
    },
    {
        "id": 13,
        "line": 431,
        "precode": "if (arg.equals(args[i])) {",
        "filepath": "defects4j_fixed/Cli/Cli_14_fixed/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "aftercode": "if (arg.replace(' ', '_').toLowerCase().replace(' ', '_').equals(args[i])) {"
    },
    {
        "id": 14,
        "line": 431,
        "precode": "if (arg.equals(args[i])) {",
        "filepath": "defects4j_fixed/Cli/Cli_14_fixed/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "aftercode": "if (arg.replace(' ', '_').toLowerCase().replace(' ', '_').replace(' ', '_').equals(args[i])) {"
    },
    {
        "id": 15,
        "line": 431,
        "precode": "if (arg.equals(args[i])) {",
        "filepath": "defects4j_fixed/Cli/Cli_14_fixed/src/java/org/apache/commons/cli2/option/GroupImpl.java",
        "aftercode": "if (arg.replace(' ', '_').toLowerCase().replace(' ', '_').replace(' ', '_').replace(' ', '_').equals(args[i])) {"
    }
]