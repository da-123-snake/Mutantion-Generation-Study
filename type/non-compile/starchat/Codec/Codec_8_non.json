[
    {
        "id": 36,
        "line": 225,
        "precode": "private boolean eof;",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "private boolean eof = false;"
    },
    {
        "id": 38,
        "line": 225,
        "precode": " * Place holder for the 3 bytes we're dealing with for our base64 logic. Bitwise operations store and extract the",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": " * Place holder for the 3 bytes we're dealing with for our base64 logic. Bitwise operations store and extract the "
    },
    {
        "id": 39,
        "line": 225,
        "precode": " * base64 encoding or decoding from this variable.",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": " * base64 encoding or decoding from this variable."
    },
    {
        "id": 40,
        "line": 225,
        "precode": "    /**",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "     * "
    },
    {
        "id": 41,
        "line": 225,
        "precode": "     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode."
    },
    {
        "id": 42,
        "line": 225,
        "precode": "     * <p>",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "     *"
    },
    {
        "id": 43,
        "line": 591,
        "precode": "if (b == PAD) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (b!= PAD) {\n"
    },
    {
        "id": 44,
        "line": 591,
        "precode": "if (inAvail < 0) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (inAvail >= 0) {\n"
    },
    {
        "id": 45,
        "line": 591,
        "precode": "if (buffer == null || buffer.length - pos < decodeSize) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (buffer == null || buffer.length - pos >= decodeSize) {\n"
    },
    {
        "id": 46,
        "line": 591,
        "precode": "if (b >= 0 && b < DECODE_TABLE.length) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (b < DECODE_TABLE.length) {\n"
    },
    {
        "id": 47,
        "line": 591,
        "precode": "if (result >= 0) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (result!= -1) {\n"
    },
    {
        "id": 48,
        "line": 591,
        "precode": "if (eof) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (!eof) {\n"
    },
    {
        "id": 49,
        "line": 591,
        "precode": "if (modulus!= 0) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (modulus == 0) {\n"
    },
    {
        "id": 50,
        "line": 591,
        "precode": "if (x == 0) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (x!= 0) {\n"
    },
    {
        "id": 51,
        "line": 591,
        "precode": "if (c == '=') {\n",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (c!= '=') {\n"
    },
    {
        "id": 77,
        "line": 674,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "n = (n ^ (n - 1));"
    },
    {
        "id": 78,
        "line": 674,
        "precode": "  while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": " while (true) {"
    },
    {
        "id": 79,
        "line": 674,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return true;"
    },
    {
        "id": 80,
        "line": 674,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 81,
        "line": 674,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 82,
        "line": 674,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) { ",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": " while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 83,
        "line": 674,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) { ",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": " while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 84,
        "line": 418,
        "precode": "if (buffer!= null) {",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (buffer == null) {"
    },
    {
        "id": 85,
        "line": 418,
        "precode": "int len = Math.min(avail(), bAvail);",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "int len = Math.min(avail(), bAvail - 1);"
    },
    {
        "id": 86,
        "line": 418,
        "precode": "System.arraycopy(buffer, readPos, b, bPos, len);",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "System.arraycopy(buffer, readPos, b, bPos + 1, len);"
    },
    {
        "id": 87,
        "line": 418,
        "precode": "readPos += len;",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "readPos -= len;"
    },
    {
        "id": 88,
        "line": 418,
        "precode": "if (readPos >= pos) {",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (readPos == pos - 1) {"
    },
    {
        "id": 89,
        "line": 418,
        "precode": "buffer = null;",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "buffer = new byte[1024];"
    },
    {
        "id": 90,
        "line": 169,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "n = (n ^ (n - 1));"
    },
    {
        "id": 91,
        "line": 169,
        "precode": "  while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": " while (true) {"
    },
    {
        "id": 92,
        "line": 169,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return true;"
    },
    {
        "id": 93,
        "line": 169,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 94,
        "line": 169,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 95,
        "line": 169,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) {",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": " while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 96,
        "line": 825,
        "precode": "byte[] base64Data = ",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "byte[] base64Data = new String(base64Data).getBytes()"
    },
    {
        "id": 97,
        "line": 825,
        "precode": "byte[] base64Data = ",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "byte[] base64Data = base64Data.trim()"
    },
    {
        "id": 98,
        "line": 825,
        "precode": "return new Base64().decode(",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return new sun.misc.BASE64Decoder().decodeBuffer("
    },
    {
        "id": 99,
        "line": 825,
        "precode": "return new Base64().decode(",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return java.util.Base64.getDecoder().decode("
    },
    {
        "id": 100,
        "line": 825,
        "precode": "return new Base64().decode(",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return java.util.Base64.getUrlDecoder().decode("
    },
    {
        "id": 101,
        "line": 825,
        "precode": "return new Base64().decode(",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return javax.xml.bind.DatatypeConverter.parseBase64Binary("
    },
    {
        "id": 102,
        "line": 825,
        "precode": "return new Base64().decode(",
        "filepath": "defects4j_fixed/Codec/Codec_8_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return org.apache.commons.codec.binary.Base64.decodeBase64("
    }
]