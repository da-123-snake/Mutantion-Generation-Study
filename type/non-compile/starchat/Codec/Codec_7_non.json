[
    {
        "id": 29,
        "line": 445,
        "precode": "    if (inAvail == 0) {",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "    if (true) {"
    },
    {
        "id": 30,
        "line": 445,
        "precode": "        return;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "        return true;"
    },
    {
        "id": 31,
        "line": 445,
        "precode": "        return 0;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "        return true;"
    },
    {
        "id": 32,
        "line": 445,
        "precode": "        return 1;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "        return false;"
    },
    {
        "id": 33,
        "line": 445,
        "precode": "        return 2;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "        return false;"
    },
    {
        "id": 34,
        "line": 445,
        "precode": "        return 3;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "        return false;"
    },
    {
        "id": 35,
        "line": 445,
        "precode": "        return 4;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "        return false;"
    },
    {
        "id": 42,
        "line": 225,
        "precode": "private boolean eof;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "private boolean eof;\n\nprivate boolean feof() {\n    return false;\n}\n\nprivate boolean readeof() {\n    return false;\n}\n\nprivate boolean eof() {\n    return false;\n}\n\nprivate boolean feof() {\n    return false;\n}\n\nprivate boolean readeof() {\n    return false;\n}\n\nprivate boolean eof() {\n    return false;\n}"
    },
    {
        "id": 43,
        "line": 225,
        "precode": "private int x;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "private int x;\n\nprivate int xor(int x) {\n    return x;\n}\n\nprivate int x() {\n    return 0;\n}\n\nprivate int xor(int x) {\n    return x;\n}\n\nprivate int x() {\n    return 0;\n}"
    },
    {
        "id": 44,
        "line": 225,
        "precode": "    /**",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "    /**\n     * Place holder for the 3 bytes we're dealing with for our base64 logic. Bitwise operations store and extract the\n     * base64 encoding or decoding from this variable.\n     */\n    private int x;\n\n    /**\n     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.\n     * <p>\n     * "
    },
    {
        "id": 45,
        "line": 225,
        "precode": "    private boolean eof;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "    private boolean eof;\n\n    /**\n     * Place holder for the 3 bytes we're dealing with for our base64 logic. Bitwise operations store and extract the\n     * base64 encoding or decoding from this variable.\n     */\n    private int x;\n\n    /**\n     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.\n     * <p>\n     * "
    },
    {
        "id": 46,
        "line": 225,
        "precode": "     * Place holder for the 3 bytes we're dealing with for our base64 logic. Bitwise operations store and extract the",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "     * Place holder for the 3 bytes we're dealing with for our base64 logic. Bitwise operations store and extract the\n     * base64 encoding or decoding from this variable.\n     */\n    private int x;\n\n    /**\n     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.\n     * <p>\n     * "
    },
    {
        "id": 47,
        "line": 225,
        "precode": "base64 encoding or decoding from this variable.",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "base64 encoding or decoding from this variable.\n     * Bitwise operations store and extract the\n     * base64 encoding or decoding from this variable.\n     */\n    private int x;\n\n    /**\n     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.\n     * <p>\n     * "
    },
    {
        "id": 48,
        "line": 225,
        "precode": "     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "     * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.\n     * <p>\n     * "
    },
    {
        "id": 49,
        "line": 603,
        "precode": "if (b == PAD)",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (b!= PAD)"
    },
    {
        "id": 50,
        "line": 603,
        "precode": "if (buffer == null || buffer.length - pos < decodeSize)",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (buffer == null || buffer.length - pos >= decodeSize)"
    },
    {
        "id": 51,
        "line": 603,
        "precode": "if (b >= 0 && b < DECODE_TABLE.length)",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (b < 0 || b >= DECODE_TABLE.length)"
    },
    {
        "id": 52,
        "line": 603,
        "precode": "if (result >= 0)",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (result!= -1)"
    },
    {
        "id": 53,
        "line": 603,
        "precode": "if (eof && modulus!= 0)",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (eof && modulus == 0)"
    },
    {
        "id": 54,
        "line": 603,
        "precode": "if (buffer == null || buffer.length - pos < decodeSize)",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (buffer == null || buffer.length - pos >= decodeSize)"
    },
    {
        "id": 55,
        "line": 603,
        "precode": "switch (modulus)",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "switch (modulus % 4)"
    },
    {
        "id": 56,
        "line": 603,
        "precode": "x = (x << 6) + result",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "x = (x << 6) ^ result"
    },
    {
        "id": 57,
        "line": 603,
        "precode": "if (eof && modulus!= 0)",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (eof && modulus == 0)"
    },
    {
        "id": 84,
        "line": 660,
        "precode": "public static byte[] encodeBase64(byte[] binaryData) {",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "public static byte[] encodeBase64(byte[] binaryData, boolean addLineBreaks) {"
    },
    {
        "id": 85,
        "line": 660,
        "precode": "return encodeBase64(binaryData, false);",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return encodeBase64(binaryData, true);"
    },
    {
        "id": 89,
        "line": 660,
        "precode": "public static byte[] encodeBase64(byte[] binaryData, boolean addLineBreaks) {",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "public static byte[] encodeBase64(byte[] binaryData, boolean addLineBreaks, boolean breakLines) {"
    },
    {
        "id": 90,
        "line": 660,
        "precode": "int len = binaryData.length;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "int len = binaryData.length, currPos = 0, resultLen = (len / 3) * 4;"
    },
    {
        "id": 91,
        "line": 424,
        "precode": "if (buffer!= null) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (buffer == b) {\n"
    },
    {
        "id": 92,
        "line": 424,
        "precode": "int len = Math.min(avail(), bAvail);\n",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "int len = Math.min(avail(), b.length - bPos);\n"
    },
    {
        "id": 93,
        "line": 424,
        "precode": "if (buffer!= b) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (buffer == null) {\n"
    },
    {
        "id": 94,
        "line": 424,
        "precode": "System.arraycopy(buffer, readPos, b, bPos, len);\n",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "System.arraycopy(buffer, readPos, b, bPos, len);\n"
    },
    {
        "id": 95,
        "line": 424,
        "precode": "readPos += len;\n",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "readPos = 0;\n"
    },
    {
        "id": 96,
        "line": 424,
        "precode": "if (readPos >= pos) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (readPos == pos) {\n"
    },
    {
        "id": 97,
        "line": 169,
        "precode": "private final byte[] encodeTable;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "private final byte[] decodeTable;"
    },
    {
        "id": 99,
        "line": 169,
        "precode": "    private final int lineLength;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "    private final int decodeLineLength;"
    },
    {
        "id": 101,
        "line": 169,
        "precode": "        private final byte[] encodeTable;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "        private final byte[] decodeTable;\n\n        /**\n         * Line separator for encoding. Not used when decoding. Only used if lineLength > 0."
    },
    {
        "id": 102,
        "line": 169,
        "precode": "        Line length for encoding. Not used when decoding. A value of zero or less implies no chunking of the base64",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "        Line length for encoding. Not used when decoding. A value of zero or less implies no chunking of the base64\n         * encoded data."
    },
    {
        "id": 103,
        "line": 836,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "n = (n ^ (n - 1));"
    },
    {
        "id": 104,
        "line": 836,
        "precode": "  while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": " while (true) {"
    },
    {
        "id": 105,
        "line": 836,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return true;"
    },
    {
        "id": 106,
        "line": 836,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 107,
        "line": 836,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 108,
        "line": 836,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) { ",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": " while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 109,
        "line": 836,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) { ",
        "filepath": "defects4j_fixed/Codec/Codec_7_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": " while (Math.abs(x-approx) > epsilon) {"
    }
]