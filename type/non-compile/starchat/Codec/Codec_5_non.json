[
    {
        "id": 24,
        "line": 445,
        "precode": "int outAvail = out.length - outPos;",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "int outAvail = out.length;"
    },
    {
        "id": 25,
        "line": 445,
        "precode": "setInitialBuffer(out, outPos, outAvail);",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "setInitialBuffer(buffer, pos, out.length);"
    },
    {
        "id": 26,
        "line": 445,
        "precode": "while (inAvail >= 0) {",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "while (true) {"
    },
    {
        "id": 27,
        "line": 445,
        "precode": "if (outPos >= out.length) {",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (pos >= buffer.length) {"
    },
    {
        "id": 36,
        "line": 225,
        "precode": "private boolean eof;",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "private boolean eof;\n\nprivate boolean eoff;"
    },
    {
        "id": 37,
        "line": 225,
        "precode": "/**",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "/*\n * Copyright (c) 2007, 2013, Oracle and/or its affiliates.\n * Copyright (c) 2013, <NAME> <<EMAIL>>\n */\n\npackage java.util;\n\n/**"
    },
    {
        "id": 38,
        "line": 225,
        "precode": " * Place holder for the 3 bytes we're dealing with for our base64 logic. Bitwise operations store and extract the",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": " * Place holder for the 3 bytes we're dealing with for our base64 logic. Bitwise operations store and extract the\n * base64 encoding or decoding from this variable.\n */\nprivate int x;\n\n/**"
    },
    {
        "id": 39,
        "line": 225,
        "precode": " * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": " * Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.\n * <p>\n"
    },
    {
        "id": 40,
        "line": 225,
        "precode": " * <p>",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": " * <p>\n *\n"
    },
    {
        "id": 41,
        "line": 225,
        "precode": " * Place holder for the 3 bytes we're dealing with for our base64 logic. Bitwise operations store and extract the base64 encoding or decoding from this variable.",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": " * Place holder for the 3 bytes we're dealing with for our base64 logic. Bitwise operations store and extract the base64 encoding or decoding from this variable.\n */\nprivate int x;\n\n/**"
    },
    {
        "id": 42,
        "line": 225,
        "precode": " * Above is the original code. your task is to generate 7 mutants in original code(notice:mutant refers to mutant in software engineering, i.e. making subtle alterations to the original code) in :",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": " * Above is the original code. your task is to generate 7 mutants in original code(notice:mutant refers to mutant in software engineering, i.e. making subtle alterations to the original code) in :\n * base64 encoding or decoding from this variable.\n */\nprivate int x;\n\n/**"
    },
    {
        "id": 43,
        "line": 603,
        "precode": "if (b == PAD)",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (b!= PAD)"
    },
    {
        "id": 44,
        "line": 603,
        "precode": "if (buffer == null || buffer.length - pos < decodeSize)",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (buffer == null || buffer.length - pos >= decodeSize)"
    },
    {
        "id": 45,
        "line": 603,
        "precode": "if (inAvail < 0)",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (inAvail >= 0)"
    },
    {
        "id": 46,
        "line": 603,
        "precode": "if (b >= 0 && b < DECODE_TABLE.length)",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (b < 0 || b >= DECODE_TABLE.length)"
    },
    {
        "id": 47,
        "line": 603,
        "precode": "if (result >= 0)",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (result < 0)"
    },
    {
        "id": 48,
        "line": 603,
        "precode": "if (eof && modulus!= 0)",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (!eof || modulus == 0)"
    },
    {
        "id": 49,
        "line": 603,
        "precode": "if (buffer == null || buffer.length - pos < decodeSize)",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (buffer == null || buffer.length - pos >= decodeSize)"
    },
    {
        "id": 50,
        "line": 603,
        "precode": "if (modulus == 2)",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (modulus!= 2)"
    },
    {
        "id": 51,
        "line": 603,
        "precode": "if (modulus == 3)",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (modulus!= 3)"
    },
    {
        "id": 66,
        "line": 669,
        "precode": "byte[] binaryData) {",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "byte[] binaryData) {"
    },
    {
        "id": 67,
        "line": 660,
        "precode": "return encodeBase64(binaryData, false);",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return encodeBase64(binaryData, true);"
    },
    {
        "id": 69,
        "line": 660,
        "precode": "return encodeBase64(binaryData, false);",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return encodeBase64(binaryData, true);"
    },
    {
        "id": 71,
        "line": 660,
        "precode": "public static byte[] encodeBase64(byte[] binaryData, boolean doPadding) {",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "public static byte[] encodeBase64(byte[] binaryData) {"
    },
    {
        "id": 72,
        "line": 660,
        "precode": "return encodeBase64(binaryData, false);",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return encodeBase64(binaryData, true);"
    },
    {
        "id": 73,
        "line": 424,
        "precode": "int readResults(byte[] b, int bPos, int bAvail) {",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "int readResults(byte[] b, int bPos, int bAvail) {"
    },
    {
        "id": 74,
        "line": 424,
        "precode": "if (buffer!= null) {",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (buffer == null) {"
    },
    {
        "id": 75,
        "line": 424,
        "precode": "int len = Math.min(avail(), bAvail);",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "int len = Math.min(avail(), bAvail);"
    },
    {
        "id": 76,
        "line": 424,
        "precode": "if (buffer!= b) {",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (buffer!= b) {"
    },
    {
        "id": 77,
        "line": 424,
        "precode": "System.arraycopy(buffer, readPos, b, bPos, len);",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "System.arraycopy(buffer, readPos, b, bPos, len);"
    },
    {
        "id": 78,
        "line": 424,
        "precode": "readPos += len;",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "readPos += len;"
    },
    {
        "id": 79,
        "line": 169,
        "precode": "private final byte[] encodeTable;",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "private final byte[] decodeTable;"
    },
    {
        "id": 81,
        "line": 169,
        "precode": "     * Line separator for encoding. Not used when decoding. Only used if lineLength > 0.",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "     * Line separator for encoding. Not used when decoding. Only used if lineLength > 0.\n     */"
    },
    {
        "id": 82,
        "line": 169,
        "precode": "     *",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "     * \n     *"
    },
    {
        "id": 83,
        "line": 169,
        "precode": "     *",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "     * \n     *"
    },
    {
        "id": 84,
        "line": 169,
        "precode": "     *",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "     * \n     *"
    },
    {
        "id": 85,
        "line": 836,
        "precode": "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR ^ 1);"
    },
    {
        "id": 86,
        "line": 836,
        "precode": "if (len > maxResultSize) {",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (len > maxResultSize ^ 1) {"
    },
    {
        "id": 87,
        "line": 836,
        "precode": "Base64 b64 = isChunked? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "Base64 b64 = isChunked? new Base64(urlSafe ^ 1) : new Base64(0, CHUNK_SEPARATOR ^ 1, urlSafe ^ 1);"
    },
    {
        "id": 88,
        "line": 836,
        "precode": "return b64.encode(binaryData);",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return b64.encode(binaryData ^ 1);"
    },
    {
        "id": 89,
        "line": 836,
        "precode": "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "long len = getEncodeLength(binaryData ^ 1, MIME_CHUNK_SIZE, CHUNK_SEPARATOR ^ 1);"
    },
    {
        "id": 90,
        "line": 836,
        "precode": "if (len > maxResultSize) {",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "if (len > maxResultSize ^ 1) {"
    },
    {
        "id": 91,
        "line": 836,
        "precode": "Base64 b64 = isChunked? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "Base64 b64 = isChunked? new Base64(urlSafe ^ 1) : new Base64(0, CHUNK_SEPARATOR ^ 1, urlSafe ^ 1);"
    },
    {
        "id": 92,
        "line": 836,
        "precode": "return b64.encode(binaryData);",
        "filepath": "defects4j_fixed/Codec/Codec_5_fixed/src/java/org/apache/commons/codec/binary/Base64.java",
        "aftercode": "return b64.encode(binaryData ^ 1);"
    }
]