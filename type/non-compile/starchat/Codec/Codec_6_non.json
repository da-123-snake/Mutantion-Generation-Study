[
    {
        "id": 53,
        "line": 185,
        "precode": "if (b == null) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "aftercode": "if (b == null) {\nthrow new NullPointerException();\n}"
    },
    {
        "id": 54,
        "line": 185,
        "precode": "else if (offset < 0 || len < 0) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "aftercode": "else if (offset < 0 || len < 0) {\nthrow new IndexOutOfBoundsException();\n}"
    },
    {
        "id": 55,
        "line": 185,
        "precode": "else if (offset > b.length || offset + len > b.length) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "aftercode": "else if (offset > b.length || offset + len > b.length) {\nthrow new IndexOutOfBoundsException();\n}"
    },
    {
        "id": 56,
        "line": 185,
        "precode": "else if (len == 0) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "aftercode": "else if (len == 0) {\nreturn 0;\n}"
    },
    {
        "id": 57,
        "line": 185,
        "precode": "while (readLen == 0) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "aftercode": "while (true) {\nif (!base64.hasData()) {\n"
    },
    {
        "id": 58,
        "line": 185,
        "precode": "if (!base64.hasData()) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "aftercode": "if (!base64.hasData()) {\nbyte[] buf = new byte[doEncode? 4096 : 8192];\nint c = in.read(buf);\n"
    },
    {
        "id": 59,
        "line": 185,
        "precode": "return depth==0;\n",
        "filepath": "defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "aftercode": "return true;\n}"
    },
    {
        "id": 60,
        "line": 185,
        "precode": "if (readLen == 0) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "aftercode": "if (true) {\n"
    },
    {
        "id": 61,
        "line": 185,
        "precode": "if (!base64.hasData()) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "aftercode": "if (false) {\n"
    },
    {
        "id": 64,
        "line": 185,
        "precode": "base64.encode(buf, 0, c);\n",
        "filepath": "defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "aftercode": "base64.encode(new byte[0], 0, 0);\n"
    },
    {
        "id": 65,
        "line": 185,
        "precode": "base64.decode(buf, 0, c);\n",
        "filepath": "defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "aftercode": "base64.decode(new byte[0], 0, 0);\n"
    },
    {
        "id": 66,
        "line": 185,
        "precode": "if (!queue.isEmpty()) {\n",
        "filepath": "defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "aftercode": "if (true) {\n"
    },
    {
        "id": 67,
        "line": 185,
        "precode": "ArrayList r = new ArrayList();\n",
        "filepath": "defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "aftercode": "ArrayList r = new ArrayList();\n"
    },
    {
        "id": 68,
        "line": 185,
        "precode": "r.add(first).addll(subset);to_add(r);\n",
        "filepath": "defects4j_fixed/Codec/Codec_6_fixed/src/java/org/apache/commons/codec/binary/Base64InputStream.java",
        "aftercode": "r.add(first).addAll(subset);\nto_add(r);\n"
    }
]