[
    {
        "id": 198,
        "line": 744,
        "precode": "if (!round || millisecs < 500) {\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (!(round && millisecs >= 500)) {\n"
    },
    {
        "id": 199,
        "line": 744,
        "precode": "    time = time - millisecs;\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "    time = time - (millisecs * 1);\n"
    },
    {
        "id": 200,
        "line": 744,
        "precode": "    if (field == Calendar.SECOND) {\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "    if (field == Calendar.SECOND &&!round) {\n"
    },
    {
        "id": 201,
        "line": 744,
        "precode": "        done = true;\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "        if (field == Calendar.SECOND) {\n"
    },
    {
        "id": 202,
        "line": 744,
        "precode": "if (val.get(Calendar.YEAR) > 280000000) {\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (val.get(Calendar.YEAR) > 280000001) {\n"
    },
    {
        "id": 203,
        "line": 744,
        "precode": "    throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "    throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n"
    },
    {
        "id": 205,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (field == Calendar.MILLISECOND) {\n"
    },
    {
        "id": 206,
        "line": 744,
        "precode": "if (val.get(Calendar.YEAR) > 280000000) {\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (val.get(Calendar.YEAR) > 280000001) {\n"
    },
    {
        "id": 207,
        "line": 744,
        "precode": "    throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "    throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n"
    },
    {
        "id": 208,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (field == Calendar.MILLISECOND) {\n"
    },
    {
        "id": 209,
        "line": 744,
        "precode": "if (val.get(Calendar.YEAR) > 280000000) {\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (val.get(Calendar.YEAR) > 280000001) {\n"
    },
    {
        "id": 210,
        "line": 744,
        "precode": "    throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "    throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n"
    },
    {
        "id": 211,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (field == Calendar.MILLISECOND) {\n"
    },
    {
        "id": 212,
        "line": 744,
        "precode": "if (val.get(Calendar.YEAR) > 280000000) {\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (val.get(Calendar.YEAR) > 280000001) {\n"
    },
    {
        "id": 213,
        "line": 744,
        "precode": "    throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "    throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n"
    },
    {
        "id": 214,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (field == Calendar.MILLISECOND) {\n"
    },
    {
        "id": 215,
        "line": 744,
        "precode": "if (val.get(Calendar.YEAR) > 280000000) {\n",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (val.get(Calendar.YEAR) > 280000001) {\n"
    },
    {
        "id": 330,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "return;"
    },
    {
        "id": 331,
        "line": 744,
        "precode": "if (val.get(Calendar.YEAR) > 280000000) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "return;"
    },
    {
        "id": 332,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "return;"
    },
    {
        "id": 333,
        "line": 744,
        "precode": "if (val.get(Calendar.YEAR) > 280000000) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "return;"
    },
    {
        "id": 334,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "return;"
    },
    {
        "id": 335,
        "line": 744,
        "precode": "if (val.get(Calendar.YEAR) > 280000000) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "return;"
    },
    {
        "id": 336,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "return;"
    },
    {
        "id": 337,
        "line": 744,
        "precode": "if (val.get(Calendar.YEAR) > 280000000) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "return;"
    },
    {
        "id": 338,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "return;"
    },
    {
        "id": 339,
        "line": 744,
        "precode": "int n = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "int n = ~n;"
    },
    {
        "id": 340,
        "line": 744,
        "precode": "int m = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "int m = ~m;"
    },
    {
        "id": 341,
        "line": 744,
        "precode": "int x = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "int x = ~x;"
    },
    {
        "id": 342,
        "line": 744,
        "precode": "int y = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "int y = ~y;"
    },
    {
        "id": 343,
        "line": 744,
        "precode": "int z = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "int z = ~z;"
    },
    {
        "id": 344,
        "line": 744,
        "precode": "float f = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "float f = ~f;"
    },
    {
        "id": 345,
        "line": 744,
        "precode": "double d = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "double d = ~d;"
    },
    {
        "id": 346,
        "line": 744,
        "precode": "char c = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "char c = ~c;"
    },
    {
        "id": 347,
        "line": 744,
        "precode": "boolean b = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "boolean b =!b;"
    },
    {
        "id": 348,
        "line": 744,
        "precode": "String s = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "String s = s.replace('a', 'b');"
    },
    {
        "id": 349,
        "line": 744,
        "precode": "Object o = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "Object o = o.toString();"
    },
    {
        "id": 350,
        "line": 744,
        "precode": "int n = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "int n = n ^ (n - 1);"
    },
    {
        "id": 351,
        "line": 744,
        "precode": "int m = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "int m = m ^ (m - 1);"
    },
    {
        "id": 352,
        "line": 744,
        "precode": "int x = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "int x = x ^ (x - 1);"
    },
    {
        "id": 353,
        "line": 744,
        "precode": "int y = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "int y = y ^ (y - 1);"
    },
    {
        "id": 354,
        "line": 744,
        "precode": "int z = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "int z = z ^ (z - 1);"
    },
    {
        "id": 355,
        "line": 744,
        "precode": "float f = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "float f = f ^ (f - 1);"
    },
    {
        "id": 356,
        "line": 744,
        "precode": "double d = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "double d = d ^ (d - 1);"
    },
    {
        "id": 357,
        "line": 744,
        "precode": "char c = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "char c = c ^ (c - 1);"
    },
    {
        "id": 358,
        "line": 744,
        "precode": "boolean b = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "boolean b =!b;"
    },
    {
        "id": 359,
        "line": 744,
        "precode": "String s = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "String s = s.replace('a', 'b');"
    },
    {
        "id": 360,
        "line": 744,
        "precode": "Object o = ",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "Object o = o.toString();"
    },
    {
        "id": 361,
        "line": 744,
        "precode": "while (true) {",
        "aftercode": "while (!true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 362,
        "line": 744,
        "precode": "while (true) {",
        "aftercode": "while (!true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 363,
        "line": 744,
        "precode": "while (true) {",
        "aftercode": "while (!true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 364,
        "line": 744,
        "precode": "while (true) {",
        "aftercode": "while (!true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 365,
        "line": 744,
        "precode": "while (true) {",
        "aftercode": "while (!true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 366,
        "line": 744,
        "precode": "while (true) {",
        "aftercode": "while (!true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 367,
        "line": 744,
        "precode": "while (true) {",
        "aftercode": "while (!true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 368,
        "line": 744,
        "precode": "while (true) {",
        "aftercode": "while (!true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 369,
        "line": 744,
        "precode": "while (true) {",
        "aftercode": "while (!true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 370,
        "line": 744,
        "precode": "while (true) {",
        "aftercode": "while (!true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 371,
        "line": 744,
        "precode": "while (true) {",
        "aftercode": "while (!true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 372,
        "line": 744,
        "precode": "while (false) {",
        "aftercode": "while (true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 373,
        "line": 744,
        "precode": "while (false) {",
        "aftercode": "while (true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 374,
        "line": 744,
        "precode": "while (false) {",
        "aftercode": "while (true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 375,
        "line": 744,
        "precode": "while (false) {",
        "aftercode": "while (true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 376,
        "line": 744,
        "precode": "while (false) {",
        "aftercode": "while (true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 377,
        "line": 744,
        "precode": "while (false) {",
        "aftercode": "while (true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 378,
        "line": 744,
        "precode": "while (false) {",
        "aftercode": "while (true) {",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java"
    },
    {
        "id": 379,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {\n    return;\n}",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (field!= Calendar.MILLISECOND) {\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
        "id": 380,
        "line": 744,
        "precode": "if (val.get(Calendar.YEAR) > 280000000) {\n    throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n}",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (val.get(Calendar.YEAR) > 280000000) {\n    throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n}\nif (field!= Calendar.MILLISECOND) {\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
        "id": 381,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {\n    return;\n}",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (true) {\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
        "id": 382,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {\n    return;\n}",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (false) {\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
        "id": 383,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {\n    return;\n}",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (field == Calendar.MILLISECOND) {\n    return;\n}\nthrow new IllegalArgumentException(\"The field \" + field + \" is not supported\");"
    },
    {
        "id": 384,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {\n    return;\n}",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (field == Calendar.MILLISECOND) {\n    return;\n}\nif (true) {\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
        "id": 385,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {\n    return;\n}",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (field == Calendar.MILLISECOND) {\n    return;\n}\nif (false) {\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}"
    },
    {
        "id": 386,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {\n    return;\n}",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (field == Calendar.MILLISECOND) {\n    return;\n}\nthrow new IllegalArgumentException(\"The field \" + field + \" is not supported\");\nthrow new IllegalArgumentException(\"The field \" + field + \" is not supported\");"
    },
    {
        "id": 387,
        "line": 744,
        "precode": "if (field == Calendar.MILLISECOND) {\n    return;\n}",
        "filepath": "defects4j_fixed/Lang/Lang_65_fixed/src/java/org/apache/commons/lang/time/DateUtils.java",
        "aftercode": "if (field == Calendar.MILLISECOND) {\n    return;\n}\nif (true) {\n    throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n}\nthrow new IllegalArgumentException(\"The field \" + field + \" is not supported\");"
    }
]