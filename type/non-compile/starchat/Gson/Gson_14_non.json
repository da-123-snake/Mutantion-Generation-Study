[
    {
        "id": 29,
        "line": 86,
        "precode": "Type[] upperBounds;",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "Type[] upperBounds = new Type[] { bound };"
    },
    {
        "id": 30,
        "line": 86,
        "precode": "if (bound instanceof WildcardType)",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (bound instanceof WildcardType) {"
    },
    {
        "id": 31,
        "line": 86,
        "precode": "upperBounds = ((WildcardType) bound).getUpperBounds();",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "upperBounds = ((WildcardType) bound).getUpperBounds();"
    },
    {
        "id": 32,
        "line": 86,
        "precode": "return new WildcardTypeImpl(upperBounds, EMPTY_TYPE_ARRAY);",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return new WildcardTypeImpl(upperBounds, new Type[0]);"
    },
    {
        "id": 33,
        "line": 86,
        "precode": "Type[] upperBounds;",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "Type[] upperBounds = new Type[] { bound };"
    },
    {
        "id": 34,
        "line": 86,
        "precode": "if (bound instanceof WildcardType)",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (bound instanceof WildcardType) {"
    },
    {
        "id": 35,
        "line": 86,
        "precode": "upperBounds = ((WildcardType) bound).getUpperBounds();",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "upperBounds = ((WildcardType) bound).getUpperBounds();"
    },
    {
        "id": 36,
        "line": 86,
        "precode": "return new WildcardTypeImpl(upperBounds, EMPTY_TYPE_ARRAY);",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return new WildcardTypeImpl(upperBounds, new Type[0]);"
    },
    {
        "id": 37,
        "line": 86,
        "precode": "Type[] upperBounds;",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "Type[] upperBounds = new Type[] { bound };"
    },
    {
        "id": 38,
        "line": 86,
        "precode": "if (bound instanceof WildcardType)",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (bound instanceof WildcardType) {"
    },
    {
        "id": 39,
        "line": 86,
        "precode": "upperBounds = ((WildcardType) bound).getUpperBounds();",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "upperBounds = ((WildcardType) bound).getUpperBounds();"
    },
    {
        "id": 40,
        "line": 86,
        "precode": "return new WildcardTypeImpl(upperBounds, EMPTY_TYPE_ARRAY);",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return new WildcardTypeImpl(upperBounds, new Type[0]);"
    },
    {
        "id": 42,
        "line": 101,
        "precode": "if (bound instanceof WildcardType)",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (bound instanceof WildcardType)"
    },
    {
        "id": 43,
        "line": 101,
        "precode": "lowerBounds = ((WildcardType) bound).getLowerBounds();",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "lowerBounds = ((WildcardType) bound).getUpperBounds();"
    },
    {
        "id": 44,
        "line": 101,
        "precode": "return new WildcardTypeImpl(new Type[] { Object.class }, lowerBounds);",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return new WildcardTypeImpl(new Type[] { Object.class }, upperBounds); "
    },
    {
        "id": 46,
        "line": 101,
        "precode": "if (bound instanceof WildcardType)",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (bound instanceof WildcardType)"
    },
    {
        "id": 47,
        "line": 101,
        "precode": "lowerBounds = ((WildcardType) bound).getLowerBounds();",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "lowerBounds = ((WildcardType) bound).getUpperBounds();"
    },
    {
        "id": 48,
        "line": 101,
        "precode": "return new WildcardTypeImpl(new Type[] { Object.class }, lowerBounds);",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return new WildcardTypeImpl(new Type[] { Object.class }, upperBounds); "
    },
    {
        "id": 50,
        "line": 101,
        "precode": "if (bound instanceof WildcardType)",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (bound instanceof WildcardType)"
    },
    {
        "id": 51,
        "line": 101,
        "precode": "lowerBounds = ((WildcardType) bound).getLowerBounds();",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "lowerBounds = ((WildcardType) bound).getUpperBounds();"
    },
    {
        "id": 52,
        "line": 101,
        "precode": "return new WildcardTypeImpl(new Type[] { Object.class }, lowerBounds);",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return new WildcardTypeImpl(new Type[] { Object.class }, upperBounds); "
    },
    {
        "id": 60,
        "line": 433,
        "precode": "if (context == Properties.class) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == null) {\n"
    },
    {
        "id": 61,
        "line": 433,
        "precode": "if (context == Properties.class) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == null || context.getClass()!= Properties.class) {\n"
    },
    {
        "id": 62,
        "line": 433,
        "precode": "if (context == Properties.class) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == null || context.getClass()!= Properties.class) {\n    return new Type[] { String.class, String.class };\n"
    },
    {
        "id": 63,
        "line": 433,
        "precode": "return new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n"
    },
    {
        "id": 64,
        "line": 433,
        "precode": "if (context == Properties.class) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == null || context.getClass()!= Properties.class) {\n    return new Type[] { String.class, String.class };\n}\n"
    },
    {
        "id": 65,
        "line": 433,
        "precode": "return new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n"
    },
    {
        "id": 66,
        "line": 433,
        "precode": "if (context == Properties.class) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == null || context.getClass()!= Properties.class) {\n    return new Type[] { String.class, String.class };\n}\n"
    },
    {
        "id": 67,
        "line": 433,
        "precode": "return new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n"
    },
    {
        "id": 68,
        "line": 433,
        "precode": "if (context == Properties.class) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == null || context.getClass()!= Properties.class) {\n    return new Type[] { String.class, String.class };\n}\n"
    },
    {
        "id": 69,
        "line": 433,
        "precode": "return new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n"
    },
    {
        "id": 70,
        "line": 433,
        "precode": "if (context == Properties.class) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == null) {\n    return new Type[] { String.class, String.class };\n}\n"
    },
    {
        "id": 71,
        "line": 433,
        "precode": "return new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n"
    },
    {
        "id": 81,
        "line": 286,
        "precode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {"
    },
    {
        "id": 82,
        "line": 286,
        "precode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {"
    },
    {
        "id": 83,
        "line": 286,
        "precode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {"
    },
    {
        "id": 84,
        "line": 286,
        "precode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {"
    },
    {
        "id": 85,
        "line": 286,
        "precode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {"
    },
    {
        "id": 86,
        "line": 286,
        "precode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {"
    },
    {
        "id": 87,
        "line": 286,
        "precode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {"
    },
    {
        "id": 88,
        "line": 286,
        "precode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {"
    },
    {
        "id": 89,
        "line": 286,
        "precode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {",
        "filepath": "defects4j_fixed/Gson/Gson_14_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {"
    }
]