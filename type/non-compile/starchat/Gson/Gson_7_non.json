[
    {
        "id": 106,
        "line": 772,
        "precode": "checkLenient();",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return peeked = PEEKED_SINGLE_QUOTED;"
    },
    {
        "id": 107,
        "line": 772,
        "precode": "return peeked = PEEKED_DOUBLE_QUOTED;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return peeked = PEEKED_DOUBLE_QUOTED;"
    },
    {
        "id": 108,
        "line": 772,
        "precode": "return peeked = PEEKED_BEGIN_ARRAY;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return peeked = PEEKED_BEGIN_ARRAY;"
    },
    {
        "id": 109,
        "line": 772,
        "precode": "return peeked = PEEKED_BEGIN_OBJECT;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return peeked = PEEKED_BEGIN_OBJECT;"
    },
    {
        "id": 110,
        "line": 772,
        "precode": "return peeked = PEEKED_END_OBJECT;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return peeked = PEEKED_END_OBJECT;"
    },
    {
        "id": 111,
        "line": 772,
        "precode": "return peeked = PEEKED_END_ARRAY;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return peeked = PEEKED_END_ARRAY;"
    },
    {
        "id": 112,
        "line": 772,
        "precode": "int p = peeked;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int p = doPeek();"
    },
    {
        "id": 114,
        "line": 772,
        "precode": "switch (p) {",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "switch (p) {"
    },
    {
        "id": 115,
        "line": 772,
        "precode": "case PEEKED_BEGIN_OBJECT: ",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "case PEEKED_BEGIN_OBJECT:\n    return JsonToken.BEGIN_OBJECT;"
    },
    {
        "id": 116,
        "line": 772,
        "precode": "case PEEKED_END_OBJECT: ",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "case PEEKED_END_OBJECT:\n    return JsonToken.END_OBJECT;"
    },
    {
        "id": 117,
        "line": 772,
        "precode": "case PEEKED_BEGIN_ARRAY: ",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "case PEEKED_BEGIN_ARRAY:\n    return JsonToken.BEGIN_ARRAY;"
    },
    {
        "id": 118,
        "line": 328,
        "precode": "public JsonReader(Reader in) {",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "public JsonReader(Reader in) {\n    if (in == null) {\n        throw new NullPointerException(\"in == null\");\n    }\n    this.in = in;\n}"
    },
    {
        "id": 119,
        "line": 328,
        "precode": "    this.in = in;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "    this.in = in;\n    if (true) {\n        throw new NullPointerException(\"in == null\");\n    }"
    },
    {
        "id": 120,
        "line": 328,
        "precode": "if (in == null) {",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (in == null) {\n    throw new NullPointerException(\"in == null\");\n}"
    },
    {
        "id": 121,
        "line": 328,
        "precode": "    throw new NullPointerException(\"in == null\");",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "    throw new NullPointerException(\"in == null\");\n    if (true) {\n        return;\n    }"
    },
    {
        "id": 122,
        "line": 328,
        "precode": "Reader in) {",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "Reader in) {\n    if (in == null) {\n        throw new NullPointerException(\"in == null\");\n    }\n    this.in = in;\n}\nif (true) {\n    return;\n}"
    },
    {
        "id": 123,
        "line": 328,
        "precode": "if (in == null) {",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (in == null) {\n    throw new NullPointerException(\"in == null\");\n}\nif (true) {\n    return;\n}"
    },
    {
        "id": 124,
        "line": 328,
        "precode": "    return;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "    return;\n    if (true) {\n        throw new NullPointerException(\"in == null\");\n    }"
    },
    {
        "id": 125,
        "line": 422,
        "precode": "int p = peeked;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int p = doPeek();"
    },
    {
        "id": 126,
        "line": 422,
        "precode": "if (p == PEEKED_NONE) {",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (p == PEEKED_END_OBJECT) {"
    },
    {
        "id": 127,
        "line": 422,
        "precode": "p = doPeek();",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "p = doPeek2();"
    },
    {
        "id": 128,
        "line": 422,
        "precode": "if (p!= PEEKED_END_OBJECT && p!= PEEKED_END_ARRAY) {",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (p!= PEEKED_END_OBJECT && p!= PEEKED_END_ARRAY) {"
    },
    {
        "id": 129,
        "line": 422,
        "precode": "return p!= PEEKED_END_OBJECT && p!= PEEKED_END_ARRAY;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return p!= PEEKED_END_OBJECT && p!= PEEKED_END_ARRAY;"
    },
    {
        "id": 130,
        "line": 422,
        "precode": "p = PEEKED_NONE;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "p = PEEKED_END_OBJECT;"
    },
    {
        "id": 131,
        "line": 422,
        "precode": "return true;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return false;"
    },
    {
        "id": 132,
        "line": 772,
        "precode": "int n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int n = (n ^ (n - 1));"
    },
    {
        "id": 133,
        "line": 772,
        "precode": "  while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": " while (true) { "
    },
    {
        "id": 134,
        "line": 772,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return true;"
    },
    {
        "id": 135,
        "line": 772,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 136,
        "line": 772,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 137,
        "line": 772,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) { ",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": " while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 138,
        "line": 772,
        "precode": "int p = peeked;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int p = doPeek();"
    },
    {
        "id": 139,
        "line": 772,
        "precode": "if (p == PEEKED_NONE)",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (peeked == PEEKED_NONE)"
    },
    {
        "id": 140,
        "line": 772,
        "precode": "switch (p) {",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "switch (peeked) {"
    },
    {
        "id": 141,
        "line": 772,
        "precode": "case PEEKED_BEGIN_OBJECT: ",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "case JsonToken.BEGIN_OBJECT: "
    },
    {
        "id": 142,
        "line": 772,
        "precode": "case PEEKED_END_OBJECT: ",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "case JsonToken.END_OBJECT: "
    },
    {
        "id": 143,
        "line": 772,
        "precode": "case PEEKED_BEGIN_ARRAY: ",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "case JsonToken.BEGIN_ARRAY: "
    },
    {
        "id": 144,
        "line": 772,
        "precode": "case PEEKED_END_ARRAY: ",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "case JsonToken.END_ARRAY: "
    },
    {
        "id": 145,
        "line": 772,
        "precode": "case PEEKED_SINGLE_QUOTED_NAME: ",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "case JsonToken.NAME: "
    },
    {
        "id": 146,
        "line": 772,
        "precode": "int p = peeked;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int p = doPeek();"
    },
    {
        "id": 147,
        "line": 772,
        "precode": "if (p == PEEKED_NONE) {",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (peeked == PEEKED_NONE) {"
    },
    {
        "id": 148,
        "line": 772,
        "precode": "switch (p) {",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "switch (peeked) {"
    },
    {
        "id": 149,
        "line": 772,
        "precode": "case PEEKED_BEGIN_OBJECT: ",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "case JsonToken.BEGIN_OBJECT: "
    },
    {
        "id": 150,
        "line": 772,
        "precode": "return JsonToken.BEGIN_OBJECT;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return JsonToken.BEGIN_OBJECT;"
    },
    {
        "id": 151,
        "line": 772,
        "precode": "case PEEKED_END_OBJECT: ",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "case JsonToken.END_OBJECT: "
    },
    {
        "id": 152,
        "line": 772,
        "precode": "return JsonToken.END_OBJECT;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return JsonToken.END_OBJECT;"
    },
    {
        "id": 153,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false);"
    },
    {
        "id": 154,
        "line": 772,
        "precode": "switch (c) {",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "switch (c) {\ncase ']':\n    return PEEKED_END_ARRAY;\ncase ';':\ncase ',':\n    throw syntaxError(\"Unexpected value\");"
    },
    {
        "id": 155,
        "line": 772,
        "precode": "case ']':",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "case ']':\n    return PEEKED_END_ARRAY;\ncase ';':\ncase ',':\n    throw syntaxError(\"Unexpected value\");"
    },
    {
        "id": 156,
        "line": 772,
        "precode": "case ';':",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "case ';':\n    checkLenient(); // fall-through\ncase ',':\n    break;"
    },
    {
        "id": 157,
        "line": 772,
        "precode": "case ',':",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "case ',':\n    break;"
    },
    {
        "id": 158,
        "line": 772,
        "precode": "default:",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "default:\n    throw syntaxError(\"Expected value\");"
    },
    {
        "id": 159,
        "line": 772,
        "precode": "return peeked = PEEKED_END_OBJECT;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return peeked = PEEKED_END_ARRAY;"
    },
    {
        "id": 160,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false);"
    },
    {
        "id": 161,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false); switch (c) { case ',': break; default: throw syntaxError(\"Unterminated object\"); }"
    },
    {
        "id": 162,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false); if (c == ',') { c = nextNonWhitespace(true); }"
    },
    {
        "id": 163,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false); if (c == ';') { c = nextNonWhitespace(true); }"
    },
    {
        "id": 164,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false); if (c == '}') { c = nextNonWhitespace(true); }"
    },
    {
        "id": 165,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false); if (c == ']') { c = nextNonWhitespace(true); }"
    },
    {
        "id": 166,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false); if (c == ':') { c = nextNonWhitespace(true); }"
    },
    {
        "id": 167,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false);"
    },
    {
        "id": 168,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false);"
    },
    {
        "id": 169,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false);"
    },
    {
        "id": 170,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false);"
    },
    {
        "id": 171,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false);"
    },
    {
        "id": 172,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false);"
    },
    {
        "id": 173,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false);"
    },
    {
        "id": 174,
        "line": 772,
        "precode": "if (c == 't' || c == 'T') {\n",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (c == 't' || c == 'T') {\n    keyword = \"true\";\n    keywordUpper = \"TRUE\";\n    peeking = PEEKED_TRUE;\n}"
    },
    {
        "id": 175,
        "line": 772,
        "precode": "if (c == 'f' || c == 'F') {\n",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (c == 'f' || c == 'F') {\n    keyword = \"false\";\n    keywordUpper = \"FALSE\";\n    peeking = PEEKED_FALSE;\n}"
    },
    {
        "id": 176,
        "line": 772,
        "precode": "if (c == 'n' || c == 'N') {\n",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (c == 'n' || c == 'N') {\n    keyword = \"null\";\n    keywordUpper = \"NULL\";\n    peeking = PEEKED_NULL;\n}"
    },
    {
        "id": 177,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);\nswitch (c) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(true);\n    switch (c) {\n        case 't':\n        case 'T':\n            keyword = \"true\";\n            keywordUpper = \"TRUE\";\n            peeking = PEEKED_TRUE;\n            break;\n        case 'f':\n        case 'F':\n            keyword = \"false\";\n            keywordUpper = \"FALSE\";\n            peeking = PEEKED_FALSE;\n            break;\n        case 'n':\n        case 'N':\n            keyword = \"null\";\n            keywordUpper = \"NULL\";\n            peeking = PEEKED_NULL;\n            break;\n    }\n}"
    },
    {
        "id": 178,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);\nswitch (c) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(true);\n    switch (c) {\n        case 't':\n        case 'T':\n            keyword = \"true\";\n            keywordUpper = \"TRUE\";\n            peeking = PEEKED_TRUE;\n            break;\n        case 'f':\n        case 'F':\n            keyword = \"false\";\n            keywordUpper = \"FALSE\";\n            peeking = PEEKED_FALSE;\n            break;\n        case 'n':\n        case 'N':\n            keyword = \"null\";\n            keywordUpper = \"NULL\";\n            peeking = PEEKED_NULL;\n            break;\n        default:\n            pos--; // Don't consume the first character in an unquoted string.\n            if (isLiteral((char) c)) {\n                return PEEKED_NONE;\n            }\n            throw syntaxError(\"Expected value\");\n    }\n}"
    },
    {
        "id": 179,
        "line": 772,
        "precode": "int result = peekKeyword();\nif (result!= PEEKED_NONE) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int result = peekKeyword();\n    if (result!= PEEKED_NONE) {\n        return result;\n    }\n    result = peekNumber();\n    if (result!= PEEKED_NONE) {\n        return result;\n    }\n    if (!isLiteral(buffer[pos])) {\n        throw syntaxError(\"Expected value\");\n    }\n    checkLenient();\n    return peeked = PEEKED_UNQUOTED;\n}"
    },
    {
        "id": 180,
        "line": 772,
        "precode": "int c = nextNonWhitespace(true);\nswitch (c) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(true);\n    switch (c) {\n        case 't':\n        case 'T':\n            keyword = \"true\";\n            keywordUpper = \"TRUE\";\n            peeking = PEEKED_TRUE;\n            break;\n        case 'f':\n        case 'F':\n            keyword = \"false\";\n            keywordUpper = \"FALSE\";\n            peeking = PEEKED_FALSE;\n            break;\n        case 'n':\n        case 'N':\n            keyword = \"null\";\n            keywordUpper = \"NULL\";\n            peeking = PEEKED_NULL;\n            break;\n        default:\n            pos--; // Don't consume the first character in an unquoted string.\n            if (isLiteral((char) c)) {\n                return PEEKED_NONE;\n            }\n            throw syntaxError(\"Expected value\");\n    }\n}"
    },
    {
        "id": 183,
        "line": 772,
        "precode": "int length = keyword.length();",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int length = keywordUpper.length();"
    },
    {
        "id": 185,
        "line": 772,
        "precode": "c = bin_op.apply(b, a);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "c = bin_op.apply(a, b);"
    },
    {
        "id": 186,
        "line": 772,
        "precode": "while (Math.abs(x - approx * approx) > epsilon) {",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "while (Math.abs(x - approx) > epsilon) {"
    },
    {
        "id": 204,
        "line": 985,
        "precode": "  peeked = PEEKED_BUFFERED;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  double asDouble = Double.parseDouble(peekedString); // don't catch this NumberFormatException.\n  long result = (long) asDouble;\n  if (result!= asDouble) {\n    // Make sure no precision was lost casting to 'long'.\n    throw new NumberFormatException(\"Expected a long but was \" + peekedString\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n  }\n  peekedString = null;"
    },
    {
        "id": 205,
        "line": 985,
        "precode": "  peeked = PEEKED_NONE;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  double asDouble = Double.parseDouble(peekedString); // don't catch this NumberFormatException.\n  long result = (long) asDouble;\n  if (result!= asDouble) {\n    // Make sure no precision was lost casting to 'long'.\n    throw new NumberFormatException(\"Expected a long but was \" + peekedString\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n  }\n  peekedString = null;\n  peeked = PEEKED_BUFFERED;"
    },
    {
        "id": 206,
        "line": 985,
        "precode": "  pathIndices[stackSize - 1]++;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  double asDouble = Double.parseDouble(peekedString); // don't catch this NumberFormatException.\n  long result = (long) asDouble;\n  if (result!= asDouble) {\n    // Make sure no precision was lost casting to 'long'.\n    throw new NumberFormatException(\"Expected a long but was \" + peekedString\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n  }\n  peekedString = null;\n  peeked = PEEKED_NONE;\n  pathIndices[stackSize - 1]++;"
    },
    {
        "id": 207,
        "line": 985,
        "precode": "  long result = Long.parseLong(peekedString);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  try {\n    long result = Long.parseLong(peekedString);\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n  } catch (NumberFormatException e) {\n    // Fall back to parse as a double below.\n  }"
    },
    {
        "id": 208,
        "line": 985,
        "precode": "  peeked = PEEKED_BUFFERED;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  try {\n    long result = Long.parseLong(peekedString);\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n  } catch (NumberFormatException e) {\n    // Fall back to parse as a double below.\n  }\n  peeked = PEEKED_BUFFERED;"
    },
    {
        "id": 209,
        "line": 985,
        "precode": "  peeked = PEEKED_NONE;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  try {\n    long result = Long.parseLong(peekedString);\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n  } catch (NumberFormatException e) {\n    // Fall back to parse as a double below.\n  }\n  peekedString = null;\n  peeked = PEEKED_BUFFERED;"
    },
    {
        "id": 210,
        "line": 985,
        "precode": "  pathIndices[stackSize - 1]++;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  try {\n    long result = Long.parseLong(peekedString);\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n  } catch (NumberFormatException e) {\n    // Fall back to parse as a double below.\n  }\n  peekedString = null;\n  peeked = PEEKED_NONE;\n  pathIndices[stackSize - 1]++;"
    },
    {
        "id": 211,
        "line": 985,
        "precode": "  long result = Long.parseLong(peekedString);",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  try {\n    double asDouble = Double.parseDouble(peekedString);\n    long result = (long) asDouble;\n    if (result!= asDouble) {\n      // Make sure no precision was lost casting to 'long'.\n      throw new NumberFormatException(\"Expected a long but was \" + peekedString\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n  } catch (NumberFormatException e) {\n    // Fall back to parse as a long above.\n  }"
    },
    {
        "id": 212,
        "line": 985,
        "precode": "  peeked = PEEKED_BUFFERED;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  try {\n    double asDouble = Double.parseDouble(peekedString);\n    long result = (long) asDouble;\n    if (result!= asDouble) {\n      // Make sure no precision was lost casting to 'long'.\n      throw new NumberFormatException(\"Expected a long but was \" + peekedString\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n  } catch (NumberFormatException e) {\n    // Fall back to parse as a long above.\n  }\n  peeked = PEEKED_BUFFERED;"
    },
    {
        "id": 213,
        "line": 985,
        "precode": "  peeked = PEEKED_NONE;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  try {\n    double asDouble = Double.parseDouble(peekedString);\n    long result = (long) asDouble;\n    if (result!= asDouble) {\n      // Make sure no precision was lost casting to 'long'.\n      throw new NumberFormatException(\"Expected a long but was \" + peekedString\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n  } catch (NumberFormatException e) {\n    // Fall back to parse as a long above.\n  }\n  peekedString = null;\n  peeked = PEEKED_BUFFERED;"
    },
    {
        "id": 214,
        "line": 985,
        "precode": "  pathIndices[stackSize - 1]++;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  try {\n    double asDouble = Double.parseDouble(peekedString);\n    long result = (long) asDouble;\n    if (result!= asDouble) {\n      // Make sure no precision was lost casting to 'long'.\n      throw new NumberFormatException(\"Expected a long but was \" + peekedString\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    peekedString = null;\n    peeked = PEEKED_NONE;\n    pathIndices[stackSize - 1]++;\n    return result;\n  } catch (NumberFormatException e) {\n    // Fall back to parse as a long above.\n  }\n  peekedString = null;\n  peeked = PEEKED_NONE;\n  pathIndices[stackSize - 1]++;"
    },
    {
        "id": 215,
        "line": 1217,
        "precode": "int result;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int temp = (int) peekedLong;\nif (temp!= peekedLong) {\n    throw new NumberFormatException(\"Expected an int but was \" + peekedLong\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n}\nresult = temp;"
    },
    {
        "id": 216,
        "line": 1217,
        "precode": "int result;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "String temp = peekedString;\nint value = Integer.parseInt(temp);\nif (!temp.equals(String.valueOf(value))) {\n    throw new NumberFormatException(\"Expected an int but was \" + temp\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n}\nresult = value;"
    },
    {
        "id": 217,
        "line": 1217,
        "precode": "int result;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "String temp = peekedString;\nint value = Integer.parseInt(temp);\nif (temp.equals(String.valueOf(value))) {\n    result = value;\n} else {\n    throw new NumberFormatException(\"Expected an int but was \" + temp\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n}\n"
    },
    {
        "id": 218,
        "line": 1217,
        "precode": "int result;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "String temp = peekedString;\nint value = Integer.parseInt(temp);\nif (temp.equals(String.valueOf(value))) {\n    result = value;\n} else {\n    long temp2 = Double.doubleToLongBits(Double.parseDouble(temp));\n    if (temp2!= Double.doubleToLongBits((double) value)) {\n        throw new NumberFormatException(\"Expected an int but was \" + temp\n            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    result = (int) temp2;\n}\n"
    },
    {
        "id": 219,
        "line": 1217,
        "precode": "int result;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "String temp = peekedString;\nint value = Integer.parseInt(temp);\nif (temp.equals(String.valueOf(value))) {\n    result = value;\n} else {\n    long temp2 = Double.doubleToLongBits(Double.parseDouble(temp));\n    if (temp2 == Double.doubleToLongBits((double) value)) {\n        throw new NumberFormatException(\"Expected an int but was \" + temp\n            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    result = (int) temp2;\n}\n"
    },
    {
        "id": 220,
        "line": 1217,
        "precode": "int result;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "String temp = peekedString;\nint value = Integer.parseInt(temp);\nif (temp.equals(String.valueOf(value))) {\n    result = value;\n} else {\n    long temp2 = Double.doubleToLongBits(Double.parseDouble(temp));\n    if (temp2!= Double.doubleToLongBits((double) value)) {\n        throw new NumberFormatException(\"Expected an int but was \" + temp\n            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    result = (int) temp2;\n}\n"
    },
    {
        "id": 221,
        "line": 1217,
        "precode": "int result;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "String temp = peekedString;\nint value = Integer.parseInt(temp);\nif (temp.equals(String.valueOf(value))) {\n    result = value;\n} else {\n    long temp2 = Double.doubleToLongBits(Double.parseDouble(temp));\n    if (temp2 == Double.doubleToLongBits((double) value)) {\n        throw new NumberFormatException(\"Expected an int but was \" + temp\n            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    result = (int) temp2;\n}\n"
    },
    {
        "id": 222,
        "line": 1217,
        "precode": "int result;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "String temp = peekedString;\nint value = Integer.parseInt(temp);\nif (temp.equals(String.valueOf(value))) {\n    result = value;\n} else {\n    long temp2 = Double.doubleToLongBits(Double.parseDouble(temp));\n    if (temp2!= Double.doubleToLongBits((double) value)) {\n        throw new NumberFormatException(\"Expected an int but was \" + temp\n            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    result = (int) temp2;\n}\n"
    },
    {
        "id": 223,
        "line": 1217,
        "precode": "int result;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "String temp = peekedString;\nint value = Integer.parseInt(temp);\nif (temp.equals(String.valueOf(value))) {\n    result = value;\n} else {\n    long temp2 = Double.doubleToLongBits(Double.parseDouble(temp));\n    if (temp2 == Double.doubleToLongBits((double) value)) {\n        throw new NumberFormatException(\"Expected an int but was \" + temp\n            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    result = (int) temp2;\n}\n"
    },
    {
        "id": 224,
        "line": 1217,
        "precode": "int result;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "String temp = peekedString;\nint value = Integer.parseInt(temp);\nif (temp.equals(String.valueOf(value))) {\n    result = value;\n} else {\n    long temp2 = Double.doubleToLongBits(Double.parseDouble(temp));\n    if (temp2!= Double.doubleToLongBits((double) value)) {\n        throw new NumberFormatException(\"Expected an int but was \" + temp\n            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    result = (int) temp2;\n}\n"
    },
    {
        "id": 225,
        "line": 1217,
        "precode": "int result;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "String temp = peekedString;\nint value = Integer.parseInt(temp);\nif (temp.equals(String.valueOf(value))) {\n    result = value;\n} else {\n    long temp2 = Double.doubleToLongBits(Double.parseDouble(temp));\n    if (temp2 == Double.doubleToLongBits((double) value)) {\n        throw new NumberFormatException(\"Expected an int but was \" + temp\n            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    result = (int) temp2;\n}\n"
    },
    {
        "id": 226,
        "line": 1217,
        "precode": "int result;",
        "filepath": "defects4j_fixed/Gson/Gson_7_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "String temp = peekedString;\nint value = Integer.parseInt(temp);\nif (temp.equals(String.valueOf(value))) {\n    result = value;\n} else {\n    double temp2 = Double.parseDouble(temp);\n    if (temp2!= (int) temp2) {\n        throw new NumberFormatException(\"Expected an int but was \" + temp\n            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());\n    }\n    result = (int) temp2;\n}\n"
    }
]