[
    {
        "id": 23,
        "line": 768,
        "precode": "  int result = peekKeyword();",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  int result = peekKeyword2();"
    },
    {
        "id": 24,
        "line": 768,
        "precode": "  int result = peekKeyword();",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  int result = peekKeyword3();"
    },
    {
        "id": 25,
        "line": 768,
        "precode": "  int result = peekKeyword();",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  int result = peekKeyword4();"
    },
    {
        "id": 26,
        "line": 768,
        "precode": "  int result = peekKeyword();",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  int result = peekKeyword5();"
    },
    {
        "id": 27,
        "line": 768,
        "precode": "  int result = peekKeyword();",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  int result = peekKeyword6();"
    },
    {
        "id": 28,
        "line": 768,
        "precode": "  int result = peekKeyword();",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  int result = peekKeyword7();"
    },
    {
        "id": 29,
        "line": 768,
        "precode": "  int result = peekKeyword();",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  int result = peekKeyword8();"
    },
    {
        "id": 127,
        "line": 768,
        "precode": "int n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int n = (n ^ (n - 1));"
    },
    {
        "id": 128,
        "line": 768,
        "precode": "  while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": " while (true) { "
    },
    {
        "id": 129,
        "line": 768,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return true;"
    },
    {
        "id": 130,
        "line": 768,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 131,
        "line": 768,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 132,
        "line": 768,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) { ",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": " while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 133,
        "line": 768,
        "precode": "int result = peekKeyword();",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int result = peekKeyword2();"
    },
    {
        "id": 134,
        "line": 768,
        "precode": "result = peekNumber();",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "result = peekNumber2();"
    },
    {
        "id": 135,
        "line": 768,
        "precode": "if (result!= PEEKED_NONE) {",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (result!= PEEKED_NONE2) {"
    },
    {
        "id": 136,
        "line": 768,
        "precode": "return result;",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return result2;"
    },
    {
        "id": 137,
        "line": 768,
        "precode": "if (peekStack == JsonScope.NONEMPTY_OBJECT) {",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (peekStack == JsonScope.NONEMPTY_OBJECT2) {"
    },
    {
        "id": 138,
        "line": 768,
        "precode": "c = bin_op.apply(b, a);",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "c = bin_op.apply(a, b);"
    },
    {
        "id": 139,
        "line": 328,
        "precode": "public JsonReader(Reader in) {",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "public JsonReader(Reader in) {\n    if (in == null) {\n        throw new NullPointerException(\"in == null\");\n    }\n    this.in = in;\n}"
    },
    {
        "id": 141,
        "line": 328,
        "precode": "Reader in) {",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "public JsonReader(Reader in) {\n    if (in == null) {\n        throw new NullPointerException(\"in == null\");\n    }\n    this.in = in;\n}"
    },
    {
        "id": 142,
        "line": 328,
        "precode": "if (in == null) {",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (in == null) {\n    throw new NullPointerException(\"in == null\");\n}"
    },
    {
        "id": 143,
        "line": 328,
        "precode": "this.in = in;",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "this.in = in;\n}"
    },
    {
        "id": 145,
        "line": 328,
        "precode": "public JsonReader(",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "public JsonReader(\n    Reader in) {\n    if (in == null) {\n        throw new NullPointerException(\"in == null\");\n    }\n    this.in = in;\n}"
    },
    {
        "id": 146,
        "line": 418,
        "precode": "int p = peeked;",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int p = doPeek();"
    },
    {
        "id": 147,
        "line": 418,
        "precode": "if (p == PEEKED_NONE) {",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (p == PEEKED_END_OBJECT) {"
    },
    {
        "id": 148,
        "line": 418,
        "precode": "p = doPeek();",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "p = doPeek2();"
    },
    {
        "id": 149,
        "line": 418,
        "precode": "if (p!= PEEKED_END_OBJECT && p!= PEEKED_END_ARRAY) {",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (p!= PEEKED_END_OBJECT && p!= PEEKED_END_ARRAY2) {"
    },
    {
        "id": 150,
        "line": 418,
        "precode": "return p!= PEEKED_END_OBJECT && p!= PEEKED_END_ARRAY;",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return p!= PEEKED_END_OBJECT && p!= PEEKED_END_ARRAY3;"
    },
    {
        "id": 151,
        "line": 418,
        "precode": "int p = peeked;",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int p = peeked2;"
    },
    {
        "id": 152,
        "line": 418,
        "precode": "if (p == PEEKED_NONE) {",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (p == PEEKED_END_OBJECT) {"
    },
    {
        "id": 153,
        "line": 768,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return true;"
    },
    {
        "id": 154,
        "line": 768,
        "precode": "  while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": " while (true) { "
    },
    {
        "id": 155,
        "line": 768,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 156,
        "line": 768,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) { ",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": " while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 157,
        "line": 768,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": " n = (n ^ (n - 1));"
    },
    {
        "id": 158,
        "line": 768,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 159,
        "line": 768,
        "precode": "  if (c == '\\') {",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (c == '/') {"
    },
    {
        "id": 160,
        "line": 768,
        "precode": "int p = peeked;",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int p = doPeek();"
    },
    {
        "id": 161,
        "line": 768,
        "precode": "switch (p) {",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "switch (p) {"
    },
    {
        "id": 162,
        "line": 768,
        "precode": "case PEEKED_BEGIN_OBJECT: ",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "case PEEKED_BEGIN_OBJECT:\n"
    },
    {
        "id": 163,
        "line": 768,
        "precode": "return JsonToken.BEGIN_OBJECT;",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return JsonToken.BEGIN_OBJECT;"
    },
    {
        "id": 164,
        "line": 768,
        "precode": "case PEEKED_END_OBJECT: ",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "case PEEKED_END_OBJECT:\n"
    },
    {
        "id": 165,
        "line": 768,
        "precode": "return JsonToken.END_OBJECT;",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return JsonToken.END_OBJECT;"
    },
    {
        "id": 166,
        "line": 768,
        "precode": "case PEEKED_BEGIN_ARRAY: ",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "case PEEKED_BEGIN_ARRAY:\n"
    },
    {
        "id": 167,
        "line": 768,
        "precode": "return JsonToken.BEGIN_ARRAY;",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return JsonToken.BEGIN_ARRAY;"
    },
    {
        "id": 168,
        "line": 768,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false);"
    },
    {
        "id": 169,
        "line": 768,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false); switch (c) { case ';': case ',': throw syntaxError(\"Unexpected value\"); default: pos--; // Don't consume the first character in a literal value. break; }"
    },
    {
        "id": 170,
        "line": 768,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false); if (!isLiteral(buffer[pos])) { throw syntaxError(\"Expected value\"); }"
    },
    {
        "id": 171,
        "line": 768,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false); if (c == -1) { return peeked = PEEKED_EOF; } else { checkLenient(); pos--; }"
    },
    {
        "id": 172,
        "line": 768,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false); if (c == 't' || c == 'T') { keyword = \"true\"; keywordUpper = \"TRUE\"; peeking = PEEKED_TRUE; } else if (c == 'f' || c == 'F') { keyword = \"false\"; keywordUpper = \"FALSE\"; peeking = PEEKED_FALSE; } else if (c == 'n' || c == 'N') { keyword = \"null\"; keywordUpper = \"NULL\"; peeking = PEEKED_NULL; } else { return PEEKED_NONE; }"
    },
    {
        "id": 173,
        "line": 768,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false); if (c == 'e' || c == 'E') { last = NUMBER_CHAR_EXP_E; } else { return PEEKED_NONE; }"
    },
    {
        "id": 174,
        "line": 768,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false); while (Math.abs(x-approx) > epsilon) { x = f(x);"
    },
    {
        "id": 175,
        "line": 768,
        "precode": "  switch (c) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  switch (c) {\ncase'':\n  pos++;\n  break;\ncase '\\t':\n  pos += 2;\n  break;\ncase '\\n':\n  pos += 2;\n  break;\ncase '\\r':\n  pos += 2;\n  break;\ncase '\\f':\n  pos += 2;\n  break;\ndefault:\n  pos++;\n  break;\n  }"
    },
    {
        "id": 176,
        "line": 768,
        "precode": "  switch (c) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  switch (c) {\ncase'':\n  pos++;\n  break;\ncase '\\t':\n  pos += 2;\n  break;\ncase '\\n':\n  pos += 2;\n  break;\ncase '\\r':\n  pos += 2;\n  break;\ncase '\\f':\n  pos += 2;\n  break;\ndefault:\n  pos++;\n  break;\n  }"
    },
    {
        "id": 177,
        "line": 768,
        "precode": "  switch (c) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  switch (c) {\ncase'':\n  pos++;\n  break;\ncase '\\t':\n  pos += 2;\n  break;\ncase '\\n':\n  pos += 2;\n  break;\ncase '\\r':\n  pos += 2;\n  break;\ncase '\\f':\n  pos += 2;\n  break;\ndefault:\n  pos++;\n  break;\n  }"
    },
    {
        "id": 178,
        "line": 768,
        "precode": "  switch (c) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  switch (c) {\ncase'':\n  pos++;\n  break;\ncase '\\t':\n  pos += 2;\n  break;\ncase '\\n':\n  pos += 2;\n  break;\ncase '\\r':\n  pos += 2;\n  break;\ncase '\\f':\n  pos += 2;\n  break;\ndefault:\n  pos++;\n  break;\n  }"
    },
    {
        "id": 179,
        "line": 768,
        "precode": "  switch (c) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  switch (c) {\ncase'':\n  pos++;\n  break;\ncase '\\t':\n  pos += 2;\n  break;\ncase '\\n':\n  pos += 2;\n  break;\ncase '\\r':\n  pos += 2;\n  break;\ncase '\\f':\n  pos += 2;\n  break;\ndefault:\n  pos++;\n  break;\n  }"
    },
    {
        "id": 180,
        "line": 768,
        "precode": "  switch (c) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  switch (c) {\ncase'':\n  pos++;\n  break;\ncase '\\t':\n  pos += 2;\n  break;\ncase '\\n':\n  pos += 2;\n  break;\ncase '\\r':\n  pos += 2;\n  break;\ncase '\\f':\n  pos += 2;\n  break;\ndefault:\n  pos++;\n  break;\n  }"
    },
    {
        "id": 181,
        "line": 768,
        "precode": "  switch (c) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "  switch (c) {\ncase'':\n  pos++;\n  break;\ncase '\\t':\n  pos += 2;\n  break;\ncase '\\n':\n  pos += 2;\n  break;\ncase '\\r':\n  pos += 2;\n  break;\ncase '\\f':\n  pos += 2;\n  break;\ndefault:\n  pos++;\n  break;\n  }"
    },
    {
        "id": 182,
        "line": 768,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false);"
    },
    {
        "id": 183,
        "line": 768,
        "precode": "int p = peeked;",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int p = doPeek();"
    },
    {
        "id": 185,
        "line": 768,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false);"
    },
    {
        "id": 186,
        "line": 768,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false);"
    },
    {
        "id": 187,
        "line": 768,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false);"
    },
    {
        "id": 188,
        "line": 768,
        "precode": "int c = nextNonWhitespace(true);",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int c = nextNonWhitespace(false);"
    },
    {
        "id": 189,
        "line": 768,
        "precode": "if (c == 't' || c == 'T') {\n",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (c == 'f' || c == 'F') {\n"
    },
    {
        "id": 190,
        "line": 768,
        "precode": "if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT) {\n"
    },
    {
        "id": 191,
        "line": 768,
        "precode": "if (peekStack == JsonScope.DANGLING_NAME) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (peekStack == JsonScope.DANGLING_NAME) {\n"
    },
    {
        "id": 192,
        "line": 768,
        "precode": "if (!isLiteral(buffer[pos])) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (!isLiteral(buffer[pos + 1])) {\n"
    },
    {
        "id": 193,
        "line": 768,
        "precode": "if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n"
    },
    {
        "id": 194,
        "line": 768,
        "precode": "if (Math.abs(x-approx*approx) > epsilon) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (Math.abs(x-approx) > epsilon) {\n"
    },
    {
        "id": 195,
        "line": 768,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) {\n",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "while (Math.abs(x-approx) > epsilon) {\n"
    },
    {
        "id": 196,
        "line": 768,
        "precode": "int length = keyword.length();",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "int length = keywordUpper.length();"
    },
    {
        "id": 197,
        "line": 768,
        "precode": "for (int i = 1; i < length; i++) {",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "for (int i = 1; i < length; i++) {"
    },
    {
        "id": 198,
        "line": 768,
        "precode": "if (pos + i >= limit &&!fillBuffer(i + 1)) {",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "if (pos + i >= limit &&!fillBuffer(i + 1)) {"
    },
    {
        "id": 199,
        "line": 768,
        "precode": "return peeked = PEEKED_END_OBJECT;",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return peeked = PEEKED_BEGIN_OBJECT;"
    },
    {
        "id": 200,
        "line": 768,
        "precode": "return peeked = PEEKED_END_ARRAY;",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return peeked = PEEKED_BEGIN_ARRAY;"
    },
    {
        "id": 201,
        "line": 768,
        "precode": "return peeked = PEEKED_NULL;",
        "filepath": "defects4j_fixed/Gson/Gson_13_fixed/gson/src/main/java/com/google/gson/stream/JsonReader.java",
        "aftercode": "return peeked = PEEKED_TRUE;"
    }
]