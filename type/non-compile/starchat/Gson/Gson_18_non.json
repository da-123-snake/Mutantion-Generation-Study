[
    {
        "id": 30,
        "line": 82,
        "precode": "WildcardType upperBounds = ((WildcardType) bound).getUpperBounds();",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "WildcardType upperBounds = ((WildcardType) bound).getSuperTypes();"
    },
    {
        "id": 31,
        "line": 82,
        "precode": "WildcardType upperBounds = ((WildcardType) bound).getUpperBounds();",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "WildcardType upperBounds = ((WildcardType) bound).getLowerBounds();"
    },
    {
        "id": 32,
        "line": 82,
        "precode": "WildcardType upperBounds = ((WildcardType) bound).getUpperBounds();",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "WildcardType upperBounds = ((WildcardType) bound).getExtendsBound();"
    },
    {
        "id": 33,
        "line": 82,
        "precode": "WildcardType upperBounds = ((WildcardType) bound).getUpperBounds();",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "WildcardType upperBounds = ((WildcardType) bound).getDeclaringClass();"
    },
    {
        "id": 34,
        "line": 82,
        "precode": "WildcardType upperBounds = ((WildcardType) bound).getUpperBounds();",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "WildcardType upperBounds = ((WildcardType) bound).getAnnotatedBounds();"
    },
    {
        "id": 35,
        "line": 82,
        "precode": "WildcardType upperBounds = ((WildcardType) bound).getUpperBounds();",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "WildcardType upperBounds = ((WildcardType) bound).getBounds();"
    },
    {
        "id": 37,
        "line": 82,
        "precode": "if (bound instanceof WildcardType)",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (true)"
    },
    {
        "id": 38,
        "line": 82,
        "precode": "upperBounds = new Type[] { bound };",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "upperBounds = new Type[] { bound, new Object() };"
    },
    {
        "id": 39,
        "line": 82,
        "precode": "return new WildcardTypeImpl(upperBounds, EMPTY_TYPE_ARRAY);",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return new WildcardTypeImpl(upperBounds, null);"
    },
    {
        "id": 40,
        "line": 82,
        "precode": "return new WildcardTypeImpl(upperBounds, EMPTY_TYPE_ARRAY);",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return new WildcardTypeImpl(upperBounds, new Object[0]);"
    },
    {
        "id": 41,
        "line": 97,
        "precode": "public static WildcardType supertypeOf(",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "public static WildcardType supertypeOf(Type bound) {"
    },
    {
        "id": 43,
        "line": 97,
        "precode": "if (bound instanceof WildcardType) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (bound instanceof WildcardType) {"
    },
    {
        "id": 44,
        "line": 97,
        "precode": "lowerBounds = ((WildcardType) bound).getLowerBounds();",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "lowerBounds = ((WildcardType) bound).getLowerBounds();"
    },
    {
        "id": 45,
        "line": 97,
        "precode": "} else {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "} else {"
    },
    {
        "id": 46,
        "line": 97,
        "precode": "lowerBounds = new Type[] { bound };",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "lowerBounds = new Type[] { bound };"
    },
    {
        "id": 47,
        "line": 97,
        "precode": "}",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "}"
    },
    {
        "id": 48,
        "line": 97,
        "precode": "return new WildcardTypeImpl(new Type[] { Object.class }, lowerBounds);",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return new WildcardTypeImpl(new Type[] { Object.class }, lowerBounds);"
    },
    {
        "id": 49,
        "line": 97,
        "precode": "}",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "}"
    },
    {
        "id": 50,
        "line": 97,
        "precode": "public static WildcardType supertypeOf(Type bound) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "public static WildcardType supertypeOf(Type bound) {"
    },
    {
        "id": 52,
        "line": 97,
        "precode": "if (bound instanceof WildcardType) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (bound instanceof WildcardType) {"
    },
    {
        "id": 60,
        "line": 444,
        "precode": "if (context == Properties.class) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == Properties.class) {\n\treturn new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n}"
    },
    {
        "id": 61,
        "line": 444,
        "precode": "if (context == Properties.class) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == Properties.class) {\n\treturn new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n}"
    },
    {
        "id": 62,
        "line": 444,
        "precode": "if (context == Properties.class) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == Properties.class) {\n\treturn new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n}"
    },
    {
        "id": 63,
        "line": 444,
        "precode": "if (context == Properties.class) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == Properties.class) {\n\treturn new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n}"
    },
    {
        "id": 64,
        "line": 444,
        "precode": "if (context == Properties.class) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == Properties.class) {\n\treturn new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n}"
    },
    {
        "id": 65,
        "line": 444,
        "precode": "if (context == Properties.class) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == Properties.class) {\n\treturn new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n}"
    },
    {
        "id": 66,
        "line": 444,
        "precode": "if (context == Properties.class) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == Properties.class) {\n\treturn new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n}"
    },
    {
        "id": 67,
        "line": 444,
        "precode": "if (context == Properties.class) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == Properties.class) {\n\treturn new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n}"
    },
    {
        "id": 68,
        "line": 444,
        "precode": "if (context == Properties.class) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == Properties.class) {\n\treturn new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n}"
    },
    {
        "id": 69,
        "line": 444,
        "precode": "if (context == Properties.class) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == Properties.class) {\n\treturn new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n}"
    },
    {
        "id": 70,
        "line": 444,
        "precode": "if (context == Properties.class) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == Properties.class) {\n\treturn new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n}"
    },
    {
        "id": 71,
        "line": 444,
        "precode": "if (context == Properties.class) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (context == Properties.class) {\n\treturn new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!;\n}"
    },
    {
        "id": 81,
        "line": 286,
        "precode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {"
    },
    {
        "id": 82,
        "line": 286,
        "precode": "if (toResolve == rawType) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (toResolve == rawType) {"
    },
    {
        "id": 83,
        "line": 286,
        "precode": "return context;",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return context;"
    },
    {
        "id": 85,
        "line": 286,
        "precode": "if (toResolve.isInterface()) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (toResolve.isInterface()) {"
    },
    {
        "id": 86,
        "line": 286,
        "precode": "Class<?>[] interfaces = rawType.getInterfaces();",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "Class<?>[] interfaces = rawType.getInterfaces();"
    },
    {
        "id": 87,
        "line": 286,
        "precode": "for (int i = 0, length = interfaces.length; i < length; i++) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "for (int i = 0, length = interfaces.length; i < length; i++) {"
    },
    {
        "id": 88,
        "line": 286,
        "precode": "if (interfaces[i] == toResolve) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "if (interfaces[i] == toResolve) {"
    },
    {
        "id": 89,
        "line": 286,
        "precode": "return rawType.getGenericInterfaces()[i];",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return rawType.getGenericInterfaces()[i];"
    },
    {
        "id": 90,
        "line": 286,
        "precode": "else if (toResolve.isAssignableFrom(interfaces[i])) {",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "else if (toResolve.isAssignableFrom(interfaces[i])) {"
    },
    {
        "id": 91,
        "line": 286,
        "precode": "return getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);",
        "filepath": "defects4j_fixed/Gson/Gson_18_fixed/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
        "aftercode": "return getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);"
    }
]