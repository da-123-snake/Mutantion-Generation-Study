[
    {
        "id": 79,
        "line": 352,
        "precode": "    final double[] x = new double[maximalOrder + 1];",
        "filepath": "defects4j_fixed/Math/Math_40_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
        "aftercode": "    final double[] x = new double[maximalOrder + 1];\n    final double[] tmpX = new double[x.length];"
    },
    {
        "id": 80,
        "line": 352,
        "precode": "    final double[] y = new double[maximalOrder + 1];",
        "filepath": "defects4j_fixed/Math/Math_40_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
        "aftercode": "    final double[] y = new double[maximalOrder + 1];\n    final double[] tmpY = new double[y.length];"
    },
    {
        "id": 81,
        "line": 352,
        "precode": "        final double[] x = new double[maximalOrder + 1];",
        "filepath": "defects4j_fixed/Math/Math_40_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
        "aftercode": "        final double[] x = new double[maximalOrder + 1];\n        final double[] tmpX = new double[x.length];"
    },
    {
        "id": 82,
        "line": 352,
        "precode": "        final double[] y = new double[maximalOrder + 1];",
        "filepath": "defects4j_fixed/Math/Math_40_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
        "aftercode": "        final double[] y = new double[maximalOrder + 1];\n        final double[] tmpY = new double[y.length];"
    },
    {
        "id": 83,
        "line": 352,
        "precode": "        x[0] = getMin();",
        "filepath": "defects4j_fixed/Math/Math_40_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
        "aftercode": "        x[0] = getMin();\n        tmpX[0] = getMin();"
    },
    {
        "id": 84,
        "line": 352,
        "precode": "        x[1] = getStartValue();",
        "filepath": "defects4j_fixed/Math/Math_40_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
        "aftercode": "        x[1] = getStartValue();\n        tmpX[1] = getStartValue();"
    },
    {
        "id": 85,
        "line": 352,
        "precode": "        x[2] = getMax();",
        "filepath": "defects4j_fixed/Math/Math_40_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
        "aftercode": "        x[2] = getMax();\n        tmpX[2] = getMax();"
    },
    {
        "id": 86,
        "line": 352,
        "precode": "        y[1] = computeObjectiveValue(x[1]);",
        "filepath": "defects4j_fixed/Math/Math_40_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
        "aftercode": "        y[1] = computeObjectiveValue(x[1]);\n        tmpY[1] = computeObjectiveValue(tmpX[1]);"
    },
    {
        "id": 87,
        "line": 352,
        "precode": "        if (Precision.equals(y[1], 0.0, 1)) {",
        "filepath": "defects4j_fixed/Math/Math_40_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
        "aftercode": "        if (Precision.equals(y[1], 0.0, 1)) {\n            // return the initial guess if it is a perfect root.\n            return x[1];"
    },
    {
        "id": 88,
        "line": 352,
        "precode": "        y[0] = computeObjectiveValue(x[0]);",
        "filepath": "defects4j_fixed/Math/Math_40_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
        "aftercode": "        y[0] = computeObjectiveValue(x[0]);\n        tmpY[0] = computeObjectiveValue(tmpX[0]);"
    },
    {
        "id": 89,
        "line": 352,
        "precode": "        if (Precision.equals(y[0], 0.0, 1)) {",
        "filepath": "defects4j_fixed/Math/Math_40_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
        "aftercode": "        if (Precision.equals(y[0], 0.0, 1)) {\n            // return the first endpoint if it is a perfect root.\n            return x[0];"
    },
    {
        "id": 90,
        "line": 352,
        "precode": "        y[2] = computeObjectiveValue(x[2]);",
        "filepath": "defects4j_fixed/Math/Math_40_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
        "aftercode": "        y[2] = computeObjectiveValue(x[2]);\n        tmpY[2] = computeObjectiveValue(tmpX[2]);"
    },
    {
        "id": 91,
        "line": 352,
        "precode": "        if (Precision.equals(y[2], 0.0, 1)) {",
        "filepath": "defects4j_fixed/Math/Math_40_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
        "aftercode": "        if (Precision.equals(y[2], 0.0, 1)) {\n            // return the second endpoint if it is a perfect root.\n            return x[2];"
    },
    {
        "id": 92,
        "line": 352,
        "precode": "        if (y[1] * y[2] < 0) {",
        "filepath": "defects4j_fixed/Math/Math_40_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
        "aftercode": "        if (y[1] * y[2] < 0) {\n            // use all computed point as a start sampling array for solving"
    },
    {
        "id": 93,
        "line": 352,
        "precode": "        final double[] tmpX = new double[x.length];",
        "filepath": "defects4j_fixed/Math/Math_40_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
        "aftercode": "        final double[] tmpX = new double[x.length];\n        final double[] tmpY = new double[y.length];"
    },
    {
        "id": 94,
        "line": 352,
        "precode": "        // current tightest bracketing of the root",
        "filepath": "defects4j_fixed/Math/Math_40_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
        "aftercode": "        // current tightest bracketing of the root\n        double xA = x[signChangeIndex - 1];\n        double yA = y[signChangeIndex - 1];\n        double absYA = FastMath.abs(yA);\n        int agingA = 0;\n        double xB = x[signChangeIndex];\n        double yB = y[signChangeIndex];\n        double absYB = FastMath.abs(yB);\n        int agingB = 0;"
    }
]