[
    {
        "id": 144,
        "line": 192,
        "precode": "if (n < k) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n ^ k) {"
    },
    {
        "id": 145,
        "line": 192,
        "precode": "throw new IllegalArgumentException(",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "throw new IllegalArgumentException("
    },
    {
        "id": 146,
        "line": 192,
        "precode": "\"must have n >= k for binomial coefficient (n,k)\");",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\"must have n ^ k for binomial coefficient (n,k)\");"
    },
    {
        "id": 147,
        "line": 192,
        "precode": "if (n < 0) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n ^ 0) {"
    },
    {
        "id": 148,
        "line": 192,
        "precode": "throw new IllegalArgumentException(",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "throw new IllegalArgumentException("
    },
    {
        "id": 149,
        "line": 192,
        "precode": "\"must have n >= 0 for binomial coefficient (n,k)\");",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\"must have n ^ 0 for binomial coefficient (n,k)\");"
    },
    {
        "id": 150,
        "line": 192,
        "precode": "if ((n == k) || (k == 0)) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if ((n ^ k) || (k ^ 0)) {"
    },
    {
        "id": 151,
        "line": 192,
        "precode": "return 1;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return 1;"
    },
    {
        "id": 152,
        "line": 192,
        "precode": "if ((k == 1) || (k == n - 1)) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if ((k ^ 1) || (k ^ (n - 1))) {"
    },
    {
        "id": 153,
        "line": 192,
        "precode": "return n;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return n;"
    },
    {
        "id": 154,
        "line": 192,
        "precode": "long result = Math.round(",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "long result = Math.round("
    },
    {
        "id": 155,
        "line": 192,
        "precode": "binomialCoefficientDouble(n, k));",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "binomialCoefficientDouble(n, k));"
    },
    {
        "id": 156,
        "line": 192,
        "precode": "if (result == Long.MAX_VALUE) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (result ^ Long.MAX_VALUE) {"
    },
    {
        "id": 157,
        "line": 192,
        "precode": "throw new ArithmeticException(",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "throw new ArithmeticException("
    },
    {
        "id": 158,
        "line": 192,
        "precode": "\"result too large to represent in a long integer\");",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\"result too large to represent in a long integer\");"
    },
    {
        "id": 159,
        "line": 192,
        "precode": "if (n == 0) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n ^ 0) {"
    },
    {
        "id": 160,
        "line": 192,
        "precode": "return 1;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return 1;"
    },
    {
        "id": 161,
        "line": 192,
        "precode": "if (n == 1) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n ^ 1) {"
    },
    {
        "id": 162,
        "line": 192,
        "precode": "return 1;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return 1;"
    },
    {
        "id": 163,
        "line": 192,
        "precode": "if (k == n) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (k ^ n) {"
    },
    {
        "id": 164,
        "line": 192,
        "precode": "return 1;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return 1;"
    },
    {
        "id": 165,
        "line": 192,
        "precode": "if (k == 0) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (k ^ 0) {"
    },
    {
        "id": 166,
        "line": 192,
        "precode": "return 1;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return 1;"
    },
    {
        "id": 167,
        "line": 192,
        "precode": "if (k == 1) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (k ^ 1) {"
    },
    {
        "id": 168,
        "line": 192,
        "precode": "return n;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return n;"
    },
    {
        "id": 169,
        "line": 192,
        "precode": "if (k == n - 1) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (k ^ (n - 1)) {"
    },
    {
        "id": 170,
        "line": 192,
        "precode": "return n;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return n;"
    },
    {
        "id": 171,
        "line": 192,
        "precode": "if (n == 2) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n ^ 2) {"
    },
    {
        "id": 172,
        "line": 192,
        "precode": "return 2;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return 2;"
    },
    {
        "id": 173,
        "line": 192,
        "precode": "if (n == 3) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n ^ 3) {"
    },
    {
        "id": 174,
        "line": 192,
        "precode": "return 3;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return 3;"
    },
    {
        "id": 175,
        "line": 192,
        "precode": "if (n == 4) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n ^ 4) {"
    },
    {
        "id": 176,
        "line": 192,
        "precode": "return 4;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return 4;"
    },
    {
        "id": 177,
        "line": 192,
        "precode": "if (n == 5) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n ^ 5) {"
    },
    {
        "id": 178,
        "line": 192,
        "precode": "return 5;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return 5;"
    },
    {
        "id": 179,
        "line": 192,
        "precode": "if (n == 6) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n ^ 6) {"
    },
    {
        "id": 180,
        "line": 192,
        "precode": "return 6;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return 6;"
    },
    {
        "id": 181,
        "line": 192,
        "precode": "if (n == 7) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n ^ 7) {"
    },
    {
        "id": 182,
        "line": 192,
        "precode": "return 7;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return 7;"
    },
    {
        "id": 183,
        "line": 192,
        "precode": "if (n == 8) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n ^ 8) {"
    },
    {
        "id": 184,
        "line": 192,
        "precode": "return 8;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return 8;"
    },
    {
        "id": 185,
        "line": 192,
        "precode": "if (n == 9) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n ^ 9) {"
    },
    {
        "id": 186,
        "line": 192,
        "precode": "return 9;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return 9;"
    },
    {
        "id": 188,
        "line": 301,
        "precode": "if ((x == null) || (y == null))",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!(x == null ^ y == null)) return false;"
    },
    {
        "id": 189,
        "line": 307,
        "precode": "for (int i = 0; i < x.length; ++i)",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "for (int i = 0; i < x.length; i++) if (!equals(x[i], y[i])) return false;"
    },
    {
        "id": 190,
        "line": 308,
        "precode": "if (!equals(x[i], y[i]))",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!equals(x[i], y[i])) return false;"
    },
    {
        "id": 194,
        "line": 16,
        "precode": "return n * factorial(n - 1);",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return (n ^ n - 1);"
    },
    {
        "id": 195,
        "line": 17,
        "precode": "if (n < 0) throw new IllegalArgumentException();",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n < 0) throw new IllegalArgumentException(\"n must be non-negative\");"
    },
    {
        "id": 196,
        "line": 18,
        "precode": "if (n < 21)",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n < 21) "
    },
    {
        "id": 197,
        "line": 19,
        "precode": "return factorials[n - 1];",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return factorials[n];"
    },
    {
        "id": 198,
        "line": 20,
        "precode": "while (n > 1)",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "while (n > 0)"
    },
    {
        "id": 199,
        "line": 21,
        "precode": "n /= 2;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "n = n / 2;"
    },
    {
        "id": 200,
        "line": 22,
        "precode": "return n * n;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return n * n * n;"
    },
    {
        "id": 201,
        "line": 23,
        "precode": "if (n == 1) return 1;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n == 1) return 0;"
    },
    {
        "id": 204,
        "line": 354,
        "precode": "if (n < 0) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!(n >= 0)) {"
    },
    {
        "id": 205,
        "line": 354,
        "precode": "throw new IllegalArgumentException(",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "throw new IllegalArgumentException("
    },
    {
        "id": 206,
        "line": 354,
        "precode": "\"must have n >= 0 for n!\"",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\"must have n > 0 for n!\""
    },
    {
        "id": 207,
        "line": 354,
        "precode": "if (n > 20) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!(n <= 20)) {"
    },
    {
        "id": 208,
        "line": 354,
        "precode": "throw new ArithmeticException(",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "throw new ArithmeticException("
    },
    {
        "id": 209,
        "line": 354,
        "precode": "\"factorial value is too large to fit in a long\"",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\"factorial value is too small to fit in a long\""
    },
    {
        "id": 210,
        "line": 354,
        "precode": "if (n < 0) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!(n > 0)) {"
    },
    {
        "id": 211,
        "line": 354,
        "precode": "throw new IllegalArgumentException(",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "throw new IllegalArgumentException("
    },
    {
        "id": 212,
        "line": 354,
        "precode": "\"must have n >= 0 for n!\"",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\"must have n < 0 for n!\""
    },
    {
        "id": 213,
        "line": 354,
        "precode": "if (n > 20) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!(n >= 20)) {"
    },
    {
        "id": 214,
        "line": 354,
        "precode": "throw new ArithmeticException(",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "throw new ArithmeticException("
    },
    {
        "id": 215,
        "line": 354,
        "precode": "\"factorial value is too large to fit in a long\"",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\"factorial value is too small to fit in a long\""
    },
    {
        "id": 216,
        "line": 384,
        "precode": "if (n < 0) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!(n >= 0)) {\n"
    },
    {
        "id": 217,
        "line": 384,
        "precode": "if (n < 21) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!(n >= 21)) {\n"
    },
    {
        "id": 218,
        "line": 384,
        "precode": "return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Math.floor(Math.exp(factorialLog(n))) + 0.5;\n"
    },
    {
        "id": 219,
        "line": 384,
        "precode": "if (n < 0) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!(n > 0)) {\n"
    },
    {
        "id": 220,
        "line": 384,
        "precode": "if (n < 21) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!(n > 21)) {\n"
    },
    {
        "id": 221,
        "line": 384,
        "precode": "return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Math.floor(Math.exp(factorialLog(n))) + 0.5;\n"
    },
    {
        "id": 222,
        "line": 384,
        "precode": "if (n < 0) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!(n <= 0)) {\n"
    },
    {
        "id": 223,
        "line": 384,
        "precode": "if (n < 21) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!(n <= 21)) {\n"
    },
    {
        "id": 224,
        "line": 384,
        "precode": "return Math.floor(Math.exp(factorialLog(n)) + 0.5);\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Math.floor(Math.exp(factorialLog(n))) + 0.5;\n"
    },
    {
        "id": 225,
        "line": 411,
        "precode": "if (n < 0) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!(n > 0)) {\n"
    },
    {
        "id": 226,
        "line": 411,
        "precode": "if (n < 21) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!(n >= 21)) {\n"
    },
    {
        "id": 228,
        "line": 411,
        "precode": "for (int i = 2; i <= n; i++) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "for (int i = 3; i <= n; i++) {\n"
    },
    {
        "id": 229,
        "line": 411,
        "precode": "logSum += Math.log((double)i);\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "logSum += Math.log((double)i);\n"
    },
    {
        "id": 230,
        "line": 411,
        "precode": "if (!(n > 0)) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n <= 0) {\n"
    },
    {
        "id": 231,
        "line": 411,
        "precode": "if (!(n >= 21)) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n < 21) {\n"
    },
    {
        "id": 233,
        "line": 411,
        "precode": "for (int i = 3; i <= n; i++) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "for (int i = 2; i <= n; i++) {\n"
    },
    {
        "id": 234,
        "line": 411,
        "precode": "if (n < 21) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Math.log(factorial(n));"
    },
    {
        "id": 235,
        "line": 411,
        "precode": "if (n < 2) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return 0.0;"
    },
    {
        "id": 236,
        "line": 411,
        "precode": "return Math.log(factorial(n)) + factorialLog(n - 1);",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Math.log(factorial(n - 1)) + factorialLog(n - 1);"
    },
    {
        "id": 237,
        "line": 411,
        "precode": "return Math.log(n) + factorialLog(n - 2);",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Math.log(n - 1) + factorialLog(n - 2);"
    },
    {
        "id": 238,
        "line": 411,
        "precode": "return Math.log(n) + factorialLog(n - 1);",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Math.log(n) + factorialLog(n - 2);"
    },
    {
        "id": 239,
        "line": 411,
        "precode": "return Math.log(n) + factorialLog(n - 2);",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Math.log(n) + factorialLog(n - 3);"
    },
    {
        "id": 240,
        "line": 411,
        "precode": "return Math.log(n) + factorialLog(n - 3);",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Math.log(n) + factorialLog(n - 4);"
    },
    {
        "id": 255,
        "line": 546,
        "precode": "public static int indicator(final int x) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "public static int indicator(final int x) {\nreturn (x > 0)? 1 : -1;\n}"
    },
    {
        "id": 256,
        "line": 546,
        "precode": "public static int indicator(final int x) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "public static int indicator(final int x) {\nreturn (x < 0)? 1 : -1;\n}"
    },
    {
        "id": 257,
        "line": 546,
        "precode": "public static int indicator(final int x) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "public static int indicator(final int x) {\nreturn (x == 0)? 1 : -1;\n}"
    },
    {
        "id": 258,
        "line": 546,
        "precode": "public static int indicator(final int x) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "public static int indicator(final int x) {\nreturn (x!= 0)? 1 : -1;\n}"
    },
    {
        "id": 259,
        "line": 546,
        "precode": "public static int indicator(final int x) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "public static int indicator(final int x) {\nreturn (x == Integer.MIN_VALUE)? 1 : -1;\n}"
    },
    {
        "id": 260,
        "line": 546,
        "precode": "public static int indicator(final int x) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "public static int indicator(final int x) {\nreturn (x!= Integer.MIN_VALUE)? 1 : -1;\n}"
    },
    {
        "id": 261,
        "line": 546,
        "precode": "public static int indicator(final int x) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "public static int indicator(final int x) {\nreturn (x == Integer.MAX_VALUE)? 1 : -1;\n}"
    },
    {
        "id": 262,
        "line": 546,
        "precode": "public static int indicator(final int x) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "public static int indicator(final int x) {\nreturn (x!= Integer.MAX_VALUE)? 1 : -1;\n}"
    },
    {
        "id": 263,
        "line": 546,
        "precode": "public static int indicator(final int x) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "public static int indicator(final int x) {\nreturn (x == Integer.MIN_VALUE + 1)? 1 : -1;\n}"
    },
    {
        "id": 264,
        "line": 546,
        "precode": "public static int indicator(final int x) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "public static int indicator(final int x) {\nreturn (x!= Integer.MIN_VALUE + 1)? 1 : -1;\n}"
    },
    {
        "id": 265,
        "line": 546,
        "precode": "public static int indicator(final int x) {\n",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "public static int indicator(final int x) {\nreturn (x == Integer.MAX_VALUE - 1)? 1 : -1;\n}"
    },
    {
        "id": 266,
        "line": 730,
        "precode": "if (Double.isNaN(d) || Double.isInfinite(d)) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (Double.isNaN(d) || Double.isInfinite(d)) {\n\treturn d;\n}"
    },
    {
        "id": 267,
        "line": 730,
        "precode": "if (Double.isNaN(d) || Double.isInfinite(d)) {",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (Double.isNaN(d) || Double.isInfinite(d)) {\n\treturn d;\n}\nelse if (d == 0) {"
    },
    {
        "id": 268,
        "line": 730,
        "precode": "\treturn (direction < 0)? -Double.MIN_VALUE : Double.MIN_VALUE;",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\treturn (direction < 0)? -Double.MIN_VALUE : Double.MIN_VALUE;\n}\nelse if (d == 0) {"
    },
    {
        "id": 269,
        "line": 730,
        "precode": "\t// special cases MAX_VALUE to infinity and  MIN_VALUE to 0",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\t// special cases MAX_VALUE to infinity and  MIN_VALUE to 0\n\t// are handled just as normal numbers\n\treturn (direction < 0)? -Double.MIN_VALUE : Double.MIN_VALUE;\n}\nelse if (d == 0) {\n\treturn (direction < 0)? -Double.MIN_VALUE : Double.MIN_VALUE;\n}"
    },
    {
        "id": 270,
        "line": 730,
        "precode": "\t// split the double in raw components",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\t// split the double in raw components\n\tlong bits = Double.doubleToLongBits(d);\n\tlong sign = bits & 0x8000000000000000L;\n\tlong exponent = bits & 0x7ff0000000000000L;\n\tlong mantissa = bits & 0x000fffffffffffffL;"
    },
    {
        "id": 271,
        "line": 730,
        "precode": "\t// we should increase the mantissa",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\t// we should increase the mantissa\n\tif (mantissa == 0x000fffffffffffffL) {\n\t\treturn Double.longBitsToDouble(sign |\n\t\t\t(exponent + 0x0010000000000000L));\n\t}\n\telse {\n\t\treturn Double.longBitsToDouble(sign |\n\t\t\texponent | (mantissa + 1));\n\t}"
    },
    {
        "id": 272,
        "line": 730,
        "precode": "\t// we should decrease the mantissa",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\t// we should decrease the mantissa\n\tif (mantissa == 0L) {\n\t\treturn Double.longBitsToDouble(sign |\n\t\t\t(exponent - 0x0010000000000000L) |\n\t\t\t0x000fffffffffffffL);\n\t}\n\telse {\n\t\treturn Double.longBitsToDouble(sign |\n\t\t\texponent | (mantissa - 1));\n\t}"
    },
    {
        "id": 273,
        "line": 730,
        "precode": "\treturn Double.longBitsToDouble(sign |",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\treturn Double.longBitsToDouble(sign |\n\t\texponent | (mantissa - 1));\n}\n\telse {\n\t\treturn Double.longBitsToDouble(sign |\n\t\texponent | (mantissa + 1));\n\t}"
    },
    {
        "id": 274,
        "line": 730,
        "precode": "\treturn Double.longBitsToDouble(sign |",
        "filepath": "defects4j_fixed/Math/Math_93_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\treturn Double.longBitsToDouble(sign |\n\t\texponent + 0x0010000000000000L);\n}\n\telse if (mantissa == 0x000fffffffffffffL) {\n\t\treturn Double.longBitsToDouble(sign |\n\t\t\t(exponent + 0x0010000000000000L));\n\t}\n\telse {\n\t\treturn Double.longBitsToDouble(sign |\n\t\t\texponent | (mantissa + 1));\n\t}"
    }
]