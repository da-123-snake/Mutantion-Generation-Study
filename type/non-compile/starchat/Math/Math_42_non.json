[
    {
        "id": 116,
        "line": 428,
        "precode": "int n = 10;",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "while (true) {"
    },
    {
        "id": 117,
        "line": 428,
        "precode": "int n = 10;",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "return true;"
    },
    {
        "id": 118,
        "line": 428,
        "precode": "ArrayList<Integer> r = new ArrayList<>();",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "r.addAll(subset);"
    },
    {
        "id": 119,
        "line": 428,
        "precode": "int a = 10, b = 20;",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "a = 20, b = 10;"
    },
    {
        "id": 120,
        "line": 428,
        "precode": "int x = 10;",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "while (Math.abs(x - (10 * 10)) > epsilon) {"
    },
    {
        "id": 121,
        "line": 428,
        "precode": "int x = 10;",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "while (Math.abs(x - approx) > epsilon) {"
    },
    {
        "id": 122,
        "line": 428,
        "precode": "int x = 10;",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "c = bin_op.apply(a, b);"
    },
    {
        "id": 123,
        "line": 428,
        "precode": "int n = 10;",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "n = (n ^ (n - 1));"
    },
    {
        "id": 124,
        "line": 428,
        "precode": "int n = 10;",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "while (true) {"
    },
    {
        "id": 125,
        "line": 428,
        "precode": "int n = 10;",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "return true;"
    },
    {
        "id": 126,
        "line": 428,
        "precode": "ArrayList<Integer> r = new ArrayList<>();",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "r.add(first).addAll(subset);"
    },
    {
        "id": 639,
        "line": 291,
        "precode": "int count = 0;",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "int count = getConstraintTypeCounts(relationship);"
    },
    {
        "id": 640,
        "line": 291,
        "precode": "int count = 0;",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "int count = getConstraintTypeCounts(relationship) + 1;"
    },
    {
        "id": 641,
        "line": 291,
        "precode": "int count = 0;",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "int count = getConstraintTypeCounts(relationship) - 1;"
    },
    {
        "id": 642,
        "line": 291,
        "precode": "int count = 0;",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "int count = getConstraintTypeCounts(relationship) * 2;"
    },
    {
        "id": 643,
        "line": 291,
        "precode": "int count = 0;",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "int count = getConstraintTypeCounts(relationship) / 2;"
    },
    {
        "id": 644,
        "line": 291,
        "precode": "int count = 0;",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "int count = getConstraintTypeCounts(relationship) % 2;"
    },
    {
        "id": 645,
        "line": 291,
        "precode": "int count = 0;",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "int count = getConstraintTypeCounts(relationship) << 1;"
    },
    {
        "id": 646,
        "line": 368,
        "precode": "if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "if (Precision.compareTo(entry, 0.0, maxUlps) > 0) {"
    },
    {
        "id": 647,
        "line": 368,
        "precode": "columnsToDrop.add(i);",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "columnsToDrop.add(i + 1);"
    },
    {
        "id": 649,
        "line": 368,
        "precode": "for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "for (int i = getNumObjectiveFunctions() + 1; i < getArtificialVariableOffset(); i++) {"
    },
    {
        "id": 650,
        "line": 368,
        "precode": "final double entry = tableau.getEntry(0, i);",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "final double entry = tableau.getEntry(0, i + 1);"
    },
    {
        "id": 651,
        "line": 368,
        "precode": "if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "if (Precision.compareTo(entry, 0.0, maxUlps) > 0) {"
    },
    {
        "id": 653,
        "line": 368,
        "precode": "for (int i = 0; i < getNumArtificialVariables(); i++) {",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "for (int i = 1; i < getNumArtificialVariables(); i++) {"
    },
    {
        "id": 654,
        "line": 368,
        "precode": "int col = i + getArtificialVariableOffset();",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "int col = i + getArtificialVariableOffset() + 1;"
    },
    {
        "id": 655,
        "line": 368,
        "precode": "if (getBasicRow(col) == null) {",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "if (getBasicRow(col + 1) == null) {"
    },
    {
        "id": 656,
        "line": 368,
        "precode": "double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];",
        "filepath": "defects4j_fixed/Math/Math_42_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size() + 1];"
    }
]