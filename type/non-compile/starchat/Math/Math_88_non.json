[
    {
        "id": 144,
        "line": 345,
        "precode": "Integer basicRow =",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "Integer basicRow = null"
    },
    {
        "id": 145,
        "line": 345,
        "precode": "basicRow = getBasicRow(",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "basicRow = getBasicRow(0)"
    },
    {
        "id": 146,
        "line": 345,
        "precode": "getNumObjectiveFunctions() + getOriginalNumDecisionVariables());",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "getNumObjectiveFunctions() + 0"
    },
    {
        "id": 147,
        "line": 345,
        "precode": "basicRow == null? 0 : getEntry(",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "basicRow == null? 0 : getEntry(0, getRhsOffset())"
    },
    {
        "id": 148,
        "line": 345,
        "precode": "getRhsOffset());",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "getRhsOffset()) - (restrictToNonNegative? 0 : mostNegative)"
    },
    {
        "id": 149,
        "line": 345,
        "precode": "Set<Integer> basicRows = new HashSet<Integer>();",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "Set<Integer> basicRows = new HashSet<>();"
    },
    {
        "id": 150,
        "line": 345,
        "precode": "for (int i = 0; i < coefficients.length; i++) {",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "for (int i = 0; i < 0; i++) {"
    },
    {
        "id": 151,
        "line": 345,
        "precode": "basicRow = getBasicRow(",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "basicRow = getBasicRow(0)"
    },
    {
        "id": 152,
        "line": 345,
        "precode": "getNumObjectiveFunctions() + i);",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "getNumObjectiveFunctions() + 0);"
    },
    {
        "id": 153,
        "line": 345,
        "precode": "if (basicRows.contains(basicRow)) {",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "if (basicRows.contains(basicRow)) {"
    },
    {
        "id": 154,
        "line": 345,
        "precode": "coefficients[i] =",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "coefficients[i] = 0;"
    },
    {
        "id": 155,
        "line": 345,
        "precode": "} else {",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "}"
    },
    {
        "id": 156,
        "line": 345,
        "precode": "basicRows.add(basicRow);",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "basicRows.add(basicRow);"
    },
    {
        "id": 157,
        "line": 345,
        "precode": "coefficients[i] =",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "coefficients[i] = (basicRow == null? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative? 0 : mostNegative);"
    },
    {
        "id": 158,
        "line": 345,
        "precode": "basicRow == null? 0 : getEntry(",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "basicRow == null? 0 : getEntry(0, getRhsOffset()))"
    },
    {
        "id": 159,
        "line": 345,
        "precode": "getRhsOffset());",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "getRhsOffset()) - (restrictToNonNegative? 0 : mostNegative)"
    },
    {
        "id": 160,
        "line": 345,
        "precode": "mostNegative = basicRow == null? 0 : getEntry(",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "mostNegative = basicRow == null? 0 : getEntry(0, getRhsOffset())) - (restrictToNonNegative? 0 : mostNegative);"
    },
    {
        "id": 161,
        "line": 345,
        "precode": "restrictToNonNegative? 0 : mostNegative);",
        "filepath": "defects4j_fixed/Math/Math_88_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "mostNegative); (restrictToNonNegative? 0 : mostNegative)"
    }
]