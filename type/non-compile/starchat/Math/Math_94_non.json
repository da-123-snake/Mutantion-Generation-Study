[
    {
        "id": 143,
        "line": 264,
        "precode": "if (n < k) {\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!(n >= k)) {\n"
    },
    {
        "id": 144,
        "line": 264,
        "precode": "throw new IllegalArgumentException(\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "throw new IllegalArgumentException(\n"
    },
    {
        "id": 145,
        "line": 267,
        "precode": "    \"must have n >= k for binomial coefficient (n,k)\"\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "    \"must have n >= k for binomial coefficient (n,k)\"\n"
    },
    {
        "id": 146,
        "line": 266,
        "precode": "}\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "} else {\n"
    },
    {
        "id": 147,
        "line": 264,
        "precode": "if (n < 0) {\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!(n >= 0)) {\n"
    },
    {
        "id": 148,
        "line": 264,
        "precode": "throw new IllegalArgumentException(\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "throw new IllegalArgumentException(\n"
    },
    {
        "id": 149,
        "line": 267,
        "precode": "    \"must have n >= 0 for binomial coefficient (n,k)\"\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "    \"must have n >= 0 for binomial coefficient (n,k)\"\n"
    },
    {
        "id": 150,
        "line": 266,
        "precode": "}\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "} else if ((n == k) || (k == 0)) {\n"
    },
    {
        "id": 151,
        "line": 264,
        "precode": "if (n == k) {\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if ((n == k) && (k == 0)) {\n"
    },
    {
        "id": 152,
        "line": 264,
        "precode": "return 0;\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return 0;\n"
    },
    {
        "id": 153,
        "line": 264,
        "precode": "} else if (k == 0) {\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "} else if ((k == 1) || (k == (n - 1))) {\n"
    },
    {
        "id": 154,
        "line": 264,
        "precode": "return Math.log((double)n);\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Math.log((double)n);\n"
    },
    {
        "id": 155,
        "line": 264,
        "precode": "} else {\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "} else if ((k == 1) || (k == (n - 1))) {\n"
    },
    {
        "id": 156,
        "line": 264,
        "precode": "return Math.log((double)n);\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Math.log((double)n);\n"
    },
    {
        "id": 157,
        "line": 266,
        "precode": "}\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "} else if ((k == 1) || (k == n - 1)) {\n"
    },
    {
        "id": 158,
        "line": 264,
        "precode": "return Math.log((double)n);\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Math.log((double)n);\n"
    },
    {
        "id": 159,
        "line": 264,
        "precode": "} else {\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "} else {\n"
    },
    {
        "id": 161,
        "line": 264,
        "precode": "for (int i = k + 1; i <= n; i++) {\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "for (int i = k + 1; i <= n; i++) {\n"
    },
    {
        "id": 162,
        "line": 264,
        "precode": "logSum += Math.log((double)i);\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "logSum += Math.log((double)i);\n"
    },
    {
        "id": 163,
        "line": 266,
        "precode": "}\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "} else {\n"
    },
    {
        "id": 165,
        "line": 264,
        "precode": "for (int i = 2; i <= n - k; i++) {\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "for (int i = 2; i <= n - k; i++) {\n"
    },
    {
        "id": 166,
        "line": 264,
        "precode": "logSum -= Math.log((double)i);\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "logSum -= Math.log((double)i);\n"
    },
    {
        "id": 170,
        "line": 264,
        "precode": "/**\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "/**\n"
    },
    {
        "id": 171,
        "line": 264,
        "precode": " * Returns the <a href=\"http://mathworld.wolfram.com/HyperbolicCosine.html\">\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": " * Returns the <a href=\"http://mathworld.wolfram.com/HyperbolicCosine.html\">\n"
    },
    {
        "id": 172,
        "line": 264,
        "precode": " * hyperbolic cosine\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": " * hyperbolic cosine\n"
    },
    {
        "id": 173,
        "line": 264,
        "precode": " *\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": " * @param x double value for which to find the hyperbolic cosine\n"
    },
    {
        "id": 174,
        "line": 264,
        "precode": " * @return hyperbolic cosine of x\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": " * @return hyperbolic cosine of x\n"
    },
    {
        "id": 175,
        "line": 264,
        "precode": " */\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": " */\n"
    },
    {
        "id": 176,
        "line": 264,
        "precode": "public static double cosh(double x) {\n",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "public static double cosh(double x) {\n"
    },
    {
        "id": 177,
        "line": 315,
        "precode": "public static boolean equals(double[] x, double[] y) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "public static boolean equals(double[] x, double[] y) {"
    },
    {
        "id": 178,
        "line": 315,
        "precode": "if ((x == null) || (y == null)) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if ((x == null) && (y == null)) {"
    },
    {
        "id": 179,
        "line": 315,
        "precode": "if (x.length!= y.length) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (x.length!= y.length) {"
    },
    {
        "id": 180,
        "line": 315,
        "precode": "for (int i = 0; i < x.length; ++i) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "for (int i = 0; i < x.length; i++) {"
    },
    {
        "id": 181,
        "line": 315,
        "precode": "if (!equals(x[i], y[i])) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!equals(x[i], y[i])) {"
    },
    {
        "id": 182,
        "line": 315,
        "precode": "return false;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return false;"
    },
    {
        "id": 183,
        "line": 315,
        "precode": "}",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "}"
    },
    {
        "id": 184,
        "line": 315,
        "precode": "}",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "}"
    },
    {
        "id": 186,
        "line": 315,
        "precode": " * Returns n!",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": " * Returns n!"
    },
    {
        "id": 187,
        "line": 315,
        "precode": " * Shorthand for <code>n</code> <a",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": " * Shorthand for <code>n</code> <a"
    },
    {
        "id": 188,
        "line": 315,
        "precode": "href=\"http://mathworld.wolfram.com/Factorial.html\"> Factorial</a>, the",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "href=\"http://mathworld.wolfram.com/Factorial.html\"> Factorial</a>, the"
    },
    {
        "id": 189,
        "line": 315,
        "precode": " * product of the numbers <code>1,...,n</code>.",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": " * product of the numbers <code>1,...,n</code>."
    },
    {
        "id": 190,
        "line": 315,
        "precode": " * <Strong>Preconditions</strong>:",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": " * <Strong>Preconditions</strong>:"
    },
    {
        "id": 191,
        "line": 315,
        "precode": " * <ul>",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": " * <ul>"
    },
    {
        "id": 192,
        "line": 315,
        "precode": " * <li> <code>n >= 0</code> (otherwise",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": " * <li> <code>n >= 0</code> (otherwise"
    },
    {
        "id": 193,
        "line": 315,
        "precode": " * <code>IllegalArgumentException</code> is thrown)</li>",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": " * <code>IllegalArgumentException</code> is thrown)</li>"
    },
    {
        "id": 194,
        "line": 315,
        "precode": " * <li> The result is small enough to fit into a <code>long</code>. The",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": " * <li> The result is small enough to fit into a <code>long</code>. The"
    },
    {
        "id": 195,
        "line": 346,
        "precode": "long result = Math.round(",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "long result = (long) Math.round("
    },
    {
        "id": 196,
        "line": 346,
        "precode": "long result = Math.round(",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "long result = (long) (Math.round("
    },
    {
        "id": 197,
        "line": 346,
        "precode": "long result = Math.round(",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "long result = (long) (Math.floor("
    },
    {
        "id": 198,
        "line": 346,
        "precode": "long result = Math.round(",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "long result = (long) (Math.ceil("
    },
    {
        "id": 199,
        "line": 346,
        "precode": "long result = Math.round(",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "long result = (long) (Math.rint("
    },
    {
        "id": 200,
        "line": 346,
        "precode": "long result = Math.round(",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "long result = (long) (Math.abs("
    },
    {
        "id": 201,
        "line": 346,
        "precode": "long result = Math.round(",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "long result = (long) (-Math.abs("
    },
    {
        "id": 202,
        "line": 346,
        "precode": "long result = Math.round(",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "long result = (long) Math.signum("
    },
    {
        "id": 203,
        "line": 346,
        "precode": "long result = Math.round(",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "long result = (long) Math.cbrt("
    },
    {
        "id": 204,
        "line": 346,
        "precode": "long result = Math.round(",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "long result = (long) Math.sqrt("
    },
    {
        "id": 205,
        "line": 397,
        "precode": "if (n < 0) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (!(n >= 0)) {"
    },
    {
        "id": 206,
        "line": 397,
        "precode": "    throw new IllegalArgumentException(",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "    throw new IllegalArgumentException("
    },
    {
        "id": 207,
        "line": 397,
        "precode": "        \"must have n >= 0 for n!\");",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "        \"must have n > 0 for n!\"); "
    },
    {
        "id": 208,
        "line": 397,
        "precode": "    return Math.floor(",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "    return Math.floor("
    },
    {
        "id": 209,
        "line": 397,
        "precode": "        Math.exp(",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "        Math.exp("
    },
    {
        "id": 210,
        "line": 397,
        "precode": "            factorialLog(",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "            factorialLog("
    },
    {
        "id": 211,
        "line": 397,
        "precode": "                n)) + 0.5);",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "                n)) + 0.0); "
    },
    {
        "id": 212,
        "line": 397,
        "precode": "    if (n < 0) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "    if (!(n >= 0)) {"
    },
    {
        "id": 213,
        "line": 397,
        "precode": "        throw new IllegalArgumentException(",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "        throw new IllegalArgumentException("
    },
    {
        "id": 214,
        "line": 397,
        "precode": "            \"must have n > 0 for n!\");",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "            \"must have n >= 0 for n!\"); "
    },
    {
        "id": 215,
        "line": 461,
        "precode": "if (n < 0) {\n    throw new IllegalArgumentException(\"must have n > 0 for n!\");\n}",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (n <= 0) {\n    throw new IllegalArgumentException(\"must have n > 0 for n!\");\n}"
    },
    {
        "id": 217,
        "line": 461,
        "precode": "for (int i = 2; i <= n; i++) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "for (int i = 2; i < n; i++) {"
    },
    {
        "id": 218,
        "line": 461,
        "precode": "    logSum += Math.log((double)i);",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "    logSum += Math.log(i);"
    },
    {
        "id": 219,
        "line": 461,
        "precode": "}",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "}"
    },
    {
        "id": 220,
        "line": 461,
        "precode": "return logSum;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Double.NEGATIVE_INFINITY;"
    },
    {
        "id": 221,
        "line": 461,
        "precode": "/**\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     * \n     * @param u a non-zero number\n     * @param v a non-zero number\n     * @return the greatest common divisor, never zero\n     * @since 1.1\n     */",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "/**\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     * \n     * @param u a non-zero number\n     * @param v a non-zero number\n     * @return the greatest common divisor, never zero\n     * @since 1.1\n     */\n    public static int gcd(int u, int v) {\n        if ((u == 0) || (v == 0)) {\n            return (Math.abs(u) + Math.abs(v));\n        }\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        /* assert u!=0 && v!=0; */\n        if (u > 0) {\n            u = -u;\n        } // make u negative\n        if (v > 0) {\n            v = -v;\n        } // make v negative\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n            u /= 2;\n            v /= 2;\n            k++; // cast out twos.\n        }\n        if (k == 31) {\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        // one is odd.\n        int t = ((u & 1) == 1)? v : -(u / 2)/* B3 */;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        do {\n            /* assert u<0 && v<0; */\n            // B4/B3: cast out twos from t.\n            while ((t & 1) == 0) {\n                t /= 2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            // B6/B3. at this point both u and v should be odd.\n            t = (v - u) / 2;\n            // |u| larger: t positive (replace u)\n            // |v| larger: t negative (replace v)\n        } while (t!= 0);\n        return -u * (1 << k);\n    }"
    },
    {
        "id": 222,
        "line": 461,
        "precode": "if ((u == 0) || (v == 0)) {\n            return (Math.abs(u) + Math.abs(v));\n        }",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if ((u | v) == 0) {\n            return (Math.abs(u) + Math.abs(v));\n        }"
    },
    {
        "id": 223,
        "line": 461,
        "precode": "int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n            u /= 2;\n            v /= 2;\n            k++; // cast out twos.",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) {\n            k++;\n            u = u >>> 1;\n            v = v >>> 1;\n        }"
    },
    {
        "id": 224,
        "line": 461,
        "precode": "if (u == 0 || v == 0) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Math.abs(u) + Math.abs(v);"
    },
    {
        "id": 225,
        "line": 461,
        "precode": "\treturn (u > 0)? -u : u;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\treturn (u ^ (u - 1));"
    },
    {
        "id": 226,
        "line": 461,
        "precode": "\twhile (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\twhile (true) {"
    },
    {
        "id": 227,
        "line": 461,
        "precode": "\t\treturn depth == 0;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\t\treturn true;"
    },
    {
        "id": 228,
        "line": 461,
        "precode": "\tArrayList r = new ArrayList();\n\tr.add(first).add(subset);\n\tto_add(r);",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\tto_add.addAll(subset);"
    },
    {
        "id": 229,
        "line": 461,
        "precode": "\tc = bin_op.apply(b, a);",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\tc = bin_op.apply(a, b);"
    },
    {
        "id": 230,
        "line": 461,
        "precode": "\twhile (Math.abs(x - approx * approx) > epsilon) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "\twhile (Math.abs(x - approx) > epsilon) {"
    },
    {
        "id": 298,
        "line": 542,
        "precode": "return (x < 0L)? 1L : -1L;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return (x == 0L)? 1L : -1L;"
    },
    {
        "id": 299,
        "line": 542,
        "precode": "return (x <= 0L)? 1L : -1L;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return (x == 0L)? 1L : -1L;"
    },
    {
        "id": 300,
        "line": 542,
        "precode": "return (x > 0L)? 1L : -1L;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return (x == 0L)? 1L : -1L;"
    },
    {
        "id": 301,
        "line": 542,
        "precode": "return (x!= 0L)? 1L : -1L;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return (x == 0L)? 1L : -1L;"
    },
    {
        "id": 302,
        "line": 542,
        "precode": "return (x == 0L)? 1L : -1L;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return (x == 0L)? 1L : -1L;"
    },
    {
        "id": 303,
        "line": 542,
        "precode": "return (x!= 0L)? 1L : -1L;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return (x == 0L)? 1L : -1L;"
    },
    {
        "id": 304,
        "line": 542,
        "precode": "return (x == 1L)? 1L : -1L;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return (x == 0L)? 1L : -1L;"
    },
    {
        "id": 305,
        "line": 542,
        "precode": "return (x == -1L)? 1L : -1L;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return (x == 0L)? 1L : -1L;"
    },
    {
        "id": 306,
        "line": 542,
        "precode": "return (x == Long.MIN_VALUE)? 1L : -1L;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return (x == 0L)? 1L : -1L;"
    },
    {
        "id": 307,
        "line": 542,
        "precode": "return (x == Long.MAX_VALUE)? 1L : -1L;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return (x == 0L)? 1L : -1L;"
    },
    {
        "id": 308,
        "line": 542,
        "precode": "return (x == Long.MIN_VALUE + 1)? 1L : -1L;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return (x == Long.MIN_VALUE)? 1L : -1L;"
    },
    {
        "id": 309,
        "line": 716,
        "precode": "if (Double.isNaN(d) || Double.isInfinite(d)) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return d;"
    },
    {
        "id": 310,
        "line": 716,
        "precode": "else if (d == 0) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return (direction < 0)? -Double.MIN_VALUE : Double.MIN_VALUE;"
    },
    {
        "id": 311,
        "line": 716,
        "precode": "if (d * (direction - d) >= 0) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "if (mantissa == 0x000fffffffffffffL) {"
    },
    {
        "id": 312,
        "line": 716,
        "precode": "if (mantissa == 0L) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Double.longBitsToDouble(sign | (exponent - 0x0010000000000000L) | 0x000fffffffffffffL);"
    },
    {
        "id": 313,
        "line": 716,
        "precode": "return Double.longBitsToDouble(sign | exponent | (mantissa - 1));",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return Double.longBitsToDouble(sign | (mantissa + 1));"
    },
    {
        "id": 314,
        "line": 716,
        "precode": "if (c == 0) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return a;"
    },
    {
        "id": 315,
        "line": 716,
        "precode": "while (c!= 0) {",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "while (true) {"
    },
    {
        "id": 316,
        "line": 716,
        "precode": "c /= 10;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "c = c / 10;"
    },
    {
        "id": 317,
        "line": 716,
        "precode": "return c;",
        "filepath": "defects4j_fixed/Math/Math_94_fixed/src/java/org/apache/commons/math/util/MathUtils.java",
        "aftercode": "return c;"
    }
]