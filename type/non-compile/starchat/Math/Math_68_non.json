[
    {
        "id": 219,
        "line": 455,
        "precode": "VectorialPointValuePair previous = current;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "VectorialPointValuePair previous = current.clone();"
    },
    {
        "id": 222,
        "line": 455,
        "precode": "double[] diag = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double[] diag = new double[cols]; Arrays.fill(diag, 1.0);"
    },
    {
        "id": 225,
        "line": 455,
        "precode": "double[] work1 = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double[] work1 = new double[cols]; Arrays.fill(work1, 1.0);"
    },
    {
        "id": 226,
        "line": 455,
        "precode": "solvedCols  = Math.min(rows, cols);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "solvedCols  = Math.min(rows, cols); // replaced Math.min with Math.max"
    },
    {
        "id": 227,
        "line": 455,
        "precode": "diagR       = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "diagR       = new double[cols]; // replaced Math.min with Math.max"
    },
    {
        "id": 228,
        "line": 455,
        "precode": "jacNorm     = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "jacNorm     = new double[cols]; // replaced Math.min with Math.max"
    },
    {
        "id": 229,
        "line": 455,
        "precode": "beta        = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "beta        = new double[cols]; // replaced Math.min with Math.max"
    },
    {
        "id": 230,
        "line": 455,
        "precode": "permutation = new int[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "permutation = new int[cols]; // replaced Math.min with Math.max"
    },
    {
        "id": 231,
        "line": 455,
        "precode": "lmDir       = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "lmDir       = new double[cols]; // replaced Math.min with Math.max"
    },
    {
        "id": 232,
        "line": 455,
        "precode": "delta   = 0;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "delta   = 0; // replaced Math.min with Math.max"
    },
    {
        "id": 236,
        "line": 455,
        "precode": "updateResidualsAndCost();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateResidualsAndCost();"
    },
    {
        "id": 237,
        "line": 455,
        "precode": "updateJacobian();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "updateJacobian();"
    },
    {
        "id": 238,
        "line": 455,
        "precode": "qrDecomposition();",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "qrDecomposition();"
    },
    {
        "id": 239,
        "line": 455,
        "precode": "VectorialPointValuePair previous = current;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "VectorialPointValuePair previous = current.clone();"
    },
    {
        "id": 240,
        "line": 455,
        "precode": "qTy(residuals);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "qTy(residuals); "
    },
    {
        "id": 241,
        "line": 455,
        "precode": "for (int k = 0; k < solvedCols; ++k) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int k = 0; k < solvedCols; ++k) {"
    },
    {
        "id": 242,
        "line": 455,
        "precode": "int pk = permutation[k];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "int pk = permutation[k].clone();"
    },
    {
        "id": 243,
        "line": 455,
        "precode": "jacobian[k][pk] = diagR[pk];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "jacobian[k][pk] = diagR[permutation[k]];"
    },
    {
        "id": 244,
        "line": 455,
        "precode": "if (firstIteration) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (firstIteration) {"
    },
    {
        "id": 245,
        "line": 455,
        "precode": "double dk = jacNorm[k];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double dk = jacNorm[k].clone();"
    },
    {
        "id": 246,
        "line": 455,
        "precode": "double xk = dk * point[k];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double xk = dk * point[k].clone();"
    },
    {
        "id": 247,
        "line": 455,
        "precode": "xNorm  += xk * xk;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "xNorm  += xk * xk;"
    },
    {
        "id": 248,
        "line": 455,
        "precode": "double coeff1 = ",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double coeff1 = 1.0 / pc2;"
    },
    {
        "id": 249,
        "line": 455,
        "precode": "double coeff2 = lmPar * lmNorm * lmNorm / pc2;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double coeff2 = lmPar * lmNorm * lmNorm * 1.0 / pc2;"
    },
    {
        "id": 250,
        "line": 455,
        "precode": "double preRed = coeff1 + 2 * coeff2;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double preRed = coeff1 + 2 * coeff2 * 1.0;"
    },
    {
        "id": 251,
        "line": 455,
        "precode": "double dirDer = -(coeff1 + coeff2);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double dirDer = -(coeff1 + coeff2 * 1.0);"
    },
    {
        "id": 253,
        "line": 455,
        "precode": "c = bin_op.apply(b, a);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "c = bin_op.apply(a, b);"
    },
    {
        "id": 255,
        "line": 455,
        "precode": "for (int i = 0; i < rows; ++i) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int i = 0; i < rows; ++i) {"
    },
    {
        "id": 256,
        "line": 455,
        "precode": "for (int j = 0; j < cols; ++j) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int j = 0; j < cols; ++j) {"
    },
    {
        "id": 257,
        "line": 455,
        "precode": "double r = residuals[i];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double r = residuals[i];"
    },
    {
        "id": 258,
        "line": 455,
        "precode": "double s = jacobian[j][i];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double s = jacobian[j][i];"
    },
    {
        "id": 259,
        "line": 455,
        "precode": "double t = jacobian[j][k] * r;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double t = jacobian[j][k] * r;"
    },
    {
        "id": 260,
        "line": 455,
        "precode": "cost += s * t;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "cost += s * t;"
    },
    {
        "id": 261,
        "line": 455,
        "precode": "beta[j] = s * t;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "beta[j] = s * t;"
    },
    {
        "id": 262,
        "line": 455,
        "precode": "jacNorm[j] = Math.sqrt(jacNorm[j] * jacNorm[j] + s * s);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "jacNorm[j] = Math.sqrt(jacNorm[j] * jacNorm[j] + s * s);"
    },
    {
        "id": 263,
        "line": 455,
        "precode": "permutation[j] = i;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "permutation[j] = i;"
    },
    {
        "id": 264,
        "line": 455,
        "precode": "if (firstIteration) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (firstIteration) {"
    },
    {
        "id": 266,
        "line": 455,
        "precode": "for (int k = 0; k < cols; ++k) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int k = 0; k < cols; ++k) {"
    },
    {
        "id": 267,
        "line": 455,
        "precode": "double dk = jacNorm[k];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double dk = jacNorm[k];"
    },
    {
        "id": 268,
        "line": 455,
        "precode": "double xk = dk * point[k];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double xk = dk * point[k];"
    },
    {
        "id": 269,
        "line": 455,
        "precode": "xNorm += xk * xk;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "xNorm += xk * xk;"
    },
    {
        "id": 271,
        "line": 455,
        "precode": "for (int j = 0; j < solvedCols; ++j) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int j = 0; j < solvedCols; j++) {"
    },
    {
        "id": 272,
        "line": 455,
        "precode": "double delta = (xNorm == 0)? initialStepBoundFactor : (initialStepBoundFactor * xNorm);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double delta = (xNorm == 0)? initialStepBoundFactor : (initialStepBoundFactor * 1.0);"
    },
    {
        "id": 273,
        "line": 455,
        "precode": "if (ratio <= 0.25) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (ratio <= 0.25) {"
    },
    {
        "id": 274,
        "line": 455,
        "precode": "double tmp =",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double tmp ="
    },
    {
        "id": 275,
        "line": 455,
        "precode": "if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {"
    },
    {
        "id": 276,
        "line": 455,
        "precode": "delta = 2 * lmNorm;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "delta = 2.0 * Math.sqrt(lmNorm);"
    },
    {
        "id": 277,
        "line": 455,
        "precode": "if (ratio >= 1.0e-4) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (ratio >= 1.0e-4) {"
    },
    {
        "id": 278,
        "line": 455,
        "precode": "double xK = diag[k] * point[k];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double xK = diag[k] * 1.0;"
    },
    {
        "id": 279,
        "line": 626,
        "precode": "int n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "int n = (n ^ (n - 1));"
    },
    {
        "id": 280,
        "line": 626,
        "precode": "  while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": " while (true) { "
    },
    {
        "id": 281,
        "line": 626,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "return true;"
    },
    {
        "id": 282,
        "line": 626,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 283,
        "line": 626,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 284,
        "line": 626,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) { ",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": " while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 349,
        "line": 455,
        "precode": "solvedCols  = Math.min(rows, cols);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "solvedCols  = Math.min(cols, rows);"
    },
    {
        "id": 350,
        "line": 455,
        "precode": "diagR       = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "diagR       = new double[rows];"
    },
    {
        "id": 351,
        "line": 455,
        "precode": "jacNorm     = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "jacNorm     = new double[rows];"
    },
    {
        "id": 352,
        "line": 455,
        "precode": "beta        = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "beta        = new double[rows];"
    },
    {
        "id": 353,
        "line": 455,
        "precode": "permutation = new int[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "permutation = new int[rows];"
    },
    {
        "id": 354,
        "line": 455,
        "precode": "lmDir       = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "lmDir       = new double[rows];"
    },
    {
        "id": 355,
        "line": 455,
        "precode": "delta   = 0;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "delta   = 100.0;"
    },
    {
        "id": 356,
        "line": 455,
        "precode": "xNorm   = 0;",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "xNorm   = 100.0;"
    },
    {
        "id": 357,
        "line": 455,
        "precode": "diag    = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "diag    = new double[rows];"
    },
    {
        "id": 358,
        "line": 455,
        "precode": "oldX    = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "oldX    = new double[rows];"
    },
    {
        "id": 359,
        "line": 455,
        "precode": "oldRes  = new double[rows];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "oldRes  = new double[cols];"
    },
    {
        "id": 360,
        "line": 455,
        "precode": "work1   = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "work1   = new double[rows];"
    },
    {
        "id": 361,
        "line": 455,
        "precode": "work2   = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "work2   = new double[rows];"
    },
    {
        "id": 362,
        "line": 455,
        "precode": "solvedCols  = Math.min(rows, cols);",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "solvedCols  = Math.min(cols, rows);"
    },
    {
        "id": 363,
        "line": 455,
        "precode": "diagR       = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "diagR       = new double[rows];"
    },
    {
        "id": 364,
        "line": 455,
        "precode": "jacNorm     = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "jacNorm     = new double[rows];"
    },
    {
        "id": 365,
        "line": 455,
        "precode": "beta        = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "beta        = new double[rows];"
    },
    {
        "id": 366,
        "line": 455,
        "precode": "permutation = new int[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "permutation = new int[rows];"
    },
    {
        "id": 367,
        "line": 455,
        "precode": "lmDir       = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "lmDir       = new double[rows];"
    },
    {
        "id": 368,
        "line": 455,
        "precode": "for (int j = 0; j < solvedCols; ++j) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int j = 0; j < rows; ++j) {"
    },
    {
        "id": 369,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (true) {"
    },
    {
        "id": 370,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (false) {"
    },
    {
        "id": 371,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random() < 0.5) {"
    },
    {
        "id": 372,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random() > 0.5) {"
    },
    {
        "id": 373,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random() == 0.5) {"
    },
    {
        "id": 374,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random()!= 0.5) {"
    },
    {
        "id": 375,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random() <= 0.5) {"
    },
    {
        "id": 376,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random() >= 0.5) {"
    },
    {
        "id": 377,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random() < 0.5f) {"
    },
    {
        "id": 378,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random() > 0.5f) {"
    },
    {
        "id": 379,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random() == 0.5f) {"
    },
    {
        "id": 380,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random()!= 0.5f) {"
    },
    {
        "id": 381,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random() <= 0.5f) {"
    },
    {
        "id": 382,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random() >= 0.5f) {"
    },
    {
        "id": 383,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random() < 0.5d) {"
    },
    {
        "id": 384,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random() > 0.5d) {"
    },
    {
        "id": 385,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random() == 0.5d) {"
    },
    {
        "id": 386,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random()!= 0.5d) {"
    },
    {
        "id": 387,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random() <= 0.5d) {"
    },
    {
        "id": 388,
        "line": 455,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_68_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random() >= 0.5d) {"
    }
]