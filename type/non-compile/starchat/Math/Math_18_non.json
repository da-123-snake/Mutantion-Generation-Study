[
    {
        "id": 90,
        "line": 936,
        "precode": "double[] res = new double[x.length];",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "double[] res = new double[x.length];\nfor (int i = 0; i < x.length; i++) {\n    double diff = boundaries[1][i] - boundaries[0][i];\n    res[i] = x[i] / diff;\n}"
    },
    {
        "id": 91,
        "line": 936,
        "precode": "double[] res = new double[x.length];",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "double[] res = new double[x.length];\nfor (int i = 0; i < x.length; i++) {\n    double diff = boundaries[1][i] - boundaries[0][i];\n    res[i] = x[i] * diff;\n}"
    },
    {
        "id": 92,
        "line": 936,
        "precode": "double[] res = new double[x.length];",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "double[] res = new double[x.length];\nfor (int i = 0; i < x.length; i++) {\n    double diff = boundaries[1][i] - boundaries[0][i];\n    res[i] = x[i] % diff;\n}"
    },
    {
        "id": 93,
        "line": 936,
        "precode": "double[] res = new double[x.length];",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "double[] res = new double[x.length];\nfor (int i = 0; i < x.length; i++) {\n    double diff = boundaries[1][i] - boundaries[0][i];\n    res[i] = x[i] + diff;\n}"
    },
    {
        "id": 94,
        "line": 936,
        "precode": "double[] res = new double[x.length];",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "double[] res = new double[x.length];\nfor (int i = 0; i < x.length; i++) {\n    double diff = boundaries[1][i] - boundaries[0][i];\n    res[i] = x[i] - diff;\n}"
    },
    {
        "id": 95,
        "line": 936,
        "precode": "double[] res = new double[x.length];",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "double[] res = new double[x.length];\nfor (int i = 0; i < x.length; i++) {\n    double diff = boundaries[1][i] - boundaries[0][i];\n    res[i] = x[i] ^ diff;\n}"
    },
    {
        "id": 96,
        "line": 936,
        "precode": "res[i] = x[i] / diff;",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "res[i] = x[i] % diff;"
    },
    {
        "id": 97,
        "line": 962,
        "precode": "double[] res = new double[x.length];",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "double[] res = new double[x.length];\nfor (int i = 0; i < x.length; i++) {\n    double diff = boundaries[1][i] - boundaries[0][i];\n    res[i] = diff * x[i];\n}"
    },
    {
        "id": 98,
        "line": 962,
        "precode": "double[] res = new double[x.length];",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "double[] res = new double[x.length];\nfor (int i = 0; i < x.length; i++) {\n    double diff = boundaries[1][i] - boundaries[0][i];\n    res[i] = diff * x[i];\n}\nreturn res;"
    },
    {
        "id": 99,
        "line": 962,
        "precode": "double diff = boundaries[1][i] - boundaries[0][i];",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "double diff = boundaries[1][i] - boundaries[0][i];\nres[i] = diff * x[i];"
    },
    {
        "id": 100,
        "line": 962,
        "precode": "double diff = boundaries[1][i] - boundaries[0][i];",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "double diff = boundaries[1][i] - boundaries[0][i];\nres[i] = diff * x[i];\nreturn res;"
    },
    {
        "id": 101,
        "line": 962,
        "precode": "double[] res = new double[x.length];",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "double[] res = new double[x.length];\nfor (int i = 0; i < x.length; i++) {\n    double temp = diff = boundaries[1][i] - boundaries[0][i];\n    res[i] = temp * x[i];\n}"
    },
    {
        "id": 102,
        "line": 962,
        "precode": "double[] res = new double[x.length];",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "double[] res = new double[x.length];\nfor (int i = 0; i < x.length; i++) {\n    double temp = diff = boundaries[1][i] - boundaries[0][i];\n    res[i] = temp * x[i];\n}\nreturn res;"
    },
    {
        "id": 103,
        "line": 962,
        "precode": "double temp = diff = boundaries[1][i] - boundaries[0][i];",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "double temp = diff = boundaries[1][i] - boundaries[0][i];\nres[i] = temp * x[i];"
    },
    {
        "id": 104,
        "line": 1003,
        "precode": "if (!isFeasible(x)) {",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "return false;"
    },
    {
        "id": 105,
        "line": 1003,
        "precode": "if (boundaries == null) {",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "return true;"
    },
    {
        "id": 108,
        "line": 1003,
        "precode": "for (int i = 0; i < x.length; i++) {",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "for (int i = 0; i < x.length; i++) {"
    },
    {
        "id": 109,
        "line": 1003,
        "precode": "if (x[i] < bLoEnc[i]) {",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "if (x[i] < boundaries[0][i]) {"
    },
    {
        "id": 110,
        "line": 1003,
        "precode": "if (x[i] > bHiEnc[i]) {",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "if (x[i] > boundaries[1][i]) {"
    },
    {
        "id": 111,
        "line": 1003,
        "precode": "}",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "}"
    },
    {
        "id": 112,
        "line": 1003,
        "precode": "}",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "}"
    },
    {
        "id": 113,
        "line": 1003,
        "precode": "return true;",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "return false;"
    },
    {
        "id": 114,
        "line": 1003,
        "precode": "if (isFeasible(x)) {",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "return true;"
    },
    {
        "id": 115,
        "line": 1003,
        "precode": "if (boundaries == null) {",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "if (true) {"
    },
    {
        "id": 118,
        "line": 1003,
        "precode": "for (int i = 0; i < x.length; i++) {",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "for (int i = 0; i < x.length; i++) {"
    },
    {
        "id": 126,
        "line": 920,
        "precode": "public FitnessFunction() {\n",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "this.valueRange = 1.0;\nisRepairMode = true;\n}"
    },
    {
        "id": 127,
        "line": 920,
        "precode": "    valueRange = ",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "1.0;\nisRepairMode = true;"
    },
    {
        "id": 128,
        "line": 920,
        "precode": "isRepairMode = ",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "true;\n}"
    },
    {
        "id": 129,
        "line": 920,
        "precode": "    isRepairMode = ",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "true;"
    },
    {
        "id": 130,
        "line": 920,
        "precode": "public FitnessFunction() {\n",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "this.valueRange = 1.0;\nthis.isRepairMode = true;\n}"
    },
    {
        "id": 131,
        "line": 920,
        "precode": "    valueRange = ",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "1.0;\nthis.isRepairMode = true;"
    },
    {
        "id": 132,
        "line": 920,
        "precode": "this.isRepairMode = ",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "true;\nthis.valueRange = 1.0;\n}"
    },
    {
        "id": 133,
        "line": 920,
        "precode": "    this.isRepairMode = ",
        "filepath": "defects4j_fixed/Math/Math_18_fixed/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
        "aftercode": "true;\nthis.valueRange = 1.0;"
    }
]