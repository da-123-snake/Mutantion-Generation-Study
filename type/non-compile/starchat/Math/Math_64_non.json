[
    {
        "id": 233,
        "line": 479,
        "precode": "double[] work3   = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double[] work3   = new double[cols];\nreturn depth==0;"
    },
    {
        "id": 234,
        "line": 479,
        "precode": "while (true) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "while (false) {"
    },
    {
        "id": 235,
        "line": 479,
        "precode": "qrDecomposition();",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "QRDecomposition();"
    },
    {
        "id": 236,
        "line": 479,
        "precode": "qTy(qtf);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "qTy(qtf);"
    },
    {
        "id": 237,
        "line": 479,
        "precode": "if (firstIteration) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (false) {"
    },
    {
        "id": 238,
        "line": 479,
        "precode": "for (int j = 0; j < solvedCols; ++j) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int j = 0; j < solvedCols; ++j) {"
    },
    {
        "id": 239,
        "line": 479,
        "precode": "for (int i = 0; i <= j; ++i) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int i = 0; i < j; ++i) {"
    },
    {
        "id": 240,
        "line": 479,
        "precode": "if (ratio <= 0.25) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (false) {"
    },
    {
        "id": 241,
        "line": 479,
        "precode": "if ((lmPar == 0) || (ratio >= 0.75)) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (false) {"
    },
    {
        "id": 242,
        "line": 479,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (false) {"
    },
    {
        "id": 243,
        "line": 479,
        "precode": "",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "R = Q;"
    },
    {
        "id": 244,
        "line": 479,
        "precode": "",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "R = Q.t()"
    },
    {
        "id": 245,
        "line": 479,
        "precode": "",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "R = Q.t(); Q = Q.t()"
    },
    {
        "id": 246,
        "line": 479,
        "precode": "",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "R = Q.t(); Q = Q.t();"
    },
    {
        "id": 247,
        "line": 479,
        "precode": "",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "R = Q.t(); Q = Q.t();"
    },
    {
        "id": 248,
        "line": 479,
        "precode": "",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "R = Q.t(); Q = Q.t();"
    },
    {
        "id": 249,
        "line": 479,
        "precode": "",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "R = Q.t(); Q = Q.t();"
    },
    {
        "id": 250,
        "line": 479,
        "precode": "if (s!= 0) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (jacNorm[j]!= 0) {"
    },
    {
        "id": 252,
        "line": 479,
        "precode": "for (int i = 0; i <= j; ++i) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int i = 0; i < j; ++i) {"
    },
    {
        "id": 253,
        "line": 479,
        "precode": "sum += jacobian[i][pj] * qtf[i];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "sum += jacobian[i][j] * qtf[i];"
    },
    {
        "id": 254,
        "line": 479,
        "precode": "maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "maxCosine = Math.max(maxCosine, Math.abs(sum) / (jacNorm[j] * cost));"
    },
    {
        "id": 255,
        "line": 479,
        "precode": "}",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "}"
    },
    {
        "id": 256,
        "line": 479,
        "precode": "}",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "}"
    },
    {
        "id": 257,
        "line": 479,
        "precode": "if (maxCosine <= orthoTolerance) {\n",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (true) {\n"
    },
    {
        "id": 258,
        "line": 479,
        "precode": "if (maxCosine > orthoTolerance) {\n",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (false) {\n"
    },
    {
        "id": 260,
        "line": 479,
        "precode": "\tcurrent = new VectorialPointValuePair(point, objective);\n",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "\tcurrent = new VectorialPointValuePair(point, objective + 1);\n"
    },
    {
        "id": 261,
        "line": 479,
        "precode": "\treturn current;\n",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "\treturn null;\n"
    },
    {
        "id": 262,
        "line": 479,
        "precode": "if (maxCosine <= orthoTolerance) {\n",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (Math.random() <= orthoTolerance) {\n"
    },
    {
        "id": 263,
        "line": 479,
        "precode": "\tcurrent = new VectorialPointValuePair(point, objective);\n",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "\tcurrent = new VectorialPointValuePair(point, Math.random() * objective);\n"
    },
    {
        "id": 264,
        "line": 479,
        "precode": "\treturn current;\n",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "\treturn null;\n"
    },
    {
        "id": 265,
        "line": 479,
        "precode": "double[] tmpVec = residuals;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double[] tmpVec = oldRes;"
    },
    {
        "id": 266,
        "line": 479,
        "precode": "residuals = oldRes;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "oldRes = tmpVec;"
    },
    {
        "id": 267,
        "line": 479,
        "precode": "tmpVec = objective;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "objective = oldObj;"
    },
    {
        "id": 268,
        "line": 479,
        "precode": "objective = oldObj;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "oldObj = tmpVec;"
    },
    {
        "id": 269,
        "line": 479,
        "precode": "determineLMParameter(qtf, delta, diag, work1, work2, work3);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "determineLMParameter(qtf, delta, diag, work1, work2, work3);"
    },
    {
        "id": 271,
        "line": 479,
        "precode": "for (int j = 0; j < solvedCols; ++j) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int j = 0; j < solvedCols; ++j) {"
    },
    {
        "id": 272,
        "line": 479,
        "precode": "int pj = permutation[j];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "int pj = permutation[j];"
    },
    {
        "id": 273,
        "line": 479,
        "precode": "lmDir[pj] = -lmDir[pj];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "lmDir[pj] = -lmDir[pj];"
    },
    {
        "id": 274,
        "line": 479,
        "precode": "point[pj] = oldX[pj] + lmDir[pj];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "point[pj] = oldX[pj] + lmDir[pj];"
    },
    {
        "id": 275,
        "line": 479,
        "precode": "double s = diag[pj] * lmDir[pj];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double s = diag[pj] * lmDir[pj];"
    },
    {
        "id": 276,
        "line": 479,
        "precode": "lmNorm  += s * s;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "lmNorm  += s * s;"
    },
    {
        "id": 277,
        "line": 479,
        "precode": "double actRed = -1.0;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double actRed = 1.0 - cost / previousCost;"
    },
    {
        "id": 278,
        "line": 479,
        "precode": "double actRed = -1.0;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double actRed = 1.0 - (cost - previousCost) / previousCost;"
    },
    {
        "id": 279,
        "line": 479,
        "precode": "double actRed = -1.0;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double actRed = 1.0 - (cost + previousCost) / previousCost;"
    },
    {
        "id": 280,
        "line": 479,
        "precode": "double actRed = -1.0;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double actRed = 1.0 - (cost - previousCost) / (previousCost * previousCost);"
    },
    {
        "id": 281,
        "line": 479,
        "precode": "double actRed = -1.0;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double actRed = 1.0 - (cost + previousCost) / (previousCost * previousCost);"
    },
    {
        "id": 282,
        "line": 479,
        "precode": "double actRed = -1.0;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double actRed = 1.0 - (cost - previousCost) / (previousCost * previousCost) + 1.0;"
    },
    {
        "id": 284,
        "line": 479,
        "precode": "for (int k = 0; k < cols; ++k) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int k = 0; k < cols; ++k) {"
    },
    {
        "id": 285,
        "line": 479,
        "precode": "double dk = jacNorm[k];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double dk = jacNorm[k];"
    },
    {
        "id": 286,
        "line": 479,
        "precode": "double xk = dk * point[k];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double xk = dk * point[k];"
    },
    {
        "id": 287,
        "line": 479,
        "precode": "xNorm  += xk * xk;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "xNorm  += xk * xk;"
    },
    {
        "id": 288,
        "line": 479,
        "precode": "diag[k] = dk;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "diag[k] = dk;"
    },
    {
        "id": 289,
        "line": 479,
        "precode": "double delta = (xNorm == 0)? initialStepBoundFactor : (initialStepBoundFactor * xNorm);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double delta = (xNorm == 0)? initialStepBoundFactor : (initialStepBoundFactor * xNorm);"
    },
    {
        "id": 290,
        "line": 479,
        "precode": "for (int j = 0; j < solvedCols; ++j) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int j = 0; j < solvedCols; ++j) {"
    },
    {
        "id": 291,
        "line": 479,
        "precode": "int    pj = permutation[j];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "int    pj = permutation[j];"
    },
    {
        "id": 292,
        "line": 479,
        "precode": "double s  = jacNorm[pj];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double s  = jacNorm[pj];"
    },
    {
        "id": 293,
        "line": 479,
        "precode": "if (s!= 0) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (s!= 0) {"
    },
    {
        "id": 295,
        "line": 479,
        "precode": "for (int i = 0; i <= j; ++i) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int i = 0; i <= j; ++i) {"
    },
    {
        "id": 296,
        "line": 479,
        "precode": "sum += jacobian[i][pj] * qtf[i];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "sum += jacobian[i][pj] * qtf[i];"
    },
    {
        "id": 297,
        "line": 479,
        "precode": "maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));"
    },
    {
        "id": 298,
        "line": 479,
        "precode": "for (int j = 0; j < cols; ++j) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int j = 0; j < cols; ++j) {"
    },
    {
        "id": 308,
        "line": 479,
        "precode": "solvedCols  = Math.min(rows, cols);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "solvedCols  = Math.min(rows, cols); // mutant"
    },
    {
        "id": 309,
        "line": 479,
        "precode": "diagR       = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "diagR       = new double[cols]; // mutant"
    },
    {
        "id": 310,
        "line": 479,
        "precode": "jacNorm     = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "jacNorm     = new double[cols]; // mutant"
    },
    {
        "id": 311,
        "line": 479,
        "precode": "beta        = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "beta        = new double[cols]; // mutant"
    },
    {
        "id": 312,
        "line": 479,
        "precode": "permutation = new int[cols];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "permutation = new int[cols]; // mutant"
    },
    {
        "id": 313,
        "line": 479,
        "precode": "lmDir       = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "lmDir       = new double[cols]; // mutant"
    },
    {
        "id": 379,
        "line": 479,
        "precode": "solvedCols = Math.min(rows, cols);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "solvedCols = Math.min(cols, rows);"
    },
    {
        "id": 380,
        "line": 479,
        "precode": "diagR = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "diagR = new double[rows];"
    },
    {
        "id": 381,
        "line": 479,
        "precode": "jacNorm = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "jacNorm = new double[rows];"
    },
    {
        "id": 382,
        "line": 479,
        "precode": "beta = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "beta = new double[rows];"
    },
    {
        "id": 383,
        "line": 479,
        "precode": "permutation = new int[cols];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "permutation = new int[rows];"
    },
    {
        "id": 384,
        "line": 479,
        "precode": "lmDir = new double[cols];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "lmDir = new double[rows];"
    },
    {
        "id": 395,
        "line": 479,
        "precode": "for (int j = 0; j < solvedCols; ++j) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int j = 0; j < solvedCols; ++j) {"
    },
    {
        "id": 396,
        "line": 479,
        "precode": "if (ratio <= 0.25) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (ratio <= 0.25) {"
    },
    {
        "id": 397,
        "line": 479,
        "precode": "if ((lmPar == 0) || (ratio >= 0.75)) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if ((lmPar == 0) || (ratio >= 0.75)) {"
    },
    {
        "id": 398,
        "line": 479,
        "precode": "if (checker!= null) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (checker!= null) {"
    },
    {
        "id": 399,
        "line": 479,
        "precode": "double delta = (xNorm == 0)? initialStepBoundFactor : (initialStepBoundFactor * xNorm);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double delta = (xNorm == 0)? initialStepBoundFactor : (initialStepBoundFactor / xNorm);"
    },
    {
        "id": 408,
        "line": 479,
        "precode": "for (int j = 0; j < solvedCols; ++j) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int j = 0; j < solvedCols; ++j) {"
    },
    {
        "id": 409,
        "line": 479,
        "precode": "int pj = permutation[j];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "int pj = permutation[j];"
    },
    {
        "id": 410,
        "line": 479,
        "precode": "double s = jacNorm[pj];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double s = jacNorm[pj];"
    },
    {
        "id": 412,
        "line": 479,
        "precode": "for (int i = 0; i <= j; ++i) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "for (int i = 0; i < j; ++i) {"
    },
    {
        "id": 413,
        "line": 479,
        "precode": "sum += jacobian[i][pj] * qtf[i];",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "sum += jacobian[i][pj] * qtf[i];"
    },
    {
        "id": 414,
        "line": 479,
        "precode": "if (ratio <= 0.25) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if (ratio <= 0.25) {"
    },
    {
        "id": 415,
        "line": 479,
        "precode": "double tmp =",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "double tmp ="
    },
    {
        "id": 416,
        "line": 479,
        "precode": "(actRed < 0)? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "(actRed < 0)? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.1;"
    },
    {
        "id": 417,
        "line": 479,
        "precode": "if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "if ((0.1 * cost >= previousCost) || (tmp < 0.01)) {"
    },
    {
        "id": 418,
        "line": 479,
        "precode": "delta = tmp * Math.min(delta, 10.0 * lmNorm);",
        "filepath": "defects4j_fixed/Math/Math_64_fixed/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "aftercode": "delta = tmp * Math.min(delta, 10.0 * lmNorm);"
    }
]