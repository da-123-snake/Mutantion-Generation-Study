[
    {
        "id": 245,
        "line": 255,
        "precode": "double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "double x = x1 - ((f1 * (x1 - x0)) / (f0 - f1));"
    },
    {
        "id": 246,
        "line": 255,
        "precode": "double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "double x = x1 - ((f1 * (x0 - x1)) / (f1 - f0));"
    },
    {
        "id": 247,
        "line": 255,
        "precode": "double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "double x = x1 - ((f0 * (x1 - x0)) / (f1 - f0));"
    },
    {
        "id": 248,
        "line": 255,
        "precode": "double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "double x = x1 - ((f1 * (x1 - x0)) / (f0 - f1));"
    },
    {
        "id": 249,
        "line": 255,
        "precode": "double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "double x = x1 - ((f1 * (x0 - x1)) / (f0 - f1));"
    },
    {
        "id": 250,
        "line": 255,
        "precode": "double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "double x = x1 - ((f0 * (x1 - x0)) / (f0 - f1));"
    },
    {
        "id": 251,
        "line": 255,
        "precode": "if (f1 * fx < 0) {\n",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "if (f1 * fx > 0) {\n"
    },
    {
        "id": 253,
        "line": 255,
        "precode": "    if (f1 * fx < 0) {\n",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "    if (f1 * fx > 0) {\n"
    },
    {
        "id": 256,
        "line": 255,
        "precode": "    }\n",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "    }\n"
    },
    {
        "id": 257,
        "line": 255,
        "precode": "    else {\n",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "    else {\n"
    },
    {
        "id": 258,
        "line": 255,
        "precode": "        switch (method) {\n",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "        switch (method) {\n"
    },
    {
        "id": 259,
        "line": 255,
        "precode": "        case ILLINOIS:\n",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "        case ILLINOIS:\n"
    },
    {
        "id": 260,
        "line": 255,
        "precode": "            f0 *= 0.5;\n",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "            f0 *= 0.5;\n"
    },
    {
        "id": 261,
        "line": 255,
        "precode": "            break;\n",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "            break;\n"
    },
    {
        "id": 262,
        "line": 255,
        "precode": "        case PEGASUS:\n",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "        case PEGASUS:\n"
    },
    {
        "id": 263,
        "line": 255,
        "precode": "            f0 *= f1 / (f1 + fx);\n",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "            f0 *= f1 / (f1 - fx);\n"
    },
    {
        "id": 264,
        "line": 255,
        "precode": "            break;\n",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "            break;\n"
    },
    {
        "id": 265,
        "line": 255,
        "precode": "        case REGULA_FALSI:\n",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "        case REGULA_FALSI:\n"
    },
    {
        "id": 268,
        "line": 255,
        "precode": "            if (x == x1) {\n",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "            if (x == x1) {\n"
    },
    {
        "id": 269,
        "line": 255,
        "precode": "                throw new ConvergenceException();\n",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "                throw new ConvergenceException();\n"
    },
    {
        "id": 270,
        "line": 255,
        "precode": "            }\n",
        "filepath": "defects4j_fixed/Math/Math_48_fixed/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
        "aftercode": "            }\n"
    }
]