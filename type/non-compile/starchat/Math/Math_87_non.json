[
    {
        "id": 116,
        "line": 343,
        "precode": "basicRow = getBasicRow(getNumObjectiveFunctions() + i);",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "basicRow = getBasicRow(getNumObjectiveFunctions() + i ^ 1);"
    },
    {
        "id": 117,
        "line": 343,
        "precode": "if (basicRows.contains(basicRow)) {",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "if (basicRows.contains(basicRow ^ 1)) {"
    },
    {
        "id": 118,
        "line": 343,
        "precode": "basicRows.add(basicRow);",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "basicRows.add(basicRow ^ 1);"
    },
    {
        "id": 119,
        "line": 343,
        "precode": "mostNegative = basicRow == null? 0 : getEntry(basicRow, getRhsOffset());",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "mostNegative = basicRow == null? 0 : getEntry(basicRow ^ 1, getRhsOffset());"
    },
    {
        "id": 120,
        "line": 343,
        "precode": "double coefficients = new double[getOriginalNumDecisionVariables()];",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "double coefficients = new double[getOriginalNumDecisionVariables() ^ 1];"
    },
    {
        "id": 121,
        "line": 343,
        "precode": "coefficients[i] = (basicRow == null? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative? 0 : mostNegative);",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "coefficients[i] = (basicRow == null? 0 : getEntry(basicRow ^ 1, getRhsOffset())) - (restrictToNonNegative? 0 : mostNegative);"
    },
    {
        "id": 122,
        "line": 343,
        "precode": "return new RealPointValuePair(coefficients, f.getValue(coefficients));",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "return new RealPointValuePair(coefficients, f.getValue(coefficients) ^ 1);"
    },
    {
        "id": 123,
        "line": 343,
        "precode": "basicRow = getBasicRow(getNumObjectiveFunctions() + i);",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "basicRow = getBasicRow(getNumObjectiveFunctions() + i + 1);"
    },
    {
        "id": 124,
        "line": 343,
        "precode": "if (basicRows.contains(basicRow)) {",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "if (basicRows.contains(basicRow + 1)) {"
    },
    {
        "id": 125,
        "line": 343,
        "precode": "basicRows.add(basicRow);",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "basicRows.add(basicRow + 1);"
    },
    {
        "id": 126,
        "line": 343,
        "precode": "mostNegative = basicRow == null? 0 : getEntry(basicRow, getRhsOffset());",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "mostNegative = basicRow == null? 0 : getEntry(basicRow + 1, getRhsOffset());"
    },
    {
        "id": 127,
        "line": 343,
        "precode": "double coefficients = new double[getOriginalNumDecisionVariables()];",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "double coefficients = new double[getOriginalNumDecisionVariables() + 1];"
    },
    {
        "id": 128,
        "line": 343,
        "precode": "coefficients[i] = (basicRow == null? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative? 0 : mostNegative);",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "coefficients[i] = (basicRow == null? 0 : getEntry(basicRow + 1, getRhsOffset())) - (restrictToNonNegative? 0 : mostNegative);"
    },
    {
        "id": 129,
        "line": 343,
        "precode": "return new RealPointValuePair(coefficients, f.getValue(coefficients));",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "return new RealPointValuePair(coefficients, f.getValue(coefficients) + 1);"
    },
    {
        "id": 130,
        "line": 343,
        "precode": "basicRow = getBasicRow(getNumObjectiveFunctions() + i);",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "basicRow = getBasicRow(getNumObjectiveFunctions() + i - 1);"
    },
    {
        "id": 131,
        "line": 343,
        "precode": "if (basicRows.contains(basicRow)) {",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "if (basicRows.contains(basicRow - 1)) {"
    },
    {
        "id": 132,
        "line": 343,
        "precode": "basicRows.add(basicRow);",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "basicRows.add(basicRow - 1);"
    },
    {
        "id": 133,
        "line": 343,
        "precode": "mostNegative = basicRow == null? 0 : getEntry(basicRow, getRhsOffset());",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "mostNegative = basicRow == null? 0 : getEntry(basicRow - 1, getRhsOffset());"
    },
    {
        "id": 134,
        "line": 343,
        "precode": "double coefficients = new double[getOriginalNumDecisionVariables()];",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "double coefficients = new double[getOriginalNumDecisionVariables() - 1];"
    },
    {
        "id": 135,
        "line": 343,
        "precode": "coefficients[i] = (basicRow == null? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative? 0 : mostNegative);",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "coefficients[i] = (basicRow == null? 0 : getEntry(basicRow - 1, getRhsOffset())) - (restrictToNonNegative? 0 : mostNegative);"
    },
    {
        "id": 136,
        "line": 343,
        "precode": "return new RealPointValuePair(coefficients, f.getValue(coefficients));",
        "filepath": "defects4j_fixed/Math/Math_87_fixed/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "return new RealPointValuePair(coefficients, f.getValue(coefficients) - 1);"
    }
]