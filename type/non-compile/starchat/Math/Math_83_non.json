[
    {
        "id": 45,
        "line": 408,
        "precode": "return tableau.getRowDimension();",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "return tableau.getRowDimensio();"
    },
    {
        "id": 47,
        "line": 408,
        "precode": "return tableau.getColumnDimension();",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "return tableau.getColumnDimensio();"
    },
    {
        "id": 48,
        "line": 408,
        "precode": "protected final double getEntry(final int row, final int column) {",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "protected final double getEntry(final int row, final int column) { return tableau.getEntry(row, column); }"
    },
    {
        "id": 49,
        "line": 408,
        "precode": "return tableau.getEntry(row, column);",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "return tableau.getEntry(row, column); "
    },
    {
        "id": 51,
        "line": 408,
        "precode": "tableau.setEntry(row, column, value);",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "tableau.setEntry(row, column, value); "
    },
    {
        "id": 53,
        "line": 408,
        "precode": "return tableau.getEntry(row, column);",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "return tableau.getEntry(row, column); "
    },
    {
        "id": 54,
        "line": 408,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": " n = (n ^ (n - 1));"
    },
    {
        "id": 55,
        "line": 408,
        "precode": "while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": " while (true) { "
    },
    {
        "id": 56,
        "line": 408,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "return true;"
    },
    {
        "id": 539,
        "line": 302,
        "precode": "int row = null;",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "int row = getBasicRow(col, ignoreObjectiveRows);"
    },
    {
        "id": 540,
        "line": 302,
        "precode": "int start = ignoreObjectiveRows? getNumObjectiveFunctions() : 0;",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "int start = ignoreObjectiveRows? getNumberOfObjectives() : 0;"
    },
    {
        "id": 541,
        "line": 302,
        "precode": "for (int i = start; i < getHeight(); i++) {",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "for (int i = start; i < getRows(); i++) {"
    },
    {
        "id": 542,
        "line": 302,
        "precode": "if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && row == null) {"
    },
    {
        "id": 543,
        "line": 302,
        "precode": "if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {"
    },
    {
        "id": 544,
        "line": 302,
        "precode": "return row;",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "return i;"
    },
    {
        "id": 545,
        "line": 302,
        "precode": "return null;",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "return i > start && MathUtils.equals(getEntry(i, col), 1.0, epsilon)? i : null;"
    },
    {
        "id": 548,
        "line": 359,
        "precode": "double mostNegative = negativeVarBasicRow == null? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "double mostNegative = negativeVarBasicRow == null? 0 : getEntry(negativeVarBasicRow, getRhsOffset() + 1);"
    },
    {
        "id": 550,
        "line": 359,
        "precode": "for (int i = 0; i < coefficients.length; i++) {",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "for (int i = 0; i < coefficients.length; i++) {"
    },
    {
        "id": 551,
        "line": 359,
        "precode": "Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i + 1);"
    },
    {
        "id": 552,
        "line": 359,
        "precode": "if (basicRows.contains(basicRow)) {",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "if (basicRows.contains(basicRow + 1)) {"
    },
    {
        "id": 553,
        "line": 359,
        "precode": "coefficients[i] = 0;",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "coefficients[i] = 0;"
    },
    {
        "id": 554,
        "line": 359,
        "precode": "basicRows.add(basicRow);",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "basicRows.add(basicRow + 1);"
    },
    {
        "id": 555,
        "line": 359,
        "precode": "coefficients[i] = (basicRow == null? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative? 0 : mostNegative);",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "coefficients[i] = (basicRow == null? 0 : getEntry(basicRow + 1, getRhsOffset())) - (restrictToNonNegative? 0 : mostNegative);"
    },
    {
        "id": 556,
        "line": 359,
        "precode": "return new RealPointValuePair(coefficients, f.getValue(coefficients));",
        "filepath": "defects4j_fixed/Math/Math_83_fixed/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
        "aftercode": "return new RealPointValuePair(coefficients, f.getValue(coefficients));"
    }
]