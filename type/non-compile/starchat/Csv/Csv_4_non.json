[
    {
        "id": 8,
        "line": 413,
        "precode": "if (!this.closed) {",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "if (this.isClosed()) {"
    },
    {
        "id": 9,
        "line": 413,
        "precode": "if (this.reader == null) {",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "if (this.reader == null) {"
    },
    {
        "id": 10,
        "line": 413,
        "precode": "if (this.record == null) {",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "if (this.record == null) {"
    },
    {
        "id": 11,
        "line": 413,
        "precode": "if (this.reader == null) {",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "if (this.reader == null) {"
    },
    {
        "id": 12,
        "line": 413,
        "precode": "if (this.record == null) {",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "if (this.record == null) {"
    },
    {
        "id": 13,
        "line": 413,
        "precode": "if (this.closed) {",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "if (this.isClosed()) {"
    },
    {
        "id": 14,
        "line": 413,
        "precode": "return this.nextRecord();",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return this.getNextRecord();"
    },
    {
        "id": 22,
        "line": 290,
        "precode": "return this.headerMap == null? null : new LinkedHashMap<String, Integer>(this.headerMap);",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return this.headerMap == null? null : new LinkedHashMap<String, Integer>((this.headerMap == null)? null : this.headerMap);"
    },
    {
        "id": 23,
        "line": 290,
        "precode": "return this.headerMap == null? null : new LinkedHashMap<String, Integer>(this.headerMap);",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return this.headerMap == null? null : new LinkedHashMap<String, Integer>((this.headerMap == null)? null : (this.headerMap.isEmpty()? null : this.headerMap));"
    },
    {
        "id": 24,
        "line": 290,
        "precode": "return this.headerMap == null? null : new LinkedHashMap<String, Integer>(this.headerMap);",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return this.headerMap == null? null : new LinkedHashMap<String, Integer>((this.headerMap == null)? null : (this.headerMap.isEmpty()? null : (this.headerMap.size() + 1)));"
    },
    {
        "id": 25,
        "line": 290,
        "precode": "return this.headerMap == null? null : new LinkedHashMap<String, Integer>(this.headerMap);",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return this.headerMap == null? null : new LinkedHashMap<String, Integer>((this.headerMap == null)? null : (this.headerMap.isEmpty()? null : (this.headerMap.size() + 1)));"
    },
    {
        "id": 26,
        "line": 290,
        "precode": "return this.headerMap == null? null : new LinkedHashMap<String, Integer>(this.headerMap);",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return this.headerMap == null? null : new LinkedHashMap<String, Integer>((this.headerMap == null)? null : (this.headerMap.isEmpty()? null : (this.headerMap.size() + 1)));"
    },
    {
        "id": 27,
        "line": 290,
        "precode": "return this.headerMap == null? null : new LinkedHashMap<String, Integer>(this.headerMap);",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return this.headerMap == null? null : new LinkedHashMap<String, Integer>((this.headerMap == null)? null : (this.headerMap.isEmpty()? null : (this.headerMap.size() + 1)));"
    },
    {
        "id": 28,
        "line": 290,
        "precode": "return this.headerMap == null? null : new LinkedHashMap<String, Integer>(this.headerMap);",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return this.headerMap == null? null : new LinkedHashMap<String, Integer>((this.headerMap == null)? null : (this.headerMap.isEmpty()? null : (this.headerMap.size() + 1)));"
    },
    {
        "id": 29,
        "line": 357,
        "precode": "return this.lexer.isClosed();",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return this.lexer.isClosed();"
    },
    {
        "id": 30,
        "line": 357,
        "precode": "return this.lexer.isClosed();",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return!this.lexer.isClosed();"
    },
    {
        "id": 31,
        "line": 357,
        "precode": "return this.lexer.isClosed();",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return this.lexer.isOpen();"
    },
    {
        "id": 32,
        "line": 357,
        "precode": "return this.lexer.isClosed();",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return!this.lexer.isOpen();"
    },
    {
        "id": 33,
        "line": 357,
        "precode": "return this.lexer.isClosed();",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return this.lexer.isEndOfFile();"
    },
    {
        "id": 34,
        "line": 357,
        "precode": "return this.lexer.isClosed();",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return!this.lexer.isEndOfFile();"
    },
    {
        "id": 35,
        "line": 357,
        "precode": "return this.lexer.isClosed();",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return this.lexer.isReady();"
    },
    {
        "id": 61,
        "line": 290,
        "precode": "return this.lexer.getCurrentLineNumber();",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return 0L;"
    },
    {
        "id": 62,
        "line": 290,
        "precode": "return this.lexer.getCurrentLineNumber();",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return 1L;"
    },
    {
        "id": 63,
        "line": 290,
        "precode": "return this.lexer.getCurrentLineNumber();",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return 2L;"
    },
    {
        "id": 64,
        "line": 290,
        "precode": "return this.lexer.getCurrentLineNumber();",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return 3L;"
    },
    {
        "id": 65,
        "line": 290,
        "precode": "return this.lexer.getCurrentLineNumber();",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return 4L;"
    },
    {
        "id": 66,
        "line": 290,
        "precode": "return this.lexer.getCurrentLineNumber();",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return 5L;"
    },
    {
        "id": 67,
        "line": 290,
        "precode": "return this.lexer.getCurrentLineNumber();",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return 6L;"
    },
    {
        "id": 86,
        "line": 37,
        "precode": "package org.apache.commons.csv;",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "package org.apache.commons.csv;\nimport java.net.URL;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n"
    },
    {
        "id": 88,
        "line": 37,
        "precode": "  while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "while (true) {\n  while (!queue.isEmpty()) {\n"
    },
    {
        "id": 89,
        "line": 37,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "return true;\nreturn depth==0;\n"
    },
    {
        "id": 90,
        "line": 37,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "to_add.addAll(subset);\nArrayList r = new ArrayList();\n"
    },
    {
        "id": 91,
        "line": 37,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "c = bin_op.apply(a,b);\nc = bin_op.apply(b, a);\n"
    },
    {
        "id": 92,
        "line": 37,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) { ",
        "filepath": "defects4j_fixed/Csv/Csv_4_fixed/src/main/java/org/apache/commons/csv/CSVParser.java",
        "aftercode": "while (Math.abs(x-approx) > epsilon) {\nwhile (Math.abs(x-approx*approx) > epsilon) {\n"
    }
]