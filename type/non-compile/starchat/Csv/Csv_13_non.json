[
    {
        "id": 17,
        "line": 231,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return true;"
    },
    {
        "id": 18,
        "line": 231,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 19,
        "line": 231,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 20,
        "line": 231,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) { ",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": " while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 21,
        "line": 231,
        "precode": "while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": " while (true) { "
    },
    {
        "id": 22,
        "line": 231,
        "precode": "  while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": " while (true) { "
    },
    {
        "id": 23,
        "line": 231,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 24,
        "line": 320,
        "precode": "CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withEscape(BACKSLASH)"
    },
    {
        "id": 25,
        "line": 320,
        "precode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withEscape(BACKSLASH)"
    },
    {
        "id": 26,
        "line": 320,
        "precode": "CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withRecordSeparator(LF)"
    },
    {
        "id": 27,
        "line": 320,
        "precode": "CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withQuote(null)"
    },
    {
        "id": 28,
        "line": 320,
        "precode": "CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withEscape(BACKSLASH).withQuote(null)"
    },
    {
        "id": 29,
        "line": 320,
        "precode": "CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withEscape(BACKSLASH).withIgnoreEmptyLines(false)"
    },
    {
        "id": 30,
        "line": 320,
        "precode": "CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withEscape(BACKSLASH).withIgnoreEmptyLines(false).withNullString(\"\\N\")"
    },
    {
        "id": 31,
        "line": 1038,
        "precode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, labels, ",
        "aftercode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, labels, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 32,
        "line": 1038,
        "precode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, labels, skipHeaderRecord, ",
        "aftercode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, labels, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 33,
        "line": 1038,
        "precode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, labels, skipHeaderRecord, allowMissingColumnNames, ",
        "aftercode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, labels, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 35,
        "line": 1038,
        "precode": "if (metaData!= null) {",
        "aftercode": "if (true) {",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 37,
        "line": 1038,
        "precode": "for (int i = 0; i < columnCount; i++) {",
        "aftercode": "for (int i = 0; i < 0; i++) {",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java"
    },
    {
        "id": 38,
        "line": 1193,
        "precode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase).withQuote(quoteChar);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase).withQuote(quoteChar.charValue());"
    },
    {
        "id": 39,
        "line": 1193,
        "precode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase).withQuote(quoteChar);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase).withQuote(quoteChar ^ (quoteChar - 1));"
    },
    {
        "id": 40,
        "line": 1193,
        "precode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase).withQuote(quoteChar);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "while (true) { return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase).withQuote(quoteChar); }"
    },
    {
        "id": 41,
        "line": 1193,
        "precode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase).withQuote(quoteChar);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase).withQuote(Character.valueOf(quoteChar));"
    },
    {
        "id": 42,
        "line": 1193,
        "precode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase).withQuote(quoteChar);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase).withQuote((char) (quoteChar + 1));"
    },
    {
        "id": 43,
        "line": 1193,
        "precode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase).withQuote(quoteChar);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase).withQuote(quoteChar + 1);"
    },
    {
        "id": 44,
        "line": 1193,
        "precode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase).withQuote(quoteChar);",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase).withQuote(quoteChar + 'a');"
    },
    {
        "id": 125,
        "line": 320,
        "precode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withEscape(BACKSLASH);"
    },
    {
        "id": 126,
        "line": 320,
        "precode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withNullString(\"\\N\");"
    },
    {
        "id": 127,
        "line": 320,
        "precode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withRecordSeparator(\"\\r\");"
    },
    {
        "id": 128,
        "line": 320,
        "precode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withQuote(null);"
    },
    {
        "id": 129,
        "line": 320,
        "precode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withEscape(BACKSLASH).withNullString(\"\\N\");"
    },
    {
        "id": 130,
        "line": 320,
        "precode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withEscape(BACKSLASH).withRecordSeparator(\"\\r\");"
    },
    {
        "id": 131,
        "line": 320,
        "precode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withEscape(BACKSLASH).withQuote(null);"
    },
    {
        "id": 132,
        "line": 320,
        "precode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withEscape(BACKSLASH).withIgnoreEmptyLines(false);"
    },
    {
        "id": 133,
        "line": 320,
        "precode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withEscape(BACKSLASH).withIgnoreEmptyLines(false).withNullString(\"\\N\");"
    },
    {
        "id": 134,
        "line": 320,
        "precode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withEscape(BACKSLASH).withIgnoreEmptyLines(false).withRecordSeparator(\"\\r\");"
    },
    {
        "id": 135,
        "line": 320,
        "precode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withEscape(BACKSLASH).withIgnoreEmptyLines(false).withQuote(null);"
    },
    {
        "id": 136,
        "line": 320,
        "precode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces().withEscape(BACKSLASH).withNullString(\"\\N\").withRecordSeparator(\"\\r\");"
    },
    {
        "id": 137,
        "line": 690,
        "precode": "return skipHeaderRecord;",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return false;"
    },
    {
        "id": 138,
        "line": 690,
        "precode": "return skipHeaderRecord;",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return!skipHeaderRecord;"
    },
    {
        "id": 139,
        "line": 690,
        "precode": "return skipHeaderRecord;",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return!skipHeaderRecord;"
    },
    {
        "id": 140,
        "line": 690,
        "precode": "return skipHeaderRecord;",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return!skipHeaderRecord;"
    },
    {
        "id": 141,
        "line": 690,
        "precode": "return skipHeaderRecord;",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return!skipHeaderRecord;"
    },
    {
        "id": 142,
        "line": 690,
        "precode": "return skipHeaderRecord;",
        "filepath": "defects4j_fixed/Csv/Csv_13_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "return!skipHeaderRecord;"
    }
]