[
    {
        "id": 15,
        "line": 217,
        "precode": "public static final CSVFormat TDF =\n    DEFAULT\n   .withDelimiter(TAB)\n   .withIgnoreSurroundingSpaces(true);",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF =\n    DEFAULT\n   .withDelimiter(TAB)\n   .withIgnoreSurroundingSpaces(false);"
    },
    {
        "id": 16,
        "line": 217,
        "precode": "public static final CSVFormat TDF =\n    DEFAULT\n   .withDelimiter(TAB)\n   .withIgnoreSurroundingSpaces(true);",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF =\n    DEFAULT\n   .withDelimiter(TAB)\n   .withIgnoreSurroundingSpaces(false);\nwhile (true) {}\n"
    },
    {
        "id": 17,
        "line": 217,
        "precode": "public static final CSVFormat TDF =\n    DEFAULT\n   .withDelimiter(TAB)\n   .withIgnoreSurroundingSpaces(true);",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF =\n    DEFAULT\n   .withDelimiter(TAB)\n   .withIgnoreSurroundingSpaces(false);\nwhile (!queue.isEmpty()) {}\n"
    },
    {
        "id": 18,
        "line": 217,
        "precode": "public static final CSVFormat TDF =\n    DEFAULT\n   .withDelimiter(TAB)\n   .withIgnoreSurroundingSpaces(true);",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF =\n    DEFAULT\n   .withDelimiter(TAB)\n   .withIgnoreSurroundingSpaces(false);\nreturn depth==0;\n"
    },
    {
        "id": 19,
        "line": 217,
        "precode": "public static final CSVFormat TDF =\n    DEFAULT\n   .withDelimiter(TAB)\n   .withIgnoreSurroundingSpaces(true);",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF =\n    DEFAULT\n   .withDelimiter(TAB)\n   .withIgnoreSurroundingSpaces(false);\nArrayList r = new ArrayList();r.add(first).add(subset);to_add(r);\n"
    },
    {
        "id": 20,
        "line": 217,
        "precode": "public static final CSVFormat TDF =\n    DEFAULT\n   .withDelimiter(TAB)\n   .withIgnoreSurroundingSpaces(true);",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF =\n    DEFAULT\n   .withDelimiter(TAB)\n   .withIgnoreSurroundingSpaces(false);\nc = bin_op.apply(b,a);\n"
    },
    {
        "id": 21,
        "line": 217,
        "precode": "public static final CSVFormat TDF =\n    DEFAULT\n   .withDelimiter(TAB)\n   .withIgnoreSurroundingSpaces(true);",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "public static final CSVFormat TDF =\n    DEFAULT\n   .withDelimiter(TAB)\n   .withIgnoreSurroundingSpaces(false);\nwhile (Math.abs(x-approx*approx) > epsilon) {\n    ;\n}\n"
    },
    {
        "id": 22,
        "line": 395,
        "precode": "Set<String> dupCheck = new HashSet<>();",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "Set<String> dupCheck = new HashSet<>();\nSet<String> dupCheck2 = new HashSet<>();"
    },
    {
        "id": 23,
        "line": 395,
        "precode": "Set<String> dupCheck = new HashSet<>();",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "Set<String> dupCheck = new HashSet<>();\nSet<String> dupCheck3 = new HashSet<>();"
    },
    {
        "id": 24,
        "line": 395,
        "precode": "Set<String> dupCheck = new HashSet<>();",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "Set<String> dupCheck = new HashSet<>();\nSet<String> dupCheck4 = new HashSet<>();"
    },
    {
        "id": 25,
        "line": 395,
        "precode": "Set<String> dupCheck = new HashSet<>();",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "Set<String> dupCheck = new HashSet<>();\nSet<String> dupCheck5 = new HashSet<>();"
    },
    {
        "id": 26,
        "line": 395,
        "precode": "Set<String> dupCheck = new HashSet<>();",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "Set<String> dupCheck = new HashSet<>();\nSet<String> dupCheck6 = new HashSet<>();"
    },
    {
        "id": 27,
        "line": 395,
        "precode": "Set<String> dupCheck = new HashSet<>();",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "Set<String> dupCheck = new HashSet<>();\nSet<String> dupCheck7 = new HashSet<>();"
    },
    {
        "id": 28,
        "line": 395,
        "precode": "Set<String> dupCheck = new HashSet<>();",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "Set<String> dupCheck = new HashSet<>();\nSet<String> dupCheck8 = new HashSet<>();"
    },
    {
        "id": 110,
        "line": 672,
        "precode": "if (quoteChar!= null && delimiter == quoteChar.charValue()) {",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "if (quoteChar!= null && delimiter == quoteChar.charValue() + 1) {"
    },
    {
        "id": 111,
        "line": 672,
        "precode": "if (escape!= null && delimiter == escape.charValue()) {",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "if (escape!= null && delimiter == escape.charValue() + 1) {"
    },
    {
        "id": 112,
        "line": 672,
        "precode": "if (commentStart!= null && delimiter == commentStart.charValue()) {",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "if (commentStart!= null && delimiter == commentStart.charValue() + 1) {"
    },
    {
        "id": 113,
        "line": 672,
        "precode": "if (quoteChar!= null && quoteChar.equals(commentStart)) {",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "if (quoteChar!= null && quoteChar.equals(commentStart) + 1) {"
    },
    {
        "id": 114,
        "line": 672,
        "precode": "if (escape!= null && escape.equals(commentStart)) {",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "if (escape!= null && escape.equals(commentStart) + 1) {"
    },
    {
        "id": 115,
        "line": 672,
        "precode": "if (escape == null && quotePolicy == Quote.NONE) {",
        "filepath": "defects4j_fixed/Csv/Csv_8_fixed/src/main/java/org/apache/commons/csv/CSVFormat.java",
        "aftercode": "if (escape == null && quotePolicy == Quote.NONE + 1) {"
    }
]