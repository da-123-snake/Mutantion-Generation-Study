[
    {
        "id": 71,
        "line": 205,
        "precode": "n = (n & (n - 1));",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": " n = (n ^ (n - 1));"
    },
    {
        "id": 72,
        "line": 205,
        "precode": "  while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": " while (true) { "
    },
    {
        "id": 73,
        "line": 205,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "return true;"
    },
    {
        "id": 74,
        "line": 205,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 75,
        "line": 205,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 76,
        "line": 205,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) { ",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": " while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 77,
        "line": 205,
        "precode": "String data = input.substring(pos, input.length());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "String data = input.substring(pos);",
        "hash": "959979909"
    },
    {
        "id": 78,
        "line": 205,
        "precode": "String data = input.substring(pos, input.length());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "String data = input.substring(pos, input.length() - pos);",
        "hash": "1905354089"
    },
    {
        "id": 79,
        "line": 205,
        "precode": "String data = input.substring(pos, input.length());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "String data = input.substring(pos + 1);",
        "hash": "1769727479"
    },
    {
        "id": 80,
        "line": 205,
        "precode": "String data = input.substring(pos, input.length());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "String data = input.substring(pos - 1);",
        "hash": "1882427504"
    },
    {
        "id": 81,
        "line": 205,
        "precode": "String data = input.substring(pos, input.length());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "String data = input.substring(pos + 2);",
        "hash": "1804274250"
    },
    {
        "id": 82,
        "line": 205,
        "precode": "String data = input.substring(pos, input.length());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "String data = input.substring(pos - 2);",
        "hash": "1921329149"
    },
    {
        "id": 83,
        "line": 205,
        "precode": "String data = input.substring(pos, input.length());",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "String data = input.substring(pos + 3);",
        "hash": "1883909034"
    },
    {
        "id": 170,
        "line": 205,
        "precode": "String input",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "String input = input.replaceAll(\"\\\\r\\\\n?\", \"\\\\n\");"
    },
    {
        "id": 171,
        "line": 205,
        "precode": "int length",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "int length = input.length();"
    },
    {
        "id": 172,
        "line": 205,
        "precode": "int pos = 0",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "int pos = 1;"
    },
    {
        "id": 173,
        "line": 205,
        "precode": "int mark = 0",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "int mark = 1;"
    },
    {
        "id": 174,
        "line": 205,
        "precode": "char current() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "char current() { if (isEmpty()) return EOF; else return input.charAt(pos); }"
    },
    {
        "id": 175,
        "line": 205,
        "precode": "char consume() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "char consume() { char val = isEmpty()? EOF : input.charAt(pos); pos++; return val; }"
    },
    {
        "id": 176,
        "line": 205,
        "precode": "void unconsume() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "void unconsume() { pos--; }"
    },
    {
        "id": 177,
        "line": 205,
        "precode": "void advance() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "void advance() { pos++; }"
    },
    {
        "id": 178,
        "line": 205,
        "precode": "String consumeAsString() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "String consumeAsString() { return input.substring(pos, pos++); }"
    },
    {
        "id": 179,
        "line": 205,
        "precode": "String consumeTo(char c) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "String consumeTo(char c) { int offset = input.indexOf(c, pos); if (offset!= -1) { String consumed = input.substring(pos, offset); pos += consumed.length(); return consumed; } else { return consumeToEnd(); } }"
    },
    {
        "id": 180,
        "line": 205,
        "precode": "String consumeTo(String seq) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "String consumeTo(String seq) { int offset = input.indexOf(seq, pos); if (offset!= -1) { String consumed = input.substring(pos, offset); pos += consumed.length(); return consumed; } else { return consumeToEnd(); } }"
    },
    {
        "id": 181,
        "line": 205,
        "precode": "String consumeToAny(char... seq) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "String consumeToAny(char... seq) { int start = pos; OUTER: while (!isEmpty()) { char c = input.charAt(pos); for (char seek : seq) { if (seek == c) break OUTER; } pos++; } return pos > start? input.substring(start, pos) : \"\"; }"
    },
    {
        "id": 182,
        "line": 205,
        "precode": "String consumeToEnd() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "String consumeToEnd() { String data = input.substring(pos, input.length()); pos = input.length(); return data; }"
    },
    {
        "id": 183,
        "line": 205,
        "precode": "String consumeLetterSequence() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "String consumeLetterSequence() { int start = pos; while (!isEmpty()) { char c = input.charAt(pos); if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) pos++; else break; } return input.substring(start, pos); }"
    },
    {
        "id": 184,
        "line": 205,
        "precode": "String consumeHexSequence() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "String consumeHexSequence() { int start = pos; while (!isEmpty()) { char c = input.charAt(pos); if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f')) pos++; else break; } return input.substring(start, pos); }"
    },
    {
        "id": 185,
        "line": 205,
        "precode": "String consumeDigitSequence() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "String consumeDigitSequence() { int start = pos; while (!isEmpty()) { char c = input.charAt(pos); if (c >= '0' && c <= '9') pos++; else break; } return input.substring(start, pos); }"
    },
    {
        "id": 186,
        "line": 205,
        "precode": "boolean matches(char c) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "boolean matches(char c) { return!isEmpty() && input.charAt(pos) == c; }"
    },
    {
        "id": 187,
        "line": 205,
        "precode": "boolean matches(String seq) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "boolean matches(String seq) { return input.startsWith(seq, pos); }"
    },
    {
        "id": 188,
        "line": 205,
        "precode": "boolean matchesIgnoreCase(String seq) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "boolean matchesIgnoreCase(String seq) { return input.regionMatches(true, pos, seq, 0, seq.length()); }"
    },
    {
        "id": 189,
        "line": 205,
        "precode": "boolean matchesAny(char... seq) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "boolean matchesAny(char... seq) { if (isEmpty()) return false; char c = input.charAt(pos); for (char seek : seq) { if (seek == c) return true; } return false; }"
    },
    {
        "id": 190,
        "line": 205,
        "precode": "boolean matchesLetter() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "boolean matchesLetter() { if (isEmpty()) return false; char c = input.charAt(pos); return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'); }"
    },
    {
        "id": 191,
        "line": 205,
        "precode": "boolean matchesDigit() {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "boolean matchesDigit() { if (isEmpty()) return false; char c = input.charAt(pos); return (c >= '0' && c <= '9'); }"
    },
    {
        "id": 192,
        "line": 205,
        "precode": "boolean matchConsume(String seq) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "boolean matchConsume(String seq) { if (matches(seq)) { pos += seq.length(); return true; } else { return false; } }"
    },
    {
        "id": 193,
        "line": 205,
        "precode": "boolean matchConsumeIgnoreCase(String seq) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "boolean matchConsumeIgnoreCase(String seq) { if (matchesIgnoreCase(seq)) { pos += seq.length(); return true; } else { return false; } }"
    },
    {
        "id": 194,
        "line": 205,
        "precode": "boolean containsIgnoreCase(String seq) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "boolean containsIgnoreCase(String seq) { // used to check presence of </title>, </style>. only finds consistent case. String loScan = seq.toLowerCase(); String hiScan = seq.toUpperCase(); return (input.indexOf(loScan, pos) > -1) || (input.indexOf(hiScan, pos) > -1); }"
    },
    {
        "id": 403,
        "line": 205,
        "precode": "char c = input.charAt(pos);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "char c = input.codePointAt(pos);"
    },
    {
        "id": 404,
        "line": 205,
        "precode": "char c = input.charAt(pos);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "char c = (char) input.codePointBefore(pos);"
    },
    {
        "id": 405,
        "line": 205,
        "precode": "char c = input.charAt(pos);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "char c = (char) input.codePointAfter(pos);"
    },
    {
        "id": 406,
        "line": 205,
        "precode": "char c = input.charAt(pos);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "char c = (char) input.offsetByCodePoints(pos, 1);"
    },
    {
        "id": 407,
        "line": 205,
        "precode": "char c = input.charAt(pos);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "char c = (char) input.offsetByCodePoints(pos, -1);"
    },
    {
        "id": 408,
        "line": 205,
        "precode": "char c = input.charAt(pos);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "char c = (char) input.getChars(pos, pos + 1, buf, 0);"
    },
    {
        "id": 409,
        "line": 205,
        "precode": "char c = input.charAt(pos);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "char c = (char) input.getChars(pos, pos + 1, buf, buf.length - 1);"
    },
    {
        "id": 707,
        "line": 205,
        "precode": "char c = input.charAt(pos);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "char c = input.codePointAt(pos);"
    },
    {
        "id": 708,
        "line": 205,
        "precode": "char c = input.charAt(pos);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "char c = (char) input.codePointBefore(pos);"
    },
    {
        "id": 709,
        "line": 205,
        "precode": "char c = input.charAt(pos);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "char c = (char) input.codePointAfter(pos);"
    },
    {
        "id": 710,
        "line": 205,
        "precode": "char c = input.charAt(pos);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "char c = (char) input.offsetByCodePoints(pos, 1);"
    },
    {
        "id": 711,
        "line": 205,
        "precode": "char c = input.charAt(pos);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "char c = (char) input.offsetByCodePoints(pos, -1);"
    },
    {
        "id": 712,
        "line": 205,
        "precode": "for (char seek : seq) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "for (int i = 0; i < seq.length(); i++) {"
    },
    {
        "id": 713,
        "line": 205,
        "precode": "for (char seek : seq) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "for (int i = seq.length() - 1; i >= 0; i--) {"
    },
    {
        "id": 714,
        "line": 205,
        "precode": "for (char seek : seq) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "for (char seek : seq.toCharArray()) {"
    },
    {
        "id": 715,
        "line": 205,
        "precode": "for (char seek : seq) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_18_fixed/src/main/java/org/jsoup/parser/CharacterReader.java",
        "aftercode": "for (char seek : seq.toLowerCase().toCharArray()) {"
    }
]