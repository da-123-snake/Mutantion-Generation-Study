[
    {
        "id": 1,
        "line": 134,
        "precode": "if (select(\"html\").isEmpty())",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (select(\"body\").isEmpty())"
    },
    {
        "id": 2,
        "line": 134,
        "precode": "if (select(\"html\").isEmpty())",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (select(\"head\").isEmpty())"
    },
    {
        "id": 3,
        "line": 134,
        "precode": "if (select(\"html\").isEmpty())",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (select(\"body\").size() > 1)"
    },
    {
        "id": 4,
        "line": 134,
        "precode": "if (select(\"html\").isEmpty())",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (select(\"body\").size() == 0)"
    },
    {
        "id": 5,
        "line": 134,
        "precode": "if (head() == null)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (body() == null)"
    },
    {
        "id": 6,
        "line": 134,
        "precode": "if (body() == null)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (head() == null)"
    },
    {
        "id": 7,
        "line": 134,
        "precode": "if (element.tagName().equals(\"head\"))",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (element.tagName().equals(\"body\"))"
    },
    {
        "id": 8,
        "line": 134,
        "precode": "if (node instanceof TextNode)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (node instanceof Element)"
    },
    {
        "id": 139,
        "line": 8,
        "precode": "package org.jsoup.nodes;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "package org.jsoup.nodes;\n\nimport org.apache.commons.lang.Validate;\nimport org.jsoup.parser.Tag;\n\nimport java.util.List;\n\n\n"
    },
    {
        "id": 140,
        "line": 8,
        "precode": "import org.apache.commons.lang.Validate;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "package org.jsoup.nodes;\n\nimport org.apache.commons.lang.Validate;\nimport org.jsoup.parser.Tag;\n\nimport java.util.List;\n\n\n"
    },
    {
        "id": 141,
        "line": 8,
        "precode": "import org.jsoup.parser.Tag;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "package org.jsoup.nodes;\n\nimport org.apache.commons.lang.Validate;\nimport org.jsoup.parser.Tag;\n\nimport java.util.List;\n\n\n"
    },
    {
        "id": 142,
        "line": 8,
        "precode": "import java.util.List;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "package org.jsoup.nodes;\n\nimport org.apache.commons.lang.Validate;\nimport org.jsoup.parser.Tag;\n\nimport java.util.List;\n\n\n"
    },
    {
        "id": 143,
        "line": 8,
        "precode": "  while (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "while (true) {\n    if (queue.isEmpty())\n        break;\n    dequeue();\n}"
    },
    {
        "id": 144,
        "line": 8,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "return true;"
    },
    {
        "id": 148,
        "line": 80,
        "precode": "return titleEl!= null? titleEl.text().trim() : \"\";",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "return titleEl!= null? titleEl.text().toLowerCase() : \"\";"
    },
    {
        "id": 149,
        "line": 80,
        "precode": "if (titleEl == null) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (titleEl == null) {"
    },
    {
        "id": 150,
        "line": 80,
        "precode": "titleEl.text(title);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "titleEl.text(title.toUpperCase());"
    },
    {
        "id": 151,
        "line": 80,
        "precode": "return;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "return;"
    },
    {
        "id": 420,
        "line": 8,
        "precode": "package org.jsoup.nodes;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "package org.jsoup.nodes;\n\nimport org.apache.commons.lang.Validate;\nimport org.jsoup.parser.Tag;\n\nimport java.util.List;\nimport java.util.ArrayList;\n"
    },
    {
        "id": 427,
        "line": 134,
        "precode": "if (select(\"html\").isEmpty())",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (select(\"body\").isEmpty())"
    },
    {
        "id": 428,
        "line": 134,
        "precode": "if (head() == null)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (body() == null)"
    },
    {
        "id": 429,
        "line": 134,
        "precode": "if (body() == null)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (body()!= null)"
    },
    {
        "id": 430,
        "line": 134,
        "precode": "if (!queue.isEmpty()) {",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "while (true) {"
    },
    {
        "id": 431,
        "line": 134,
        "precode": "return depth==0;",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "return false;"
    },
    {
        "id": 432,
        "line": 134,
        "precode": "ArrayList r = new ArrayList();r.add(first).addll(subset);to_add(r)",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "to_add.addAll(subset);"
    },
    {
        "id": 433,
        "line": 134,
        "precode": "c = bin_op.apply(b,a);",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "c = bin_op.apply(a,b);"
    },
    {
        "id": 434,
        "line": 134,
        "precode": "while (Math.abs(x-approx*approx) > epsilon) { ",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": " while (Math.abs(x-approx) > epsilon) {"
    },
    {
        "id": 435,
        "line": 145,
        "precode": "Document normalise() {\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "Document mutated() {\n"
    },
    {
        "id": 436,
        "line": 145,
        "precode": "if (select(\"html\").isEmpty())\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (selected(\"html\").isEmpty())\n"
    },
    {
        "id": 437,
        "line": 145,
        "precode": "appendElement(\"html\");\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "addElement(\"html\");\n"
    },
    {
        "id": 438,
        "line": 145,
        "precode": "if (head() == null)\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (getHead() == null)\n"
    },
    {
        "id": 439,
        "line": 145,
        "precode": "select(\"html\").first().prependElement(\"head\");\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "select(\"html\").first().prepend(\"<head></head>\");\n"
    },
    {
        "id": 440,
        "line": 145,
        "precode": "if (body() == null)\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (getBody() == null)\n"
    },
    {
        "id": 441,
        "line": 145,
        "precode": "select(\"html\").first().appendElement(\"body\");\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "select(\"html\").first().append(\"<body></body>\");\n"
    },
    {
        "id": 442,
        "line": 145,
        "precode": "pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care\n"
    },
    {
        "id": 444,
        "line": 145,
        "precode": "normalise(head());\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "normalize(getHeader());\n"
    },
    {
        "id": 445,
        "line": 145,
        "precode": "normalise(select(\"html\").first());\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "normalize(select(\"html\").first());\n"
    },
    {
        "id": 446,
        "line": 145,
        "precode": "normalise(this);\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "normalize(this);\n"
    },
    {
        "id": 447,
        "line": 145,
        "precode": "if (element.childNodes.size() == 1 && element.childNodes.get(0) instanceof TextNode)\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (element.childNodes.size() == 1 && element.childNodes.get(0) instanceof Text)\n"
    },
    {
        "id": 448,
        "line": 145,
        "precode": "TextNode tn = (TextNode) element.childNodes.get(0);\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "Text tn = (Text) element.childNodes.get(0);\n"
    },
    {
        "id": 449,
        "line": 145,
        "precode": "if (!tn.isBlank())\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (!tn.isBlank())\n"
    },
    {
        "id": 450,
        "line": 145,
        "precode": "toMove.add(tn);\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "toMove.add(tn);\n"
    },
    {
        "id": 451,
        "line": 145,
        "precode": "if (node instanceof TextNode)\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (node instanceof Text)\n"
    },
    {
        "id": 452,
        "line": 145,
        "precode": "TextNode tn = (TextNode) node;\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "Text tn = (Text) node;\n"
    },
    {
        "id": 453,
        "line": 145,
        "precode": "if (!tn.isBlank())\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (!tn.isBlank())\n"
    },
    {
        "id": 454,
        "line": 145,
        "precode": "toMove.add(tn);\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "toMove.add(tn);\n"
    },
    {
        "id": 455,
        "line": 145,
        "precode": "return super.html(); // no outer wrapper tag\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "return mutated().html(); // no outer wrapper tag\n"
    },
    {
        "id": 456,
        "line": 145,
        "precode": "Set<String> attributes = element.attributes().keySet();\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "Set<String> attributes = element.attributes().keySet();\n"
    },
    {
        "id": 457,
        "line": 145,
        "precode": "for (String attribute: attributes)\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "for (String attribute : attributes)\n"
    },
    {
        "id": 458,
        "line": 145,
        "precode": "String value = element.attributes().get(attribute);\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "String value = element.attributes().get(attribute);\n"
    },
    {
        "id": 459,
        "line": 145,
        "precode": "if (value!= null)\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "if (value!= null)\n"
    },
    {
        "id": 460,
        "line": 145,
        "precode": "sb.append(attribute).append(\"=\").append(quote(value, true)).append(\" \");\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "sb.append(attribute).append(\"=\").append(quote(value, true)).append(\" \");\n"
    },
    {
        "id": 461,
        "line": 145,
        "precode": "return sb.toString();\n",
        "filepath": "defects4j_fixed/Jsoup/Jsoup_1_fixed/src/main/java/org/jsoup/nodes/Document.java",
        "aftercode": "return mutated().toString();\n"
    }
]