[
    {
        "id": 6,
        "line": 6,
        "precode": "if(sc.nextInt() + sc.nextInt() == 0) System.out.print(1);",
        "aftercode": "if(sc.nextInt() - sc.nextInt() == 0) System.out.print(1);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java"
    },
    {
        "id": 7,
        "line": 6,
        "precode": "if(sc.nextInt() + sc.nextInt() == 0) System.out.print(1);",
        "aftercode": "if(sc.nextInt() * sc.nextInt() == 0) System.out.print(1);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java"
    },
    {
        "id": 8,
        "line": 6,
        "precode": "if(sc.nextInt() + sc.nextInt() == 0) System.out.print(1);",
        "aftercode": "if(sc.nextInt() / sc.nextInt() == 0) System.out.print(1);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java"
    },
    {
        "id": 9,
        "line": 5,
        "precode": "Scanner sc = new Scanner(System.in);",
        "aftercode": "Scanner input = new Scanner(System.in);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java"
    },
    {
        "id": 10,
        "line": 5,
        "precode": "Scanner sc = new Scanner(System.in);",
        "aftercode": "Scanner scanner = new Scanner(System.in);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java"
    },
    {
        "id": 11,
        "line": 14,
        "precode": "                if(a[i][j]==1){",
        "aftercode": "                if(a[i][j]==0){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java"
    },
    {
        "id": 12,
        "line": 14,
        "precode": "                if(a[i][j]==1){",
        "aftercode": "                if(a[i][j]==2){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java"
    },
    {
        "id": 13,
        "line": 17,
        "precode": "                if(j==(n-1)){",
        "aftercode": "                if(j==(n-2)){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java"
    },
    {
        "id": 14,
        "line": 17,
        "precode": "                if(j==(n-1)){",
        "aftercode": "                if(j==(n-3)){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java"
    },
    {
        "id": 15,
        "line": 14,
        "precode": "                if(a[i][j]==1){",
        "aftercode": "                if(a[i][j]==-1){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java"
    },
    {
        "id": 16,
        "line": 9,
        "precode": "        int k = scanner.nextInt();",
        "aftercode": "        int k = 0;",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java"
    },
    {
        "id": 17,
        "line": 10,
        "precode": "        if(k == 1){",
        "aftercode": "        if(k > 0){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java"
    },
    {
        "id": 18,
        "line": 11,
        "precode": "          System.out.print((j+1) + \" \");",
        "aftercode": "          System.out.println((j+1));",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java"
    },
    {
        "id": 19,
        "line": 11,
        "precode": "          System.out.print((j+1) + \" \");",
        "aftercode": "          System.out.print((j+1) + \",\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java"
    },
    {
        "id": 20,
        "line": 11,
        "precode": "          System.out.print((j+1) + \" \");",
        "aftercode": "          System.out.print(\"Index: \" + (j+1) + \" \");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java"
    },
    {
        "id": 21,
        "line": 12,
        "precode": "int r = sc.nextInt();",
        "aftercode": "int r = sc.nextInt() + 1;",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java"
    },
    {
        "id": 22,
        "line": 13,
        "precode": "if (r==1){",
        "aftercode": "if (r!=1){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java"
    },
    {
        "id": 23,
        "line": 13,
        "precode": "if (r==1){",
        "aftercode": "if (r==0){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java"
    },
    {
        "id": 24,
        "line": 14,
        "precode": "System.out.print(j+\" \");",
        "aftercode": "System.out.println(j+\" \");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java"
    },
    {
        "id": 25,
        "line": 15,
        "precode": "f=true;",
        "aftercode": "f=false;",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java"
    },
    {
        "id": 26,
        "line": 10,
        "precode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java",
        "aftercode": "outLine.append((sc.nextInt() == 0) ? j + \" \" : \"\");"
    },
    {
        "id": 27,
        "line": 10,
        "precode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java",
        "aftercode": "outLine.append((sc.nextInt() == 2) ? j + \" \" : \"\");"
    },
    {
        "id": 28,
        "line": 10,
        "precode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java",
        "aftercode": "outLine.append((sc.nextInt() == 1) ? j * 2 + \" \" : \"\");"
    },
    {
        "id": 29,
        "line": 10,
        "precode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java",
        "aftercode": "outLine.append((sc.nextInt() == 1) ? j + \" 1\" : \"\");"
    },
    {
        "id": 30,
        "line": 10,
        "precode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java",
        "aftercode": "outLine.append((sc.nextInt() == 1) ? j + \" - \" : \"\");"
    },
    {
        "id": 36,
        "line": 6,
        "precode": "long N = sc.nextLong();",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java",
        "aftercode": "long N = sc.nextLong() + 1;"
    },
    {
        "id": 37,
        "line": 6,
        "precode": "long N = sc.nextLong();",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java",
        "aftercode": "long N = sc.nextLong() - 1;"
    },
    {
        "id": 38,
        "line": 7,
        "precode": "List<Long> list = new ArrayList<>();",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java",
        "aftercode": "List<Long> list = new ArrayList<>(2);"
    },
    {
        "id": 39,
        "line": 8,
        "precode": "for (long i  = 0; i * i * i <= N; i++) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java",
        "aftercode": "for (long i  = 0; i * i * i < N; i++) {"
    },
    {
        "id": 40,
        "line": 8,
        "precode": "for (long i  = 0; i * i * i <= N; i++) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java",
        "aftercode": "for (long i  = 1; i * i * i <= N; i++) {"
    },
    {
        "id": 41,
        "line": 21,
        "precode": "if (C.get(i) > N) {",
        "aftercode": "if (C.get(i) >= N) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java"
    },
    {
        "id": 42,
        "line": 25,
        "precode": "String S = Long.toString(C.get(i));",
        "aftercode": "String S = Long.toString(N);",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java"
    },
    {
        "id": 43,
        "line": 25,
        "precode": "String S = Long.toString(C.get(i));",
        "aftercode": "String S = Long.toString(i);",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java"
    },
    {
        "id": 44,
        "line": 25,
        "precode": "String S = Long.toString(C.get(i));",
        "aftercode": "String S = Long.toString(N*i);",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java"
    },
    {
        "id": 45,
        "line": 25,
        "precode": "String S = Long.toString(C.get(i));",
        "aftercode": "String S = Long.toString(C.get(i)*C.get(i));",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java"
    },
    {
        "id": 46,
        "line": 8,
        "precode": "long n = Long.parseLong(sc.next());",
        "aftercode": "long n = Long.parseLong(sc.nextLine());",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java"
    },
    {
        "id": 47,
        "line": 9,
        "precode": "long cube = 0L;",
        "aftercode": "Long cube = 0L;",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java"
    },
    {
        "id": 48,
        "line": 10,
        "precode": "for (long i = 1L; i * i * i <= n; i++) {",
        "aftercode": "for (long i = 0L; i * i * i <= n; i++) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java"
    },
    {
        "id": 49,
        "line": 11,
        "precode": "String s = i * i * i + \"\";",
        "aftercode": "String s = (i * i * i) + \";\";",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java"
    },
    {
        "id": 50,
        "line": 12,
        "precode": "if (check(s) == true) {",
        "aftercode": "if (check(s)) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java"
    },
    {
        "id": 51,
        "line": 24,
        "precode": "System.out.println(\"Yes\");",
        "aftercode": "System.out.println(\"No\");",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java"
    },
    {
        "id": 52,
        "line": 25,
        "precode": "StringBuilder sb = new StringBuilder();",
        "aftercode": "StringBuilder sb = new StringBuilder(\"7 7 7 \");",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java"
    },
    {
        "id": 53,
        "line": 64,
        "precode": "sb.append(\"7 7 7 \").append(a2).append(' ');",
        "aftercode": "sb.append(\"7 7 7 \").append(a2).append(' ').append(b2).append(' ');",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java"
    },
    {
        "id": 54,
        "line": 64,
        "precode": "sb.append(\"7 7 7 \").append(a2).append(' ');",
        "aftercode": "sb.append(a2).append(' ');",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java"
    },
    {
        "id": 55,
        "line": 64,
        "precode": "sb.append(\"7 7 7 \").append(a2).append(' ');",
        "aftercode": "sb.append(\"7 7 7 \").append(b2).append(' ');",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java"
    },
    {
        "id": 56,
        "line": 44,
        "precode": "int dz=Math.min(c+7,7) - Math.max(c,0);",
        "aftercode": "int dz=Math.min(c-7,7) - Math.max(c,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java"
    },
    {
        "id": 57,
        "line": 45,
        "precode": "return Math.max(dx*dy*dz,0);",
        "aftercode": "return Math.min(dx*dy*dz,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java"
    },
    {
        "id": 58,
        "line": 44,
        "precode": "int dz=Math.min(c+7,7) - Math.max(c,0);",
        "aftercode": "int dz=Math.max(c+7,7) - Math.max(c,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java"
    },
    {
        "id": 59,
        "line": 45,
        "precode": "return Math.max(dx*dy*dz,0);",
        "aftercode": "return Math.min(dx+dy-dz,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java"
    },
    {
        "id": 60,
        "line": 45,
        "precode": "return Math.max(dx*dy*dz,0);",
        "aftercode": "return Math.min(dx/dy/dz,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java"
    },
    {
        "id": 61,
        "line": 6,
        "precode": "            } else if (l.max > r.max) {",
        "aftercode": "            } else if (l.max >= r.max) {",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java"
    },
    {
        "id": 62,
        "line": 114,
        "precode": "            t.max = l.max;",
        "aftercode": "            t.max = r.max;",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java"
    },
    {
        "id": 63,
        "line": 127,
        "precode": "            t.max = r.max;",
        "aftercode": "            t.max = l.max;",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java"
    },
    {
        "id": 64,
        "line": 120,
        "precode": "            t.sec = l.sec;",
        "aftercode": "            t.sec = r.sec;",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java"
    },
    {
        "id": 65,
        "line": 135,
        "precode": "        }else {",
        "aftercode": "        } else if (l.max == r.sec) {",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java"
    },
    {
        "id": 71,
        "line": 113,
        "precode": "            if (value1[0] == value2[0]) {",
        "aftercode": "            if (value1[0] != value2[0]) {",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java"
    },
    {
        "id": 72,
        "line": 140,
        "precode": "                if (firsts[idx] == value) {",
        "aftercode": "                if (seconds[idx] == value) {",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java"
    },
    {
        "id": 73,
        "line": 151,
        "precode": "        return getCount(value, idx * 2 + 1, min, (min + max) / 2, left, right) + ",
        "aftercode": "        return getCount(value, idx * 2 + 2, (min + max) / 2, max, left, right) + ",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java"
    },
    {
        "id": 74,
        "line": 47,
        "precode": "            firstCount[size - 1 + idx] = 1;",
        "aftercode": "            firstCount[size - 1 + idx] = 0;",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java"
    },
    {
        "id": 75,
        "line": 141,
        "precode": "                    return firstCount[idx];",
        "aftercode": "                    return secondCount[idx];",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java"
    },
    {
        "id": 81,
        "line": 6,
        "precode": "System.out.println(String.join(\"\",sc.next().split(\"\\\\|.*\\\\|\")));",
        "aftercode": "System.out.print(String.join(\"\",sc.next().split(\"\\\\|.*\\\\|\")));",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java"
    },
    {
        "id": 82,
        "line": 5,
        "precode": "Scanner sc = new Scanner(System.in);",
        "aftercode": "Scanner scan = new Scanner(System.in);",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java"
    },
    {
        "id": 83,
        "line": 6,
        "precode": "System.out.println(String.join(\"\",sc.next().split(\"\\\\|.*\\\\|\")));",
        "aftercode": "System.out.println(String.join(\"*\", sc.next().split(\"\\\\|.*\\\\|\")));",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java"
    },
    {
        "id": 84,
        "line": 5,
        "precode": "Scanner sc = new Scanner(System.in);",
        "aftercode": "Scanner sc = new Scanner(System.in); sc.useDelimiter(\"\\\\|\");",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java"
    },
    {
        "id": 85,
        "line": 6,
        "precode": "System.out.println(String.join(\"\",sc.next().split(\"\\\\|.*\\\\|\")));",
        "aftercode": "System.out.println(sc.next().replaceAll(\"\\\\|.*\\\\|\", \"\"));",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java"
    },
    {
        "id": 86,
        "line": 29,
        "precode": "if (pt1!=0) {",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "if (pt1<5) {"
    },
    {
        "id": 87,
        "line": 30,
        "precode": "ans=str.substring(0, pt1);",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "ans=str.substring(0, pt2);"
    },
    {
        "id": 88,
        "line": 32,
        "precode": "if (pt2!=pt3-1) {",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "if (pt2<pt3) {"
    },
    {
        "id": 89,
        "line": 33,
        "precode": "ans=ans+str.substring(pt2+1, pt3);",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "ans=ans.substring(pt2, pt3);"
    },
    {
        "id": 90,
        "line": 35,
        "precode": "System.out.println(ans);",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "System.out.println(ans.length());"
    },
    {
        "id": 91,
        "line": 21,
        "precode": "for (int i = inputStrings.size() - 1; i >= 0 ; i--)",
        "aftercode": "for (int i = inputStrings.size() - 2; i >= 0 ; i--)",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java"
    },
    {
        "id": 92,
        "line": 22,
        "precode": "System.out.println(inputStrings.get(i))",
        "aftercode": "System.out.print(inputStrings.get(i))",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java"
    },
    {
        "id": 93,
        "line": 22,
        "precode": "System.out.println(inputStrings.get(i))",
        "aftercode": "System.out.print(inputStrings.get(i) + \" \")",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java"
    },
    {
        "id": 94,
        "line": 22,
        "precode": "System.out.println(inputStrings.get(i))",
        "aftercode": "System.out.println(\"Index: \" + i + \" - Value: \" + inputStrings.get(i))",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java"
    },
    {
        "id": 95,
        "line": 22,
        "precode": "System.out.println(inputStrings.get(i))",
        "aftercode": "System.out.print(inputStrings.get(i) + \" \")",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java"
    },
    {
        "id": 96,
        "line": 67,
        "precode": "if(hs.get(string)==inf) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "if(hs.get(string)==null) {"
    },
    {
        "id": 97,
        "line": 69,
        "precode": "}else out.print(hs.get(string));",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "}else out.println(hs.get(string));"
    },
    {
        "id": 98,
        "line": 67,
        "precode": "if(hs.get(string)==inf) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "if(hs.get(string)==-1) {"
    },
    {
        "id": 99,
        "line": 69,
        "precode": "}else out.print(hs.get(string));",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "}else out.println(\"Value: \" + hs.get(string));"
    },
    {
        "id": 100,
        "line": 69,
        "precode": "}else out.print(hs.get(string));",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "}else out.print(hs.get(string) + \" \");"
    },
    {
        "id": 101,
        "line": 25,
        "precode": "            if(m - j >= length && check(length,j,str)){",
        "aftercode": "            if((m - j) <= length && check(length,j,str)){",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java"
    },
    {
        "id": 102,
        "line": 16,
        "precode": "            String[] cur = arr[i];",
        "aftercode": "            String[] cur = arr[i+1];",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java"
    },
    {
        "id": 103,
        "line": 19,
        "precode": "            for (int k = 1; k < len; k++) {",
        "aftercode": "            for (int k = 0; k < len; k++) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java"
    },
    {
        "id": 104,
        "line": 22,
        "precode": "                int length = str.length();",
        "aftercode": "                int length = str.length() + 1;",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java"
    },
    {
        "id": 105,
        "line": 23,
        "precode": "                if(m - j >= length && check(length,j,str)){",
        "aftercode": "                if(m - j < length && check(length,j,str)){",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java"
    },
    {
        "id": 106,
        "line": 1,
        "precode": "import java.util.Arrays;",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "import java.util.ArrayList;"
    },
    {
        "id": 107,
        "line": 2,
        "precode": "import java.util.Scanner;",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "import java.util.LinkedList;"
    },
    {
        "id": 108,
        "line": 3,
        "precode": "public class MutantGenerator {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "public class CodeMutator {"
    },
    {
        "id": 109,
        "line": 4,
        "precode": "    public static void main(String[] args) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "    public void startMutation(String[] args) {"
    },
    {
        "id": 110,
        "line": 5,
        "precode": "        System.out.println(\"Generating mutants...\");",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "        System.out.println(\"Mutants generation in progress...\");"
    },
    {
        "id": 111,
        "line": 6,
        "precode": "                while (t-->0) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "                while (t-- > 0) {"
    },
    {
        "id": 112,
        "line": 23,
        "precode": "                String th = sc.next();",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "                String th = sc.nextLine();"
    },
    {
        "id": 113,
        "line": 24,
        "precode": "                for (int j = 0; j <= len; j++) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "                for (int j = 0; j < len; j++) {"
    },
    {
        "id": 114,
        "line": 9,
        "precode": "                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j]);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j]);"
    },
    {
        "id": 115,
        "line": 10,
        "precode": "                    if (dp[i-1][j] == Integer.MAX_VALUE) continue;",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "                    if (dp[i-1][j] != Integer.MAX_VALUE) continue;"
    },
    {
        "id": 116,
        "line": 32,
        "precode": "cnt-- != 0",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "cnt-- > 0"
    },
    {
        "id": 117,
        "line": 31,
        "precode": "int cnt = readInt();",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "int cnt = 0;"
    },
    {
        "id": 118,
        "line": 33,
        "precode": "String s = readString();",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "String s = str;"
    },
    {
        "id": 119,
        "line": 34,
        "precode": "for (int j = 0; j <= m; j++) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "for (int j = m; j >= 0; j--) {"
    },
    {
        "id": 120,
        "line": 35,
        "precode": "f[i][j] = Math.min(f[i][j], f[i - 1][j]);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "f[i][j] = Math.max(f[i][j], f[i - 1][j]);"
    },
    {
        "id": 131,
        "line": 1,
        "precode": "import java.util.HashMap;",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java",
        "aftercode": "import java.util.Map;"
    },
    {
        "id": 132,
        "line": 2,
        "precode": "import java.util.Scanner;",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java",
        "aftercode": "import java.util.InputScanner;"
    },
    {
        "id": 133,
        "line": 1,
        "precode": "import java.util.HashMap;",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java",
        "aftercode": "import java.util.LinkedHashMap;"
    },
    {
        "id": 134,
        "line": 2,
        "precode": "import java.util.Scanner;",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java",
        "aftercode": "import java.util.ConsoleScanner;"
    },
    {
        "id": 135,
        "line": 1,
        "precode": "import java.util.HashMap;",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java",
        "aftercode": "import java.util.HashSet;"
    },
    {
        "id": 136,
        "line": 178,
        "precode": "if (x_front != -1) back.put(x_front, x_back);",
        "aftercode": "if (x_front != -1) back.put(x_back, x_front);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java"
    },
    {
        "id": 137,
        "line": 179,
        "precode": "if (x_back != -1) front.put(x_back, x_front);",
        "aftercode": "if (x_back != -1) front.put(x_front, x_back);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java"
    },
    {
        "id": 138,
        "line": 180,
        "precode": "front.remove(x);",
        "aftercode": "back.remove(x);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java"
    },
    {
        "id": 139,
        "line": 181,
        "precode": "back.remove(x);",
        "aftercode": "front.remove(x);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java"
    },
    {
        "id": 140,
        "line": 194,
        "precode": "",
        "aftercode": "",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java"
    },
    {
        "id": 146,
        "line": 79,
        "precode": "long nx = x + ceil(Math.max(dist[k][l] - y, 0), p[i][j]);",
        "aftercode": "long nx = x - ceil(Math.max(dist[k][l] - y, 0), p[i][j]);",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java"
    },
    {
        "id": 147,
        "line": 80,
        "precode": "long ny = y +  (ceil(Math.max(dist[k][l] - y, 0), p[i][j]) * p[i][j]) - dist[k][l];",
        "aftercode": "long ny = y +  (ceil(Math.max(dist[k][l] - y, 0), 0) * p[i][j]) - dist[k][l];",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java"
    },
    {
        "id": 148,
        "line": 81,
        "precode": " if (nx < dp[k][l].x || (nx == dp[k][l].x && ny > dp[k][l].y)) {",
        "aftercode": " if (ny < dp[k][l].x || (nx == dp[k][l].x && ny > dp[k][l].y)) {",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java"
    },
    {
        "id": 149,
        "line": 81,
        "precode": " if (nx < dp[k][l].x || (nx == dp[k][l].x && ny > dp[k][l].y)) {",
        "aftercode": " if (nx > dp[k][l].x || (nx == dp[k][l].x && ny > dp[k][l].y)) {",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java"
    },
    {
        "id": 150,
        "line": 81,
        "precode": " if (nx < dp[k][l].x || (nx == dp[k][l].x && ny > dp[k][l].y)) {",
        "aftercode": " if (nx < dp[k][l].y || (nx == dp[k][l].x && ny > dp[k][l].y)) {",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java"
    },
    {
        "id": 151,
        "line": 31,
        "precode": "            pw.println(flag ? \"Yes\" : \"No\");",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java",
        "aftercode": "            pw.println(flag ? \"No\" : \"Yes\");"
    },
    {
        "id": 152,
        "line": 18,
        "precode": "                    pw.println(\"No\");",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java",
        "aftercode": "                    pw.println(\"Yes\");"
    },
    {
        "id": 153,
        "line": 26,
        "precode": "                    if (c[i] != '=') {",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java",
        "aftercode": "                    if (c[i] == '=') {"
    },
    {
        "id": 154,
        "line": 26,
        "precode": "                    if (c[i] != '=') {",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java",
        "aftercode": "                    if (c[i] == '<') {"
    },
    {
        "id": 155,
        "line": 33,
        "precode": "            pw.close();",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java",
        "aftercode": "            pw.flush();"
    },
    {
        "id": 156,
        "line": 7,
        "precode": "long input = scan.nextLong();",
        "aftercode": "int input = (int) scan.nextLong();",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java"
    },
    {
        "id": 157,
        "line": 8,
        "precode": "if(input + 9 < 0 && (input + 9) % 10 != 0){",
        "aftercode": "if(input + 9 >= 0 && (input + 9) % 10 != 0){",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java"
    },
    {
        "id": 158,
        "line": 9,
        "precode": "long result = (long)((input + 9) / 10) - 1;",
        "aftercode": "long result = (long)((input + 10) / 10) - 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java"
    },
    {
        "id": 159,
        "line": 12,
        "precode": "long result = (long)((input + 9) / 10);",
        "aftercode": "long result = (long)((input + 8) / 10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java"
    },
    {
        "id": 160,
        "line": 15,
        "precode": "System.out.println(result);",
        "aftercode": "// System.out.println(result);",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java"
    },
    {
        "id": 161,
        "line": 6,
        "precode": "Scanner sc = new Scanner(System.in);",
        "aftercode": "Scanner sc = new Scanner(System.in); // Mutant: Commented out",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java"
    },
    {
        "id": 162,
        "line": 7,
        "precode": "long X = sc.nextLong();",
        "aftercode": "long X = sc.nextLong(); // Mutant: Commented out",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java"
    },
    {
        "id": 163,
        "line": 8,
        "precode": "if(X > 0 && X % 10 != 0) {",
        "aftercode": "if(X > 0 && X % 10 != 0) { // Mutant: Added a comment",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java"
    },
    {
        "id": 164,
        "line": 9,
        "precode": "System.out.print(X / 10 + 1);",
        "aftercode": "System.out.print(X / 10 - 1); // Mutant: Changed +1 to -1",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java"
    },
    {
        "id": 165,
        "line": 10,
        "precode": "} else {",
        "aftercode": "} else { // Mutant: Added a comment",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java"
    },
    {
        "id": 166,
        "line": 5,
        "precode": "long x = sc.nextLong();",
        "aftercode": "long x = sc.nextInt();",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java"
    },
    {
        "id": 167,
        "line": 6,
        "precode": "if(x%10==0 || x<0)System.out.println(x/10);",
        "aftercode": "if(x%10==0 && x<0)System.out.println(x/10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java"
    },
    {
        "id": 168,
        "line": 6,
        "precode": "if(x%10==0 || x<0)System.out.println(x/10);",
        "aftercode": "if(x%10==1 || x<0)System.out.println(x/10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java"
    },
    {
        "id": 169,
        "line": 7,
        "precode": "else System.out.println(x/10+1);",
        "aftercode": "else System.out.println(x/10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java"
    },
    {
        "id": 170,
        "line": 7,
        "precode": "else System.out.println(x/10+1);",
        "aftercode": "else System.out.println(x/10-1);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java"
    },
    {
        "id": 171,
        "line": 9,
        "precode": "BigDecimal divisor = new BigDecimal(\"10.0\");",
        "aftercode": "BigDecimal divisor = new BigDecimal(10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java"
    },
    {
        "id": 172,
        "line": 10,
        "precode": "BigDecimal div = x.divide(divisor);",
        "aftercode": "BigDecimal div = x.multiply(divisor);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java"
    },
    {
        "id": 173,
        "line": 11,
        "precode": "System.out.println( div.setScale(0, RoundingMode.CEILING).toPlainString());",
        "aftercode": "System.out.println( div.setScale(2, RoundingMode.HALF_UP).toPlainString());",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java"
    },
    {
        "id": 174,
        "line": 12,
        "precode": "input.close();",
        "aftercode": "input.close(); // Closing input scanner",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java"
    },
    {
        "id": 175,
        "line": 5,
        "precode": "public static void main(String[] args) {",
        "aftercode": "public static void run(String[] args) {",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java"
    },
    {
        "id": 176,
        "line": 7,
        "precode": "sc.close();",
        "aftercode": "sc.close();",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java"
    },
    {
        "id": 177,
        "line": 8,
        "precode": "long y = 0;",
        "aftercode": "long y = 0;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java"
    },
    {
        "id": 178,
        "line": 9,
        "precode": "if (x % 10 == 0 || x < 0) {",
        "aftercode": "if (x % 10 != 0 || x < 0) {",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java"
    },
    {
        "id": 179,
        "line": 9,
        "precode": "if (x % 10 == 0 || x < 0) {",
        "aftercode": "if (x % 5 == 0 || x < 0) {",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java"
    },
    {
        "id": 180,
        "line": 9,
        "precode": "if (x % 10 == 0 || x < 0) {",
        "aftercode": "if (x % 10 == 0 && x < 0) {",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java"
    },
    {
        "id": 181,
        "line": 12,
        "precode": "result = ((X-1)/ 10) + 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java",
        "aftercode": "result = (X / 10) + 1;"
    },
    {
        "id": 182,
        "line": 12,
        "precode": "result = ((X-1)/ 10) + 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java",
        "aftercode": "result = ((X + 1) / 10) + 1;"
    },
    {
        "id": 183,
        "line": 12,
        "precode": "result = ((X-1)/ 10) + 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java",
        "aftercode": "result = ((2*X-1)/ 10) + 1;"
    },
    {
        "id": 184,
        "line": 14,
        "precode": "result = (X/ 10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java",
        "aftercode": "result = (X * 10);"
    },
    {
        "id": 185,
        "line": 14,
        "precode": "result = (X/ 10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java",
        "aftercode": "result = (X+ 10);"
    },
    {
        "id": 186,
        "line": 26,
        "precode": "//System.out.print(i);",
        "aftercode": "//System.out.println(i);",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java"
    },
    {
        "id": 187,
        "line": 27,
        "precode": "//System.out.print(A.get(i));",
        "aftercode": "//System.out.println(A.get(i));",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java"
    },
    {
        "id": 188,
        "line": 28,
        "precode": "num-=((long)A.get(i)*(A.get(i)-1)/2);",
        "aftercode": "num+=((long)A.get(i)*(A.get(i)-1)/2);",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java"
    },
    {
        "id": 189,
        "line": 29,
        "precode": "if(A.get(i)>1) {",
        "aftercode": "if(A.get(i)>=1) {",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java"
    },
    {
        "id": 190,
        "line": 29,
        "precode": "if(A.get(i)>1) {",
        "aftercode": "if(A.get(i)==1) {",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java"
    },
    {
        "id": 201,
        "line": 138,
        "precode": "                if(g[i][j]) {",
        "aftercode": "                if(!g[i][j]) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java"
    },
    {
        "id": 202,
        "line": 138,
        "precode": "                if(g[i][j]) {",
        "aftercode": "                if(g[i][j]==false) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java"
    },
    {
        "id": 203,
        "line": 138,
        "precode": "                if(g[i][j]) {",
        "aftercode": "                if(g[j][i]) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java"
    },
    {
        "id": 204,
        "line": 138,
        "precode": "                if(g[i][j]) {",
        "aftercode": "                if(g[j][i]==false) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java"
    },
    {
        "id": 205,
        "line": 144,
        "precode": "            for(int j = c; j < c + y; j++) {",
        "aftercode": "            for(int j = c + y; j < c; j++) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java"
    },
    {
        "id": 206,
        "line": 162,
        "precode": "            hit[i] = true;",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java",
        "aftercode": "            hit[ds.root(i)] = true;"
    },
    {
        "id": 207,
        "line": 162,
        "precode": "            hit[i] = true;",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java",
        "aftercode": "            hit[ds.root(i)] = false;"
    },
    {
        "id": 208,
        "line": 162,
        "precode": "            hit[i] = true;",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java",
        "aftercode": "            hit[i] = false;"
    },
    {
        "id": 209,
        "line": 162,
        "precode": "            hit[i] = true;",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java",
        "aftercode": "            hit[i] = !hit[i];"
    },
    {
        "id": 210,
        "line": 162,
        "precode": "            hit[i] = true;",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java",
        "aftercode": "            hit[i] = hit[ds.root(i)]"
    },
    {
        "id": 221,
        "line": 92,
        "precode": "                cb++;",
        "aftercode": "                cb--;",
        "filepath": "java2024-0304\\abc346_b\\Java\\52271816\\correctVersion.java"
    },
    {
        "id": 222,
        "line": 93,
        "precode": "           if (s.charAt(i+b+w) == 'w') {",
        "aftercode": "            if (s.charAt(i+b+w) == 'b') {",
        "filepath": "java2024-0304\\abc346_b\\Java\\52271816\\correctVersion.java"
    },
    {
        "id": 223,
        "line": 93,
        "precode": "           if (s.charAt(i+b+w) == 'w') {",
        "aftercode": "            if (s.charAt(i+b+w) == 'b') {",
        "filepath": "java2024-0304\\abc346_b\\Java\\52271816\\correctVersion.java"
    },
    {
        "id": 224,
        "line": 93,
        "precode": "           if (s.charAt(i+b+w) == 'w') {",
        "aftercode": "            if (s.charAt(i+b+w) == 'b') {",
        "filepath": "java2024-0304\\abc346_b\\Java\\52271816\\correctVersion.java"
    },
    {
        "id": 225,
        "line": 94,
        "precode": "               cw++;",
        "aftercode": "               cw--;",
        "filepath": "java2024-0304\\abc346_b\\Java\\52271816\\correctVersion.java"
    },
    {
        "id": 226,
        "line": 10,
        "precode": "int sl = s.length();",
        "aftercode": "int sl = 2*s.length();",
        "filepath": "java2024-0304\\abc346_b\\Java\\52943371\\correctVersion.java"
    },
    {
        "id": 227,
        "line": 11,
        "precode": "for(int i = 0; i < sl; i++){",
        "aftercode": "for(int i = 0; i < sl-1; i++){",
        "filepath": "java2024-0304\\abc346_b\\Java\\52943371\\correctVersion.java"
    },
    {
        "id": 228,
        "line": 14,
        "precode": "for(int k = i; k < j+1; k++){",
        "aftercode": "for(int k = i+1; k < j+1; k++){",
        "filepath": "java2024-0304\\abc346_b\\Java\\52943371\\correctVersion.java"
    },
    {
        "id": 229,
        "line": 15,
        "precode": "if(s.charAt(k) == 'w') wnum++;",
        "aftercode": "if(s.charAt(k) == 'w') bnum++;",
        "filepath": "java2024-0304\\abc346_b\\Java\\52943371\\correctVersion.java"
    },
    {
        "id": 230,
        "line": 16,
        "precode": "else bnum++;",
        "aftercode": "else wnum++;",
        "filepath": "java2024-0304\\abc346_b\\Java\\52943371\\correctVersion.java"
    },
    {
        "id": 231,
        "line": 20,
        "precode": "      int odd = b % 5;",
        "aftercode": "      int odd = b % 4;",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java"
    },
    {
        "id": 232,
        "line": 21,
        "precode": "      int base = 7 * ( (b - 1) / 5);",
        "aftercode": "      int base = 6 * ( (b - 1) / 5);",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java"
    },
    {
        "id": 233,
        "line": 22,
        "precode": "      switch (odd) {",
        "aftercode": "      switch (base) {",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java"
    },
    {
        "id": 234,
        "line": 23,
        "precode": "        case 0:",
        "aftercode": "        case 1:",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java"
    },
    {
        "id": 235,
        "line": 24,
        "precode": "            if ( 5 + base <= w && w <= 9 + base )",
        "aftercode": "            if ( 6 + base <= w && w <= 10 + base )",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java"
    },
    {
        "id": 236,
        "line": 21,
        "precode": "if(i <= k)",
        "aftercode": "if(i > k)",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java"
    },
    {
        "id": 237,
        "line": 21,
        "precode": "if(i <= k)",
        "aftercode": "if(i >= k)",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java"
    },
    {
        "id": 238,
        "line": 21,
        "precode": "if(i <= k)",
        "aftercode": "if(i < k)",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java"
    },
    {
        "id": 239,
        "line": 21,
        "precode": "if(i <= k)",
        "aftercode": "if(i != k)",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java"
    },
    {
        "id": 240,
        "line": 21,
        "precode": "if(i <= k)",
        "aftercode": "if(i == k)",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java"
    },
    {
        "id": 251,
        "line": 13,
        "precode": "dp[0][0][0] = 0;",
        "aftercode": "dp[0][0][0] = C[0] + 1;",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java"
    },
    {
        "id": 252,
        "line": 14,
        "precode": "dp[0][0][1] = C[0];",
        "aftercode": "dp[0][0][1] = 0;",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java"
    },
    {
        "id": 253,
        "line": 15,
        "precode": "dp[0][1][0] = Integer.MAX_VALUE;",
        "aftercode": "dp[0][1][0] = C[0];",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java"
    },
    {
        "id": 254,
        "line": 16,
        "precode": "dp[0][1][1] = Integer.MAX_VALUE;",
        "aftercode": "dp[0][1][1] = 0;",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java"
    },
    {
        "id": 255,
        "line": 25,
        "precode": "dp[i][1][0] = S[i] == S[i - 1] ? Math.min(dp[i - 1][1][1], dp[i - 1][0][0]) : Math.min(dp[i - 1][0][1], dp[i - 1][1][0]);",
        "aftercode": "dp[i][1][0] = S[i] == S[i - 1] ? Math.max(dp[i - 1][1][1], dp[i - 1][0][0]) : Math.min(dp[i - 1][0][1], dp[i - 1][1][0]);",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java"
    },
    {
        "id": 266,
        "line": 52,
        "precode": "long min = F0[N-1]+F1[N-1];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long min = F0[N-1]*F1[i];"
    },
    {
        "id": 267,
        "line": 55,
        "precode": "long iSum0 = F1[N-1] - F1[i] + F0[i];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long iSum0 = F1[N-1] - F1[i] - F0[i];"
    },
    {
        "id": 268,
        "line": 56,
        "precode": "long iSum1 = F0[N-1] - F0[i] + F1[i];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long iSum1 = F0[N-1] + F0[i] + F1[i];"
    },
    {
        "id": 269,
        "line": 55,
        "precode": "long iSum0 = F1[N-1] - F1[i] + F0[i];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long iSum0 = F1[N-1] + F1[i] + F0[i];"
    },
    {
        "id": 270,
        "line": 52,
        "precode": "long min = F0[N-1]+F1[N-1];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long min = F0[N-1]*F1[N-1];"
    },
    {
        "id": 286,
        "line": 55,
        "precode": "out.println(map.size());",
        "aftercode": "out.println(map.keySet().size());",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java"
    },
    {
        "id": 287,
        "line": 70,
        "precode": "Map<Integer, Long> map2 = map.entrySet().stream()\n\t.sorted(Map.Entry.comparingByKey())\n\t.collect(Collectors.toMap(",
        "aftercode": "Map<Integer, Long> map2 = map.entrySet().stream()\n\t.sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n\t.collect(Collectors.toMap(",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java"
    },
    {
        "id": 288,
        "line": 70,
        "precode": "Map<Integer, Long> map2 = map.entrySet().stream()\n\t.sorted(Map.Entry.comparingByKey())\n\t.collect(Collectors.toMap(",
        "aftercode": "Map<Integer, Long> map2 = map.entrySet().stream()\n\t.sorted(Map.Entry.comparingByValue())\n\t.collect(Collectors.toMap(",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java"
    },
    {
        "id": 289,
        "line": 70,
        "precode": "Map<Integer, Long> map2 = map.entrySet().stream()\n\t.sorted(Map.Entry.comparingByKey())\n\t.collect(Collectors.toMap(",
        "aftercode": "SortedMap<Integer, Long> map2 = map.entrySet().stream()\n\t.sorted(Map.Entry.comparingByKey())\n\t.collect(Collectors.toMap(",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java"
    },
    {
        "id": 290,
        "line": 70,
        "precode": "Map<Integer, Long> map2 = map.entrySet().stream()\n\t.sorted(Map.Entry.comparingByKey())\n\t.collect(Collectors.toMap(",
        "aftercode": "Map<Long, Integer> map2 = map.entrySet().stream()\n\t.sorted(Map.Entry.comparingByKey())\n\t.collect(Collectors.toMap(",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java"
    },
    {
        "id": 291,
        "line": 19,
        "precode": "BufferedReader f = new BufferedReader(new InputStreamReader(System.in));",
        "aftercode": "BufferedReader f = new BufferedReader(new FileReader(\"Fgen.txt\"));",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java"
    },
    {
        "id": 292,
        "line": 25,
        "precode": "sn = sin.length();",
        "aftercode": "sn = 2 * sin.length();",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java"
    },
    {
        "id": 293,
        "line": 31,
        "precode": "for(int k = 0; k < 26; k++){",
        "aftercode": "for(int k = 1; k < 26; k++){",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java"
    },
    {
        "id": 294,
        "line": 40,
        "precode": "sind.get(s[k]).add(k);",
        "aftercode": "sind.get(s[2]).add(k);",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java"
    },
    {
        "id": 295,
        "line": 41,
        "precode": "sfreq[s[k]]++;",
        "aftercode": "sfreq[s[k]] = sfreq[s[k]] + 1;",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java"
    },
    {
        "id": 296,
        "line": 159,
        "precode": "a[i]=nextInt();",
        "aftercode": "a[i]++;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java"
    },
    {
        "id": 297,
        "line": 160,
        "precode": "--a[i];",
        "aftercode": "++a[i];",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java"
    },
    {
        "id": 298,
        "line": 162,
        "precode": "long res=0;",
        "aftercode": "long res=1;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java"
    },
    {
        "id": 299,
        "line": 163,
        "precode": "List<List<Integer>> occ = new ArrayList<>(n);",
        "aftercode": "List occ = new ArrayList<>(n);",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java"
    },
    {
        "id": 300,
        "line": 156,
        "precode": "int n=nextInt();",
        "aftercode": "int n=nextInt()+1;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java"
    },
    {
        "id": 301,
        "line": 51,
        "precode": "node.minVal = m;",
        "aftercode": "node.minVal += m;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java"
    },
    {
        "id": 302,
        "line": 51,
        "precode": "node.minVal = m;",
        "aftercode": "node.minVal = m * 2;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java"
    },
    {
        "id": 303,
        "line": 51,
        "precode": "node.minVal = m;",
        "aftercode": "node.minVal = 0;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java"
    },
    {
        "id": 304,
        "line": 51,
        "precode": "node.minVal = m;",
        "aftercode": "node.minVal = m - 1;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java"
    },
    {
        "id": 305,
        "line": 51,
        "precode": "node.minVal = m;",
        "aftercode": "node.minVal = 0 - m;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java"
    },
    {
        "id": 306,
        "line": 10,
        "precode": "int a = sc.nextInt();",
        "aftercode": "int mutatedVar = sc.nextInt();",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java"
    },
    {
        "id": 307,
        "line": 11,
        "precode": "if (a % k == 0){",
        "aftercode": "if (k % a == 0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java"
    },
    {
        "id": 308,
        "line": 11,
        "precode": "if (a % k == 0){",
        "aftercode": "if (a / k == 0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java"
    },
    {
        "id": 309,
        "line": 11,
        "precode": "if (a % k == 0){",
        "aftercode": "if ((a / k) % 2 == 0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java"
    },
    {
        "id": 310,
        "line": 11,
        "precode": "if (a % k == 0){",
        "aftercode": "if (k / a == 0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java"
    },
    {
        "id": 311,
        "line": 8,
        "precode": "int num = sc.nextInt();",
        "aftercode": "int num = sc.nextInt() + 1;",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java"
    },
    {
        "id": 312,
        "line": 9,
        "precode": "if(num%b==0){",
        "aftercode": "if(num%a==0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java"
    },
    {
        "id": 313,
        "line": 10,
        "precode": "System.out.print((num/b)+\" \");",
        "aftercode": "System.out.println((num/b)+\" \");",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java"
    },
    {
        "id": 314,
        "line": 10,
        "precode": "System.out.print((num/b)+\" \");",
        "aftercode": "System.out.print(\"Value: \"+ (num/b)+\" \");",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java"
    },
    {
        "id": 315,
        "line": 9,
        "precode": "if(num%b==0){",
        "aftercode": "if(num%b==1){",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java"
    },
    {
        "id": 316,
        "line": 12,
        "precode": "for(int i=1;i<=length;i++){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "for(int i=0;i<length;i++){"
    },
    {
        "id": 317,
        "line": 13,
        "precode": "for(int j=0;j<=length-i;j++){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "for(int j=1;j<length-i;j++){"
    },
    {
        "id": 318,
        "line": 14,
        "precode": "String temp = S.substring(j,j+i);",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "String temp = S.substring(j,i+j);"
    },
    {
        "id": 319,
        "line": 15,
        "precode": "partString.add(temp);",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "partString.add(temp.substring(0,temp.length()));"
    },
    {
        "id": 320,
        "line": 8,
        "precode": "int length = S.length();",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "int length = S.length()+1;"
    },
    {
        "id": 321,
        "line": 14,
        "precode": "for(int j = i+1;j <= S.length();j++){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "for(int j = i;j < S.length();j++){"
    },
    {
        "id": 322,
        "line": 14,
        "precode": "for(int j = i+1;j <= S.length();j++){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "for(int j = i+1;j < S.length();j++){"
    },
    {
        "id": 323,
        "line": 15,
        "precode": "String newS = S.substring(i,j);",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "String newS = S.substring(0,j);"
    },
    {
        "id": 324,
        "line": 15,
        "precode": "String newS = S.substring(i,j);",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "String newS = S.substring(i+1,j);"
    },
    {
        "id": 325,
        "line": 15,
        "precode": "String newS = S.substring(i,j);",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "String newS = S.substring(i,j+1);"
    },
    {
        "id": 326,
        "line": 26,
        "precode": "interval.add((x - y - 1) % (A + B));",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "interval.add((x - y - 1) + (A + B));"
    },
    {
        "id": 327,
        "line": 27,
        "precode": "y = x;",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "y = x - 1;"
    },
    {
        "id": 328,
        "line": 26,
        "precode": "interval.add((x - y - 1) % (A + B));",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "interval.add((x - y - 1) / (A + B));"
    },
    {
        "id": 329,
        "line": 26,
        "precode": "interval.add((x - y - 1) % (A + B));",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "interval.add((x - y - 1) * (A + B));"
    },
    {
        "id": 330,
        "line": 26,
        "precode": "interval.add((x - y - 1) % (A + B));",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "interval.add((x - y - 1) / (A + B));"
    },
    {
        "id": 331,
        "line": 20,
        "precode": "ccnt = (a + b) - ccnt;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java",
        "aftercode": "ccnt = (a + b) + ccnt;"
    },
    {
        "id": 332,
        "line": 21,
        "precode": "ccnt /= 2;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java",
        "aftercode": "ccnt *= 2;"
    },
    {
        "id": 333,
        "line": 53,
        "precode": "for(int i = 0; i < ccnt; i++){",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java",
        "aftercode": "for(int i = 0; i < ccnt + 1; i++){"
    },
    {
        "id": 334,
        "line": 57,
        "precode": "long aans = 0;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java",
        "aftercode": "long aans = 1;"
    },
    {
        "id": 335,
        "line": 59,
        "precode": "for(int i = 0; i < astr.length(); i++){",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java",
        "aftercode": "for(int i = 1; i < astr.length(); i++){"
    },
    {
        "id": 336,
        "line": 10,
        "precode": "int L = 60;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java",
        "aftercode": "int L = 50;"
    },
    {
        "id": 337,
        "line": 12,
        "precode": "for(int n00 = 0; n00 <= L - c; n00++) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java",
        "aftercode": "for(int n00 = 10; n00 <= L - c; n00++) {"
    },
    {
        "id": 338,
        "line": 13,
        "precode": "for(int n01 = 0; n01 <= c; n01++) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java",
        "aftercode": "for(int n01 = 10; n01 <= c; n01++) {"
    },
    {
        "id": 339,
        "line": 14,
        "precode": "int n10 = c - n01;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java",
        "aftercode": "int n10 = c + n01;"
    },
    {
        "id": 340,
        "line": 8,
        "precode": "long C = Long.parseLong(sc.next());",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java",
        "aftercode": "long C = Long.parseLong(sc.nextLine());"
    },
    {
        "id": 341,
        "line": 11,
        "precode": "int pc = Long.bitCount(c);",
        "aftercode": "int pc = Long.reverse(c);",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java"
    },
    {
        "id": 342,
        "line": 12,
        "precode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "aftercode": "if (a + b < pc && (a + b + pc) % 2 == 1 && (a + b + pc) > 120 && a > b + pc && b > a + pc) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java"
    },
    {
        "id": 343,
        "line": 12,
        "precode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "aftercode": "if (a + b < pc && (a + b + pc) % 2 == 0 && (a + b + pc) > 120 && a > b + pc || b > a + pc) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java"
    },
    {
        "id": 344,
        "line": 12,
        "precode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "aftercode": "if (a + b < pc || (a + b + pc) % 2 == 0 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java"
    },
    {
        "id": 345,
        "line": 12,
        "precode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "aftercode": "if (a + b < pc && (a + b + pc) % 2 == 0 || (a + b + pc) > 120 || a > b + pc && b > a + pc) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java"
    },
    {
        "id": 346,
        "line": 22,
        "precode": "cnt++;",
        "aftercode": "cnt += 2;",
        "filepath": "java2024-0304\\abc347_e\\Java\\51900394\\correctVersion.java"
    },
    {
        "id": 347,
        "line": 24,
        "precode": "long v = sum[i] - sum[push[x]];",
        "aftercode": "long v = sum[i] + sum[push[x]];",
        "filepath": "java2024-0304\\abc347_e\\Java\\51900394\\correctVersion.java"
    },
    {
        "id": 348,
        "line": 25,
        "precode": "ans[x] += v;",
        "aftercode": "ans[x] -= v;",
        "filepath": "java2024-0304\\abc347_e\\Java\\51900394\\correctVersion.java"
    },
    {
        "id": 349,
        "line": 26,
        "precode": "push[x] = -1;",
        "aftercode": "push[x] = 0;",
        "filepath": "java2024-0304\\abc347_e\\Java\\51900394\\correctVersion.java"
    },
    {
        "id": 350,
        "line": 39,
        "precode": "System.out.println(sb.toString());",
        "aftercode": "System.out.println(sb.toString() + \"Mutated\");",
        "filepath": "java2024-0304\\abc347_e\\Java\\51900394\\correctVersion.java"
    },
    {
        "id": 351,
        "line": 16,
        "precode": "s = new long[q + 1];",
        "aftercode": "s = new long[q - 1];",
        "filepath": "java2024-0304\\abc347_e\\Java\\51956121\\correctVersion.java"
    },
    {
        "id": 352,
        "line": 16,
        "precode": "s = new long[q + 1];",
        "aftercode": "s = new long[q * 2];",
        "filepath": "java2024-0304\\abc347_e\\Java\\51956121\\correctVersion.java"
    },
    {
        "id": 353,
        "line": 16,
        "precode": "s = new long[q + 1];",
        "aftercode": "s = new long[q];",
        "filepath": "java2024-0304\\abc347_e\\Java\\51956121\\correctVersion.java"
    },
    {
        "id": 354,
        "line": 16,
        "precode": "s = new long[q + 1];",
        "aftercode": "s = new long[q - 2];",
        "filepath": "java2024-0304\\abc347_e\\Java\\51956121\\correctVersion.java"
    },
    {
        "id": 355,
        "line": 17,
        "precode": "int now = 0;",
        "aftercode": "int now = 1;",
        "filepath": "java2024-0304\\abc347_e\\Java\\51956121\\correctVersion.java"
    },
    {
        "id": 356,
        "line": 26,
        "precode": "long mid = left + (right - left) / 2;",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java",
        "aftercode": "long mid = (left + right) / 2;"
    },
    {
        "id": 357,
        "line": 26,
        "precode": "long mid = left + (right - left) / 2;",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java",
        "aftercode": "long mid = (left + right) >> 1;"
    },
    {
        "id": 358,
        "line": 25,
        "precode": "while (right - left > 1) {",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java",
        "aftercode": "while (right - left >= 1) {"
    },
    {
        "id": 359,
        "line": 24,
        "precode": "long right = (long)1e18;",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java",
        "aftercode": "long right = Long.MAX_VALUE;"
    },
    {
        "id": 360,
        "line": 24,
        "precode": "long right = (long)1e18;",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java",
        "aftercode": "long right = Long.MAX_VALUE - 1;"
    },
    {
        "id": 361,
        "line": 7,
        "precode": "// x1 - x2 / y1 - y2 == x1 - x3 / y1 - y3",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java",
        "aftercode": "// x1 - x2 * y1 - y2 == x1 - x3 / y1 - y3"
    },
    {
        "id": 362,
        "line": 7,
        "precode": "// x1 - x2 / y1 - y2 == x1 - x3 / y1 - y3",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java",
        "aftercode": "// x1 - x2 / y1 - y2 == x1 - x3 * y1 - y3"
    },
    {
        "id": 363,
        "line": 7,
        "precode": "// x1 - x2 / y1 - y2 == x1 - x3 / y1 - y3",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java",
        "aftercode": "// x1 - x2 + y1 - y2 == x1 - x3 / y1 - y3"
    },
    {
        "id": 364,
        "line": 7,
        "precode": "// x1 - x2 / y1 - y2 == x1 - x3 / y1 - y3",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java",
        "aftercode": "// x1 - x2 / y1 - y2 == x1 - x3 + y1 - y3"
    },
    {
        "id": 365,
        "line": 7,
        "precode": "// x1 - x2 / y1 - y2 == x1 - x3 / y1 - y3",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java",
        "aftercode": "// x1 + x2 / y1 - y2 == x1 - x3 / y1 - y3"
    },
    {
        "id": 366,
        "line": 13,
        "precode": "long a[] = Arrays.stream(new long[n]).map(e -> sc.nextLong()).toArray();",
        "aftercode": "long a[] = Arrays.stream(new long[n]).map(e -> sc.nextLong()*2).toArray();",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java"
    },
    {
        "id": 367,
        "line": 14,
        "precode": "long sum = Arrays.stream(a).sum();",
        "aftercode": "long sum = Arrays.stream(a).average().getAsDouble();",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java"
    },
    {
        "id": 368,
        "line": 16,
        "precode": "long dpMax[] = new long[n];",
        "aftercode": "long dpMax[] = Arrays.copyOf(a, n);",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java"
    },
    {
        "id": 369,
        "line": 22,
        "precode": "dpMax[i] = Math.max(dpMax[i - 1] + a[i], a[i]);",
        "aftercode": "dpMax[i] = Math.max(dpMax[i - 1] - a[i], a[i]);",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java"
    },
    {
        "id": 370,
        "line": 23,
        "precode": "dpMin[i] = Math.min(dpMin[i - 1] + a[i], a[i]);",
        "aftercode": "dpMin[i] = Math.min(dpMin[i - 1] - a[i], a[i]);",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java"
    },
    {
        "id": 371,
        "line": 14,
        "precode": " long frag = 1;",
        "aftercode": " long frag = -1;",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java"
    },
    {
        "id": 372,
        "line": 18,
        "precode": " Array[i] = sc.nextInt() * frag;",
        "aftercode": " Array[i] = sc.nextInt() + frag;",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java"
    },
    {
        "id": 373,
        "line": 28,
        "precode": " sumArray[i] = sumArray[i-1] + Array[i-1];",
        "aftercode": " sumArray[i] = sumArray[i-1] - Array[i-1];",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java"
    },
    {
        "id": 374,
        "line": 37,
        "precode": " partSum = Math.max(partSum, sub);",
        "aftercode": " partSum = Math.min(partSum, sub);",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java"
    },
    {
        "id": 375,
        "line": 42,
        "precode": " System.out.println((partSum * (C-1) + sumArray[N]) * frag);",
        "aftercode": " System.out.println((partSum * (C+1) + sumArray[N]) * frag);",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java"
    },
    {
        "id": 381,
        "line": 13,
        "precode": "long n = Long.parseLong(f.readLine());",
        "aftercode": " n = Long.parseLong(f.readLine());",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java"
    },
    {
        "id": 382,
        "line": 13,
        "precode": "long n = Long.parseLong(f.readLine());",
        "aftercode": " long n = Long.parseLong(f.readLine()) + 1;",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java"
    },
    {
        "id": 383,
        "line": 14,
        "precode": "long n2 = (n*n + MOD)%MOD;",
        "aftercode": " n2 = (n*n + MOD)%MOD;",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java"
    },
    {
        "id": 384,
        "line": 14,
        "precode": "long n2 = (n*n + MOD)%MOD;",
        "aftercode": " long n2 = (n*n + 1 + MOD)%MOD;",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java"
    },
    {
        "id": 385,
        "line": 16,
        "precode": "//fines",
        "aftercode": "//fines - updated",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java"
    },
    {
        "id": 391,
        "line": 24,
        "precode": "long cnt = sup - 1 - get(b1, sup - 1);",
        "aftercode": "long cnt = sup - 1 + get(b1, sup - 1);",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java"
    },
    {
        "id": 392,
        "line": 25,
        "precode": "l1.add(cnt * a(n - i - 1, k - i - 1));",
        "aftercode": "l1.add(cnt + a(n - i - 1, k - i - 1));",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java"
    },
    {
        "id": 393,
        "line": 26,
        "precode": "long v1 = a(n - i - 1, k - i - 1) + ((cnt - 1) * (k - i - 1) % mod) * a(n - i - 2, k - i - 2);",
        "aftercode": "long v1 = a(n - i - 1, k - i - 1) - ((cnt - 1) * (k - i - 1) % mod) * a(n - i - 2, k - i - 2);",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java"
    },
    {
        "id": 394,
        "line": 27,
        "precode": "v1 %= mod;",
        "aftercode": "v1 += mod;",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java"
    },
    {
        "id": 395,
        "line": 28,
        "precode": "set(b2, 1, v1);",
        "aftercode": "set(b2, 1, -v1);",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java"
    },
    {
        "id": 396,
        "line": 10,
        "precode": "if(in.charAt(i-1)=='R') {",
        "aftercode": "if(in.charAt(i-1)=='L') {",
        "filepath": "java2024-0304\\arc175_a\\Java\\51663025\\correctVersion.java"
    },
    {
        "id": 397,
        "line": 39,
        "precode": "used[i%n]=true;",
        "aftercode": "used[(i+1)%n]=true;",
        "filepath": "java2024-0304\\arc175_a\\Java\\51663025\\correctVersion.java"
    },
    {
        "id": 398,
        "line": 22,
        "precode": "l=(l%mod*2)%mod;",
        "aftercode": "l=(l+1)%mod;",
        "filepath": "java2024-0304\\arc175_a\\Java\\51663025\\correctVersion.java"
    },
    {
        "id": 399,
        "line": 32,
        "precode": "r=(r%mod*2)%mod;",
        "aftercode": "r=(r+1)%mod;",
        "filepath": "java2024-0304\\arc175_a\\Java\\51663025\\correctVersion.java"
    },
    {
        "id": 400,
        "line": 39,
        "precode": "used[i%n]=true;",
        "aftercode": "used[(i-1)%n]=true;",
        "filepath": "java2024-0304\\arc175_a\\Java\\51663025\\correctVersion.java"
    },
    {
        "id": 401,
        "line": 27,
        "precode": "                if(used[left(p[i], n)]) {",
        "aftercode": "                if(used[right(p[i], n)]) {",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java"
    },
    {
        "id": 402,
        "line": 27,
        "precode": "                if(used[left(p[i], n)]) {",
        "aftercode": "                if(used[p[i]]) {",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java"
    },
    {
        "id": 403,
        "line": 27,
        "precode": "                if(used[left(p[i], n)]) {",
        "aftercode": "                if(used[left(p[i], n) && p[i] > 0]) {",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java"
    },
    {
        "id": 404,
        "line": 27,
        "precode": "                if(used[left(p[i], n)]) {",
        "aftercode": "                if(used[left(p[i], n + 1)]) {",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java"
    },
    {
        "id": 405,
        "line": 28,
        "precode": "                    resultR *= 2;",
        "aftercode": "                    resultR += 2;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java"
    },
    {
        "id": 406,
        "line": 9,
        "precode": "ps[i] = Integer.parseInt(sc.next());",
        "aftercode": "ps[i] = Integer.parseInt(sc.next()) + 1;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java"
    },
    {
        "id": 407,
        "line": 22,
        "precode": "if(s[p] == 'R') ans_left *= 0;",
        "aftercode": "if(s[p] == 'R') ans_left *= 1;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java"
    },
    {
        "id": 408,
        "line": 29,
        "precode": "if(s[p] == 'L') ans_right *= 0;",
        "aftercode": "if(s[p] == 'L') ans_right *= 1;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java"
    },
    {
        "id": 409,
        "line": 31,
        "precode": "ans_right %= mod;",
        "aftercode": "ans_right /= mod;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java"
    },
    {
        "id": 410,
        "line": 32,
        "precode": "took_spoon[p] = true;",
        "aftercode": "took_spoon[p] = false;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java"
    },
    {
        "id": 411,
        "line": 29,
        "precode": "writer.write(Long.toString(B * (open - N) + Math.min(A, 2 * B) * ((Math.abs(minSum) + 1) / 2)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "writer.write(Long.toString(B * (open - N) + Math.min(A, 2 * B) * ((Math.abs(minSum) + 2) / 2)));"
    },
    {
        "id": 412,
        "line": 30,
        "precode": "        } else {",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "        } else if (open != N) {"
    },
    {
        "id": 413,
        "line": 31,
        "precode": "            writer.write(Long.toString(B * (N - open) + Math.min(A, 2 * B) * ((2L * (open - N) - minSum + 1) / 2)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "            writer.write(Long.toString(B * (N - open) + Math.min(A, 2 * B) * ((2L * (open - N) - minSum + 1) / 2) + 1));"
    },
    {
        "id": 414,
        "line": 18,
        "precode": "        int minSum = 0;",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "        int minSum = sum;"
    },
    {
        "id": 415,
        "line": 17,
        "precode": "        int sum = 0;",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "        int sum = open;"
    },
    {
        "id": 416,
        "line": 44,
        "precode": "System.out.println(answer + ((long) (L+R)/2*B));",
        "aftercode": "System.out.println(answer + ((long) ((L+R)/2)*B);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java"
    },
    {
        "id": 417,
        "line": 44,
        "precode": "System.out.println(answer + ((long) (L+R)/2*B));",
        "aftercode": "System.out.println(answer + ((long) (L+R)/(2*B));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java"
    },
    {
        "id": 418,
        "line": 44,
        "precode": "System.out.println(answer + ((long) (L+R)/2*B));",
        "aftercode": "System.out.println(answer + ((long) ((L+R)/2*B);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java"
    },
    {
        "id": 419,
        "line": 44,
        "precode": "System.out.println(answer + ((long) (L+R)/2*B));",
        "aftercode": "System.out.println(answer + ((long) (L+R/2)*B);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java"
    },
    {
        "id": 420,
        "line": 44,
        "precode": "System.out.println(answer + ((long) (L+R)/2*B));",
        "aftercode": "System.out.println(answer + ((long) (L+R)/(2*B));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java"
    },
    {
        "id": 421,
        "line": 41,
        "precode": "sumR %= 2;",
        "aftercode": "sumR = sumR % 2;",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java"
    },
    {
        "id": 422,
        "line": 42,
        "precode": "out.println(ans + b * 2 * sumR);",
        "aftercode": "out.println(ans + sumR * b * 2);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java"
    },
    {
        "id": 423,
        "line": 44,
        "precode": "long mi = Math.min(sumR, sumL);",
        "aftercode": "long mi = Math.max(sumR, sumL);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java"
    },
    {
        "id": 424,
        "line": 45,
        "precode": "long mx = Math.max(sumR, sumL);",
        "aftercode": "long mx = Math.min(sumR, sumL);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java"
    },
    {
        "id": 425,
        "line": 54,
        "precode": "        System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "aftercode": "        System.out.println(ans - ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java"
    },
    {
        "id": 426,
        "line": 54,
        "precode": "        System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "aftercode": "        System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.max(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java"
    },
    {
        "id": 427,
        "line": 54,
        "precode": "        System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "aftercode": "        System.out.println(ans + ((stack.size() / 2L - 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java"
    },
    {
        "id": 428,
        "line": 54,
        "precode": "        System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "aftercode": "        System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.max(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java"
    },
    {
        "id": 429,
        "line": 54,
        "precode": "        System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "aftercode": "        System.out.println(ans + ((stack.size() / 3L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java"
    }
]