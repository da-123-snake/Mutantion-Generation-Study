[
    {
        "id": 6,
        "line": 5,
        "precode": "Scanner sc = new Scanner(System.in);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java",
        "aftercode": "Scanner sc = new Scanner(System.err);"
    },
    {
        "id": 7,
        "line": 6,
        "precode": "if(sc.nextInt() + sc.nextInt() == 0) System.out.print(1);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java",
        "aftercode": "if(sc.nextInt() - sc.nextInt() == 0) System.out.print(1);"
    },
    {
        "id": 8,
        "line": 6,
        "precode": "if(sc.nextInt() + sc.nextInt() == 0) System.out.print(1);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java",
        "aftercode": "if(sc.nextInt() + sc.nextInt() != 0) System.out.print(1);"
    },
    {
        "id": 9,
        "line": 6,
        "precode": "if(sc.nextInt() + sc.nextInt() == 0) System.out.print(1);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java",
        "aftercode": "if(sc.nextInt() + sc.nextInt() > 0) System.out.print(1);"
    },
    {
        "id": 10,
        "line": 7,
        "precode": "else System.out.print(0);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java",
        "aftercode": "else System.out.print(-1);"
    },
    {
        "id": 11,
        "line": 15,
        "precode": "System.out.print((j+1)+\" \");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java",
        "aftercode": "System.out.print((i+1)+\" \");"
    },
    {
        "id": 12,
        "line": 17,
        "precode": "if(j==(n-1)){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java",
        "aftercode": "if(j==(n-2)){"
    },
    {
        "id": 13,
        "line": 22,
        "precode": "}",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java",
        "aftercode": "if(a[i][j]==0){"
    },
    {
        "id": 14,
        "line": 15,
        "precode": "System.out.print((j+1)+\" \");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java",
        "aftercode": "System.out.print((j)+\" \");"
    },
    {
        "id": 15,
        "line": 17,
        "precode": "if(j==(n-1)){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java",
        "aftercode": "if(j!=(n-1)){"
    },
    {
        "id": 16,
        "line": 9,
        "precode": "int k = scanner.nextInt();",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java",
        "aftercode": "int k = 1;"
    },
    {
        "id": 17,
        "line": 9,
        "precode": "int k = scanner.nextInt();",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java",
        "aftercode": "int k = 0;"
    },
    {
        "id": 18,
        "line": 10,
        "precode": "if(k == 1){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java",
        "aftercode": "if(k != 1){"
    },
    {
        "id": 19,
        "line": 10,
        "precode": "if(k == 1){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java",
        "aftercode": "if(k == 0){"
    },
    {
        "id": 20,
        "line": 11,
        "precode": "System.out.print((j+1) + \" \");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java",
        "aftercode": "System.out.print((i+1) + \" \");"
    },
    {
        "id": 21,
        "line": 12,
        "precode": "int r = sc.nextInt();",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java",
        "aftercode": "int r = 1;"
    },
    {
        "id": 22,
        "line": 13,
        "precode": "if (r==1){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java",
        "aftercode": "if (r==0){"
    },
    {
        "id": 23,
        "line": 13,
        "precode": "if (r==1){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java",
        "aftercode": "if (r!=1){"
    },
    {
        "id": 24,
        "line": 14,
        "precode": "System.out.print(j+\" \");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java",
        "aftercode": "System.out.print(i+\" \");"
    },
    {
        "id": 25,
        "line": 14,
        "precode": "System.out.print(j+\" \");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java",
        "aftercode": "System.out.println(j+\" \");"
    },
    {
        "id": 26,
        "line": 10,
        "precode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java",
        "aftercode": "outLine.append((sc.nextInt() != 1) ? j + \" \" : \"\");"
    },
    {
        "id": 27,
        "line": 10,
        "precode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java",
        "aftercode": "outLine.append((sc.nextInt() == 0) ? j + \" \" : \"\");"
    },
    {
        "id": 28,
        "line": 10,
        "precode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java",
        "aftercode": "outLine.append((sc.nextInt() == 1) ? \"\" : j + \" \");"
    },
    {
        "id": 29,
        "line": 10,
        "precode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java",
        "aftercode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"- \");"
    },
    {
        "id": 30,
        "line": 10,
        "precode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java",
        "aftercode": "outLine.append((sc.nextInt() == 1) ? j + \"! \" : \"\");"
    },
    {
        "id": 36,
        "line": 6,
        "precode": "long N = sc.nextLong();",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java",
        "aftercode": "long N = sc.nextInt();"
    },
    {
        "id": 37,
        "line": 4,
        "precode": "for (long i = 0; i * i * i <= N; i++) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java",
        "aftercode": "for (long i = 1; i * i * i <= N; i++) {"
    },
    {
        "id": 38,
        "line": 4,
        "precode": "for (long i = 0; i * i * i <= N; i++) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java",
        "aftercode": "for (int i = 0; i * i * i <= N; i++) {"
    },
    {
        "id": 39,
        "line": 9,
        "precode": "list.add(i*i*i);",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java",
        "aftercode": "list.add(i * i);"
    },
    {
        "id": 40,
        "line": 4,
        "precode": "for (long i = 0; i * i * i <= N; i++) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java",
        "aftercode": "for (long i = 0; i * i * i < N; i++) {"
    },
    {
        "id": 41,
        "line": 21,
        "precode": "if (C.get(i) > N) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java",
        "aftercode": "if (C.get(i) >= N) {"
    },
    {
        "id": 42,
        "line": 44,
        "precode": "continue;",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java",
        "aftercode": "break;"
    },
    {
        "id": 43,
        "line": 44,
        "precode": "continue;",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java",
        "aftercode": "// continue;"
    },
    {
        "id": 44,
        "line": 25,
        "precode": "String S = Long.toString(C.get(i));",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java",
        "aftercode": "String S = String.valueOf(C.get(i));"
    },
    {
        "id": 45,
        "line": 25,
        "precode": "String S = Long.toString(C.get(i));",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java",
        "aftercode": "String S = \"\" + C.get(i);"
    },
    {
        "id": 46,
        "line": 8,
        "precode": "long n = Long.parseLong(sc.next());",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java",
        "aftercode": "long n = Long.parseLong(sc.nextLine());"
    },
    {
        "id": 47,
        "line": 9,
        "precode": "long cube = 0L;",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java",
        "aftercode": "long cube = -1L;"
    },
    {
        "id": 48,
        "line": 10,
        "precode": "for (long i = 1L; i * i * i <= n; i++) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java",
        "aftercode": "for (long i = 1L; i * i <= n; i++) {"
    },
    {
        "id": 49,
        "line": 12,
        "precode": "if (check(s) == true) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java",
        "aftercode": "if (check(s) == false) {"
    },
    {
        "id": 50,
        "line": 10,
        "precode": "for (long i = 1L; i * i * i <= n; i++) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java",
        "aftercode": "for (long i = 2L; i * i * i <= n; i++) {"
    },
    {
        "id": 51,
        "line": 24,
        "precode": "System.out.println(\"Yes\");",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java",
        "aftercode": "System.out.println(\"Success\");"
    },
    {
        "id": 52,
        "line": 26,
        "precode": "sb.append(\"7 7 7 \");",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java",
        "aftercode": "sb.append(\"8 8 8 \");"
    },
    {
        "id": 53,
        "line": 26,
        "precode": "sb.append(\"7 7 7 \");",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java",
        "aftercode": "sb.append(\"a2 b2 c2 \");"
    },
    {
        "id": 54,
        "line": 27,
        "precode": "sb.append(a2).append(' ');",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java",
        "aftercode": "sb.append(a2).append('-');"
    },
    {
        "id": 55,
        "line": 27,
        "precode": "sb.append(a2).append(' ');",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java",
        "aftercode": "sb.append(a2).append(',');"
    },
    {
        "id": 56,
        "line": 44,
        "precode": "int dz=Math.min(c+7,7) - Math.max(c,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java",
        "aftercode": "int dz=Math.min(c+7,7) - Math.max(c,1);"
    },
    {
        "id": 57,
        "line": 44,
        "precode": "int dz=Math.min(c+7,7) - Math.max(c,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java",
        "aftercode": "int dz=Math.min(c+7,8) - Math.max(c,0);"
    },
    {
        "id": 58,
        "line": 44,
        "precode": "int dz=Math.min(c+7,7) - Math.max(c,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java",
        "aftercode": "int dz=Math.min(c+6,7) - Math.max(c,0);"
    },
    {
        "id": 59,
        "line": 44,
        "precode": "int dz=Math.min(c+7,7) - Math.max(c,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java",
        "aftercode": "int dz=Math.min(c+7,6) - Math.max(c,0);"
    },
    {
        "id": 60,
        "line": 45,
        "precode": "return Math.max(dx*dy*dz,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java",
        "aftercode": "return Math.min(dx*dy*dz,0);"
    },
    {
        "id": 61,
        "line": 135,
        "precode": "}else {",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java",
        "aftercode": "}else if (true) {"
    },
    {
        "id": 62,
        "line": 124,
        "precode": "t.secCnt = r.maxCnt;",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java",
        "aftercode": "t.secCnt = l.maxCnt;"
    },
    {
        "id": 63,
        "line": 135,
        "precode": "}else {",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java",
        "aftercode": "}else if (false) {"
    },
    {
        "id": 64,
        "line": 135,
        "precode": "}else {",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java",
        "aftercode": "} else if (r.max > l.max) {"
    },
    {
        "id": 65,
        "line": 124,
        "precode": "t.secCnt = r.maxCnt;",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java",
        "aftercode": "t.secCnt = l.secCnt;"
    },
    {
        "id": 71,
        "line": 129,
        "precode": "if (value1[0] >= value2[1]) {",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java",
        "aftercode": "if (value1[0] == value2[1]) {"
    },
    {
        "id": 72,
        "line": 129,
        "precode": "if (value1[0] >= value2[1]) {",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java",
        "aftercode": "if (value1[0] <= value2[1]) {"
    },
    {
        "id": 73,
        "line": 128,
        "precode": "ans[0] = value2[0];",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java",
        "aftercode": "ans[0] = value1[0];"
    },
    {
        "id": 74,
        "line": 128,
        "precode": "ans[0] = value2[0];",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java",
        "aftercode": "ans[0] = value2[1];"
    },
    {
        "id": 75,
        "line": 130,
        "precode": "ans[1] = value1[0];",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java",
        "aftercode": "ans[1] = value1[1];"
    },
    {
        "id": 81,
        "line": 6,
        "precode": "System.out.println(String.join(\"\",sc.next().split(\"\\\\|.*\\\\|\")));",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java",
        "aftercode": "System.out.println(String.join(\",\",sc.next().split(\"\\\\|.*\\\\|\")));"
    },
    {
        "id": 82,
        "line": 5,
        "precode": "Scanner sc = new Scanner(System.in);",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java",
        "aftercode": "Scanner sc = new Scanner(System.in, \"UTF-8\");"
    },
    {
        "id": 83,
        "line": 5,
        "precode": "Scanner sc = new Scanner(System.in);",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java",
        "aftercode": "Scanner sc = new Scanner(System.in).useDelimiter(\"!\");"
    },
    {
        "id": 84,
        "line": 7,
        "precode": "sc.close();",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java",
        "aftercode": "// sc.close();"
    },
    {
        "id": 85,
        "line": 6,
        "precode": "System.out.println(String.join(\"\",sc.next().split(\"\\\\|.*\\\\|\")));",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java",
        "aftercode": "System.out.println(String.join(\" \",sc.next().split(\"\\\\|.*\\\\|\")));"
    },
    {
        "id": 86,
        "line": 23,
        "precode": "if (pt1 != 0) {",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "if (pt1 <= 0) {"
    },
    {
        "id": 87,
        "line": 23,
        "precode": "if (pt1 != 0) {",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "if (pt1 > 0) {"
    },
    {
        "id": 88,
        "line": 25,
        "precode": "ans = str.substring(0, pt1);",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "ans = str.substring(1, pt1);"
    },
    {
        "id": 89,
        "line": 27,
        "precode": "if (pt2 != pt3 - 1) {",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "if (pt2 == pt3 - 1) {"
    },
    {
        "id": 90,
        "line": 27,
        "precode": "if (pt2 != pt3 - 1) {",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "if (pt2 < pt3 - 1) {"
    },
    {
        "id": 91,
        "line": 21,
        "precode": "for (int i = inputStrings.size() - 1; i >= 0 ; i--) {",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java",
        "aftercode": "for (int i = inputStrings.size() - 1; i > 0 ; i--) {"
    },
    {
        "id": 92,
        "line": 21,
        "precode": "for (int i = inputStrings.size() - 1; i >= 0 ; i--) {",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java",
        "aftercode": "for (int i = inputStrings.size() - 2; i >= 0 ; i--) {"
    },
    {
        "id": 93,
        "line": 21,
        "precode": "for (int i = inputStrings.size() - 1; i >= 0 ; i--) {",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java",
        "aftercode": "for (int i = inputStrings.size() - 1; i >= 1 ; i--) {"
    },
    {
        "id": 94,
        "line": 22,
        "precode": "System.out.println(inputStrings.get(i));",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java",
        "aftercode": "System.out.println(inputStrings.get(i).toUpperCase());"
    },
    {
        "id": 95,
        "line": 21,
        "precode": "for (int i = inputStrings.size() - 1; i >= 0 ; i--) {",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java",
        "aftercode": "for (int i = inputStrings.size() - 1; i >= 0 ; i-=2) {"
    },
    {
        "id": 96,
        "line": 67,
        "precode": "if(hs.get(string)==inf) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "if(hs.get(string)!=inf) {"
    },
    {
        "id": 97,
        "line": 67,
        "precode": "if(hs.get(string)==inf) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "if(hs.containsKey(string)==false) {"
    },
    {
        "id": 98,
        "line": 67,
        "precode": "if(hs.get(string)==inf) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "if(hs.size()==0) {"
    },
    {
        "id": 99,
        "line": 68,
        "precode": "out.print(\"-1\");",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "out.print(\"0\");"
    },
    {
        "id": 100,
        "line": 69,
        "precode": "out.print(hs.get(string));",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "out.print(hs.size());"
    },
    {
        "id": 101,
        "line": 25,
        "precode": "if(m - j >= length && check(length,j,str)){",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java",
        "aftercode": "if(m - j >= length && !check(length,j,str)){"
    },
    {
        "id": 102,
        "line": 25,
        "precode": "if(m - j >= length && check(length,j,str)){",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java",
        "aftercode": "if(m - j <= length && check(length,j,str)){"
    },
    {
        "id": 103,
        "line": 26,
        "precode": "ans = Math.min(ans,dfs(arr,n,m,i+1,j+length) + 1);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java",
        "aftercode": "ans = Math.max(ans,dfs(arr,n,m,i+1,j+length) + 1);"
    },
    {
        "id": 104,
        "line": 26,
        "precode": "ans = Math.min(ans,dfs(arr,n,m,i+1,j+length) + 1);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java",
        "aftercode": "ans = Math.min(ans,dfs(arr,n,m,i,j+length) + 1);"
    },
    {
        "id": 105,
        "line": 29,
        "precode": "dp[i][j] = ans;",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java",
        "aftercode": "dp[i][j] = ans + 1;"
    },
    {
        "id": 106,
        "line": 10,
        "precode": "int[] array = new int[n];",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "int[] array = new int[n + 1];"
    },
    {
        "id": 107,
        "line": 15,
        "precode": "if (array[i] < minEl) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "if (array[i] <= minEl) {"
    },
    {
        "id": 108,
        "line": 20,
        "precode": "System.out.println(\"Sum: \" + sum);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "System.out.println(\"Total: \" + sum);"
    },
    {
        "id": 109,
        "line": 25,
        "precode": "maxEl = array[0];",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "maxEl = array[1];"
    },
    {
        "id": 110,
        "line": 30,
        "precode": "array = Arrays.sort(array);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "array = Arrays.parallelSort(array);"
    },
    {
        "id": 111,
        "line": 22,
        "precode": "while (t-->0) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "while (t++<n) {"
    },
    {
        "id": 112,
        "line": 22,
        "precode": "while (t-->0) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "while (t!=0) {"
    },
    {
        "id": 113,
        "line": 24,
        "precode": "for (int j = 0; j <= len; j++) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "for (int j = 0; j < len; j++) {"
    },
    {
        "id": 114,
        "line": 26,
        "precode": "if (dp[i-1][j]==Integer.MAX_VALUE) continue;",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "if (dp[i-1][j]!=Integer.MAX_VALUE) continue;"
    },
    {
        "id": 115,
        "line": 25,
        "precode": "dp[i][j] = Math.min(dp[i-1][j],dp[i][j]);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "dp[i][j] = Math.max(dp[i-1][j],dp[i][j]);"
    },
    {
        "id": 116,
        "line": 32,
        "precode": "while (cnt-- != 0) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "while (cnt-- > 0) {"
    },
    {
        "id": 117,
        "line": 35,
        "precode": "f[i][j] = Math.min(f[i][j], f[i - 1][j]);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "f[i][j] = Math.max(f[i][j], f[i - 1][j]);"
    },
    {
        "id": 118,
        "line": 36,
        "precode": "if (s.equals(str.substring(Math.max(0, j - s.length()), j))) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "if (!s.equals(str.substring(Math.max(0, j - s.length()), j))) {"
    },
    {
        "id": 119,
        "line": 36,
        "precode": "if (s.equals(str.substring(Math.max(0, j - s.length()), j))) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "if (s.equals(str.substring(0, j))) {"
    },
    {
        "id": 120,
        "line": 32,
        "precode": "while (cnt-- != 0) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "while (--cnt != 0) {"
    },
    {
        "id": 131,
        "line": 3,
        "precode": "Scanner scanner = new Scanner(System.in);",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java",
        "aftercode": "Scanner scanner = new Scanner(System.out);"
    },
    {
        "id": 132,
        "line": 5,
        "precode": "map.put(key, value);",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java",
        "aftercode": "map.put(value, key);"
    },
    {
        "id": 133,
        "line": 7,
        "precode": "while (scanner.hasNext()) {",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java",
        "aftercode": "while (true) {"
    },
    {
        "id": 134,
        "line": 9,
        "precode": "value = scanner.nextInt();",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java",
        "aftercode": "value = scanner.nextLine();"
    },
    {
        "id": 135,
        "line": 11,
        "precode": "if (map.containsKey(key)) {",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java",
        "aftercode": "if (!map.containsKey(key)) {"
    },
    {
        "id": 136,
        "line": 178,
        "precode": "if (x_front != -1) back.put(x_front, x_back);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java",
        "aftercode": "if (x_front != 0) back.put(x_front, x_back);"
    },
    {
        "id": 137,
        "line": 179,
        "precode": "if (x_back != -1) front.put(x_back, x_front);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java",
        "aftercode": "if (x_back != 0) front.put(x_back, x_front);"
    },
    {
        "id": 138,
        "line": 178,
        "precode": "if (x_front != -1) back.put(x_front, x_back);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java",
        "aftercode": "if (x_front != -1) back.put(x_front, -1);"
    },
    {
        "id": 139,
        "line": 179,
        "precode": "if (x_back != -1) front.put(x_back, x_front);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java",
        "aftercode": "if (x_back != -1) front.put(x_back, -1);"
    },
    {
        "id": 140,
        "line": 180,
        "precode": "front.remove(x);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java",
        "aftercode": "front.put(x, -2);"
    },
    {
        "id": 146,
        "line": 79,
        "precode": "long nx = x + ceil(Math.max(dist[k][l] - y, 0), p[i][j]);",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java",
        "aftercode": "long nx = x + ceil(dist[k][l] - y, p[i][j]);"
    },
    {
        "id": 147,
        "line": 80,
        "precode": "long ny = y +  (ceil(Math.max(dist[k][l] - y, 0), p[i][j]) * p[i][j]) - dist[k][l];",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java",
        "aftercode": "long ny = y +  (ceil(Math.max(dist[k][l] - y, 1), p[i][j]) * p[i][j]) - dist[k][l];"
    },
    {
        "id": 148,
        "line": 81,
        "precode": "if (nx < dp[k][l].x || (nx == dp[k][l].x && ny > dp[k][l].y)) {",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java",
        "aftercode": "if (nx <= dp[k][l].x || (nx == dp[k][l].x && ny > dp[k][l].y)) {"
    },
    {
        "id": 149,
        "line": 81,
        "precode": "if (nx < dp[k][l].x || (nx == dp[k][l].x && ny > dp[k][l].y)) {",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java",
        "aftercode": "if (nx < dp[k][l].x || (nx == dp[k][l].x && ny >= dp[k][l].y)) {"
    },
    {
        "id": 150,
        "line": 80,
        "precode": "long ny = y +  (ceil(Math.max(dist[k][l] - y, 0), p[i][j]) * p[i][j]) - dist[k][l];",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java",
        "aftercode": "long ny = y +  (ceil(Math.max(dist[k][l] - y, 0), p[i][j]) * (p[i][j] + 1)) - dist[k][l];"
    },
    {
        "id": 151,
        "line": 21,
        "precode": "if (c[0] != '<' || c[s.length() - 1] != '>' || s.length() <= 2) {",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java",
        "aftercode": "if (c[0] == '<' || c[s.length() - 1] == '>' || s.length() <= 2) {"
    },
    {
        "id": 152,
        "line": 22,
        "precode": "pw.println(\"No\");",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java",
        "aftercode": "pw.println(\"Invalid\");"
    },
    {
        "id": 153,
        "line": 24,
        "precode": "boolean flag = true;",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java",
        "aftercode": "boolean flag = false;"
    },
    {
        "id": 154,
        "line": 25,
        "precode": "for (int i = 1; i < s.length() - 1; i++) {",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java",
        "aftercode": "for (int i = 0; i < s.length(); i++) {"
    },
    {
        "id": 155,
        "line": 31,
        "precode": "pw.println(flag ? \"Yes\" : \"No\");",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java",
        "aftercode": "pw.println(flag ? \"Valid\" : \"Invalid\");"
    },
    {
        "id": 156,
        "line": 7,
        "precode": "long input = scan.nextLong();",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java",
        "aftercode": "long input = scan.nextInt();"
    },
    {
        "id": 157,
        "line": 8,
        "precode": "if(input + 9 < 0 && (input + 9) % 10 != 0){",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java",
        "aftercode": "if(input + 9 <= 0 && (input + 9) % 10 != 0){"
    },
    {
        "id": 158,
        "line": 9,
        "precode": "long result = (long)((input + 9) / 10) - 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java",
        "aftercode": "long result = (long)((input + 8) / 10) - 1;"
    },
    {
        "id": 159,
        "line": 15,
        "precode": "System.out.println(result);",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java",
        "aftercode": "System.out.print(result);"
    },
    {
        "id": 160,
        "line": 12,
        "precode": "long result = (long)((input + 9) / 10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java",
        "aftercode": "long result = (long)((input + 8) / 10);"
    },
    {
        "id": 161,
        "line": 7,
        "precode": "long X = sc.nextLong();",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java",
        "aftercode": "int X = sc.nextInt();"
    },
    {
        "id": 162,
        "line": 8,
        "precode": "if(X > 0 && X % 10 != 0) {",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java",
        "aftercode": "if(X >= 0 && X % 10 != 0) {"
    },
    {
        "id": 163,
        "line": 8,
        "precode": "if(X > 0 && X % 10 != 0) {",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java",
        "aftercode": "if(X > 0 || X % 10 != 0) {"
    },
    {
        "id": 164,
        "line": 7,
        "precode": "long X = sc.nextLong();",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java",
        "aftercode": "double X = sc.nextDouble();"
    },
    {
        "id": 165,
        "line": 7,
        "precode": "long X = sc.nextLong();",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java",
        "aftercode": "String X = sc.next();"
    },
    {
        "id": 166,
        "line": 4,
        "precode": "Scanner sc = new Scanner(System.in);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java",
        "aftercode": "Scanner sc = new Scanner(System.console().readLine());"
    },
    {
        "id": 167,
        "line": 6,
        "precode": "if(x%10==0 || x<0)",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java",
        "aftercode": "if(x%10!=0 || x<0)"
    },
    {
        "id": 168,
        "line": 6,
        "precode": "System.out.println(x/10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java",
        "aftercode": "System.out.println(x/5);"
    },
    {
        "id": 169,
        "line": 7,
        "precode": "else System.out.println(x/10+1);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java",
        "aftercode": "else System.out.println(x/10);"
    },
    {
        "id": 170,
        "line": 5,
        "precode": "long x = sc.nextLong();",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java",
        "aftercode": "int x = sc.nextInt();"
    },
    {
        "id": 171,
        "line": 9,
        "precode": "BigDecimal divisor = new BigDecimal(\"10.0\");",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java",
        "aftercode": "BigDecimal divisor = new BigDecimal(\"5.0\");"
    },
    {
        "id": 172,
        "line": 10,
        "precode": "BigDecimal div = x.divide(divisor);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java",
        "aftercode": "BigDecimal div = x.multiply(divisor);"
    },
    {
        "id": 173,
        "line": 11,
        "precode": "System.out.println( div.setScale(0, RoundingMode.CEILING).toPlainString());",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java",
        "aftercode": "System.out.println( div.setScale(2, RoundingMode.CEILING).toPlainString());"
    },
    {
        "id": 174,
        "line": 11,
        "precode": "System.out.println( div.setScale(0, RoundingMode.CEILING).toPlainString());",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java",
        "aftercode": "System.out.println( div.setScale(0, RoundingMode.FLOOR).toPlainString());"
    },
    {
        "id": 175,
        "line": 12,
        "precode": "input.close();",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java",
        "aftercode": "// input.close();"
    },
    {
        "id": 176,
        "line": 7,
        "precode": "sc.close();",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java",
        "aftercode": "//sc.close();"
    },
    {
        "id": 177,
        "line": 8,
        "precode": "long y = 0;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java",
        "aftercode": "long y = 1;"
    },
    {
        "id": 178,
        "line": 9,
        "precode": "if (x % 10 == 0 || x < 0) {",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java",
        "aftercode": "if (x % 10 != 0 || x < 0) {"
    },
    {
        "id": 179,
        "line": 9,
        "precode": "if (x % 10 == 0 || x < 0) {",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java",
        "aftercode": "if (x % 10 == 0 && x < 0) {"
    },
    {
        "id": 180,
        "line": 10,
        "precode": "y = x / 10;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java",
        "aftercode": "y = x / 5;"
    },
    {
        "id": 181,
        "line": 12,
        "precode": "result = ((X-1)/ 10) + 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java",
        "aftercode": "result = ((X-1)/ 10);"
    },
    {
        "id": 182,
        "line": 12,
        "precode": "result = ((X-1)/ 10) + 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java",
        "aftercode": "result = ((X+1)/ 10) + 1;"
    },
    {
        "id": 183,
        "line": 12,
        "precode": "result = ((X-1)/ 10) + 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java",
        "aftercode": "result = ((X-1)/ 5) + 1;"
    },
    {
        "id": 184,
        "line": 14,
        "precode": "result = (X/ 10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java",
        "aftercode": "result = (X/ 5);"
    },
    {
        "id": 185,
        "line": 14,
        "precode": "result = (X/ 10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java",
        "aftercode": "result = (X/ 20);"
    },
    {
        "id": 186,
        "line": 28,
        "precode": "num-=((long)A.get(i)*(A.get(i)-1)/2);",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java",
        "aftercode": "num-=((long)A.get(i)*(A.get(i)-1)/3);"
    },
    {
        "id": 187,
        "line": 28,
        "precode": "num-=((long)A.get(i)*(A.get(i)-1)/2);",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java",
        "aftercode": "num-=((long)A.get(i)*(A.get(i)-1)/4);"
    },
    {
        "id": 188,
        "line": 29,
        "precode": "if(A.get(i)>1) {",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java",
        "aftercode": "if(A.get(i)>2) {"
    },
    {
        "id": 189,
        "line": 29,
        "precode": "if(A.get(i)>1) {",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java",
        "aftercode": "if(A.get(i)>=1) {"
    },
    {
        "id": 190,
        "line": 28,
        "precode": "num-=((long)A.get(i)*(A.get(i)-1)/2);",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java",
        "aftercode": "num+=((long)A.get(i)*(A.get(i)-1)/2);"
    },
    {
        "id": 201,
        "line": 143,
        "precode": "for(int i = r; i < r + x; i++) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java",
        "aftercode": "for(int i = r; i <= r + x; i++) {"
    },
    {
        "id": 202,
        "line": 144,
        "precode": "for(int j = c; j < c + y; j++) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java",
        "aftercode": "for(int j = c; j <= c + y; j++) {"
    },
    {
        "id": 203,
        "line": 138,
        "precode": "if(g[i][j]) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java",
        "aftercode": "if(!g[i][j]) {"
    },
    {
        "id": 204,
        "line": 138,
        "precode": "if(g[i][j]) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java",
        "aftercode": "if(g[i-1][j-1]) {"
    },
    {
        "id": 205,
        "line": 138,
        "precode": "if(g[i][j]) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java",
        "aftercode": "if(g[i+1][j+1]) {"
    },
    {
        "id": 206,
        "line": 47,
        "precode": "hit[i] = true;",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java",
        "aftercode": "hit[i] = false;"
    },
    {
        "id": 207,
        "line": 48,
        "precode": "f[ds.root(i)]--;",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java",
        "aftercode": "f[ds.root(i)] = 0;"
    },
    {
        "id": 208,
        "line": 46,
        "precode": "if(f[ds.root(i)] > 0){",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java",
        "aftercode": "if(f[ds.root(i)] == 0){"
    },
    {
        "id": 209,
        "line": 45,
        "precode": "for(int i = 0;i < n;i++){",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java",
        "aftercode": "for(int i = 0;i <= n;i++){"
    },
    {
        "id": 210,
        "line": 44,
        "precode": "boolean[] hit = new boolean[n+1];",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java",
        "aftercode": "boolean[] hit = new boolean[n];"
    },
    {
        "id": 221,
        "line": 20,
        "precode": "int odd = b % 5;",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java",
        "aftercode": "int odd = b % 3;"
    },
    {
        "id": 222,
        "line": 21,
        "precode": "int base = 7 * ( (b - 1) / 5);",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java",
        "aftercode": "int base = 5 * ( (b - 1) / 5);"
    },
    {
        "id": 223,
        "line": 21,
        "precode": "int base = 7 * ( (b - 1) / 5);",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java",
        "aftercode": "int base = 7 * ( (b) / 5);"
    },
    {
        "id": 224,
        "line": 22,
        "precode": "switch (odd) {",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java",
        "aftercode": "switch (odd + 1) {"
    },
    {
        "id": 225,
        "line": 22,
        "precode": "switch (odd) {",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java",
        "aftercode": "switch ((odd + 2) % 5) {"
    },
    {
        "id": 226,
        "line": 11,
        "precode": "for (long i : set)",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java",
        "aftercode": "for (long i = 0; i < set.size(); i++)"
    },
    {
        "id": 227,
        "line": 12,
        "precode": "if (i <= k)",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java",
        "aftercode": "if (i < k)"
    },
    {
        "id": 228,
        "line": 22,
        "precode": "sum1 += i;",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java",
        "aftercode": "sum1 -= i;"
    },
    {
        "id": 229,
        "line": 12,
        "precode": "if (i <= k)",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java",
        "aftercode": "if (i >= k)"
    },
    {
        "id": 230,
        "line": 12,
        "precode": "if (i <= k)",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java",
        "aftercode": "if (i != k)"
    },
    {
        "id": 241,
        "line": 12,
        "precode": "long[][][] dp = new long[N][2][2];",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java",
        "aftercode": "long[][][] dp = new long[N][3][2];"
    },
    {
        "id": 242,
        "line": 14,
        "precode": "dp[0][0][1] = C[0];",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java",
        "aftercode": "dp[0][0][1] = C[0] + 1;"
    },
    {
        "id": 243,
        "line": 15,
        "precode": "dp[0][1][0] = Integer.MAX_VALUE;",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java",
        "aftercode": "dp[0][1][0] = Integer.MAX_VALUE - 1;"
    },
    {
        "id": 244,
        "line": 13,
        "precode": "dp[0][0][0] = 0;",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java",
        "aftercode": "dp[0][0][0] = -1;"
    },
    {
        "id": 245,
        "line": 14,
        "precode": "dp[0][0][1] = C[0];",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java",
        "aftercode": "dp[0][0][1] = C[0] * 2;"
    },
    {
        "id": 256,
        "line": 52,
        "precode": "long min = F0[N-1]+F1[N-1];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long min = F0[N-1]*F1[N-1];"
    },
    {
        "id": 257,
        "line": 55,
        "precode": "long iSum0 = F1[N-1] - F1[i] + F0[i];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long iSum0 = F1[N-1] + F1[i] + F0[i];"
    },
    {
        "id": 258,
        "line": 56,
        "precode": "long iSum1 = F0[N-1] - F0[i] + F1[i];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long iSum1 = F0[N-1] + F0[i] + F1[i];"
    },
    {
        "id": 259,
        "line": 55,
        "precode": "long iSum0 = F1[N-1] - F1[i] + F0[i];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long iSum0 = F1[N-1] - F1[i] - F0[i];"
    },
    {
        "id": 260,
        "line": 52,
        "precode": "long min = F0[N-1]+F1[N-1];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long min = F0[N-2]+F1[N-1];"
    },
    {
        "id": 276,
        "line": 55,
        "precode": "out.println(map.size());",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java",
        "aftercode": "out.println(map2.size());"
    },
    {
        "id": 277,
        "line": 56,
        "precode": "Map<Integer, Long> map2 = map.entrySet().stream()",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java",
        "aftercode": "Map<Integer, Long> map2 = map.entrySet().parallelStream()"
    },
    {
        "id": 278,
        "line": 57,
        "precode": ".sorted(Map.Entry.comparingByKey())",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java",
        "aftercode": ".sorted(Map.Entry.comparingByValue())"
    },
    {
        "id": 279,
        "line": 58,
        "precode": ".collect(Collectors.toMap(",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java",
        "aftercode": ".collect(Collectors.toUnmodifiableMap("
    },
    {
        "id": 280,
        "line": 59,
        "precode": "Map.Entry::getKey,",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java",
        "aftercode": "Map.Entry::getValue,"
    },
    {
        "id": 281,
        "line": 21,
        "precode": "PrintWriter out = new PrintWriter(System.out);",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java",
        "aftercode": "PrintWriter out = new PrintWriter(new FileWriter(\"output.txt\"));"
    },
    {
        "id": 282,
        "line": 36,
        "precode": "s = new int[sn];",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java",
        "aftercode": "s = new int[sn + 1];"
    },
    {
        "id": 283,
        "line": 43,
        "precode": "t = new int[tn];",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java",
        "aftercode": "t = new int[tn + 1];"
    },
    {
        "id": 284,
        "line": 50,
        "precode": "long r = 100000000000000000L;    //10^17",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java",
        "aftercode": "long r = 1000000000000L;    //10^12"
    },
    {
        "id": 285,
        "line": 51,
        "precode": "long ans = -1L;",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java",
        "aftercode": "long ans = 0L;"
    },
    {
        "id": 286,
        "line": 31,
        "precode": "a[i] = nextInt();",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java",
        "aftercode": "a[i] = nextInt() % n;"
    },
    {
        "id": 287,
        "line": 31,
        "precode": "a[i] = nextInt();",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java",
        "aftercode": "a[i] = Math.abs(nextInt());"
    },
    {
        "id": 288,
        "line": 31,
        "precode": "a[i] = nextInt();",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java",
        "aftercode": "a[i] = nextInt() * 2;"
    },
    {
        "id": 289,
        "line": 31,
        "precode": "a[i] = nextInt();",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java",
        "aftercode": "a[i] = (nextInt() + 1);"
    },
    {
        "id": 290,
        "line": 160,
        "precode": "--a[i];",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java",
        "aftercode": "a[i]++;"
    },
    {
        "id": 291,
        "line": 51,
        "precode": "node.minVal = m;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java",
        "aftercode": "node.minVal = m + 1;"
    },
    {
        "id": 292,
        "line": 51,
        "precode": "node.minVal = m;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java",
        "aftercode": "node.minVal = -m;"
    },
    {
        "id": 293,
        "line": 51,
        "precode": "node.minVal = m;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java",
        "aftercode": "node.minVal = Math.max(left.minVal, right.minVal);"
    },
    {
        "id": 294,
        "line": 51,
        "precode": "node.minVal = m;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java",
        "aftercode": "node.minVal = left.minVal;"
    },
    {
        "id": 295,
        "line": 51,
        "precode": "node.minVal = m;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java",
        "aftercode": "node.minVal = right.minVal;"
    },
    {
        "id": 296,
        "line": 10,
        "precode": "int a = sc.nextInt();",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java",
        "aftercode": "int a = 5;"
    },
    {
        "id": 297,
        "line": 11,
        "precode": "if (a % k == 0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java",
        "aftercode": "if (a % (k + 1) == 0){"
    },
    {
        "id": 298,
        "line": 12,
        "precode": "System.out.print(a/k + \" \");",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java",
        "aftercode": "System.out.print((a+k) + \" \");"
    },
    {
        "id": 299,
        "line": 11,
        "precode": "if (a % k == 0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java",
        "aftercode": "if (a % k != 0){"
    },
    {
        "id": 300,
        "line": 12,
        "precode": "System.out.print(a/k + \" \");",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java",
        "aftercode": "System.out.print(a*k + \" \");"
    },
    {
        "id": 301,
        "line": 8,
        "precode": "int num = sc.nextInt();",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java",
        "aftercode": "int num = sc.nextByte();"
    },
    {
        "id": 302,
        "line": 9,
        "precode": "if(num%b==0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java",
        "aftercode": "if(num%b!=0){"
    },
    {
        "id": 303,
        "line": 9,
        "precode": "if(num%b==0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java",
        "aftercode": "if(num>b){"
    },
    {
        "id": 304,
        "line": 9,
        "precode": "if(num%b==0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java",
        "aftercode": "if(num<b){"
    },
    {
        "id": 305,
        "line": 10,
        "precode": "System.out.print((num/b)+\" \");",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java",
        "aftercode": "System.out.print((num*b)+\" \");"
    },
    {
        "id": 306,
        "line": 12,
        "precode": "for(int i=1;i<=length;i++){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "for(int i=0;i<length;i++){"
    },
    {
        "id": 307,
        "line": 13,
        "precode": "for(int j=0;j<=length-i;j++){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "for(int j=0;j<length-i;j++){"
    },
    {
        "id": 308,
        "line": 14,
        "precode": "String temp = S.substring(j,j+i);",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "String temp = S.substring(j,j+i-1);"
    },
    {
        "id": 309,
        "line": 15,
        "precode": "partString.add(temp);",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "partString.remove(temp);"
    },
    {
        "id": 310,
        "line": 14,
        "precode": "String temp = S.substring(j,j+i);",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "String temp = String.valueOf(S.charAt(j));"
    },
    {
        "id": 311,
        "line": 13,
        "precode": "for(int i = 0;i < S.length();i++){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "for(int i = 0;i <= S.length();i++){"
    },
    {
        "id": 312,
        "line": 14,
        "precode": "for(int j = i+1;j <= S.length();j++){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "for(int j = i;j <= S.length();j++){"
    },
    {
        "id": 313,
        "line": 15,
        "precode": "String newS = S.substring(i,j);",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "String newS = S.substring(i,j-1);"
    },
    {
        "id": 314,
        "line": 16,
        "precode": "if(!Slist.contains(newS)){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "if(Slist.contains(newS)){"
    },
    {
        "id": 315,
        "line": 16,
        "precode": "if(!Slist.contains(newS)){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "if(Slist.isEmpty()){"
    },
    {
        "id": 316,
        "line": 24,
        "precode": "i++;",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "i--;"
    },
    {
        "id": 317,
        "line": 26,
        "precode": "interval.add((x - y - 1) % (A + B));",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "interval.add((x - y + 1) % (A + B));"
    },
    {
        "id": 318,
        "line": 26,
        "precode": "interval.add((x - y - 1) % (A + B));",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "interval.add((x + y - 1) % (A + B));"
    },
    {
        "id": 319,
        "line": 26,
        "precode": "interval.add((x - y - 1) % (A + B));",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "interval.add((x - y - 1));"
    },
    {
        "id": 320,
        "line": 27,
        "precode": "y = x;",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "y = y + x;"
    },
    {
        "id": 321,
        "line": 19,
        "precode": "if(a + b >= ccnt && (a + b - ccnt) % 2 == 0 && Math.abs(a - b) <= ccnt && a + b + ccnt <= 120){",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java",
        "aftercode": "if(a + b > ccnt && (a + b - ccnt) % 2 == 0 && Math.abs(a - b) <= ccnt && a + b + ccnt <= 120){"
    },
    {
        "id": 322,
        "line": 19,
        "precode": "if(a + b >= ccnt && (a + b - ccnt) % 2 == 0 && Math.abs(a - b) <= ccnt && a + b + ccnt <= 120){",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java",
        "aftercode": "if(a + b >= ccnt && (a + b - ccnt) % 2 != 0 && Math.abs(a - b) <= ccnt && a + b + ccnt <= 120){"
    },
    {
        "id": 323,
        "line": 19,
        "precode": "if(a + b >= ccnt && (a + b - ccnt) % 2 == 0 && Math.abs(a - b) <= ccnt && a + b + ccnt <= 120){",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java",
        "aftercode": "if(a + b >= ccnt && (a + b - ccnt) % 2 == 0 && Math.abs(a - b) >= ccnt && a + b + ccnt <= 120){"
    },
    {
        "id": 324,
        "line": 19,
        "precode": "if(a + b >= ccnt && (a + b - ccnt) % 2 == 0 && Math.abs(a - b) <= ccnt && a + b + ccnt <= 120){",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java",
        "aftercode": "if(a + b >= ccnt && (a + b - ccnt) % 2 == 0 && Math.abs(a - b) <= ccnt && a + b + ccnt < 120){"
    },
    {
        "id": 325,
        "line": 20,
        "precode": "ccnt = (a + b) - ccnt;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java",
        "aftercode": "ccnt = (a + b) + ccnt;"
    },
    {
        "id": 326,
        "line": 10,
        "precode": "int L = 60;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java",
        "aftercode": "int L = 59;"
    },
    {
        "id": 327,
        "line": 12,
        "precode": "for(int n00 = 0; n00 <= L - c; n00++) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java",
        "aftercode": "for(int n00 = 0; n00 < L - c; n00++) {"
    },
    {
        "id": 328,
        "line": 13,
        "precode": "for(int n01 = 0; n01 <= c; n01++) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java",
        "aftercode": "for(int n01 = 1; n01 <= c; n01++) {"
    },
    {
        "id": 329,
        "line": 14,
        "precode": "int n10 = c - n01;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java",
        "aftercode": "int n10 = c + n01;"
    },
    {
        "id": 330,
        "line": 10,
        "precode": "int L = 60;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java",
        "aftercode": "int L = 61;"
    },
    {
        "id": 331,
        "line": 11,
        "precode": "int pc = Long.bitCount(c);",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java",
        "aftercode": "int pc = Long.numberOfLeadingZeros(c);"
    },
    {
        "id": 332,
        "line": 12,
        "precode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java",
        "aftercode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) >= 120 || a > b + pc || b > a + pc) {"
    },
    {
        "id": 333,
        "line": 12,
        "precode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java",
        "aftercode": "if (a + b <= pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {"
    },
    {
        "id": 334,
        "line": 12,
        "precode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java",
        "aftercode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 100 || a > b + pc || b > a + pc) {"
    },
    {
        "id": 335,
        "line": 12,
        "precode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java",
        "aftercode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a >= b + pc || b >= a + pc) {"
    },
    {
        "id": 336,
        "line": 24,
        "precode": "long right = (long)1e18;",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java",
        "aftercode": "long right = (long)1e17;"
    },
    {
        "id": 337,
        "line": 25,
        "precode": "while (right - left > 1) {",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java",
        "aftercode": "while (right - left >= 1) {"
    },
    {
        "id": 338,
        "line": 26,
        "precode": "long mid = left + (right - left) / 2;",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java",
        "aftercode": "long mid = left + (right - left) / 3;"
    },
    {
        "id": 339,
        "line": 27,
        "precode": "if (smallerNeq(mid) < K) {",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java",
        "aftercode": "if (smallerNeq(mid) <= K) {"
    },
    {
        "id": 340,
        "line": 28,
        "precode": "left = mid;",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java",
        "aftercode": "left = mid + 1;"
    },
    {
        "id": 341,
        "line": 8,
        "precode": "return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java",
        "aftercode": "return (long) (y1 - y2) / (x1 - x3) == (long) (x1 - x2) / (y1 - y3);"
    },
    {
        "id": 342,
        "line": 8,
        "precode": "return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java",
        "aftercode": "return (long) (y1 - y2) * (x2 - x3) == (long) (x1 - x2) * (y1 - y3);"
    },
    {
        "id": 343,
        "line": 8,
        "precode": "return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java",
        "aftercode": "return (long) (y1 - y2) * (x1 - x3) != (long) (x1 - x2) * (y1 - y3);"
    },
    {
        "id": 344,
        "line": 8,
        "precode": "return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java",
        "aftercode": "return (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);"
    },
    {
        "id": 345,
        "line": 8,
        "precode": "return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java",
        "aftercode": "return (long) (y2 - y1) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);"
    },
    {
        "id": 346,
        "line": 13,
        "precode": "long a[] = Arrays.stream(new long[n]).map(e -> sc.nextLong()).toArray();",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java",
        "aftercode": "long a[] = new long[n]; for(int i = 0; i < n; i++) { a[i] = sc.nextLong(); }"
    },
    {
        "id": 347,
        "line": 14,
        "precode": "long sum = Arrays.stream(a).sum();",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java",
        "aftercode": "long sum = 0; for(long num : a) { sum += num; }"
    },
    {
        "id": 348,
        "line": 16,
        "precode": "long dpMax[] = new long[n];",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java",
        "aftercode": "long dpMax[] = Arrays.copyOf(a, n);"
    },
    {
        "id": 349,
        "line": 13,
        "precode": "long a[] = Arrays.stream(new long[n]).map(e -> sc.nextLong()).toArray();",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java",
        "aftercode": "long a[] = new long[n]; Arrays.setAll(a, i -> sc.nextLong());"
    },
    {
        "id": 350,
        "line": 16,
        "precode": "long dpMax[] = new long[n];",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java",
        "aftercode": "long dpMax[] = new long[n]; Arrays.fill(dpMax, Long.MIN_VALUE);"
    },
    {
        "id": 351,
        "line": 15,
        "precode": "if (C <= 0) frag *= -1;",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java",
        "aftercode": "if (C >= 0) frag *= -1;"
    },
    {
        "id": 352,
        "line": 17,
        "precode": "for (int i = 0; i < N; i++) {",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java",
        "aftercode": "for (int i = 1; i < N; i++) {"
    },
    {
        "id": 353,
        "line": 15,
        "precode": "if (C <= 0) frag *= -1;",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java",
        "aftercode": "if (C < 0) frag *= -1;"
    },
    {
        "id": 354,
        "line": 17,
        "precode": "for (int i = 0; i < N; i++) {",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java",
        "aftercode": "for (int i = 0; i <= N; i++) {"
    },
    {
        "id": 355,
        "line": 14,
        "precode": "long frag = 1;",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java",
        "aftercode": "long frag = -1;"
    },
    {
        "id": 361,
        "line": 13,
        "precode": "long n = Long.parseLong(f.readLine());",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java",
        "aftercode": "long n = Integer.parseInt(f.readLine());"
    },
    {
        "id": 362,
        "line": 14,
        "precode": "long n2 = (n*n + MOD)%MOD;",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java",
        "aftercode": "long n2 = (n*n - MOD)%MOD;"
    },
    {
        "id": 363,
        "line": 13,
        "precode": "long n = Long.parseLong(f.readLine());",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java",
        "aftercode": "long n = Math.abs(Long.parseLong(f.readLine()));"
    },
    {
        "id": 364,
        "line": 14,
        "precode": "long n2 = (n*n + MOD)%MOD;",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java",
        "aftercode": "long n2 = (n*n)%MOD;"
    },
    {
        "id": 365,
        "line": 13,
        "precode": "long n = Long.parseLong(f.readLine());",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java",
        "aftercode": "long n = Long.parseUnsignedLong(f.readLine());"
    },
    {
        "id": 371,
        "line": 24,
        "precode": "long cnt = sup - 1 - get(b1, sup - 1);",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java",
        "aftercode": "long cnt = sup - 2 - get(b1, sup - 1);"
    },
    {
        "id": 372,
        "line": 25,
        "precode": "l1.add(cnt * a(n - i - 1, k - i - 1));",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java",
        "aftercode": "l1.add((cnt + 1) * a(n - i - 1, k - i - 1));"
    },
    {
        "id": 373,
        "line": 26,
        "precode": "long v1 = a(n - i - 1, k - i - 1) + ((cnt - 1) * (k - i - 1) % mod) * a(n - i - 2, k - i - 2);",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java",
        "aftercode": "long v1 = a(n - i - 1, k - i - 1) + ((cnt + 1) * (k - i - 1) % mod) * a(n - i - 2, k - i - 2);"
    },
    {
        "id": 374,
        "line": 26,
        "precode": "long v1 = a(n - i - 1, k - i - 1) + ((cnt - 1) * (k - i - 1) % mod) * a(n - i - 2, k - i - 2);",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java",
        "aftercode": "long v1 = a(n - i - 1, k - i - 1) - ((cnt - 1) * (k - i - 1) % mod) * a(n - i - 2, k - i - 2);"
    },
    {
        "id": 375,
        "line": 26,
        "precode": "long v1 = a(n - i - 1, k - i - 1) + ((cnt - 1) * (k - i - 1) % mod) * a(n - i - 2, k - i - 2);",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java",
        "aftercode": "long v1 = a(n - i - 1, k - i - 1);"
    },
    {
        "id": 376,
        "line": 20,
        "precode": "if(used[(i+1)%n]){",
        "filepath": "java2024-0304\\arc175_a\\Java\\51663025\\correctVersion.java",
        "aftercode": "if(!used[(i+1)%n]){"
    },
    {
        "id": 377,
        "line": 25,
        "precode": "if(in.charAt(i-1)=='R'){",
        "filepath": "java2024-0304\\arc175_a\\Java\\51663025\\correctVersion.java",
        "aftercode": "if(in.charAt(i-1)=='L'){"
    },
    {
        "id": 378,
        "line": 31,
        "precode": "if(in.charAt(i-1)=='?'){",
        "filepath": "java2024-0304\\arc175_a\\Java\\51663025\\correctVersion.java",
        "aftercode": "if(in.charAt(i-1)!='?'){"
    },
    {
        "id": 379,
        "line": 30,
        "precode": "if(used[(i-1)%n]){",
        "filepath": "java2024-0304\\arc175_a\\Java\\51663025\\correctVersion.java",
        "aftercode": "if(!used[(i-1)%n]){"
    },
    {
        "id": 380,
        "line": 35,
        "precode": "if(in.charAt(i-1)=='L'){",
        "filepath": "java2024-0304\\arc175_a\\Java\\51663025\\correctVersion.java",
        "aftercode": "if(in.charAt(i-1)=='R'){"
    },
    {
        "id": 381,
        "line": 26,
        "precode": "if(str.charAt(p[i]) == '?'){",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java",
        "aftercode": "if(str.charAt(p[i]) != '?'){"
    },
    {
        "id": 382,
        "line": 48,
        "precode": "if(used[left(p[i], n)]) {",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java",
        "aftercode": "if(!used[left(p[i], n)]) {"
    },
    {
        "id": 383,
        "line": 28,
        "precode": "resultR *= 2;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java",
        "aftercode": "resultR *= 3;"
    },
    {
        "id": 384,
        "line": 28,
        "precode": "resultR *= 2;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java",
        "aftercode": "// resultR *= 2;"
    },
    {
        "id": 385,
        "line": 29,
        "precode": "resultR %= mod;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java",
        "aftercode": "resultR += mod;"
    },
    {
        "id": 386,
        "line": 20,
        "precode": "if(s[p] == '?') ans_left *= 2;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java",
        "aftercode": "if(s[p] == '?') ans_left += 2;"
    },
    {
        "id": 387,
        "line": 24,
        "precode": "ans_left %= mod;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java",
        "aftercode": "ans_left -= mod;"
    },
    {
        "id": 388,
        "line": 26,
        "precode": "if(took_spoon[(p + n - 1) % n]) {",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java",
        "aftercode": "if(!took_spoon[(p + n - 1) % n]) {"
    },
    {
        "id": 389,
        "line": 29,
        "precode": "if(s[p] == 'L') ans_right *= 0;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java",
        "aftercode": "if(s[p] == 'L') ans_right *= 1;"
    },
    {
        "id": 390,
        "line": 31,
        "precode": "ans_right %= mod;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java",
        "aftercode": "ans_right += mod;"
    },
    {
        "id": 391,
        "line": 29,
        "precode": "writer.write(Long.toString(B * (open - N) + Math.min(A, 2 * B) * ((Math.abs(minSum) + 1) / 2)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "writer.write(Long.toString(B * (open - N) + Math.max(A, 2 * B) * ((Math.abs(minSum) + 1) / 2)));"
    },
    {
        "id": 392,
        "line": 31,
        "precode": "writer.write(Long.toString(B * (N - open) + Math.min(A, 2 * B) * ((2L * (open - N) - minSum + 1) / 2)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "writer.write(Long.toString(B * (N - open) + Math.max(A, 2 * B) * ((2L * (open - N) - minSum + 1) / 2)));"
    },
    {
        "id": 393,
        "line": 29,
        "precode": "writer.write(Long.toString(B * (open - N) + Math.min(A, 2 * B) * ((Math.abs(minSum) + 1) / 2)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "writer.write(Long.toString(B * (open - N) + Math.min(A, 2L * B) * ((Math.abs(minSum) + 1) / 2)));"
    },
    {
        "id": 394,
        "line": 31,
        "precode": "writer.write(Long.toString(B * (N - open) + Math.min(A, 2 * B) * ((2L * (open - N) - minSum + 1) / 2)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "writer.write(Long.toString(B * (N - open) + Math.min(A, 2L * B) * ((2L * (open - N) - minSum + 2) / 2)));"
    },
    {
        "id": 395,
        "line": 29,
        "precode": "writer.write(Long.toString(B * (open - N) + Math.min(A, 2 * B) * ((Math.abs(minSum) + 1) / 2)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "writer.write(Long.toString(B * (open - N) + Math.min(A, 2 * B) * ((Math.abs(minSum) + 2) / 2)));"
    },
    {
        "id": 396,
        "line": 44,
        "precode": "System.out.println(answer + ((long) (L+R)/2*B));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java",
        "aftercode": "System.out.println(answer + ((long) (L+R)/3*B));"
    },
    {
        "id": 397,
        "line": 44,
        "precode": "System.out.println(answer + ((long) (L+R)/2*B));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java",
        "aftercode": "System.out.println(answer + ((long) (L+R)/1*B));"
    },
    {
        "id": 398,
        "line": 44,
        "precode": "System.out.println(answer + ((long) (L+R)/2*B));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java",
        "aftercode": "System.out.println(answer + ((long) (L+R)/2*2));"
    },
    {
        "id": 399,
        "line": 44,
        "precode": "System.out.println(answer + ((long) (L+R)/2*B));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java",
        "aftercode": "System.out.println((answer * 2) + ((long) (L+R)/2*B));"
    },
    {
        "id": 400,
        "line": 47,
        "precode": "answer += (long) (L / 2) *B;",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java",
        "aftercode": "answer += (long) (L / 3) *B;"
    },
    {
        "id": 401,
        "line": 41,
        "precode": "sumR %= 2;",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java",
        "aftercode": "sumR += 2;"
    },
    {
        "id": 402,
        "line": 41,
        "precode": "sumR %= 2;",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java",
        "aftercode": "sumR = 0;"
    },
    {
        "id": 403,
        "line": 42,
        "precode": "out.println(ans + b * 2 * sumR);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java",
        "aftercode": "out.println(ans + b * sumR);"
    },
    {
        "id": 404,
        "line": 44,
        "precode": "long mi = Math.min(sumR, sumL);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java",
        "aftercode": "long mi = Math.max(sumR, sumL);"
    },
    {
        "id": 405,
        "line": 45,
        "precode": "long mx = Math.max(sumR, sumL);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java",
        "aftercode": "long mx = Math.min(sumR, sumL);"
    },
    {
        "id": 406,
        "line": 54,
        "precode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java",
        "aftercode": "System.out.println(ans + ((stack.size() / 2L) * 2 * Math.min(swapCost, 2 * replaceCost)));"
    },
    {
        "id": 407,
        "line": 54,
        "precode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java",
        "aftercode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.max(swapCost, 2 * replaceCost)));"
    },
    {
        "id": 408,
        "line": 54,
        "precode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java",
        "aftercode": "System.out.println(ans + ((stack.size() / 1L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));"
    },
    {
        "id": 409,
        "line": 54,
        "precode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java",
        "aftercode": "System.out.println(ans + ((stack.size() / 3L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));"
    },
    {
        "id": 410,
        "line": 54,
        "precode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java",
        "aftercode": "System.out.println(ans + ((stack.size() / 2L - 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));"
    }
]