[
    {
        "id": 6,
        "line": 6,
        "precode": "if(sc.nextInt() + sc.nextInt() == 0) System.out.print(1);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java",
        "aftercode": "if(sc.nextInt() + sc.nextInt() == 1) System.out.print(1);"
    },
    {
        "id": 7,
        "line": 7,
        "precode": "else System.out.print(0);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java",
        "aftercode": "else System.out.print(1);"
    },
    {
        "id": 8,
        "line": 6,
        "precode": "if(sc.nextInt() + sc.nextInt() == 0) System.out.print(1);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java",
        "aftercode": "if(sc.nextInt() - sc.nextInt() == 0) System.out.print(1);"
    },
    {
        "id": 9,
        "line": 6,
        "precode": "if(sc.nextInt() + sc.nextInt() == 0) System.out.print(1);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java",
        "aftercode": "if(sc.nextInt() * sc.nextInt() == 0) System.out.print(1);"
    },
    {
        "id": 10,
        "line": 6,
        "precode": "if(sc.nextInt() + sc.nextInt() == 0) System.out.print(1);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java",
        "aftercode": "if(sc.nextInt() - sc.nextInt() == 0) System.out.print(0);"
    },
    {
        "id": 11,
        "line": 14,
        "precode": "if(a[i][j]==1){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java",
        "aftercode": "if(a[i][j]==0){"
    },
    {
        "id": 12,
        "line": 15,
        "precode": "        System.out.print((j+1)+\" \");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java",
        "aftercode": "        System.out.println((j+1));"
    },
    {
        "id": 13,
        "line": 17,
        "precode": "        if(j==(n-1)){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java",
        "aftercode": "        if(i==(n-1)){"
    },
    {
        "id": 14,
        "line": 14,
        "precode": "if(a[i][j]==1){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java",
        "aftercode": "if(a[i][j]==2){"
    },
    {
        "id": 15,
        "line": 13,
        "precode": "        for(int j=0;j<n;j++){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java",
        "aftercode": "        for(int j=n-1;j>=0;j--){"
    },
    {
        "id": 16,
        "line": 9,
        "precode": "int k = scanner.nextInt();",
        "aftercode": "int k = 1;",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java"
    },
    {
        "id": 17,
        "line": 9,
        "precode": "int k = scanner.nextInt();",
        "aftercode": "int k = 0;",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java"
    },
    {
        "id": 18,
        "line": 10,
        "precode": "if(k == 1){",
        "aftercode": "if(k != 1){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java"
    },
    {
        "id": 19,
        "line": 10,
        "precode": "if(k == 1){",
        "aftercode": "if(k == 0){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java"
    },
    {
        "id": 20,
        "line": 10,
        "precode": "if(k == 1){",
        "aftercode": "if(k == 2){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java"
    },
    {
        "id": 21,
        "line": 12,
        "precode": "int r = sc.nextInt();",
        "aftercode": "int t = sc.nextInt();",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java"
    },
    {
        "id": 22,
        "line": 13,
        "precode": "if (r==1){",
        "aftercode": "if (r>1){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java"
    },
    {
        "id": 23,
        "line": 14,
        "precode": "System.out.print(j+\" \");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java",
        "aftercode": "System.out.print(j+\"\\\n\");"
    },
    {
        "id": 24,
        "line": 15,
        "precode": "f=true;",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java",
        "aftercode": "f=false;"
    },
    {
        "id": 25,
        "line": 18,
        "precode": "if (f) System.out.println();",
        "aftercode": "if (!f) System.out.println();",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java"
    },
    {
        "id": 26,
        "line": 10,
        "precode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"\");",
        "aftercode": "outLine.append((sc.nextInt() == 0) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java"
    },
    {
        "id": 27,
        "line": 9,
        "precode": "outLine.append((sc.nextInt() == 1.0) ? j + \" \" : \"\");",
        "aftercode": "outLine.append((sc.nextInt() != 1) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java"
    },
    {
        "id": 28,
        "line": 12,
        "precode": "System.out.println(outLine);",
        "aftercode": "System.out.println(outLine.toString().trim());",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java"
    },
    {
        "id": 29,
        "line": 15,
        "precode": "}",
        "aftercode": "}",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java"
    },
    {
        "id": 30,
        "line": 8,
        "precode": "StringBuffer outLine = new StringBuffer();",
        "aftercode": "StringBuilder outLine = new StringBuilder();",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java"
    },
    {
        "id": 36,
        "line": 6,
        "precode": "long N = sc.nextLong();",
        "aftercode": "long N = sc.nextInt();",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java"
    },
    {
        "id": 37,
        "line": 8,
        "precode": "for (long i  = 0; i * i * i <= N; i++) {",
        "aftercode": "for (long i  = 0; i * i+1 * i <= N; i++) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java"
    },
    {
        "id": 38,
        "line": 9,
        "precode": "list.add(i*i*i);",
        "aftercode": "list.add(i*i);",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java"
    },
    {
        "id": 39,
        "line": 11,
        "precode": "for (int i = list.size()-1; i >= 0; i--) {",
        "aftercode": "for (int i = list.size(); i >= 0; i--) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java"
    },
    {
        "id": 40,
        "line": 12,
        "precode": "if (checkRounded(list.get(i))) {",
        "aftercode": "if (checkExact(list.get(i))) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java"
    },
    {
        "id": 41,
        "line": 21,
        "precode": "if (C.get(i) > N) {",
        "aftercode": "if (C.get(i) < N) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java"
    },
    {
        "id": 42,
        "line": 25,
        "precode": "String S = Long.toString(C.get(i));",
        "aftercode": "String S = Long.toHexString(C.get(i));",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java"
    },
    {
        "id": 43,
        "line": 11,
        "precode": "String s = i * i * i + \"\";",
        "aftercode": "String s = (i * i * i) + \";\"",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java"
    },
    {
        "id": 44,
        "line": 12,
        "precode": "if (check(s) == true) {",
        "aftercode": "if (check(s)) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java"
    },
    {
        "id": 45,
        "line": 8,
        "precode": "long n = Long.parseLong(sc.next());",
        "aftercode": "int n = Integer.parseInt(sc.next());",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java"
    },
    {
        "id": 46,
        "line": 9,
        "precode": "long cube = 0L;",
        "aftercode": "long cube = 1L;",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java"
    },
    {
        "id": 47,
        "line": 11,
        "precode": "String s = i * i * i + \"\";",
        "aftercode": "String s = String.valueOf(i * i * i);",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java"
    },
    {
        "id": 48,
        "line": 24,
        "precode": "System.out.println(\"Yes\");",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java",
        "aftercode": "System.out.println(\"Mutant 1\");"
    },
    {
        "id": 49,
        "line": 26,
        "precode": "sb.append(\"7 7 7 \");",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java",
        "aftercode": "sb.append(\"Mutant 2 \");"
    },
    {
        "id": 50,
        "line": 27,
        "precode": "sb.append(a2).append(' ');",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java",
        "aftercode": "sb.append(\"Mutant 3\").append(' ');"
    },
    {
        "id": 51,
        "line": 28,
        "precode": "sb.append(b2).append(' ');",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java",
        "aftercode": "sb.append(\"Mutant 4\").append(' ');"
    },
    {
        "id": 52,
        "line": 44,
        "precode": "",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java",
        "aftercode": "sb.append(c2).append(' ');"
    },
    {
        "id": 53,
        "line": 42,
        "precode": "int dx=Math.min(a+7,7) - Math.max(a,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java",
        "aftercode": "int dx=Math.min(a+7,7) - Math.max(a,1);"
    },
    {
        "id": 54,
        "line": 43,
        "precode": "int dy=Math.min(b+7,7) - Math.max(b,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java",
        "aftercode": "int dy=Math.min(b+7,7) - Math.max(b,1);"
    },
    {
        "id": 55,
        "line": 42,
        "precode": "int dx=Math.min(a+7,7) - Math.max(a,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java",
        "aftercode": "int dx=Math.min(a+6,7) - Math.max(a,0);"
    },
    {
        "id": 56,
        "line": 42,
        "precode": "int dx=Math.min(a+7,7) - Math.max(a,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java",
        "aftercode": "int dx=Math.min(a+6,7) - Math.max(a,1);"
    },
    {
        "id": 57,
        "line": 43,
        "precode": "int dy=Math.min(b+7,7) - Math.max(b,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java",
        "aftercode": "int dy=Math.min(b+6,7) - Math.max(b,1);"
    },
    {
        "id": 58,
        "line": 135,
        "precode": "            }else {",
        "aftercode": "        } else {",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java"
    },
    {
        "id": 59,
        "line": 135,
        "precode": "            }else {",
        "aftercode": "            } else.",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java"
    },
    {
        "id": 60,
        "line": 135,
        "precode": "            }else {",
        "aftercode": "                } else {",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java"
    },
    {
        "id": 61,
        "line": 135,
        "precode": "            }else {",
        "aftercode": "           } else {",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java"
    },
    {
        "id": 62,
        "line": 135,
        "precode": "            }else {",
        "aftercode": "       } else {.",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java"
    },
    {
        "id": 68,
        "line": 133,
        "precode": "                if (value1[0] == value2[0]) {",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java",
        "aftercode": "                if (value1[0] != value2[0]) {"
    },
    {
        "id": 69,
        "line": 103,
        "precode": "                    if (firsts[left] > firsts[right]) {",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java",
        "aftercode": "                    if (firsts[left] < firsts[right]) {"
    },
    {
        "id": 70,
        "line": 47,
        "precode": "            firstCount[size - 1 + idx] = 1;",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java",
        "aftercode": "            firstCount[size - 1 + idx] = 2;"
    },
    {
        "id": 71,
        "line": 106,
        "precode": "                        ans[0] = value1[0];",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java",
        "aftercode": "                        ans[0] = value2[0];"
    },
    {
        "id": 72,
        "line": 149,
        "precode": "                return 0;",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java",
        "aftercode": "                return 1;"
    },
    {
        "id": 78,
        "line": 5,
        "precode": "Scanner sc = new Scanner(System.in);",
        "aftercode": "Scanner sc = new Scanner(System.in);sc.useDelimiter(\"\\\\|\");",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java"
    },
    {
        "id": 79,
        "line": 6,
        "precode": "System.out.println(String.join(\"\",sc.next().split(\"\\\\|.*\\\\|\")));",
        "aftercode": "System.out.println(String.join(\"\",sc.next().split(\"\\\\|.*\\\\|\")) + \"\");",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java"
    },
    {
        "id": 80,
        "line": 7,
        "precode": "sc.close();",
        "aftercode": "// sc.close();",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java"
    },
    {
        "id": 81,
        "line": 4,
        "precode": "public static void main(String[] args) {",
        "aftercode": "public static void main(String... args) {",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java"
    },
    {
        "id": 82,
        "line": 4,
        "precode": "public static void main(String[] args) {",
        "aftercode": "public static void main(String args[]) {",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java"
    },
    {
        "id": 83,
        "line": 29,
        "precode": "if (pt1!=0) {",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "if (pt1>0) {"
    },
    {
        "id": 84,
        "line": 30,
        "precode": "ans=str.substring(0, pt1);",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "ans=str.substring(0, pt1-1);"
    },
    {
        "id": 85,
        "line": 32,
        "precode": "if (pt2!=pt3-1) {",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "if (pt2<pt3-1) {"
    },
    {
        "id": 86,
        "line": 35,
        "precode": "System.out.println(ans);",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "System.out.println(cnt);"
    },
    {
        "id": 87,
        "line": 15,
        "precode": "pt3=str.length();",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "pt3=s.length();"
    },
    {
        "id": 88,
        "line": 21,
        "precode": "for (int i = inputStrings.size() - 1; i >= 0 ; i--)",
        "aftercode": "for (int i = inputStrings.size() - 1; i >= 1 ; i--)",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java"
    },
    {
        "id": 89,
        "line": 21,
        "precode": "for (int i = inputStrings.size() - 1; i >= 0 ; i--)",
        "aftercode": "for (int i = inputStrings.size() - 2; i >= 0 ; i--)",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java"
    },
    {
        "id": 90,
        "line": 21,
        "precode": "for (int i = inputStrings.size() - 1; i >= 0 ; i--)",
        "aftercode": "for (int i = inputStrings.size() - 2; i > 0 ; i--)",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java"
    },
    {
        "id": 91,
        "line": 21,
        "precode": "for (int i = inputStrings.size() - 1; i >= 0 ; i--)",
        "aftercode": "for (int x = inputStrings.size() - 1; x >= 0 ; x--)",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java"
    },
    {
        "id": 92,
        "line": 21,
        "precode": "for (int i = inputStrings.size() - 1; i >= 0 ; i--)",
        "aftercode": "for (int i = inputStrings.size() - 1; i >= -1 ; i--)",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java"
    },
    {
        "id": 93,
        "line": 67,
        "precode": "if(hs.get(string)==inf) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "if(hs.get(string)==null) {"
    },
    {
        "id": 94,
        "line": 68,
        "precode": "\t\t\tout.print(\"-1\");",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "\t\t\tout.print(0);"
    },
    {
        "id": 95,
        "line": 68,
        "precode": "\t\t\tout.print(\"-1\");",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "\t\t\tout.println(\"-1\");"
    },
    {
        "id": 96,
        "line": 68,
        "precode": "\t\t\tout.print(\"-1\");",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "\t\t\tout.println(hs.get(string));"
    },
    {
        "id": 97,
        "line": 32,
        "precode": "\t\t\tout.print(hs.get(string));",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "\t\t\tout.println(hs.get(string));"
    },
    {
        "id": 98,
        "line": 25,
        "precode": "if(m - j >= length && check(length,j,str)){",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java",
        "aftercode": "if(m - j >= length || check(length,j,str)){"
    },
    {
        "id": 99,
        "line": 26,
        "precode": "ans = Math.min(ans,dfs(arr,n,m,i+1,j+length) + 1);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java",
        "aftercode": "ans = Math.min(ans,dfs(arr,n,m,i+1,j+length));"
    },
    {
        "id": 100,
        "line": 26,
        "precode": "ans = Math.min(ans,dfs(arr,n,m,i+1,j+length) + 1);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java",
        "aftercode": "ans = Math.min(ans,dfs(arr,n,m,i+1,j+length) - 1);"
    },
    {
        "id": 101,
        "line": 26,
        "precode": "ans = Math.min(ans,dfs(arr,n,m,i+1,j+length) + 1);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java",
        "aftercode": "ans = Math.max(ans,dfs(arr,n,m,i+1,j+length) + 1);"
    },
    {
        "id": 102,
        "line": 29,
        "precode": "dp[i][j] = ans;",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java",
        "aftercode": "dp[j][i] = ans;"
    },
    {
        "id": 103,
        "line": 1,
        "precode": "import java.util.Arrays;",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "import java.util.Scanner;"
    },
    {
        "id": 104,
        "line": 2,
        "precode": "import java.util.Scanner;",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "import java.util.Arrays;"
    },
    {
        "id": 105,
        "line": 3,
        "precode": "",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "import java.util.Arrays;"
    },
    {
        "id": 106,
        "line": 3,
        "precode": "",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "import java.util.Scanner;"
    },
    {
        "id": 107,
        "line": 3,
        "precode": "",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "import java.util.Arrays;import java.util.Scanner;"
    },
    {
        "id": 108,
        "line": 22,
        "precode": "while (t-->0) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "while (t>0) {"
    },
    {
        "id": 109,
        "line": 23,
        "precode": "String th = sc.next();",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "String th = sc.nextLine();"
    },
    {
        "id": 110,
        "line": 24,
        "precode": "for (int j = 0; j <= len; j++) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "for (int j = 1; j <= len; j++) {"
    },
    {
        "id": 111,
        "line": 25,
        "precode": "dp[i][j] = Math.min(dp[i-1][j],dp[i][j]);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "dp[i][j] = Math.max(dp[i-1][j],dp[i][j]);"
    },
    {
        "id": 112,
        "line": 25,
        "precode": "dp[i][j] = Math.min(dp[i-1][j],dp[i][j]);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "dp[i][j] = Math.min(dp[i-1][j],dp[i][j]+1);"
    },
    {
        "id": 113,
        "line": 32,
        "precode": "cnt--",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "--cnt"
    },
    {
        "id": 114,
        "line": 34,
        "precode": "for (int j = 0; j <= m; j++) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "for (int j = m; j >= 0; j--) {"
    },
    {
        "id": 115,
        "line": 35,
        "precode": "f[i][j] = Math.min(f[i][j], f[i - 1][j]);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "f[i][j] = Math.max(f[i][j], f[i - 1][j]);"
    },
    {
        "id": 116,
        "line": 36,
        "precode": "if (s.equals(str.substring(Math.max(0, j - s.length()), j))) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "if (s.equals(str.substring(j - s.length(), j))) {"
    },
    {
        "id": 117,
        "line": 36,
        "precode": "if (s.equals(str.substring(Math.max(0, j - s.length()), j))) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "if (s.equals(str.substring(Math.max(0, j - s.length()), j + 1))) {"
    },
    {
        "id": 128,
        "line": 1,
        "precode": "import java.util.HashMap;",
        "aftercode": "import java.util.Map;",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java"
    },
    {
        "id": 129,
        "line": 2,
        "precode": "import java.util.Scanner;",
        "aftercode": "import java.util.InputScanner;",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java"
    },
    {
        "id": 130,
        "line": 1,
        "precode": "import java.util.HashMap;",
        "aftercode": "import java.util.TreeMap;",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java"
    },
    {
        "id": 131,
        "line": 1,
        "precode": "import java.util.HashMap;",
        "aftercode": "import java.util.LinkedHashMap;",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java"
    },
    {
        "id": 132,
        "line": 2,
        "precode": "import java.util.Scanner;",
        "aftercode": "import java.util.XmlParser;",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java"
    },
    {
        "id": 133,
        "line": 178,
        "precode": "if (x_front != -1) back.put(x_front, x_back);",
        "aftercode": "if (x_front != -1) back.put(y, x_back);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java"
    },
    {
        "id": 134,
        "line": 179,
        "precode": "if (x_back != -1) front.put(x_back, x_front);",
        "aftercode": "if (x_back != -1) front.put(x_back, y);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java"
    },
    {
        "id": 135,
        "line": 180,
        "precode": "front.remove(x);",
        "aftercode": "back.remove(x);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java"
    },
    {
        "id": 136,
        "line": 181,
        "precode": "back.remove(x);",
        "aftercode": "front.remove(x);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java"
    },
    {
        "id": 137,
        "line": 166,
        "precode": "froundt.remove(x);",
        "aftercode": "front.remove(x);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java"
    },
    {
        "id": 143,
        "line": 79,
        "precode": "long nx = x + ceil(Math.max(dist[k][l] - y, 0), p[i][j]);",
        "aftercode": "long nx = x + floor(Math.max(dist[k][l] - y, 0), p[i][j]);",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java"
    },
    {
        "id": 144,
        "line": 80,
        "precode": "long ny = y +  (ceil(Math.max(dist[k][l] - y, 0), p[i][j]) * p[i][j]) - dist[k][l];",
        "aftercode": "long ny = y +  (floor(Math.max(dist[k][l] - y, 0), p[i][j]) * p[i][j]) - dist[k][l];",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java"
    },
    {
        "id": 145,
        "line": 81,
        "precode": "if (nx < dp[k][l].x || (nx == dp[k][l].x && ny > dp[k][l].y)) {",
        "aftercode": "if (nx < dp[k][l].x || (nx == dp[k][l].x && ny < dp[k][l].y)) {",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java"
    },
    {
        "id": 146,
        "line": 81,
        "precode": "if (nx < dp[k][l].x || (nx == dp[k][l].x && ny > dp[k][l].y)) {",
        "aftercode": "if (nx > dp[k][l].x || (nx == dp[k][l].x && ny > dp[k][l].y)) {",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java"
    },
    {
        "id": 147,
        "line": 81,
        "precode": "if (nx < dp[k][l].x || (nx == dp[k][l].x && ny > dp[k][l].y)) {",
        "aftercode": "if (nx > dp[k][l].x || (nx == dp[k][l].x && ny < dp[k][l].y)) {",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java"
    },
    {
        "id": 148,
        "line": 31,
        "precode": "pw.println(flag ? \"Yes\" : \"No\");",
        "aftercode": "pw.println(flag ? \"Yes\" : \"Yes\");",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java"
    },
    {
        "id": 149,
        "line": 21,
        "precode": "if (c[0] != '<' || c[s.length() - 1] != '>' || s.length() <= 2) {",
        "aftercode": "if (c[0] != 'O' || c[s.length() - 1] != '>' || s.length() <= 2) {",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java"
    },
    {
        "id": 150,
        "line": 33,
        "precode": "        pw.close();",
        "aftercode": "        pw.flush();",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java"
    },
    {
        "id": 151,
        "line": 22,
        "precode": "                pw.println(\"No\");",
        "aftercode": "                System.out.println(\"No\");",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java"
    },
    {
        "id": 152,
        "line": 22,
        "precode": "pw.println(\"No\");",
        "aftercode": "pw.println(\"Yes\");",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java"
    },
    {
        "id": 153,
        "line": 7,
        "precode": "long input = scan.nextLong();",
        "aftercode": "long input = scan.nextInt();",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java"
    },
    {
        "id": 154,
        "line": 8,
        "precode": "if(input + 9 < 0 && (input + 9) % 10 != 0){",
        "aftercode": "if(input + 9 < 0 && (input + 9) % 10 == 0){",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java"
    },
    {
        "id": 155,
        "line": 9,
        "precode": "long result = (long)((input + 9) / 10) - 1;",
        "aftercode": "long result = (long)((input + 9) / 10) + 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java"
    },
    {
        "id": 156,
        "line": 9,
        "precode": "long result = (long)((input + 9) / 10) - 1;",
        "aftercode": "Long result = (long)((input + 9) / 10) - 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java"
    },
    {
        "id": 157,
        "line": 15,
        "precode": "System.out.println(result);",
        "aftercode": "System.out.print(result);",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java"
    },
    {
        "id": 158,
        "line": 7,
        "precode": "long X = sc.nextLong();",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java",
        "aftercode": "long X = sc.nextInt();"
    },
    {
        "id": 159,
        "line": 8,
        "precode": "if(X > 0 && X % 10 != 0) {",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java",
        "aftercode": "if(X > 1 && X % 10 != 0) {"
    },
    {
        "id": 160,
        "line": 11,
        "precode": "System.out.print(X / 10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java",
        "aftercode": "System.out.print(X / 9);"
    },
    {
        "id": 161,
        "line": 7,
        "precode": "        long X = sc.nextLong();",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java",
        "aftercode": "        long X = sc.nextLong() - 1;"
    },
    {
        "id": 162,
        "line": 7,
        "precode": "        long X = sc.nextLong();",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java",
        "aftercode": "        long X = sc.nextLong() + 10;"
    },
    {
        "id": 163,
        "line": 6,
        "precode": "if(x%10==0 || x<0)",
        "aftercode": "if(x%10==0 && x>0)",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java"
    },
    {
        "id": 164,
        "line": 7,
        "precode": "else System.out.println(x/10+1);",
        "aftercode": "else System.out.println(x/10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java"
    },
    {
        "id": 165,
        "line": 3,
        "precode": "public static void main(String[] args) {",
        "aftercode": "public void main(String[] args) {",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java"
    },
    {
        "id": 166,
        "line": 4,
        "precode": "Scanner sc = new Scanner(System.in);",
        "aftercode": "Scanner inputScanner = new Scanner(System.in);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java"
    },
    {
        "id": 167,
        "line": 6,
        "precode": "if(x%10==0 || x<0)",
        "aftercode": "if(x%5==0 || x==0)",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java"
    },
    {
        "id": 168,
        "line": 9,
        "precode": "BigDecimal divisor = new BigDecimal(\"10.0\");",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java",
        "aftercode": "BigDecimal divisor = new BigDecimal(\"5.0\");"
    },
    {
        "id": 169,
        "line": 10,
        "precode": "BigDecimal div = x.divide(divisor);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java",
        "aftercode": "BigDecimal div = x.divide(divisor, 2, RoundingMode.CEILING);"
    },
    {
        "id": 170,
        "line": 11,
        "precode": "System.out.println( div.setScale(0, RoundingMode.CEILING).toPlainString());",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java",
        "aftercode": "System.out.println( div.setScale(2, RoundingMode.CEILING).toPlainString());"
    },
    {
        "id": 171,
        "line": 12,
        "precode": "input.close();",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java",
        "aftercode": "// input.close(); // commented out for testing"
    },
    {
        "id": 172,
        "line": 12,
        "precode": "input.close();",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java",
        "aftercode": "input.next(); // consume another input before closing"
    },
    {
        "id": 173,
        "line": 8,
        "precode": "long y = 0;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java",
        "aftercode": "long y = 1;"
    },
    {
        "id": 174,
        "line": 4,
        "precode": "    if (x % 10 == 0 || x < 0) {",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java",
        "aftercode": "    if (x % 10 == 0 && x < 0) {"
    },
    {
        "id": 175,
        "line": 7,
        "precode": "        y = x / 10;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java",
        "aftercode": "        y = x / 10 - 1;"
    },
    {
        "id": 176,
        "line": 4,
        "precode": "public static void main(String[] args) {",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java",
        "aftercode": "public static void start(String[] args) {"
    },
    {
        "id": 177,
        "line": 5,
        "precode": "            y = x / 10 + 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java",
        "aftercode": "            y = x / 11 + 1;"
    },
    {
        "id": 178,
        "line": 12,
        "precode": "  result = ((X-1)/ 10) + 1;",
        "aftercode": "result = ((X-1)/ 10) - 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java"
    },
    {
        "id": 179,
        "line": 14,
        "precode": "    result = (X/ 10);",
        "aftercode": "    result = (X/ 10) + 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java"
    },
    {
        "id": 180,
        "line": 12,
        "precode": "  result = ((X-1)/ 10) + 1;",
        "aftercode": "result = (X-1)/ 5;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java"
    },
    {
        "id": 181,
        "line": 14,
        "precode": "    result = (X/ 10);",
        "aftercode": "    result = X * 10;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java"
    },
    {
        "id": 182,
        "line": 12,
        "precode": "  result = ((X-1)/ 10) + 1;",
        "aftercode": "result = ((X-1)/ 5) - 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java"
    },
    {
        "id": 183,
        "line": 26,
        "precode": "//System.out.print(i);",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java",
        "aftercode": "//System.out.println(i);"
    },
    {
        "id": 184,
        "line": 27,
        "precode": "//System.out.print(A.get(i));",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java",
        "aftercode": "//System.out.println(A.get(i));"
    },
    {
        "id": 185,
        "line": 28,
        "precode": "num-=((long)A.get(i)*(A.get(i)-1)/2);",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java",
        "aftercode": "num+=((long)A.get(i)*(A.get(i)-1)/2);"
    },
    {
        "id": 186,
        "line": 29,
        "precode": "if(A.get(i)>1) {",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java",
        "aftercode": "if(A.get(i)>=1) {"
    },
    {
        "id": 187,
        "line": 29,
        "precode": "if(A.get(i)>1) {",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java",
        "aftercode": "if(A.get(i)<1) {"
    },
    {
        "id": 198,
        "line": 144,
        "precode": "            for(int j = c; j < c + y; j++) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java",
        "aftercode": "            for(int j = c + y; j >= c; j--) {"
    },
    {
        "id": 199,
        "line": 138,
        "precode": "                if(g[i][j]) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java",
        "aftercode": "                if(!g[i][j]) {"
    },
    {
        "id": 200,
        "line": 139,
        "precode": "                    return false;",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java",
        "aftercode": "                    return true;"
    },
    {
        "id": 201,
        "line": 9,
        "precode": "            for(int i = r; i < r + x; i++) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java",
        "aftercode": "            for(int i = r + x; i >= r; i--) {"
    },
    {
        "id": 202,
        "line": 144,
        "precode": "            for(int j = c; j < c + y; j++) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java",
        "aftercode": "            for(int j = c; j >= c - y; j--) {"
    },
    {
        "id": 203,
        "line": 44,
        "precode": "boolean[] hit = new boolean[n+1];",
        "aftercode": "boolean[] hit = new boolean[n];",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java"
    },
    {
        "id": 204,
        "line": 45,
        "precode": "for(int i = 0;i < n;i++){",
        "aftercode": "for(int i = 0;i <= n;i++){",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java"
    },
    {
        "id": 205,
        "line": 46,
        "precode": "if(f[ds.root(i)] > 0){",
        "aftercode": "if(f[ds.root(i)] >= 0){",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java"
    },
    {
        "id": 206,
        "line": 47,
        "precode": "hit[i] = true;",
        "aftercode": "hit[i] = false;",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java"
    },
    {
        "id": 207,
        "line": 48,
        "precode": "f[ds.root(i)]--;",
        "aftercode": "f[ds.root(i)]++;",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java"
    },
    {
        "id": 218,
        "line": 48,
        "precode": "     if(s.charAt(i+b+w) == 'w') {",
        "aftercode": "     if(s.charAt(i+b+w) == 'b') {",
        "filepath": "java2024-0304\\abc346_b\\Java\\52271816\\correctVersion.java"
    },
    {
        "id": 219,
        "line": 48,
        "precode": "     if(s.charAt(i+b+w) == 'w') {",
        "aftercode": "     if(s.charAt(i+b+w) == 'w') {",
        "filepath": "java2024-0304\\abc346_b\\Java\\52271816\\correctVersion.java"
    },
    {
        "id": 220,
        "line": 48,
        "precode": "     if(s.charAt(i+b+w) == 'w') {",
        "aftercode": "     if(s.charAt(i+b+w) == 'w') {",
        "filepath": "java2024-0304\\abc346_b\\Java\\52271816\\correctVersion.java"
    },
    {
        "id": 221,
        "line": 48,
        "precode": "     if(s.charAt(i+b+w) == 'w') {",
        "aftercode": "     if(s.charAt(i+b+w) == 'w') {",
        "filepath": "java2024-0304\\abc346_b\\Java\\52271816\\correctVersion.java"
    },
    {
        "id": 222,
        "line": 48,
        "precode": "     if(s.charAt(i+b+w) == 'w') {",
        "aftercode": "     if(s.charAt(i+b+w) == 'w') {",
        "filepath": "java2024-0304\\abc346_b\\Java\\52271816\\correctVersion.java"
    },
    {
        "id": 223,
        "line": 10,
        "precode": "int sl = s.length();",
        "filepath": "java2024-0304\\abc346_b\\Java\\52943371\\correctVersion.java",
        "aftercode": "int sl = s.length() + 1;"
    },
    {
        "id": 224,
        "line": 10,
        "precode": "int sl = s.length();",
        "filepath": "java2024-0304\\abc346_b\\Java\\52943371\\correctVersion.java",
        "aftercode": "int sl = s.length() - 1;"
    },
    {
        "id": 225,
        "line": 11,
        "precode": "for(int i = 0; i < sl; i++){",
        "filepath": "java2024-0304\\abc346_b\\Java\\52943371\\correctVersion.java",
        "aftercode": "for(int i = 0; i <= sl; i++){"
    },
    {
        "id": 226,
        "line": 12,
        "precode": "for(int j = i; j < sl; j++){",
        "filepath": "java2024-0304\\abc346_b\\Java\\52943371\\correctVersion.java",
        "aftercode": "for(int j = i; j <= sl; j++){"
    },
    {
        "id": 227,
        "line": 13,
        "precode": "int wnum = 0, bnum = 0;",
        "filepath": "java2024-0304\\abc346_b\\Java\\52943371\\correctVersion.java",
        "aftercode": "int wnum = 1, bnum = 1;"
    },
    {
        "id": 228,
        "line": 20,
        "precode": "int odd = b % 5;",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java",
        "aftercode": "int odd = b % 4;"
    },
    {
        "id": 229,
        "line": 21,
        "precode": "int base = 7 * ( (b - 1) / 5);",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java",
        "aftercode": "int base = 5 * ( (b - 1) / 4);"
    },
    {
        "id": 230,
        "line": 22,
        "precode": "switch (odd) {",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java",
        "aftercode": "switch (b % 4) {"
    },
    {
        "id": 231,
        "line": 23,
        "precode": "case 0:",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java",
        "aftercode": "case 1:"
    },
    {
        "id": 232,
        "line": 24,
        "precode": "    if ( 5 + base <= w && w <= 9 + base )",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java",
        "aftercode": "    if ( 4 + base <= w && w <= 8 + base )"
    },
    {
        "id": 233,
        "line": 21,
        "precode": "if(i <= k)",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java",
        "aftercode": "if(i < k)"
    },
    {
        "id": 234,
        "line": 21,
        "precode": "if(i <= k)",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java",
        "aftercode": "if(i >= k)"
    },
    {
        "id": 235,
        "line": 21,
        "precode": "if(i <= k)",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java",
        "aftercode": "if(i == k)"
    },
    {
        "id": 236,
        "line": 21,
        "precode": "if(i <= k)",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java",
        "aftercode": "if(i != k)"
    },
    {
        "id": 237,
        "line": 21,
        "precode": "if(i <= k)",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java",
        "aftercode": "if(i > k)"
    },
    {
        "id": 248,
        "line": 12,
        "precode": "long[][][] dp = new long[N][2][2];",
        "aftercode": "long[][][] dp = new long[N][3][2];",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java"
    },
    {
        "id": 249,
        "line": 13,
        "precode": "dp[0][0][0] = 0;",
        "aftercode": "dp[0][0][0] = C[0];",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java"
    },
    {
        "id": 250,
        "line": 14,
        "precode": "dp[0][0][1] = C[0];",
        "aftercode": "dp[0][0][1] = C[1];",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java"
    },
    {
        "id": 251,
        "line": 30,
        "precode": "dp[S.length - 1][1][0],",
        "aftercode": "dp[S.length - 1][0][0],",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java"
    },
    {
        "id": 252,
        "line": 30,
        "precode": "][1][1]",
        "aftercode": "][0][0]",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java"
    },
    {
        "id": 263,
        "line": 52,
        "precode": "long min = F0[N-1]+F1[N-1];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long min = F0[N-1]*F1[N-1];"
    },
    {
        "id": 264,
        "line": 55,
        "precode": "long iSum0 = F1[N-1] - F1[i] + F0[i];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long iSum0 = F1[N-1] + F1[i] + F0[i];"
    },
    {
        "id": 265,
        "line": 55,
        "precode": "long iSum0 = F1[N-1] - F1[i] + F0[i];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long iSum0 = F1[N-1] + F1[i] - F0[i];"
    },
    {
        "id": 266,
        "line": 56,
        "precode": "long iSum1 = F0[N-1] - F0[i] + F1[i];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long iSum1 = F0[N-1] + F0[i] + F1[i];"
    },
    {
        "id": 267,
        "line": 56,
        "precode": "long iSum1 = F0[N-1] - F0[i] + F1[i];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long iSum1 = F0[N-1] + F0[i] - F1[i];"
    },
    {
        "id": 283,
        "line": 55,
        "precode": "out.println(map.size());",
        "aftercode": "out.println(map.size()-1);",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java"
    },
    {
        "id": 284,
        "line": 56,
        "precode": "Map<Integer, Long> map2 = map.entrySet().stream()",
        "aftercode": "Map<Integer, Long> map2 = map.entrySet().stream().sorted(Collections.reverseOrder(Map.Entry.comparingByKey()))",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java"
    },
    {
        "id": 285,
        "line": 59,
        "precode": "Map.Entry::getKey,",
        "aftercode": "Map.Entry::getValue,",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java"
    },
    {
        "id": 286,
        "line": 199,
        "precode": "Map.Entry.getValue",
        "aftercode": "Map.Entry.getKey",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java"
    },
    {
        "id": 287,
        "line": 62,
        "precode": "LinkedHashMap::new));",
        "aftercode": "HashMap::new));",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java"
    },
    {
        "id": 288,
        "line": 20,
        "precode": "//BufferedReader f = new BufferedReader(new FileReader(\"Fgen.txt\"));",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java",
        "aftercode": "BufferedReader f = new BufferedReader(new FileReader(\"Fgen.txt\"));"
    },
    {
        "id": 289,
        "line": 20,
        "precode": "//BufferedReader f = new BufferedReader(new FileReader(\"Fgen.txt\"));",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java",
        "aftercode": "PrintWriter out = new PrintWriter(System.out);"
    },
    {
        "id": 290,
        "line": 20,
        "precode": "//BufferedReader f = new BufferedReader(new FileReader(\"Fgen.txt\"));",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java",
        "aftercode": ""
    },
    {
        "id": 291,
        "line": 41,
        "precode": "sfreq[s[k]]++;",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java",
        "aftercode": "sfreq[s[k]] += 2;"
    },
    {
        "id": 292,
        "line": 57,
        "precode": "ans = mid;",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java",
        "aftercode": "ans = mid + 5;"
    },
    {
        "id": 293,
        "line": 159,
        "precode": "a[i]=nextInt();",
        "aftercode": "a[i]=nextInt();",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java"
    },
    {
        "id": 294,
        "line": 160,
        "precode": "--a[i];",
        "aftercode": "++a[i];",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java"
    },
    {
        "id": 295,
        "line": 162,
        "precode": "long res=0;",
        "aftercode": "long res=1;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java"
    },
    {
        "id": 296,
        "line": 163,
        "precode": "List<List<Integer>> occ = new ArrayList<>(n);",
        "aftercode": "List<List<Integer>> occ = new ArrayList<>(n+1);",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java"
    },
    {
        "id": 297,
        "line": 51,
        "precode": "node.minVal = m;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java",
        "aftercode": "node.minVal += m;"
    },
    {
        "id": 298,
        "line": 43,
        "precode": "throw new RuntimeException();",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java",
        "aftercode": "throw new IllegalStateException();"
    },
    {
        "id": 299,
        "line": 9,
        "precode": "node.minFreq = (left.minVal==m? left.minFreq : 0) + (right.minVal==m? right.minFreq : 0);",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java",
        "aftercode": "node.minFreq = (left.minVal==m? left.minFreq : right.minFreq) + (right.minVal==m? right.minFreq : left.minFreq);"
    },
    {
        "id": 300,
        "line": 55,
        "precode": "OP_ADD",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java",
        "aftercode": "OP_SUBTRACT"
    },
    {
        "id": 301,
        "line": 55,
        "precode": "val",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java",
        "aftercode": "val * 2"
    },
    {
        "id": 302,
        "line": 10,
        "precode": "int a = sc.nextInt();",
        "aftercode": "int a = sc.nextInt() + 1;",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java"
    },
    {
        "id": 303,
        "line": 11,
        "precode": "if (a % k == 0){",
        "aftercode": "if (a % k != 0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java"
    },
    {
        "id": 304,
        "line": 11,
        "precode": "if (a % k == 0){",
        "aftercode": "if (a % k != 1){",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java"
    },
    {
        "id": 305,
        "line": 11,
        "precode": "if (a % k == 0){",
        "aftercode": "if (a % k == 1){",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java"
    },
    {
        "id": 306,
        "line": 11,
        "precode": "if (a % k == 0){",
        "aftercode": "if (a % k > 0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java"
    },
    {
        "id": 307,
        "line": 8,
        "precode": "int num = sc.nextInt();",
        "aftercode": "int num = sc.nextInt()+1;",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java"
    },
    {
        "id": 308,
        "line": 9,
        "precode": "if(num%b==0){",
        "aftercode": "if(num%b!=0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java"
    },
    {
        "id": 309,
        "line": 9,
        "precode": "if(num%b==0){",
        "aftercode": "if(num%a==0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java"
    },
    {
        "id": 310,
        "line": 9,
        "precode": "if(num%b==0){",
        "aftercode": "if(num>=b){",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java"
    },
    {
        "id": 311,
        "line": 9,
        "precode": "if(num%b==0){",
        "aftercode": "if(num<b){",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java"
    },
    {
        "id": 312,
        "line": 12,
        "precode": "for(int i=1;i<=length;i++){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "for(int i=1;i<length;i++){"
    },
    {
        "id": 313,
        "line": 13,
        "precode": "for(int j=0;j<=length-i;j++){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "for(int j=1;j<=length-i;j++){"
    },
    {
        "id": 314,
        "line": 14,
        "precode": "String temp = S.substring(j,j+i);",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "String temp = S.substring(j+i,j);"
    },
    {
        "id": 315,
        "line": 15,
        "precode": "partString.add(temp);",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "partString.remove(temp);"
    },
    {
        "id": 316,
        "line": 20,
        "precode": "",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "// Introduce a comment here"
    },
    {
        "id": 317,
        "line": 14,
        "precode": "for(int j = i+1;j <= S.length();j++){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "for(int j = i+1;j < S.length();j++){"
    },
    {
        "id": 318,
        "line": 16,
        "precode": "if(!Slist.contains(newS)){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "if(Slist.contains(newS)){"
    },
    {
        "id": 319,
        "line": 17,
        "precode": "Slist.add(newS);",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "Slist.add(newS); count++;"
    },
    {
        "id": 320,
        "line": 12,
        "precode": "int count = 0;",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "int count = 1;"
    },
    {
        "id": 321,
        "line": 21,
        "precode": "      }",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "          }"
    },
    {
        "id": 322,
        "line": 26,
        "precode": "interval.add((x - y - 1) % (A + B));",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "interval.add((x - y + 1) % (A + B));"
    },
    {
        "id": 323,
        "line": 26,
        "precode": "interval.add((x - y - 1) % (A + B));",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "interval.add((x - y - 5) % (A + B));"
    },
    {
        "id": 324,
        "line": 26,
        "precode": "interval.add((x - y - 1) % (A + B));",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "interval.add((x - y + 5) % (A + B));"
    },
    {
        "id": 325,
        "line": 26,
        "precode": "interval.add((x - y - 1) % (A + B));",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "interval.add((x - y) % (A + B));"
    },
    {
        "id": 326,
        "line": 26,
        "precode": "interval.add((x - y - 1) % (A + B));",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "interval.add((x - y - 2) % (A + B));"
    },
    {
        "id": 327,
        "line": 19,
        "precode": "if(a + b >= ccnt && (a + b - ccnt) % 2 == 0 && Math.abs(a - b) <= ccnt && a + b + ccnt <= 120){",
        "aftercode": "if(a + b >= ccnt && (a + b - ccnt) % 3 == 0 && Math.abs(a - b) <= ccnt && a + b + ccnt <= 120){",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java"
    },
    {
        "id": 328,
        "line": 20,
        "precode": "ccnt = (a + b) - ccnt;",
        "aftercode": "ccnt = (a + b) + ccnt;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java"
    },
    {
        "id": 329,
        "line": 20,
        "precode": "ccnt = (a + b) - ccnt;",
        "aftercode": "ccnt = (a - b) - ccnt;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java"
    },
    {
        "id": 330,
        "line": 11,
        "precode": "while(cbig > 0){",
        "aftercode": "while(cbig >= 0){",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java"
    },
    {
        "id": 331,
        "line": 21,
        "precode": "ccnt /= 2;",
        "aftercode": "ccnt -= 2;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java"
    },
    {
        "id": 332,
        "line": 12,
        "precode": "for(int n00 = 0; n00 <= L - c; n00++) {",
        "aftercode": "for(int n00 = 0; n00 < L - c; n00++) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java"
    },
    {
        "id": 333,
        "line": 13,
        "precode": "for(int n01 = 0; n01 <= c; n01++) {",
        "aftercode": "for(int n01 = 0; n01 < c; n01++) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java"
    },
    {
        "id": 334,
        "line": 14,
        "precode": "int n10 = c - n01;",
        "aftercode": "int n10 = c + n01;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java"
    },
    {
        "id": 335,
        "line": 15,
        "precode": "int n11 = L - c - n00;",
        "aftercode": "int n11 = L + c - n00;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java"
    },
    {
        "id": 336,
        "line": 16,
        "precode": "if(n10 + n11 != a) continue;",
        "aftercode": "if(n10 + n11 == a) continue;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java"
    },
    {
        "id": 337,
        "line": 11,
        "precode": "int pc = Long.bitCount(c);",
        "aftercode": "long pc = Long.bitCount(c);",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java"
    },
    {
        "id": 338,
        "line": 12,
        "precode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "aftercode": "if (a + b < pc && (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java"
    },
    {
        "id": 339,
        "line": 12,
        "precode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "aftercode": "if (a + b < pc || (a + b + pc) % 2 == 0 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java"
    },
    {
        "id": 340,
        "line": 12,
        "precode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "aftercode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 100 || a > b + pc || b > a + pc) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java"
    },
    {
        "id": 341,
        "line": 12,
        "precode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "aftercode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b == a + pc) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java"
    },
    {
        "id": 342,
        "line": 22,
        "precode": "cnt++;",
        "aftercode": "cnt--;",
        "filepath": "java2024-0304\\abc347_e\\Java\\51900394\\correctVersion.java"
    },
    {
        "id": 343,
        "line": 24,
        "precode": "long v = sum[i] - sum[push[x]];",
        "aftercode": "long v = sum[i] + sum[push[x]];",
        "filepath": "java2024-0304\\abc347_e\\Java\\51900394\\correctVersion.java"
    },
    {
        "id": 344,
        "line": 25,
        "precode": "ans[x] += v;",
        "aftercode": "ans[x] -= v;",
        "filepath": "java2024-0304\\abc347_e\\Java\\51900394\\correctVersion.java"
    },
    {
        "id": 345,
        "line": 26,
        "precode": "push[x] = -1;",
        "aftercode": "push[x] = 0;",
        "filepath": "java2024-0304\\abc347_e\\Java\\51900394\\correctVersion.java"
    },
    {
        "id": 346,
        "line": 26,
        "precode": "push[x] = -1;",
        "aftercode": "push[x] = 1;",
        "filepath": "java2024-0304\\abc347_e\\Java\\51900394\\correctVersion.java"
    },
    {
        "id": 347,
        "line": 13,
        "precode": "int q = in.nextInt();",
        "aftercode": "int q = in.nextInt() - 1;",
        "filepath": "java2024-0304\\abc347_e\\Java\\51956121\\correctVersion.java"
    },
    {
        "id": 348,
        "line": 14,
        "precode": "int[] last = new int[n + 1];",
        "aftercode": "int[] last = new int[n - 1];",
        "filepath": "java2024-0304\\abc347_e\\Java\\51956121\\correctVersion.java"
    },
    {
        "id": 349,
        "line": 15,
        "precode": "long[] a = new long[n + 1];",
        "aftercode": "long[] a = new long[n - 1];",
        "filepath": "java2024-0304\\abc347_e\\Java\\51956121\\correctVersion.java"
    },
    {
        "id": 350,
        "line": 16,
        "precode": "s = new long[q + 1];",
        "aftercode": "s = new long[q - 1];",
        "filepath": "java2024-0304\\abc347_e\\Java\\51956121\\correctVersion.java"
    },
    {
        "id": 351,
        "line": 17,
        "precode": "int now = 0;",
        "aftercode": "int now = 1;",
        "filepath": "java2024-0304\\abc347_e\\Java\\51956121\\correctVersion.java"
    },
    {
        "id": 352,
        "line": 24,
        "precode": "long right = (long)1e18;",
        "aftercode": "long right = (long)1e18 - 1;",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java"
    },
    {
        "id": 353,
        "line": 26,
        "precode": "long mid = left + (right - left) / 2;",
        "aftercode": "long mid = left - (right - left) / 2;",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java"
    },
    {
        "id": 354,
        "line": 23,
        "precode": "long left = 0;",
        "aftercode": "long left = 1;",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java"
    },
    {
        "id": 355,
        "line": 24,
        "precode": "long right = (long)1e18;",
        "aftercode": "long right = (long)1e18 + 1;",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java"
    },
    {
        "id": 356,
        "line": 25,
        "precode": "while (right - left > 1) {",
        "aftercode": "while (right - left >= 1) {",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java"
    },
    {
        "id": 357,
        "line": 8,
        "precode": "return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);",
        "aftercode": "return (long) (y1 - y2) * (x1 - x3) != (long) (x1 - x2) * (y1 - y3);",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java"
    },
    {
        "id": 358,
        "line": 8,
        "precode": "return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);",
        "aftercode": "return (long) (y1 - y2) * (x1 - x3) < (long) (x1 - x2) * (y1 - y3);",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java"
    },
    {
        "id": 359,
        "line": 8,
        "precode": "return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);",
        "aftercode": "return (long) (y1 - y2) * (x1 - x3) <= (long) (x1 - x2) * (y1 - y3);",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java"
    },
    {
        "id": 360,
        "line": 8,
        "precode": "return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);",
        "aftercode": "return (long) (y1 - y2) * (x1 - x3) >= (long) (x1 - x2) * (y1 - y3);",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java"
    },
    {
        "id": 361,
        "line": 8,
        "precode": "return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);",
        "aftercode": "return (long) (y1 - y2) * (x1 - x3) * (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java"
    },
    {
        "id": 362,
        "line": 13,
        "precode": "long a[] = Arrays.stream(new long[n]).map(e -> sc.nextLong()).toArray();",
        "aftercode": "long a[] = Arrays.stream(new long[n]).map(e -> sc.nextInt()).toArray();",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java"
    },
    {
        "id": 363,
        "line": 14,
        "precode": "long sum = Arrays.stream(a).sum();",
        "aftercode": "long sum = Arrays.stream(a).mapToLong(Long::valueOf).sum();",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java"
    },
    {
        "id": 364,
        "line": 16,
        "precode": "long dpMax[] = new long[n];",
        "aftercode": "long dpMax[] = Arrays.stream(new long[n]).mapToLong(Long::valueOf).toArray();",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java"
    },
    {
        "id": 365,
        "line": 17,
        "precode": "long dpMin[] = new long[n];",
        "aftercode": "long dpMin[] = Arrays.stream(new long[n]).mapToLong(Long::valueOf).toArray();",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java"
    },
    {
        "id": 366,
        "line": 23,
        "precode": "dpMin[i] = Math.min(dpMin[i - 1] + a[i], a[i]);",
        "aftercode": "dpMin[i] = Math.max(dpMin[i - 1] + a[i], a[i]);",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java"
    },
    {
        "id": 367,
        "line": 14,
        "precode": "long frag = 1;",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java",
        "aftercode": "long frag = 0;"
    },
    {
        "id": 368,
        "line": 15,
        "precode": "if (C <= 0) frag *= -1;",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java",
        "aftercode": "if (C > 0) frag *= -1;"
    },
    {
        "id": 369,
        "line": 17,
        "precode": "for (int i = 0; i < N; i++) {",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java",
        "aftercode": "for (int i = 0; i <= N; i++) {"
    },
    {
        "id": 370,
        "line": 17,
        "precode": "for (int i = 0; i < N; i++) {",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java",
        "aftercode": "for (int i = 1; i < N; i++) {"
    },
    {
        "id": 371,
        "line": 17,
        "precode": "for (int i = 0; i < N; i++) {",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java",
        "aftercode": "for (int i = 0; i <= N; i++) {"
    },
    {
        "id": 377,
        "line": 13,
        "precode": "long n = Long.parseLong(f.readLine());",
        "aftercode": "long n = 0L;",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java"
    },
    {
        "id": 378,
        "line": 16,
        "precode": "//fines",
        "aftercode": "//penalties",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java"
    },
    {
        "id": 379,
        "line": 20,
        "precode": "//probability p1 and p2 are the first player respectively",
        "aftercode": "//chances pp1 and pp2 are the initial players accordingly",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java"
    },
    {
        "id": 380,
        "line": 33,
        "precode": "both--;",
        "aftercode": "both++;",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java"
    },
    {
        "id": 381,
        "line": 40,
        "precode": "long p1last = (k * nki + MOD)%MOD;",
        "aftercode": "long p1last = (n * nki + MOD)%MOD;",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java"
    },
    {
        "id": 387,
        "line": 24,
        "precode": "long cnt = sup - 1 - get(b1, sup - 1);",
        "aftercode": "long cnt = sup - 1 + get(b1, sup - 1);",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java"
    },
    {
        "id": 388,
        "line": 25,
        "precode": "l1.add(cnt * a(n - i - 1, k - i - 1));",
        "aftercode": "l1.add(cnt / a(n - i - 1, k - i - 1));",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java"
    },
    {
        "id": 389,
        "line": 26,
        "precode": "long v1 = a(n - i - 1, k - i - 1) + ((cnt - 1) * (k - i - 1) % mod) * a(n - i - 2, k - i - 2);",
        "aftercode": "long v1 = a(n - i - 1, k - i - 1) - ((cnt - 1) * (k - i - 1) % mod) * a(n - i - 2, k - i - 2);",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java"
    },
    {
        "id": 390,
        "line": 27,
        "precode": "v1 %= mod;",
        "aftercode": "v1 %= mod + 1;",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java"
    },
    {
        "id": 391,
        "line": 28,
        "precode": "set(b2, 1, v1);",
        "aftercode": "set(b2, 1, -v1);",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java"
    },
    {
        "id": 392,
        "line": 32,
        "precode": "r=(r%mod*2)%mod;",
        "filepath": "java2024-0304\\arc175_a\\Java\\51663025\\correctVersion.java",
        "aftercode": "r=(r%mod+2)%mod;"
    },
    {
        "id": 393,
        "line": 30,
        "precode": "if(used[(i-1)%n]){",
        "filepath": "java2024-0304\\arc175_a\\Java\\51663025\\correctVersion.java",
        "aftercode": "if(!used[(i-1)%n]){"
    },
    {
        "id": 394,
        "line": 35,
        "precode": "if(in.charAt(i-1)=='L'){",
        "filepath": "java2024-0304\\arc175_a\\Java\\51663025\\correctVersion.java",
        "aftercode": "if(in.charAt(i-1)=='R'){"
    },
    {
        "id": 395,
        "line": 35,
        "precode": "if(in.charAt(i-1)=='L'){",
        "filepath": "java2024-0304\\arc175_a\\Java\\51663025\\correctVersion.java",
        "aftercode": "if(in.charAt(i-1)=='Q'){"
    },
    {
        "id": 396,
        "line": 41,
        "precode": "System.out.println((r%mod+l%mod)%mod);",
        "filepath": "java2024-0304\\arc175_a\\Java\\51663025\\correctVersion.java",
        "aftercode": "System.out.println((r%mod-l%mod)%mod);"
    },
    {
        "id": 397,
        "line": 11,
        "precode": "if(str.charAt(p[i]) == '?' && used[left(p[i], n)]) {",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java",
        "aftercode": "if(str.charAt(p[i]) == '?' && !used[left(p[i], n)]) {"
    },
    {
        "id": 398,
        "line": 53,
        "precode": "if(str.charAt(p[i]) == '?' && used[right(p[i], n)]) {",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java",
        "aftercode": "if(str.charAt(p[i]) == '?' && !used[right(p[i], n)]) {"
    },
    {
        "id": 399,
        "line": 36,
        "precode": "if(str.charAt(p[i]) == 'L' && !used[left(p[i], n)]) {",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java",
        "aftercode": "if(str.charAt(p[i]) == 'L' && used[left(p[i], n)]) {"
    },
    {
        "id": 400,
        "line": 53,
        "precode": "if(str.charAt(p[i]) == '?' && used[right(p[i], n)]) {",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java",
        "aftercode": "if(str.charAt(p[i]) == '?' && !used[right(p[i], n)]) {"
    },
    {
        "id": 401,
        "line": 57,
        "precode": "if(str.charAt(p[i]) == 'R' && !used[right(p[i], n)]) {",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java",
        "aftercode": "if(str.charAt(p[i]) == 'R' && used[right(p[i], n)]) {"
    },
    {
        "id": 402,
        "line": 19,
        "precode": "if(took_spoon[(p + 1) % n]) {",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java",
        "aftercode": "if(!took_spoon[(p + 1) % n]) {"
    },
    {
        "id": 403,
        "line": 24,
        "precode": "ans_left %= mod;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java",
        "aftercode": "ans_left = (ans_left + mod) % mod;"
    },
    {
        "id": 404,
        "line": 31,
        "precode": "ans_right %= mod;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java",
        "aftercode": "ans_right = (ans_right + mod) % mod;"
    },
    {
        "id": 405,
        "line": 32,
        "precode": "took_spoon[p] = true;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java",
        "aftercode": "took_spoon[(p + 1) % n] = true;"
    },
    {
        "id": 406,
        "line": 35,
        "precode": "System.out.println((ans_left + ans_right) % mod);",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java",
        "aftercode": "System.out.println((ans_left * ans_right) % mod);"
    },
    {
        "id": 407,
        "line": 29,
        "precode": "writer.write(Long.toString(B * (open - N) + Math.min(A, 2 * B) * ((Math.abs(minSum) + 1) / 2)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "writer.write(Long.toString(A * (open - N) + Math.min(B, 2 * A) * ((Math.abs(minSum) + 1) / 2)));"
    },
    {
        "id": 408,
        "line": 30,
        "precode": "} else {",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "} else if (open == N) {"
    },
    {
        "id": 409,
        "line": 30,
        "precode": "} else {",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "} else { writer.write(Long.toString(B * (N - open) + Math.min(A, 2 * B) * ((2L * (open - N) - minSum + 1) / 2)));"
    },
    {
        "id": 410,
        "line": 26,
        "precode": "minSum = Math.min(minSum, sum);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "minSum = Math.max(minSum, sum);"
    },
    {
        "id": 411,
        "line": 26,
        "precode": "minSum = Math.min(minSum, sum);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "minSum = Math.min(minSum, sum + 1);"
    },
    {
        "id": 412,
        "line": 44,
        "precode": "System.out.println(answer + ((long) (L+R)/2*B));",
        "aftercode": "System.out.println(answer + ((long) (L-R)/2*B));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java"
    },
    {
        "id": 413,
        "line": 47,
        "precode": "answer += (long) (L / 2) *B;",
        "aftercode": "answer += (long) (L % 2) *B;",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java"
    },
    {
        "id": 414,
        "line": 48,
        "precode": "answer += (long) (R / 2) *B;",
        "aftercode": "answer += (long) (R % 2) *B;",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java"
    },
    {
        "id": 415,
        "line": 51,
        "precode": "",
        "aftercode": "L /= 2;",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java"
    },
    {
        "id": 416,
        "line": 51,
        "precode": "",
        "aftercode": "R /= 2;",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java"
    },
    {
        "id": 417,
        "line": 41,
        "precode": "sumR %= 2;",
        "aftercode": "sumR = sumR % 2;",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java"
    },
    {
        "id": 418,
        "line": 42,
        "precode": "out.println(ans + b * 2 * sumR);",
        "aftercode": "out.println(ans + 2 * b * sumR);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java"
    },
    {
        "id": 419,
        "line": 62,
        "precode": "}",
        "aftercode": "} else {",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java"
    },
    {
        "id": 420,
        "line": 44,
        "precode": "long mi = Math.min(sumR, sumL);",
        "aftercode": "long mi = Math.max(sumR, sumL);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java"
    },
    {
        "id": 421,
        "line": 45,
        "precode": "long mx = Math.max(sumR, sumL);",
        "aftercode": "long mx = Math.min(sumR, sumL);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java"
    },
    {
        "id": 422,
        "line": 54,
        "precode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "aftercode": "System.out.println(ans * ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java"
    },
    {
        "id": 423,
        "line": 54,
        "precode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "aftercode": "System.out.println(ans + ((stack.size() / 2L - 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java"
    },
    {
        "id": 424,
        "line": 54,
        "precode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "aftercode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 3 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java"
    },
    {
        "id": 425,
        "line": 54,
        "precode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "aftercode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.max(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java"
    },
    {
        "id": 426,
        "line": 54,
        "precode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "aftercode": "System.out.println(balance + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java"
    }
]