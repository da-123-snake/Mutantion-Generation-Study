[
    {
        "id": 6,
        "line": 5,
        "precode": "Scanner sc = new Scanner(System.in);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java",
        "aftercode": "Scanner sc = new Scanner(System.in); sc.useDelimiter(\"\\s*\");"
    },
    {
        "id": 7,
        "line": 6,
        "precode": "if(sc.nextInt() + sc.nextInt() == 0) System.out.print(1);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java",
        "aftercode": "if(sc.nextInt() + sc.nextInt() != 0) System.out.print(1);"
    },
    {
        "id": 8,
        "line": 7,
        "precode": "else System.out.print(0);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java",
        "aftercode": "else System.out.print(-1);"
    },
    {
        "id": 9,
        "line": 6,
        "precode": "if(sc.nextInt() + sc.nextInt() == 0) System.out.print(1);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java",
        "aftercode": "if(sc.nextInt() * sc.nextInt() == 0) System.out.print(1);"
    },
    {
        "id": 10,
        "line": 5,
        "precode": "Scanner sc = new Scanner(System.in);",
        "filepath": "java2024-0304\\abc343_a\\Java\\54878290\\correctVersion.java",
        "aftercode": "Scanner sc = new Scanner(System.in); sc.nextLine();"
    },
    {
        "id": 11,
        "line": 15,
        "precode": "System.out.print((j+1)+\" \");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java",
        "aftercode": "System.out.print((j+1)+\" - \");"
    },
    {
        "id": 12,
        "line": 17,
        "precode": "if(j==(n-1)){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java",
        "aftercode": "if(j==(n-2)){"
    },
    {
        "id": 13,
        "line": 15,
        "precode": "System.out.print((j+1)+\" \");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java",
        "aftercode": "System.out.print((j+1)*2+\" \");"
    },
    {
        "id": 14,
        "line": 17,
        "precode": "if(j==(n-1)){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java",
        "aftercode": "if(j==(n)){"
    },
    {
        "id": 15,
        "line": 15,
        "precode": "System.out.print((j+1)+\" \");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51211406\\correctVersion.java",
        "aftercode": "System.out.print((j+1)+\"| \");"
    },
    {
        "id": 16,
        "line": 9,
        "precode": "int k = scanner.nextInt();",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java",
        "aftercode": "int k = scanner.nextInt() + 1;"
    },
    {
        "id": 17,
        "line": 10,
        "precode": "if(k == 1){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java",
        "aftercode": "if(k == 0){"
    },
    {
        "id": 18,
        "line": 11,
        "precode": "System.out.print((j+1) + \" \");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java",
        "aftercode": "System.out.print((j+2) + \" \");"
    },
    {
        "id": 19,
        "line": 10,
        "precode": "if(k == 1){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java",
        "aftercode": "if(k != 1){"
    },
    {
        "id": 20,
        "line": 9,
        "precode": "int k = scanner.nextInt();",
        "filepath": "java2024-0304\\abc343_b\\Java\\51359813\\correctVersion.java",
        "aftercode": "int k = scanner.nextInt() * 2;"
    },
    {
        "id": 21,
        "line": 12,
        "precode": "int r = sc.nextInt();",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java",
        "aftercode": "int r = sc.nextInt() + 1;"
    },
    {
        "id": 22,
        "line": 13,
        "precode": "if (r==1){",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java",
        "aftercode": "if (r!=1){"
    },
    {
        "id": 23,
        "line": 7,
        "precode": "System.out.print(j + \" \");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java",
        "aftercode": "System.out.println(j + \" \");"
    },
    {
        "id": 24,
        "line": 15,
        "precode": "f=true;",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java",
        "aftercode": "f=false;"
    },
    {
        "id": 25,
        "line": 7,
        "precode": "System.out.print(j + \" \");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51493957\\correctVersion.java",
        "aftercode": "System.out.print(\"Found at column: \" + j + \" \");"
    },
    {
        "id": 26,
        "line": 10,
        "precode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java",
        "aftercode": "outLine.append((sc.nextInt() != 1) ? j + \" \" : \"\");"
    },
    {
        "id": 27,
        "line": 10,
        "precode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java",
        "aftercode": "outLine.append((sc.nextInt() == 1) ? (j * 2) + \" \" : \"\");"
    },
    {
        "id": 28,
        "line": 10,
        "precode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java",
        "aftercode": "outLine.append((sc.nextInt() == 1) ? j + \"*\" : \"\");"
    },
    {
        "id": 29,
        "line": 10,
        "precode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java",
        "aftercode": "outLine.append((sc.nextInt() == 0) ? j + \" \" : \"\");"
    },
    {
        "id": 30,
        "line": 10,
        "precode": "outLine.append((sc.nextInt() == 1) ? j + \" \" : \"\");",
        "filepath": "java2024-0304\\abc343_b\\Java\\51634034\\correctVersion.java",
        "aftercode": "outLine.append((sc.nextInt() == 1) ? j + \" \n\" : \"\");"
    },
    {
        "id": 36,
        "line": 6,
        "precode": "long N = sc.nextLong();",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java",
        "aftercode": "long N = sc.nextInt();"
    },
    {
        "id": 37,
        "line": 7,
        "precode": "List<Long> list = new ArrayList<>();",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java",
        "aftercode": "List<Long> list = new LinkedList<>();"
    },
    {
        "id": 38,
        "line": 8,
        "precode": "for (long i  = 0; i * i * i <= N; i++) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java",
        "aftercode": "for (long i  = 1; i * i * i <= N; i++) {"
    },
    {
        "id": 39,
        "line": 9,
        "precode": "list.add(i*i*i);",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java",
        "aftercode": "list.add(i*i*i + 1);"
    },
    {
        "id": 40,
        "line": 11,
        "precode": "for (int i = list.size()-1; i >= 0; i--) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\51617936\\correctVersion.java",
        "aftercode": "for (int i = list.size(); i > 0; i--) {"
    },
    {
        "id": 41,
        "line": 21,
        "precode": "if (C.get(i) > N) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java",
        "aftercode": "if (C.get(i) >= N) {"
    },
    {
        "id": 42,
        "line": 44,
        "precode": "continue;",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java",
        "aftercode": "break;"
    },
    {
        "id": 43,
        "line": 25,
        "precode": "String S = Long.toString(C.get(i));",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java",
        "aftercode": "String S = String.valueOf(C.get(i));"
    },
    {
        "id": 44,
        "line": 21,
        "precode": "if (C.get(i) > N) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java",
        "aftercode": "if (C.get(i) >= N) {"
    },
    {
        "id": 45,
        "line": 25,
        "precode": "String S = Long.toString(C.get(i));",
        "filepath": "java2024-0304\\abc343_c\\Java\\53148240\\correctVersion.java",
        "aftercode": "String S = C.get(i).toString();"
    },
    {
        "id": 46,
        "line": 8,
        "precode": "long n = Long.parseLong(sc.next());",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java",
        "aftercode": "long n = Long.parseLong(sc.nextLine());"
    },
    {
        "id": 47,
        "line": 9,
        "precode": "long cube = 0L;",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java",
        "aftercode": "long cube = -1L;"
    },
    {
        "id": 48,
        "line": 10,
        "precode": "for (long i = 1L; i * i * i <= n; i++) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java",
        "aftercode": "for (long i = 1L; i * i * i < n; i++) {"
    },
    {
        "id": 49,
        "line": 11,
        "precode": "String s = i * i * i + \"\";",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java",
        "aftercode": "String s = String.valueOf(i * i * i);"
    },
    {
        "id": 50,
        "line": 12,
        "precode": "if (check(s) == true) {",
        "filepath": "java2024-0304\\abc343_c\\Java\\53996009\\correctVersion.java",
        "aftercode": "if (check(s) != false) {"
    },
    {
        "id": 51,
        "line": 24,
        "precode": "System.out.println(\"Yes\");",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java",
        "aftercode": "System.out.println(\"Confirmed\");"
    },
    {
        "id": 52,
        "line": 25,
        "precode": "StringBuilder sb = new StringBuilder();",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java",
        "aftercode": "StringBuffer sb = new StringBuffer();"
    },
    {
        "id": 53,
        "line": 26,
        "precode": "sb.append(\"7 7 7 \");",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java",
        "aftercode": "sb.append(\"8 8 8 \");"
    },
    {
        "id": 54,
        "line": 27,
        "precode": "sb.append(a2).append(' ');",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java",
        "aftercode": "sb.append(a2 + 1).append(' ');"
    },
    {
        "id": 55,
        "line": 28,
        "precode": "sb.append(b2).append(' ');",
        "filepath": "java2024-0304\\abc343_e\\Java\\50849570\\correctVersion.java",
        "aftercode": "sb.append(b2 * 2).append(' ');"
    },
    {
        "id": 56,
        "line": 44,
        "precode": "int dz=Math.min(c+7,7) - Math.max(c,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java",
        "aftercode": "int dz=Math.min(c+8,7) - Math.max(c,0);"
    },
    {
        "id": 57,
        "line": 45,
        "precode": "return Math.max(dx*dy*dz,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java",
        "aftercode": "return Math.max(dx*dy*dz+1,0);"
    },
    {
        "id": 58,
        "line": 44,
        "precode": "int dz=Math.min(c+7,7) - Math.max(c,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java",
        "aftercode": "int dz=Math.min(c+7,6) - Math.max(c,1);"
    },
    {
        "id": 59,
        "line": 45,
        "precode": "return Math.max(dx*dy*dz,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java",
        "aftercode": "return Math.max(dx*dy*dz-1,0);"
    },
    {
        "id": 60,
        "line": 44,
        "precode": "int dz=Math.min(c+7,7) - Math.max(c,0);",
        "filepath": "java2024-0304\\abc343_e\\Java\\50858339\\correctVersion.java",
        "aftercode": "int dz=Math.min(c+6,7) - Math.max(c,0);"
    },
    {
        "id": 61,
        "line": 123,
        "precode": "t.sec = r.max;",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java",
        "aftercode": "t.sec = l.max;"
    },
    {
        "id": 62,
        "line": 124,
        "precode": "t.secCnt = r.maxCnt;",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java",
        "aftercode": "t.secCnt = l.maxCnt;"
    },
    {
        "id": 63,
        "line": 123,
        "precode": "t.sec = r.max;",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java",
        "aftercode": "t.sec = Integer.MIN_VALUE;"
    },
    {
        "id": 64,
        "line": 124,
        "precode": "t.secCnt = r.maxCnt;",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java",
        "aftercode": "t.secCnt = r.maxCnt + 1;"
    },
    {
        "id": 65,
        "line": 124,
        "precode": "t.secCnt = r.maxCnt;",
        "filepath": "java2024-0304\\abc343_f\\Java\\50848101\\correctVersion.java",
        "aftercode": "t.secCnt = r.maxCnt - 1;"
    },
    {
        "id": 71,
        "line": 129,
        "precode": "if (value1[0] >= value2[1]) {",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java",
        "aftercode": "if (value1[0] > value2[1]) {"
    },
    {
        "id": 72,
        "line": 130,
        "precode": "ans[1] = value1[0];",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java",
        "aftercode": "ans[1] = value2[1];"
    },
    {
        "id": 73,
        "line": 128,
        "precode": "ans[0] = value2[0];",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java",
        "aftercode": "ans[0] = value1[0];"
    },
    {
        "id": 74,
        "line": 130,
        "precode": "ans[1] = value1[0];",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java",
        "aftercode": "ans[1] = 0;"
    },
    {
        "id": 75,
        "line": 113,
        "precode": "if (value1[0] == value2[0]) {",
        "filepath": "java2024-0304\\abc343_f\\Java\\50891572\\correctVersion.java",
        "aftercode": "if (value1[0] != value2[0]) {"
    },
    {
        "id": 81,
        "line": 6,
        "precode": "System.out.println(String.join(\"\",sc.next().split(\"\\\\|.*\\\\|\")));",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java",
        "aftercode": "System.out.println(sc.next().replaceAll(\"\\\\|.*\\\\|\", \"\"));"
    },
    {
        "id": 82,
        "line": 5,
        "precode": "Scanner sc = new Scanner(System.in);",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java",
        "aftercode": "Scanner sc = new Scanner(System.in).useDelimiter(\"\\\\n\");"
    },
    {
        "id": 83,
        "line": 6,
        "precode": "System.out.println(String.join(\"\",sc.next().split(\"\\\\|.*\\\\|\")));",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java",
        "aftercode": "System.out.println(String.join(\" \",sc.next().split(\"\\\\|.*\\\\|\")));"
    },
    {
        "id": 84,
        "line": 7,
        "precode": "sc.close();",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java",
        "aftercode": "// sc.close();"
    },
    {
        "id": 85,
        "line": 6,
        "precode": "System.out.println(String.join(\"\",sc.next().split(\"\\\\|.*\\\\|\")));",
        "filepath": "java2024-0304\\abc344_a\\Java\\51771365\\correctVersion.java",
        "aftercode": "System.out.println(sc.next().split(\"\\\\|.*\\\\|\").length);"
    },
    {
        "id": 86,
        "line": 29,
        "precode": "if (pt1!=0) {",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "if (pt1<=0) {"
    },
    {
        "id": 87,
        "line": 30,
        "precode": "ans=str.substring(0, pt1);",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "ans=str.substring(pt1, pt3);"
    },
    {
        "id": 88,
        "line": 32,
        "precode": "if (pt2!=pt3-1) {",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "if (pt2==pt3-1) {"
    },
    {
        "id": 89,
        "line": 33,
        "precode": "ans=ans+str.substring(pt2+1, pt3);",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "ans=ans+str.substring(pt2, pt3);"
    },
    {
        "id": 90,
        "line": 30,
        "precode": "ans=str.substring(0, pt1);",
        "filepath": "java2024-0304\\abc344_a\\Java\\51953061\\correctVersion.java",
        "aftercode": "ans=str.substring(pt1+1, pt3);"
    },
    {
        "id": 91,
        "line": 22,
        "precode": "System.out.println(inputStrings.get(i));",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java",
        "aftercode": "System.out.println(inputStrings.get(i).toUpperCase());"
    },
    {
        "id": 92,
        "line": 22,
        "precode": "System.out.println(inputStrings.get(i));",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java",
        "aftercode": "System.out.print(inputStrings.get(i) + \" \");"
    },
    {
        "id": 93,
        "line": 22,
        "precode": "System.out.println(inputStrings.get(i));",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java",
        "aftercode": "System.out.println(inputStrings.get(i) + \" (reversed)\");"
    },
    {
        "id": 94,
        "line": 22,
        "precode": "System.out.println(inputStrings.get(i));",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java",
        "aftercode": "System.out.println(inputStrings.size() - i + \": \" + inputStrings.get(i));"
    },
    {
        "id": 95,
        "line": 22,
        "precode": "System.out.println(inputStrings.get(i));",
        "filepath": "java2024-0304\\abc344_b\\Java\\51456601\\correctVersion.java",
        "aftercode": "if (i % 2 == 0) System.out.println(inputStrings.get(i));"
    },
    {
        "id": 96,
        "line": 67,
        "precode": "if(hs.get(string)==inf) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "if(hs.get(string)!=inf) {"
    },
    {
        "id": 97,
        "line": 68,
        "precode": "out.print(\"-1\");",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "out.println(\"-1\");"
    },
    {
        "id": 98,
        "line": 69,
        "precode": "out.print(hs.get(string));",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "out.print(hs.get(string) + \"\");"
    },
    {
        "id": 99,
        "line": 69,
        "precode": "else out.print(hs.get(string));",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "else out.print(hs.get(string) * 2);"
    },
    {
        "id": 100,
        "line": 67,
        "precode": "if(hs.get(string)==inf) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51122085\\correctVersion.java",
        "aftercode": "if(hs.get(string)==0) {"
    },
    {
        "id": 101,
        "line": 25,
        "precode": "if(m - j >= length && check(length,j,str)){",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java",
        "aftercode": "if(m - j > length && check(length,j,str)){"
    },
    {
        "id": 102,
        "line": 26,
        "precode": "ans = Math.min(ans,dfs(arr,n,m,i+1,j+length) + 1);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java",
        "aftercode": "ans = Math.max(ans,dfs(arr,n,m,i+1,j+length) + 1);"
    },
    {
        "id": 103,
        "line": 25,
        "precode": "if(m - j >= length && check(length,j,str)){",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java",
        "aftercode": "if(m - j >= length || check(length,j,str)){"
    },
    {
        "id": 104,
        "line": 25,
        "precode": "if(m - j >= length && check(length,j,str)){",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java",
        "aftercode": "if(m - j <= length && check(length,j,str)){"
    },
    {
        "id": 105,
        "line": 29,
        "precode": "dp[i][j] = ans;",
        "filepath": "java2024-0304\\abc344_d\\Java\\51206023\\correctVersion.java",
        "aftercode": "dp[i][j] = ans + 1;"
    },
    {
        "id": 106,
        "line": 10,
        "precode": "for (int i = 0; i < arr.length; i++) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "for (int i = 0; i <= arr.length; i++) {"
    },
    {
        "id": 107,
        "line": 15,
        "precode": "if (input > 0) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "if (input >= 0) {"
    },
    {
        "id": 108,
        "line": 25,
        "precode": "return Arrays.copyOf(arr, newLength);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "return Arrays.copyOf(arr, newLength + 1);"
    },
    {
        "id": 109,
        "line": 30,
        "precode": "while (num > 0) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "while (num >= 0) {"
    },
    {
        "id": 110,
        "line": 42,
        "precode": "result.add(element);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51482781\\correctVersion.java",
        "aftercode": "result.add(0, element);"
    },
    {
        "id": 111,
        "line": 22,
        "precode": "while (t-->0) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "while (t-- > 0) {"
    },
    {
        "id": 112,
        "line": 23,
        "precode": "String th = sc.next();",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "String th = sc.nextLine();"
    },
    {
        "id": 113,
        "line": 25,
        "precode": "dp[i][j] = Math.min(dp[i-1][j],dp[i][j]);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "dp[i][j] = dp[i][j] == Integer.MAX_VALUE ? Integer.MAX_VALUE : Math.min(dp[i-1][j],dp[i][j]);"
    },
    {
        "id": 114,
        "line": 26,
        "precode": "if (dp[i-1][j]==Integer.MAX_VALUE) continue;",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "if (dp[i-1][j] != Integer.MAX_VALUE) { continue; }"
    },
    {
        "id": 115,
        "line": 27,
        "precode": "if (s.startsWith(th, j))",
        "filepath": "java2024-0304\\abc344_d\\Java\\51493596\\correctVersion.java",
        "aftercode": "if (!s.startsWith(th, j))"
    },
    {
        "id": 116,
        "line": 32,
        "precode": "while (cnt-- != 0) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "while (cnt-- > 0) {"
    },
    {
        "id": 117,
        "line": 33,
        "precode": "String s = readString();",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "String s = readString().trim();"
    },
    {
        "id": 118,
        "line": 35,
        "precode": "f[i][j] = Math.min(f[i][j], f[i - 1][j]);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "f[i][j] = Math.max(f[i][j], f[i - 1][j]);"
    },
    {
        "id": 119,
        "line": 36,
        "precode": "if (s.equals(str.substring(Math.max(0, j - s.length()), j))) {",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "if (s.equals(str.substring(j - s.length(), j))) {"
    },
    {
        "id": 120,
        "line": 37,
        "precode": "f[i][j] = Math.min(f[i][j], f[i - 1][j - s.length()] + 1);",
        "filepath": "java2024-0304\\abc344_d\\Java\\51693286\\correctVersion.java",
        "aftercode": "f[i][j] = Math.min(f[i][j], f[i - 1][j - s.length()] + 2);"
    },
    {
        "id": 131,
        "line": 1,
        "precode": "import java.util.HashMap;",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java",
        "aftercode": "import java.util.Map;"
    },
    {
        "id": 132,
        "line": 2,
        "precode": "import java.util.Scanner;",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java",
        "aftercode": "import java.util.ArrayList;"
    },
    {
        "id": 133,
        "line": 1,
        "precode": "import java.util.HashMap;",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java",
        "aftercode": "import java.util.LinkedHashMap;"
    },
    {
        "id": 134,
        "line": 2,
        "precode": "import java.util.Scanner;",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java",
        "aftercode": "import java.io.BufferedReader;"
    },
    {
        "id": 135,
        "line": 1,
        "precode": "import java.util.HashMap;",
        "filepath": "java2024-0304\\abc344_e\\Java\\51241918\\correctVersion.java",
        "aftercode": "import java.util.TreeMap;"
    },
    {
        "id": 136,
        "line": 178,
        "precode": "if (x_front != -1) back.put(x_front, x_back);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java",
        "aftercode": "if (x_back != -1) back.put(x_front, x_front);"
    },
    {
        "id": 137,
        "line": 179,
        "precode": "if (x_back != -1) front.put(x_back, x_front);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java",
        "aftercode": "if (x_back == -1) front.put(x_front, x_back);"
    },
    {
        "id": 138,
        "line": 180,
        "precode": "front.remove(x);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java",
        "aftercode": "back.remove(x);"
    },
    {
        "id": 139,
        "line": 181,
        "precode": "back.remove(x);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java",
        "aftercode": "front.remove(x); front.remove(x);"
    },
    {
        "id": 140,
        "line": 179,
        "precode": "if (x_back != -1) front.put(x_back, x_front);",
        "filepath": "java2024-0304\\abc344_e\\Java\\53551647\\correctVersion.java",
        "aftercode": "if (x_back != -1) front.put(x_back, x_back);"
    },
    {
        "id": 146,
        "line": 79,
        "precode": "long nx = x + ceil(Math.max(dist[k][l] - y, 0), p[i][j]);",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java",
        "aftercode": "long nx = x + ceil(Math.max(dist[k][l] - y, 0), p[k][l]);"
    },
    {
        "id": 147,
        "line": 80,
        "precode": "long ny = y +  (ceil(Math.max(dist[k][l] - y, 0), p[i][j]) * p[i][j]) - dist[k][l];",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java",
        "aftercode": "long ny = y +  (ceil(Math.max(dist[k][l] - y, 0), p[i][j]) * p[k][l]) - dist[k][l];"
    },
    {
        "id": 148,
        "line": 81,
        "precode": "if (nx < dp[k][l].x || (nx == dp[k][l].x && ny > dp[k][l].y)) {",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java",
        "aftercode": "if (nx <= dp[k][l].x || (nx == dp[k][l].x && ny >= dp[k][l].y)) {"
    },
    {
        "id": 149,
        "line": 79,
        "precode": "long nx = x + ceil(Math.max(dist[k][l] - y, 0), p[i][j]);",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java",
        "aftercode": "long nx = x + ceil(Math.max(dist[k][l] - y, 0), p[i][j] / 2);"
    },
    {
        "id": 150,
        "line": 80,
        "precode": "long ny = y +  (ceil(Math.max(dist[k][l] - y, 0), p[i][j]) * p[i][j]) - dist[k][l];",
        "filepath": "java2024-0304\\abc344_f\\Java\\54909243\\correctVersion.java",
        "aftercode": "long ny = y +  (ceil(Math.max(dist[k][l] - y, 0), p[i][j]) * (p[i][j] + 1)) - dist[k][l];"
    },
    {
        "id": 151,
        "line": 31,
        "precode": "pw.println(flag ? \"Yes\" : \"No\");",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java",
        "aftercode": "pw.println(flag ? \"No\" : \"Yes\");"
    },
    {
        "id": 152,
        "line": 24,
        "precode": "boolean flag = true;",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java",
        "aftercode": "boolean flag = false;"
    },
    {
        "id": 153,
        "line": 21,
        "precode": "if (c[0] != '<' || c[s.length() - 1] != '>' || s.length() <= 2) {",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java",
        "aftercode": "if (c[0] != '>' || c[s.length() - 1] != '<' || s.length() <= 2) {"
    },
    {
        "id": 154,
        "line": 22,
        "precode": "pw.println(\"No\");",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java",
        "aftercode": "pw.println(\"Invalid\");"
    },
    {
        "id": 155,
        "line": 25,
        "precode": "for (int i = 1; i < s.length() - 1; i++) {",
        "filepath": "java2024-0304\\abc345_a\\Java\\52463282\\correctVersion.java",
        "aftercode": "for (int i = 0; i < s.length(); i++) {"
    },
    {
        "id": 156,
        "line": 6,
        "precode": "Scanner scan=new Scanner(System.in);",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java",
        "aftercode": "Scanner scan=new Scanner(System.in); scan.useDelimiter(\"\");"
    },
    {
        "id": 157,
        "line": 7,
        "precode": "long input = scan.nextLong();",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java",
        "aftercode": "long input = scan.nextInt();"
    },
    {
        "id": 158,
        "line": 8,
        "precode": "if(input + 9 < 0 && (input + 9) % 10 != 0){",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java",
        "aftercode": "if(input + 9 <= 0 && (input + 9) % 10 != 0){"
    },
    {
        "id": 159,
        "line": 9,
        "precode": "long result = (long)((input + 9) / 10) - 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java",
        "aftercode": "long result = (long)((input + 9) / 10);"
    },
    {
        "id": 160,
        "line": 15,
        "precode": "System.out.println(result);",
        "filepath": "java2024-0304\\abc345_b\\Java\\52713667\\correctVersion.java",
        "aftercode": "System.out.print(result + \"\");"
    },
    {
        "id": 161,
        "line": 7,
        "precode": "long X = sc.nextLong();",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java",
        "aftercode": "long X = sc.nextInt();"
    },
    {
        "id": 162,
        "line": 8,
        "precode": "if(X > 0 && X % 10 != 0) {",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java",
        "aftercode": "if(X >= 0 && X % 10 != 0) {"
    },
    {
        "id": 163,
        "line": 9,
        "precode": "System.out.print(X / 10 + 1);",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java",
        "aftercode": "System.out.print(X / 10);"
    },
    {
        "id": 164,
        "line": 11,
        "precode": "System.out.print(X / 10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java",
        "aftercode": "System.out.print((X - 1) / 10);"
    },
    {
        "id": 165,
        "line": 8,
        "precode": "if(X > 0 && X % 10 != 0) {",
        "filepath": "java2024-0304\\abc345_b\\Java\\52796358\\correctVersion.java",
        "aftercode": "if(X >= 1 && X % 10 != 0) {"
    },
    {
        "id": 166,
        "line": 6,
        "precode": "if(x%10==0 || x<0)System.out.println(x/10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java",
        "aftercode": "if(x%10!=0 || x<0)System.out.println(x/10);"
    },
    {
        "id": 167,
        "line": 6,
        "precode": "if(x%10==0 || x<0)System.out.println(x/10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java",
        "aftercode": "if(x%10==0 && x<0)System.out.println(x/10);"
    },
    {
        "id": 168,
        "line": 7,
        "precode": "else System.out.println(x/10+1);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java",
        "aftercode": "else System.out.println(x/10);"
    },
    {
        "id": 169,
        "line": 5,
        "precode": "long x = sc.nextLong();",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java",
        "aftercode": "int x = sc.nextInt();"
    },
    {
        "id": 170,
        "line": 6,
        "precode": "if(x%10==0 || x<0)System.out.println(x/10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53405506\\correctVersion.java",
        "aftercode": "if(x%10==0 && x>=0)System.out.println(x/10);"
    },
    {
        "id": 171,
        "line": 9,
        "precode": "BigDecimal divisor = new BigDecimal(\"10.0\");",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java",
        "aftercode": "BigDecimal divisor = new BigDecimal(\"5.0\");"
    },
    {
        "id": 172,
        "line": 10,
        "precode": "BigDecimal div = x.divide(divisor);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java",
        "aftercode": "BigDecimal div = x.divide(divisor, RoundingMode.FLOOR);"
    },
    {
        "id": 173,
        "line": 11,
        "precode": "System.out.println( div.setScale(0, RoundingMode.CEILING).toPlainString());",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java",
        "aftercode": "System.out.println( div.setScale(0, RoundingMode.DOWN).toPlainString());"
    },
    {
        "id": 174,
        "line": 11,
        "precode": "System.out.println( div.setScale(0, RoundingMode.CEILING).toPlainString());",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java",
        "aftercode": "System.out.println( div.setScale(1, RoundingMode.CEILING).toPlainString());"
    },
    {
        "id": 175,
        "line": 10,
        "precode": "BigDecimal div = x.divide(divisor);",
        "filepath": "java2024-0304\\abc345_b\\Java\\53684663\\correctVersion.java",
        "aftercode": "BigDecimal div = x.divide(divisor, 2, RoundingMode.CEILING);"
    },
    {
        "id": 176,
        "line": 7,
        "precode": "sc.close();",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java",
        "aftercode": "sc.close(); // Closing scanner"
    },
    {
        "id": 177,
        "line": 8,
        "precode": "long y = 0;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java",
        "aftercode": "long y = 1; // Initializing with a different value"
    },
    {
        "id": 178,
        "line": 9,
        "precode": "if (x % 10 == 0 || x < 0) {",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java",
        "aftercode": "if (x % 5 == 0 || x < 0) { // Changed modulus from 10 to 5"
    },
    {
        "id": 179,
        "line": 10,
        "precode": "y = x / 10;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java",
        "aftercode": "y = x / 5; // Changed divisor from 10 to 5"
    },
    {
        "id": 180,
        "line": 12,
        "precode": "y = x / 10 + 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54156028\\correctVersion.java",
        "aftercode": "y = x / 10 - 1; // Changed addition to subtraction"
    },
    {
        "id": 181,
        "line": 12,
        "precode": "result = ((X-1)/ 10) + 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java",
        "aftercode": "result = ((X-1)/ 10);"
    },
    {
        "id": 182,
        "line": 14,
        "precode": "result = (X/ 10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java",
        "aftercode": "result = (X / 5);"
    },
    {
        "id": 183,
        "line": 12,
        "precode": "result = ((X-1)/ 10) + 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java",
        "aftercode": "result = ((X-1)/ 10) + 2;"
    },
    {
        "id": 184,
        "line": 14,
        "precode": "result = (X/ 10);",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java",
        "aftercode": "result = (X/ 10) + X;"
    },
    {
        "id": 185,
        "line": 12,
        "precode": "result = ((X-1)/ 10) + 1;",
        "filepath": "java2024-0304\\abc345_b\\Java\\54661442\\correctVersion.java",
        "aftercode": "result = ((X-2)/ 10) + 1;"
    },
    {
        "id": 186,
        "line": 28,
        "precode": "num-=((long)A.get(i)*(A.get(i)-1)/2);",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java",
        "aftercode": "num-=((long)A.get(i)*(A.get(i)+1)/2);"
    },
    {
        "id": 187,
        "line": 29,
        "precode": "if(A.get(i)>1) {",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java",
        "aftercode": "if(A.get(i)>=1) {"
    },
    {
        "id": 188,
        "line": 30,
        "precode": "v = true;",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java",
        "aftercode": "v = false;"
    },
    {
        "id": 189,
        "line": 25,
        "precode": "for(Character i:A.keySet()) {",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java",
        "aftercode": "for(Character i:A.entrySet()) {"
    },
    {
        "id": 190,
        "line": 28,
        "precode": "num-=((long)A.get(i)*(A.get(i)-1)/2);",
        "filepath": "java2024-0304\\abc345_c\\Java\\54756514\\correctVersion.java",
        "aftercode": "num+=((long)A.get(i)*(A.get(i)-1)/2);"
    },
    {
        "id": 201,
        "line": 138,
        "precode": "if(g[i][j]) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java",
        "aftercode": "if(!g[i][j]) {"
    },
    {
        "id": 202,
        "line": 133,
        "precode": "if(r + x > g.length || c + y > g[0].length) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java",
        "aftercode": "if(r + x >= g.length || c + y >= g[0].length) {"
    },
    {
        "id": 203,
        "line": 145,
        "precode": "g[i][j] = true;",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java",
        "aftercode": "g[i][j] = false;"
    },
    {
        "id": 204,
        "line": 144,
        "precode": "for(int j = c; j < c + y; j++) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java",
        "aftercode": "for(int j = c; j <= c + y; j++) {"
    },
    {
        "id": 205,
        "line": 143,
        "precode": "for(int i = r; i < r + x; i++) {",
        "filepath": "java2024-0304\\abc345_d\\Java\\51622126\\correctVersion.java",
        "aftercode": "for(int i = r; i <= r + x; i++) {"
    },
    {
        "id": 206,
        "line": 44,
        "precode": "boolean[] hit = new boolean[n+1];",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java",
        "aftercode": "boolean[] hit = new boolean[n];"
    },
    {
        "id": 207,
        "line": 46,
        "precode": "if(f[ds.root(i)] > 0){",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java",
        "aftercode": "if(f[ds.root(i)] >= 0){"
    },
    {
        "id": 208,
        "line": 47,
        "precode": "hit[i] = true;",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java",
        "aftercode": "hit[i] = false;"
    },
    {
        "id": 209,
        "line": 48,
        "precode": "f[ds.root(i)]--;",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java",
        "aftercode": "f[ds.root(i)] += 2;"
    },
    {
        "id": 210,
        "line": 45,
        "precode": "for(int i = 0;i < n;i++){",
        "filepath": "java2024-0304\\abc345_f\\Java\\51375780\\correctVersion.java",
        "aftercode": "for(int i = n-1;i >= 0;i--){"
    },
    {
        "id": 221,
        "line": 26,
        "precode": "cb--;",
        "filepath": "java2024-0304\\abc346_b\\Java\\52271816\\correctVersion.java",
        "aftercode": "cb = Math.max(0, cb - 1);"
    },
    {
        "id": 222,
        "line": 29,
        "precode": "cw++;",
        "filepath": "java2024-0304\\abc346_b\\Java\\52271816\\correctVersion.java",
        "aftercode": "cw += 2;"
    },
    {
        "id": 223,
        "line": 26,
        "precode": "cb--;",
        "filepath": "java2024-0304\\abc346_b\\Java\\52271816\\correctVersion.java",
        "aftercode": "cb += 1;"
    },
    {
        "id": 224,
        "line": 29,
        "precode": "cw++;",
        "filepath": "java2024-0304\\abc346_b\\Java\\52271816\\correctVersion.java",
        "aftercode": "cw = (cw > 0) ? cw - 1 : 0;"
    },
    {
        "id": 225,
        "line": 28,
        "precode": "if(s.charAt(i+b+w) == 'w') {",
        "filepath": "java2024-0304\\abc346_b\\Java\\52271816\\correctVersion.java",
        "aftercode": "if(s.charAt(i+b+w) != 'w') {"
    },
    {
        "id": 226,
        "line": 11,
        "precode": "for(int i = 0; i < sl; i++){",
        "filepath": "java2024-0304\\abc346_b\\Java\\52943371\\correctVersion.java",
        "aftercode": "for(int i = 0; i <= sl; i++){"
    },
    {
        "id": 227,
        "line": 12,
        "precode": "for(int j = i; j < sl; j++){",
        "filepath": "java2024-0304\\abc346_b\\Java\\52943371\\correctVersion.java",
        "aftercode": "for(int j = i; j <= sl; j++){"
    },
    {
        "id": 228,
        "line": 13,
        "precode": "int wnum = 0, bnum = 0;",
        "filepath": "java2024-0304\\abc346_b\\Java\\52943371\\correctVersion.java",
        "aftercode": "int wnum = 1, bnum = 0;"
    },
    {
        "id": 229,
        "line": 18,
        "precode": "if(wnum == w && bnum == b){",
        "filepath": "java2024-0304\\abc346_b\\Java\\52943371\\correctVersion.java",
        "aftercode": "if(wnum + 1 == w && bnum == b){"
    },
    {
        "id": 230,
        "line": 14,
        "precode": "for(int k = i; k < j+1; k++){",
        "filepath": "java2024-0304\\abc346_b\\Java\\52943371\\correctVersion.java",
        "aftercode": "for(int k = i; k <= j; k++){"
    },
    {
        "id": 231,
        "line": 20,
        "precode": "int odd = b % 5;",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java",
        "aftercode": "int odd = b % 3;"
    },
    {
        "id": 232,
        "line": 21,
        "precode": "int base = 7 * ( (b - 1) / 5);",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java",
        "aftercode": "int base = 6 * ( (b - 1) / 5);"
    },
    {
        "id": 233,
        "line": 22,
        "precode": "switch (odd) {",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java",
        "aftercode": "switch (odd % 2) {"
    },
    {
        "id": 234,
        "line": 23,
        "precode": "case 0:",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java",
        "aftercode": "case 1:"
    },
    {
        "id": 235,
        "line": 24,
        "precode": "if ( 5 + base <= w && w <= 9 + base )",
        "filepath": "java2024-0304\\abc346_b\\Java\\52961519\\correctVersion.java",
        "aftercode": "if ( 6 + base <= w && w <= 8 + base )"
    },
    {
        "id": 236,
        "line": 21,
        "precode": "if(i <= k)",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java",
        "aftercode": "if(i < k)"
    },
    {
        "id": 237,
        "line": 21,
        "precode": "if(i <= k)",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java",
        "aftercode": "if(i >= k)"
    },
    {
        "id": 238,
        "line": 22,
        "precode": "sum1 += i;",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java",
        "aftercode": "sum1 += (i * 2);"
    },
    {
        "id": 239,
        "line": 22,
        "precode": "sum1 += i;",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java",
        "aftercode": "sum1 -= i;"
    },
    {
        "id": 240,
        "line": 22,
        "precode": "sum1 += i;",
        "filepath": "java2024-0304\\abc346_c\\Java\\52035439\\correctVersion.java",
        "aftercode": "sum1 += (i + 1);"
    },
    {
        "id": 251,
        "line": 12,
        "precode": "long[][][] dp = new long[N][2][2];",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java",
        "aftercode": "long[][][] dp = new long[N][3][2];"
    },
    {
        "id": 252,
        "line": 13,
        "precode": "dp[0][0][0] = 0;",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java",
        "aftercode": "dp[0][0][0] = 1;"
    },
    {
        "id": 253,
        "line": 14,
        "precode": "dp[0][0][1] = C[0];",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java",
        "aftercode": "dp[0][0][1] = C[0] + 1;"
    },
    {
        "id": 254,
        "line": 15,
        "precode": "dp[0][1][0] = Integer.MAX_VALUE;",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java",
        "aftercode": "dp[0][1][0] = 0;"
    },
    {
        "id": 255,
        "line": 16,
        "precode": "dp[0][1][1] = Integer.MAX_VALUE;",
        "filepath": "java2024-0304\\abc346_d\\Java\\51700200\\correctVersion.java",
        "aftercode": "dp[0][1][1] = C[0];"
    },
    {
        "id": 256,
        "line": 52,
        "precode": "long min = F0[N-1]+F1[N-1];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long min = F0[N-1]*F1[N-1];"
    },
    {
        "id": 257,
        "line": 55,
        "precode": "long iSum0 = F1[N-1] - F1[i] + F0[i];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long iSum0 = F1[N-1] - (F1[i] + F0[i]);"
    },
    {
        "id": 258,
        "line": 56,
        "precode": "long iSum1 = F0[N-1] - F0[i] + F1[i];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long iSum1 = F0[N-1] + F0[i] - F1[i];"
    },
    {
        "id": 259,
        "line": 52,
        "precode": "long min = F0[N-1]+F1[N-1];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long min = F0[N-1]-F1[N-1];"
    },
    {
        "id": 260,
        "line": 55,
        "precode": "long iSum0 = F1[N-1] - F1[i] + F0[i];",
        "filepath": "java2024-0304\\abc346_d\\Java\\52263057\\correctVersion.java",
        "aftercode": "long iSum0 = (F1[N-1] - F1[i]) * F0[i];"
    },
    {
        "id": 276,
        "line": 55,
        "precode": "out.println(map.size());",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java",
        "aftercode": "out.println(map.isEmpty() ? 0 : map.size());"
    },
    {
        "id": 277,
        "line": 56,
        "precode": "Map<Integer, Long> map2 = map.entrySet().stream()",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java",
        "aftercode": "Map<Integer, Long> map2 = new HashMap<>(map);"
    },
    {
        "id": 278,
        "line": 57,
        "precode": ".sorted(Map.Entry.comparingByKey())",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java",
        "aftercode": ".sorted((a, b) -> b.getKey() - a.getKey())"
    },
    {
        "id": 279,
        "line": 59,
        "precode": "Map.Entry::getKey,",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java",
        "aftercode": "Map.Entry::getValue,"
    },
    {
        "id": 280,
        "line": 62,
        "precode": "LinkedHashMap::new));",
        "filepath": "java2024-0304\\abc346_e\\Java\\51784671\\correctVersion.java",
        "aftercode": "HashMap::new));"
    },
    {
        "id": 281,
        "line": 23,
        "precode": "n = Long.parseLong(f.readLine());",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java",
        "aftercode": "n = Integer.parseInt(f.readLine());"
    },
    {
        "id": 282,
        "line": 32,
        "precode": "sind.add(new ArrayList<Integer>());",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java",
        "aftercode": "sind.add(new ArrayList<>());"
    },
    {
        "id": 283,
        "line": 41,
        "precode": "sfreq[s[k]]++;",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java",
        "aftercode": "sfreq[s[k]] += 2;"
    },
    {
        "id": 284,
        "line": 50,
        "precode": "long r = 100000000000000000L;",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java",
        "aftercode": "long r = 99999999999999999L;"
    },
    {
        "id": 285,
        "line": 64,
        "precode": "out.println(ans);",
        "filepath": "java2024-0304\\abc346_f\\Java\\51601981\\correctVersion.java",
        "aftercode": "out.print(ans);"
    },
    {
        "id": 286,
        "line": 159,
        "precode": "a[i]=nextInt();",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java",
        "aftercode": "a[i] = nextInt() + 1;"
    },
    {
        "id": 287,
        "line": 160,
        "precode": "--a[i];",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java",
        "aftercode": "++a[i];"
    },
    {
        "id": 288,
        "line": 162,
        "precode": "long res=0;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java",
        "aftercode": "long res=1;"
    },
    {
        "id": 289,
        "line": 163,
        "precode": "List<List<Integer>> occ = new ArrayList<>(n);",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java",
        "aftercode": "List<List<Integer>> occ = new LinkedList<>();"
    },
    {
        "id": 290,
        "line": 172,
        "precode": "int p1=l1.get(l1.size()-1);",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712254\\correctVersion.java",
        "aftercode": "int p1=l1.get(0);"
    },
    {
        "id": 291,
        "line": 51,
        "precode": "node.minVal = m;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java",
        "aftercode": "node.minVal = Math.max(left.minVal, right.minVal);"
    },
    {
        "id": 292,
        "line": 51,
        "precode": "node.minVal = m;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java",
        "aftercode": "node.minVal = 0;"
    },
    {
        "id": 293,
        "line": 51,
        "precode": "node.minVal = m;",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java",
        "aftercode": "node.minVal = 1;"
    },
    {
        "id": 294,
        "line": 55,
        "precode": "update(root, l, r, 0, maxN, OP_ADD, val);",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java",
        "aftercode": "update(root, l, r, 0, maxN, OP_SET, val);"
    },
    {
        "id": 295,
        "line": 55,
        "precode": "update(root, l, r, 0, maxN, OP_ADD, val);",
        "filepath": "java2024-0304\\abc346_g\\Java\\51712394\\correctVersion.java",
        "aftercode": "update(root, l, r, 0, maxN, OP_ADD, val + 1);"
    },
    {
        "id": 296,
        "line": 10,
        "precode": "int a = sc.nextInt();",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java",
        "aftercode": "int a = sc.next();"
    },
    {
        "id": 297,
        "line": 11,
        "precode": "if (a % k == 0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java",
        "aftercode": "if (a % k != 0){"
    },
    {
        "id": 298,
        "line": 12,
        "precode": "System.out.print(a/k + \" \");",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java",
        "aftercode": "System.out.println(a/k + \" \");"
    },
    {
        "id": 299,
        "line": 11,
        "precode": "if (a % k == 0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java",
        "aftercode": "if (a % k <= 0){"
    },
    {
        "id": 300,
        "line": 12,
        "precode": "System.out.print(a/k + \" \");",
        "filepath": "java2024-0304\\abc347_a\\Java\\52506944\\correctVersion.java",
        "aftercode": "System.out.print(k + \" \");"
    },
    {
        "id": 301,
        "line": 8,
        "precode": "int num = sc.nextInt();",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java",
        "aftercode": "int num = sc.nextInt() + 1;"
    },
    {
        "id": 302,
        "line": 9,
        "precode": "if(num%b==0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java",
        "aftercode": "if(num%b!=0){"
    },
    {
        "id": 303,
        "line": 10,
        "precode": "System.out.print((num/b)+\" \");",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java",
        "aftercode": "System.out.print((num*b)+\" \");"
    },
    {
        "id": 304,
        "line": 9,
        "precode": "if(num%b==0){",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java",
        "aftercode": "if(num%b==1){"
    },
    {
        "id": 305,
        "line": 10,
        "precode": "System.out.print((num/b)+\" \");",
        "filepath": "java2024-0304\\abc347_a\\Java\\53243745\\correctVersion.java",
        "aftercode": "System.out.print((num*b)+\" \");"
    },
    {
        "id": 306,
        "line": 12,
        "precode": "for(int i=1;i<=length;i++){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "for(int i=0;i<length;i++){"
    },
    {
        "id": 307,
        "line": 13,
        "precode": "for(int j=0;j<=length-i;j++){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "for(int j=1;j<=length-i;j++){"
    },
    {
        "id": 308,
        "line": 14,
        "precode": "String temp = S.substring(j,j+i);",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "String temp = S.substring(j,j+i+1);"
    },
    {
        "id": 309,
        "line": 15,
        "precode": "partString.add(temp);",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "partString.add(temp.toUpperCase());"
    },
    {
        "id": 310,
        "line": 13,
        "precode": "for(int j=0;j<=length-i;j++){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52190690\\correctVersion.java",
        "aftercode": "for(int j=0;j<length-i;j++){"
    },
    {
        "id": 311,
        "line": 14,
        "precode": "for(int j = i+1;j <= S.length();j++){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "for(int j = i;j < S.length();j++){"
    },
    {
        "id": 312,
        "line": 15,
        "precode": "String newS = S.substring(i,j);",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "String newS = S.substring(i,j + 1);"
    },
    {
        "id": 313,
        "line": 16,
        "precode": "if(!Slist.contains(newS)){",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "if(Slist.contains(newS)){"
    },
    {
        "id": 314,
        "line": 17,
        "precode": "Slist.add(newS);",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "Slist.add(0, newS);"
    },
    {
        "id": 315,
        "line": 18,
        "precode": "count++;",
        "filepath": "java2024-0304\\abc347_b\\Java\\52199810\\correctVersion.java",
        "aftercode": "count += 2;"
    },
    {
        "id": 316,
        "line": 24,
        "precode": "i++;",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "i += 2;"
    },
    {
        "id": 317,
        "line": 26,
        "precode": "interval.add((x - y - 1) % (A + B));",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "interval.add((x - y) % (A + B));"
    },
    {
        "id": 318,
        "line": 27,
        "precode": "y = x;",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "y = x + 1;"
    },
    {
        "id": 319,
        "line": 26,
        "precode": "interval.add((x - y - 1) % (A + B));",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "interval.add((x - y) % (A + B) + 1);"
    },
    {
        "id": 320,
        "line": 24,
        "precode": "i++;",
        "filepath": "java2024-0304\\abc347_c\\Java\\53987475\\correctVersion.java",
        "aftercode": "i += 0;"
    },
    {
        "id": 321,
        "line": 19,
        "precode": "if(a + b >= ccnt && (a + b - ccnt) % 2 == 0 && Math.abs(a - b) <= ccnt && a + b + ccnt <= 120){",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java",
        "aftercode": "if(a + b > ccnt && (a + b - ccnt) % 2 == 0 && Math.abs(a - b) <= ccnt && a + b + ccnt <= 120){"
    },
    {
        "id": 322,
        "line": 20,
        "precode": "ccnt = (a + b) - ccnt;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java",
        "aftercode": "ccnt = (a + b) + ccnt;"
    },
    {
        "id": 323,
        "line": 21,
        "precode": "ccnt /= 2;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java",
        "aftercode": "ccnt = ccnt / 3;"
    },
    {
        "id": 324,
        "line": 19,
        "precode": "if(a + b >= ccnt && (a + b - ccnt) % 2 == 0 && Math.abs(a - b) <= ccnt && a + b + ccnt <= 120){",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java",
        "aftercode": "if(a + b > ccnt && (a + b - ccnt) % 2 != 0 && Math.abs(a - b) < ccnt && a + b + ccnt < 120){"
    },
    {
        "id": 325,
        "line": 20,
        "precode": "ccnt = (a + b) - ccnt;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52030403\\correctVersion.java",
        "aftercode": "ccnt = (a + b) * ccnt;"
    },
    {
        "id": 326,
        "line": 10,
        "precode": "int L = 60;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java",
        "aftercode": "int L = 61;"
    },
    {
        "id": 327,
        "line": 13,
        "precode": "for(int n01 = 0; n01 <= c; n01++) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java",
        "aftercode": "for(int n01 = 1; n01 <= c; n01++) {"
    },
    {
        "id": 328,
        "line": 14,
        "precode": "int n10 = c - n01;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java",
        "aftercode": "int n10 = c + n01;"
    },
    {
        "id": 329,
        "line": 13,
        "precode": "for(int n01 = 0; n01 <= c; n01++) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java",
        "aftercode": "for(int n01 = 0; n01 < c; n01++) {"
    },
    {
        "id": 330,
        "line": 15,
        "precode": "int n11 = L - c - n00;",
        "filepath": "java2024-0304\\abc347_d\\Java\\52285114\\correctVersion.java",
        "aftercode": "int n11 = L - c + n00;"
    },
    {
        "id": 331,
        "line": 11,
        "precode": "int pc = Long.bitCount(c);",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java",
        "aftercode": "int pc = Long.bitCount(c) + 1;"
    },
    {
        "id": 332,
        "line": 12,
        "precode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java",
        "aftercode": "if (a + b <= pc || (a + b + pc) % 2 == 0 || (a + b + pc) > 100 || a >= b + pc || b >= a + pc) {"
    },
    {
        "id": 333,
        "line": 13,
        "precode": "System.out.println(-1);",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java",
        "aftercode": "System.out.println(1);"
    },
    {
        "id": 334,
        "line": 12,
        "precode": "if (a + b < pc || (a + b + pc) % 2 == 1 || (a + b + pc) > 120 || a > b + pc || b > a + pc) {",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java",
        "aftercode": "if (a + b <= pc || (a + b + pc) % 2 == 0 || (a + b + pc) >= 120 || a < b + pc || b < a + pc) {"
    },
    {
        "id": 335,
        "line": 11,
        "precode": "int pc = Long.bitCount(c);",
        "filepath": "java2024-0304\\abc347_d\\Java\\54770948\\correctVersion.java",
        "aftercode": "int pc = Long.bitCount(c) - 1;"
    },
    {
        "id": 336,
        "line": 22,
        "precode": "cnt++;",
        "filepath": "java2024-0304\\abc347_e\\Java\\51900394\\correctVersion.java",
        "aftercode": "cnt += 2;"
    },
    {
        "id": 337,
        "line": 24,
        "precode": "long v = sum[i] - sum[push[x]];",
        "filepath": "java2024-0304\\abc347_e\\Java\\51900394\\correctVersion.java",
        "aftercode": "long v = sum[push[x]] - sum[i];"
    },
    {
        "id": 338,
        "line": 25,
        "precode": "ans[x] += v;",
        "filepath": "java2024-0304\\abc347_e\\Java\\51900394\\correctVersion.java",
        "aftercode": "ans[x] -= v;"
    },
    {
        "id": 339,
        "line": 26,
        "precode": "push[x] = -1;",
        "filepath": "java2024-0304\\abc347_e\\Java\\51900394\\correctVersion.java",
        "aftercode": "push[x] = i;"
    },
    {
        "id": 340,
        "line": 34,
        "precode": "if(push[i] >= 0) ans[i] += sum[q] - sum[push[i]];",
        "filepath": "java2024-0304\\abc347_e\\Java\\51900394\\correctVersion.java",
        "aftercode": "if(push[i] >= 0) ans[i] += sum[push[i]] - sum[q];"
    },
    {
        "id": 341,
        "line": 13,
        "precode": "int q = in.nextInt();",
        "filepath": "java2024-0304\\abc347_e\\Java\\51956121\\correctVersion.java",
        "aftercode": "int q = in.nextInt() + 1;"
    },
    {
        "id": 342,
        "line": 14,
        "precode": "int[] last = new int[n + 1];",
        "filepath": "java2024-0304\\abc347_e\\Java\\51956121\\correctVersion.java",
        "aftercode": "int[] last = new int[n];"
    },
    {
        "id": 343,
        "line": 15,
        "precode": "long[] a = new long[n + 1];",
        "filepath": "java2024-0304\\abc347_e\\Java\\51956121\\correctVersion.java",
        "aftercode": "long[] a = new long[n];"
    },
    {
        "id": 344,
        "line": 16,
        "precode": "s = new long[q + 1];",
        "filepath": "java2024-0304\\abc347_e\\Java\\51956121\\correctVersion.java",
        "aftercode": "s = new long[q];"
    },
    {
        "id": 345,
        "line": 17,
        "precode": "int now = 0;",
        "filepath": "java2024-0304\\abc347_e\\Java\\51956121\\correctVersion.java",
        "aftercode": "int now = -1;"
    },
    {
        "id": 346,
        "line": 27,
        "precode": "if (smallerNeq(mid) < K) {",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java",
        "aftercode": "if (smallerNeq(mid) <= K) {"
    },
    {
        "id": 347,
        "line": 28,
        "precode": "left = mid;",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java",
        "aftercode": "left = mid + 1;"
    },
    {
        "id": 348,
        "line": 30,
        "precode": "right = mid;",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java",
        "aftercode": "right = mid - 1;"
    },
    {
        "id": 349,
        "line": 24,
        "precode": "long right = (long)1e18;",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java",
        "aftercode": "long right = (long)1e19;"
    },
    {
        "id": 350,
        "line": 25,
        "precode": "while (right - left > 1) {",
        "filepath": "java2024-0304\\arc173_a\\Java\\51132801\\correctVersion.java",
        "aftercode": "while (right - left >= 1) {"
    },
    {
        "id": 351,
        "line": 8,
        "precode": "return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java",
        "aftercode": "return (long) (y1 - y2) * (x1 - x3) != (long) (x1 - x2) * (y1 - y3);"
    },
    {
        "id": 352,
        "line": 8,
        "precode": "return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java",
        "aftercode": "return (long) (y1 - y2) * (x1 - x3) == (long) (x3 - x2) * (y1 - y3);"
    },
    {
        "id": 353,
        "line": 8,
        "precode": "return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java",
        "aftercode": "return (long) (y1 - y2) * (x1 - x3) == (long) (y1 - y2) * (y1 - y3);"
    },
    {
        "id": 354,
        "line": 8,
        "precode": "return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java",
        "aftercode": "return (long) (y1 - y2) * (x3 - x1) == (long) (x1 - x2) * (y1 - y3);"
    },
    {
        "id": 355,
        "line": 8,
        "precode": "return (long) (y1 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);",
        "filepath": "java2024-0304\\arc173_b\\Java\\51488324\\correctVersion.java",
        "aftercode": "return (long) (y3 - y2) * (x1 - x3) == (long) (x1 - x2) * (y1 - y3);"
    },
    {
        "id": 356,
        "line": 13,
        "precode": "long a[] = Arrays.stream(new long[n]).map(e -> sc.nextLong()).toArray();",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java",
        "aftercode": "long a[] = new long[n]; for (int i = 0; i < n; i++) a[i] = sc.nextLong();"
    },
    {
        "id": 357,
        "line": 14,
        "precode": "long sum = Arrays.stream(a).sum();",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java",
        "aftercode": "long sum = 0; for (long x : a) sum += x;"
    },
    {
        "id": 358,
        "line": 16,
        "precode": "long dpMax[] = new long[n];",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java",
        "aftercode": "long dpMax[] = new long[n + 1];"
    },
    {
        "id": 359,
        "line": 17,
        "precode": "long dpMin[] = new long[n];",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java",
        "aftercode": "long dpMin[] = new long[n - 1];"
    },
    {
        "id": 360,
        "line": 14,
        "precode": "long sum = Arrays.stream(a).sum();",
        "filepath": "java2024-0304\\arc174_a\\Java\\51410124\\correctVersion.java",
        "aftercode": "long sum = 1; for (long x : a) sum *= x;"
    },
    {
        "id": 361,
        "line": 14,
        "precode": "long frag = 1;",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java",
        "aftercode": "long frag = 0;"
    },
    {
        "id": 362,
        "line": 15,
        "precode": "if (C <= 0) frag *= -1;",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java",
        "aftercode": "if (C < 0) frag *= -1;"
    },
    {
        "id": 363,
        "line": 17,
        "precode": "for (int i = 0; i < N; i++) {",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java",
        "aftercode": "for (int i = 1; i <= N; i++) {"
    },
    {
        "id": 364,
        "line": 18,
        "precode": "Array[i] = sc.nextInt() * frag;",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java",
        "aftercode": "Array[i] = sc.nextInt() + frag;"
    },
    {
        "id": 365,
        "line": 14,
        "precode": "long frag = 1;",
        "filepath": "java2024-0304\\arc174_a\\Java\\54243786\\correctVersion.java",
        "aftercode": "long frag = 2;"
    },
    {
        "id": 371,
        "line": 13,
        "precode": "long n = Long.parseLong(f.readLine());",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java",
        "aftercode": "long n = Long.parseLong(f.readLine().trim());"
    },
    {
        "id": 372,
        "line": 14,
        "precode": "long n2 = (n*n + MOD)%MOD;",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java",
        "aftercode": "long n2 = (n*n - MOD)%MOD;"
    },
    {
        "id": 373,
        "line": 14,
        "precode": "long n2 = (n*n + MOD)%MOD;",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java",
        "aftercode": "long n2 = ((n+n) * n + MOD)%MOD;"
    },
    {
        "id": 374,
        "line": 13,
        "precode": "long n = Long.parseLong(f.readLine());",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java",
        "aftercode": "long n = (Long) f.readLine();"
    },
    {
        "id": 375,
        "line": 14,
        "precode": "long n2 = (n*n + MOD)%MOD;",
        "filepath": "java2024-0304\\arc174_c\\Java\\51395702\\correctVersion.java",
        "aftercode": "long n2 = (n * n) % MOD;"
    },
    {
        "id": 381,
        "line": 24,
        "precode": "long cnt = sup - 1 - get(b1, sup - 1);",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java",
        "aftercode": "long cnt = sup - 2 - get(b1, sup - 1);"
    },
    {
        "id": 382,
        "line": 25,
        "precode": "l1.add(cnt * a(n - i - 1, k - i - 1));",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java",
        "aftercode": "l1.add(cnt * a(n - i, k - i - 1));"
    },
    {
        "id": 383,
        "line": 26,
        "precode": "long v1 = a(n - i - 1, k - i - 1) + ((cnt - 1) * (k - i - 1) % mod) * a(n - i - 2, k - i - 2);",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java",
        "aftercode": "long v1 = a(n - i, k - i - 1) + ((cnt - 2) * (k - i) % mod) * a(n - i - 2, k - i - 2);"
    },
    {
        "id": 384,
        "line": 27,
        "precode": "v1 %= mod;",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java",
        "aftercode": "v1 = (v1 + mod) % mod;"
    },
    {
        "id": 385,
        "line": 28,
        "precode": "set(b2, 1, v1);",
        "filepath": "java2024-0304\\arc174_e\\Java\\52907696\\correctVersion.java",
        "aftercode": "set(b2, 1, v1 + 1);"
    },
    {
        "id": 386,
        "line": 9,
        "precode": "if(str.charAt(p[i]) == '?') {",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java",
        "aftercode": "if(str.charAt(p[i]) != '?') {"
    },
    {
        "id": 387,
        "line": 48,
        "precode": "if(used[left(p[i], n)]) {",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java",
        "aftercode": "if(!used[left(p[i], n)]) {"
    },
    {
        "id": 388,
        "line": 28,
        "precode": "resultR *= 2;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java",
        "aftercode": "resultR *= 3;"
    },
    {
        "id": 389,
        "line": 29,
        "precode": "resultR %= mod;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java",
        "aftercode": "resultR += mod;"
    },
    {
        "id": 390,
        "line": 36,
        "precode": "if(str.charAt(p[i]) == 'L' && !used[left(p[i], n)]) {",
        "filepath": "java2024-0304\\arc175_a\\Java\\52257994\\correctVersion.java",
        "aftercode": "if(str.charAt(p[i]) == 'L' || !used[left(p[i], n)]) {"
    },
    {
        "id": 391,
        "line": 20,
        "precode": "ans_left *= 2;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java",
        "aftercode": "ans_left += 2;"
    },
    {
        "id": 392,
        "line": 27,
        "precode": "ans_right *= 2;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java",
        "aftercode": "ans_right += 2;"
    },
    {
        "id": 393,
        "line": 20,
        "precode": "if (s[p] == 'R') ans_left *= 0;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java",
        "aftercode": "if (s[p] == 'R') ans_left = 0;"
    },
    {
        "id": 394,
        "line": 23,
        "precode": "if (s[p] == 'L') ans_right *= 0;",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java",
        "aftercode": "if (s[p] == 'L') ans_right = 0;"
    },
    {
        "id": 395,
        "line": 35,
        "precode": "System.out.println((ans_left + ans_right) % mod);",
        "filepath": "java2024-0304\\arc175_a\\Java\\52288441\\correctVersion.java",
        "aftercode": "System.out.println((ans_left - ans_right + mod) % mod);"
    },
    {
        "id": 396,
        "line": 29,
        "precode": "writer.write(Long.toString(B * (open - N) + Math.min(A, 2 * B) * ((Math.abs(minSum) + 1) / 2)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "writer.write(Long.toString(B * (open - N) + Math.min(A, 2 * B) * (Math.abs(minSum) / 2)));"
    },
    {
        "id": 397,
        "line": 31,
        "precode": "writer.write(Long.toString(B * (N - open) + Math.min(A, 2 * B) * ((2L * (open - N) - minSum + 1) / 2)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "writer.write(Long.toString(B * (N - open) + Math.min(A, 2 * B) * ((2L * (open - N) - minSum) / 2)));"
    },
    {
        "id": 398,
        "line": 29,
        "precode": "writer.write(Long.toString(B * (open - N) + Math.min(A, 2 * B) * ((Math.abs(minSum) + 1) / 2)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "writer.write(Long.toString(B * (open - N) + Math.min(A, 2 * B) * ((Math.abs(minSum) + 2) / 2)));"
    },
    {
        "id": 399,
        "line": 31,
        "precode": "writer.write(Long.toString(B * (N - open) + Math.min(A, 2 * B) * ((2L * (open - N) - minSum + 1) / 2)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "writer.write(Long.toString(B * (N - open) + Math.min(A, 2 * B) * ((2L * (open - N) - minSum + 2) / 2)));"
    },
    {
        "id": 400,
        "line": 29,
        "precode": "writer.write(Long.toString(B * (open - N) + Math.min(A, 2 * B) * ((Math.abs(minSum) + 1) / 2)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651324\\correctVersion.java",
        "aftercode": "writer.write(Long.toString(B * (open - N) + Math.max(A, 2 * B) * ((Math.abs(minSum) + 1) / 2)));"
    },
    {
        "id": 401,
        "line": 44,
        "precode": "System.out.println(answer + ((long) (L+R)/2*B));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java",
        "aftercode": "System.out.println(answer + ((long) (L+R)/3*B));"
    },
    {
        "id": 402,
        "line": 44,
        "precode": "System.out.println(answer + ((long) (L+R)/2*B));",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java",
        "aftercode": "System.out.println(answer + ((long) (L+R) * B));"
    },
    {
        "id": 403,
        "line": 47,
        "precode": "answer += (long) (L / 2) *B;",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java",
        "aftercode": "answer += (long) (L / 3) *B;"
    },
    {
        "id": 404,
        "line": 47,
        "precode": "answer += (long) (L / 2) *B;",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java",
        "aftercode": "answer += (long) (L * 2) *B;"
    },
    {
        "id": 405,
        "line": 48,
        "precode": "answer += (long) (R / 2) *B;",
        "filepath": "java2024-0304\\arc175_b\\Java\\51651721\\correctVersion.java",
        "aftercode": "answer += (long) (R / 2) * (B + 1);"
    },
    {
        "id": 406,
        "line": 41,
        "precode": "sumR %= 2;",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java",
        "aftercode": "sumR = (sumR + 1) % 2;"
    },
    {
        "id": 407,
        "line": 42,
        "precode": "out.println(ans + b * 2 * sumR);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java",
        "aftercode": "out.println(ans + b * sumR);"
    },
    {
        "id": 408,
        "line": 44,
        "precode": "long mi = Math.min(sumR, sumL);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java",
        "aftercode": "long mi = Math.max(sumR, sumL);"
    },
    {
        "id": 409,
        "line": 45,
        "precode": "long mx = Math.max(sumR, sumL);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java",
        "aftercode": "long mx = Math.min(sumR, sumL);"
    },
    {
        "id": 410,
        "line": 42,
        "precode": "out.println(ans + b * 2 * sumR);",
        "filepath": "java2024-0304\\arc175_b\\Java\\51655523\\correctVersion.java",
        "aftercode": "out.println(ans + b * 3 * sumR);"
    },
    {
        "id": 411,
        "line": 54,
        "precode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java",
        "aftercode": "System.out.println(ans + ((stack.size() / 2L) / 2 * Math.min(swapCost, 2 * replaceCost)));"
    },
    {
        "id": 412,
        "line": 54,
        "precode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java",
        "aftercode": "System.out.println(ans + ((stack.size() + 2L) / 2 * Math.min(swapCost, 2 * replaceCost)));"
    },
    {
        "id": 413,
        "line": 54,
        "precode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java",
        "aftercode": "System.out.println(ans + (stack.size() / 2L * Math.min(swapCost, 2 * replaceCost)));"
    },
    {
        "id": 414,
        "line": 54,
        "precode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java",
        "aftercode": "System.out.println(ans + ((stack.size() / 2L + 1L) * Math.min(swapCost, replaceCost)));"
    },
    {
        "id": 415,
        "line": 54,
        "precode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.min(swapCost, 2 * replaceCost)));",
        "filepath": "java2024-0304\\arc175_b\\Java\\52225618\\correctVersion.java",
        "aftercode": "System.out.println(ans + ((stack.size() / 2L + 1L) / 2 * Math.max(swapCost, 2 * replaceCost)));"
    }
]